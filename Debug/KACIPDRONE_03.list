
KACIPDRONE_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e420  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  0800e5b0  0800e5b0  0001e5b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed30  0800ed30  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed30  0800ed30  0001ed30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed38  0800ed38  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed38  0800ed38  0001ed38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed3c  0800ed3c  0001ed3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800ed40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020200  2**0
                  CONTENTS
 10 .bss          00004bb0  20000200  20000200  00020200  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004db0  20004db0  00020200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d65f  00000000  00000000  00020273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000049e1  00000000  00000000  0003d8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001918  00000000  00000000  000422b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000137a  00000000  00000000  00043bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00007c91  00000000  00000000  00044f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000203e9  00000000  00000000  0004cbdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7369  00000000  00000000  0006cfc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007aa4  00000000  00000000  00154330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0015bdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e598 	.word	0x0800e598

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800e598 	.word	0x0800e598

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	0000      	movs	r0, r0
	...

08000f48 <decodeGGA>:
 @GGASTRUCT is the pointer to the GGA Structure (in the GPS Structure)
 @Returns 0 on success
 @ returns 1, 2 depending on where the return statement is excuted, check function for more details
 */

int decodeGGA(char *GGAbuffer, GGASTRUCT *gga) {
 8000f48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f4c:	b08e      	sub	sp, #56	; 0x38
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
	inx = 0;
 8000f54:	4b5b      	ldr	r3, [pc, #364]	; (80010c4 <decodeGGA+0x17c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')
 8000f5e:	e004      	b.n	8000f6a <decodeGGA+0x22>
		inx++;  // 1st ','
 8000f60:	4b58      	ldr	r3, [pc, #352]	; (80010c4 <decodeGGA+0x17c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	4a57      	ldr	r2, [pc, #348]	; (80010c4 <decodeGGA+0x17c>)
 8000f68:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000f6a:	4b56      	ldr	r3, [pc, #344]	; (80010c4 <decodeGGA+0x17c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b2c      	cmp	r3, #44	; 0x2c
 8000f78:	d1f2      	bne.n	8000f60 <decodeGGA+0x18>
	inx++;
 8000f7a:	4b52      	ldr	r3, [pc, #328]	; (80010c4 <decodeGGA+0x17c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	4a50      	ldr	r2, [pc, #320]	; (80010c4 <decodeGGA+0x17c>)
 8000f82:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000f84:	e004      	b.n	8000f90 <decodeGGA+0x48>
		inx++;  // After time ','
 8000f86:	4b4f      	ldr	r3, [pc, #316]	; (80010c4 <decodeGGA+0x17c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	4a4d      	ldr	r2, [pc, #308]	; (80010c4 <decodeGGA+0x17c>)
 8000f8e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000f90:	4b4c      	ldr	r3, [pc, #304]	; (80010c4 <decodeGGA+0x17c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4413      	add	r3, r2
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b2c      	cmp	r3, #44	; 0x2c
 8000f9e:	d1f2      	bne.n	8000f86 <decodeGGA+0x3e>
	inx++;
 8000fa0:	4b48      	ldr	r3, [pc, #288]	; (80010c4 <decodeGGA+0x17c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	4a47      	ldr	r2, [pc, #284]	; (80010c4 <decodeGGA+0x17c>)
 8000fa8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000faa:	e004      	b.n	8000fb6 <decodeGGA+0x6e>
		inx++;  // after latitude ','
 8000fac:	4b45      	ldr	r3, [pc, #276]	; (80010c4 <decodeGGA+0x17c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4a44      	ldr	r2, [pc, #272]	; (80010c4 <decodeGGA+0x17c>)
 8000fb4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000fb6:	4b43      	ldr	r3, [pc, #268]	; (80010c4 <decodeGGA+0x17c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b2c      	cmp	r3, #44	; 0x2c
 8000fc4:	d1f2      	bne.n	8000fac <decodeGGA+0x64>
	inx++;
 8000fc6:	4b3f      	ldr	r3, [pc, #252]	; (80010c4 <decodeGGA+0x17c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	4a3d      	ldr	r2, [pc, #244]	; (80010c4 <decodeGGA+0x17c>)
 8000fce:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000fd0:	e004      	b.n	8000fdc <decodeGGA+0x94>
		inx++;  // after NS ','
 8000fd2:	4b3c      	ldr	r3, [pc, #240]	; (80010c4 <decodeGGA+0x17c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a3a      	ldr	r2, [pc, #232]	; (80010c4 <decodeGGA+0x17c>)
 8000fda:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000fdc:	4b39      	ldr	r3, [pc, #228]	; (80010c4 <decodeGGA+0x17c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b2c      	cmp	r3, #44	; 0x2c
 8000fea:	d1f2      	bne.n	8000fd2 <decodeGGA+0x8a>
	inx++;
 8000fec:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <decodeGGA+0x17c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a34      	ldr	r2, [pc, #208]	; (80010c4 <decodeGGA+0x17c>)
 8000ff4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000ff6:	e004      	b.n	8001002 <decodeGGA+0xba>
		inx++;  // after longitude ','
 8000ff8:	4b32      	ldr	r3, [pc, #200]	; (80010c4 <decodeGGA+0x17c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a31      	ldr	r2, [pc, #196]	; (80010c4 <decodeGGA+0x17c>)
 8001000:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001002:	4b30      	ldr	r3, [pc, #192]	; (80010c4 <decodeGGA+0x17c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b2c      	cmp	r3, #44	; 0x2c
 8001010:	d1f2      	bne.n	8000ff8 <decodeGGA+0xb0>
	inx++;
 8001012:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <decodeGGA+0x17c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	3301      	adds	r3, #1
 8001018:	4a2a      	ldr	r2, [pc, #168]	; (80010c4 <decodeGGA+0x17c>)
 800101a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800101c:	e004      	b.n	8001028 <decodeGGA+0xe0>
		inx++;  // after EW ','
 800101e:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <decodeGGA+0x17c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <decodeGGA+0x17c>)
 8001026:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001028:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <decodeGGA+0x17c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4413      	add	r3, r2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b2c      	cmp	r3, #44	; 0x2c
 8001036:	d1f2      	bne.n	800101e <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001038:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <decodeGGA+0x17c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	4a21      	ldr	r2, [pc, #132]	; (80010c4 <decodeGGA+0x17c>)
 8001040:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2')
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <decodeGGA+0x17c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b31      	cmp	r3, #49	; 0x31
 8001050:	d00f      	beq.n	8001072 <decodeGGA+0x12a>
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <decodeGGA+0x17c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b32      	cmp	r3, #50	; 0x32
 8001060:	d007      	beq.n	8001072 <decodeGGA+0x12a>
			|| (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <decodeGGA+0x17c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b36      	cmp	r3, #54	; 0x36
 8001070:	d106      	bne.n	8001080 <decodeGGA+0x138>
			{
		gga->isfixValid = 1;   // fix available
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	2201      	movs	r2, #1
 8001076:	635a      	str	r2, [r3, #52]	; 0x34
		inx = 0; // reset the index. We will start from the inx=0 and extract information now
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <decodeGGA+0x17c>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
	} else {
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',')
 800107e:	e009      	b.n	8001094 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2200      	movs	r2, #0
 8001084:	635a      	str	r2, [r3, #52]	; 0x34
		return 1;  // return error
 8001086:	2301      	movs	r3, #1
 8001088:	e36d      	b.n	8001766 <decodeGGA+0x81e>
		inx++;  // 1st ','
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <decodeGGA+0x17c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	4a0c      	ldr	r2, [pc, #48]	; (80010c4 <decodeGGA+0x17c>)
 8001092:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <decodeGGA+0x17c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b2c      	cmp	r3, #44	; 0x2c
 80010a2:	d1f2      	bne.n	800108a <decodeGGA+0x142>

	/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)
	inx++;   // reach the first number in time
 80010a4:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <decodeGGA+0x17c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <decodeGGA+0x17c>)
 80010ac:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	220c      	movs	r2, #12
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f00a fc24 	bl	800b904 <memset>
	i = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80010c0:	e016      	b.n	80010f0 <decodeGGA+0x1a8>
 80010c2:	bf00      	nop
 80010c4:	2000021c 	.word	0x2000021c
	{
		buffer[i] = GGAbuffer[inx];
 80010c8:	4b6d      	ldr	r3, [pc, #436]	; (8001280 <decodeGGA+0x338>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4413      	add	r3, r2
 80010d2:	7819      	ldrb	r1, [r3, #0]
 80010d4:	f107 0214 	add.w	r2, r7, #20
 80010d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010da:	4413      	add	r3, r2
 80010dc:	460a      	mov	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
		i++;
 80010e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e2:	3301      	adds	r3, #1
 80010e4:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 80010e6:	4b66      	ldr	r3, [pc, #408]	; (8001280 <decodeGGA+0x338>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4a64      	ldr	r2, [pc, #400]	; (8001280 <decodeGGA+0x338>)
 80010ee:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80010f0:	4b63      	ldr	r3, [pc, #396]	; (8001280 <decodeGGA+0x338>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b2c      	cmp	r3, #44	; 0x2c
 80010fe:	d1e3      	bne.n	80010c8 <decodeGGA+0x180>
	}

	hr = (atoi(buffer) / 10000) + GMT / 100; // get the hours from the 6 digit number
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4618      	mov	r0, r3
 8001106:	f009 fd11 	bl	800ab2c <atoi>
 800110a:	4603      	mov	r3, r0
 800110c:	4a5d      	ldr	r2, [pc, #372]	; (8001284 <decodeGGA+0x33c>)
 800110e:	fb82 1203 	smull	r1, r2, r2, r3
 8001112:	1312      	asrs	r2, r2, #12
 8001114:	17db      	asrs	r3, r3, #31
 8001116:	1ad2      	subs	r2, r2, r3
 8001118:	4b5b      	ldr	r3, [pc, #364]	; (8001288 <decodeGGA+0x340>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	495b      	ldr	r1, [pc, #364]	; (800128c <decodeGGA+0x344>)
 800111e:	fb81 0103 	smull	r0, r1, r1, r3
 8001122:	1149      	asrs	r1, r1, #5
 8001124:	17db      	asrs	r3, r3, #31
 8001126:	1acb      	subs	r3, r1, r3
 8001128:	4413      	add	r3, r2
 800112a:	4a59      	ldr	r2, [pc, #356]	; (8001290 <decodeGGA+0x348>)
 800112c:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer) / 100) % 100) + GMT % 100; // get the minutes from the 6 digit number
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4618      	mov	r0, r3
 8001134:	f009 fcfa 	bl	800ab2c <atoi>
 8001138:	4603      	mov	r3, r0
 800113a:	4a54      	ldr	r2, [pc, #336]	; (800128c <decodeGGA+0x344>)
 800113c:	fb82 1203 	smull	r1, r2, r2, r3
 8001140:	1152      	asrs	r2, r2, #5
 8001142:	17db      	asrs	r3, r3, #31
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	4a51      	ldr	r2, [pc, #324]	; (800128c <decodeGGA+0x344>)
 8001148:	fb82 1203 	smull	r1, r2, r2, r3
 800114c:	1151      	asrs	r1, r2, #5
 800114e:	17da      	asrs	r2, r3, #31
 8001150:	1a8a      	subs	r2, r1, r2
 8001152:	2164      	movs	r1, #100	; 0x64
 8001154:	fb01 f202 	mul.w	r2, r1, r2
 8001158:	1a9a      	subs	r2, r3, r2
 800115a:	4b4b      	ldr	r3, [pc, #300]	; (8001288 <decodeGGA+0x340>)
 800115c:	6819      	ldr	r1, [r3, #0]
 800115e:	4b4b      	ldr	r3, [pc, #300]	; (800128c <decodeGGA+0x344>)
 8001160:	fb83 0301 	smull	r0, r3, r3, r1
 8001164:	1158      	asrs	r0, r3, #5
 8001166:	17cb      	asrs	r3, r1, #31
 8001168:	1ac3      	subs	r3, r0, r3
 800116a:	2064      	movs	r0, #100	; 0x64
 800116c:	fb00 f303 	mul.w	r3, r0, r3
 8001170:	1acb      	subs	r3, r1, r3
 8001172:	4413      	add	r3, r2
 8001174:	4a47      	ldr	r2, [pc, #284]	; (8001294 <decodeGGA+0x34c>)
 8001176:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) {
 8001178:	4b46      	ldr	r3, [pc, #280]	; (8001294 <decodeGGA+0x34c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b3b      	cmp	r3, #59	; 0x3b
 800117e:	dd09      	ble.n	8001194 <decodeGGA+0x24c>
		min = min - 60;
 8001180:	4b44      	ldr	r3, [pc, #272]	; (8001294 <decodeGGA+0x34c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3b3c      	subs	r3, #60	; 0x3c
 8001186:	4a43      	ldr	r2, [pc, #268]	; (8001294 <decodeGGA+0x34c>)
 8001188:	6013      	str	r3, [r2, #0]
		hr++;
 800118a:	4b41      	ldr	r3, [pc, #260]	; (8001290 <decodeGGA+0x348>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3301      	adds	r3, #1
 8001190:	4a3f      	ldr	r2, [pc, #252]	; (8001290 <decodeGGA+0x348>)
 8001192:	6013      	str	r3, [r2, #0]
	}
	if (hr < 0) {
 8001194:	4b3e      	ldr	r3, [pc, #248]	; (8001290 <decodeGGA+0x348>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	da09      	bge.n	80011b0 <decodeGGA+0x268>
		hr = 24 + hr;
 800119c:	4b3c      	ldr	r3, [pc, #240]	; (8001290 <decodeGGA+0x348>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3318      	adds	r3, #24
 80011a2:	4a3b      	ldr	r2, [pc, #236]	; (8001290 <decodeGGA+0x348>)
 80011a4:	6013      	str	r3, [r2, #0]
		daychange--;
 80011a6:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <decodeGGA+0x350>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	4a3a      	ldr	r2, [pc, #232]	; (8001298 <decodeGGA+0x350>)
 80011ae:	6013      	str	r3, [r2, #0]
	}
	if (hr >= 24) {
 80011b0:	4b37      	ldr	r3, [pc, #220]	; (8001290 <decodeGGA+0x348>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b17      	cmp	r3, #23
 80011b6:	dd09      	ble.n	80011cc <decodeGGA+0x284>
		hr = hr - 24;
 80011b8:	4b35      	ldr	r3, [pc, #212]	; (8001290 <decodeGGA+0x348>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3b18      	subs	r3, #24
 80011be:	4a34      	ldr	r2, [pc, #208]	; (8001290 <decodeGGA+0x348>)
 80011c0:	6013      	str	r3, [r2, #0]
		daychange++;
 80011c2:	4b35      	ldr	r3, [pc, #212]	; (8001298 <decodeGGA+0x350>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	4a33      	ldr	r2, [pc, #204]	; (8001298 <decodeGGA+0x350>)
 80011ca:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 80011cc:	4b30      	ldr	r3, [pc, #192]	; (8001290 <decodeGGA+0x348>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
	gga->tim.min = min;
 80011d4:	4b2f      	ldr	r3, [pc, #188]	; (8001294 <decodeGGA+0x34c>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
	gga->tim.sec = atoi(buffer) % 100;
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4618      	mov	r0, r3
 80011e2:	f009 fca3 	bl	800ab2c <atoi>
 80011e6:	4602      	mov	r2, r0
 80011e8:	4b28      	ldr	r3, [pc, #160]	; (800128c <decodeGGA+0x344>)
 80011ea:	fb83 1302 	smull	r1, r3, r3, r2
 80011ee:	1159      	asrs	r1, r3, #5
 80011f0:	17d3      	asrs	r3, r2, #31
 80011f2:	1acb      	subs	r3, r1, r3
 80011f4:	2164      	movs	r1, #100	; 0x64
 80011f6:	fb01 f303 	mul.w	r3, r1, r3
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	6313      	str	r3, [r2, #48]	; 0x30

	/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <decodeGGA+0x338>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <decodeGGA+0x338>)
 8001208:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	220c      	movs	r2, #12
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f00a fb76 	bl	800b904 <memset>
	i = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 800121c:	e013      	b.n	8001246 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <decodeGGA+0x338>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	7819      	ldrb	r1, [r3, #0]
 800122a:	f107 0214 	add.w	r2, r7, #20
 800122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001230:	4413      	add	r3, r2
 8001232:	460a      	mov	r2, r1
 8001234:	701a      	strb	r2, [r3, #0]
		i++;
 8001236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001238:	3301      	adds	r3, #1
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <decodeGGA+0x338>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <decodeGGA+0x338>)
 8001244:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <decodeGGA+0x338>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b2c      	cmp	r3, #44	; 0x2c
 8001254:	d1e3      	bne.n	800121e <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6)
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f808 	bl	8000270 <strlen>
 8001260:	4603      	mov	r3, r0
 8001262:	2b05      	cmp	r3, #5
 8001264:	d801      	bhi.n	800126a <decodeGGA+0x322>
		return 2;  // If the buffer length is not appropriate, return error
 8001266:	2302      	movs	r3, #2
 8001268:	e27d      	b.n	8001766 <decodeGGA+0x81e>
	int16_t num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4618      	mov	r0, r3
 8001270:	f009 fc5c 	bl	800ab2c <atoi>
 8001274:	4603      	mov	r3, r0
 8001276:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int j = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 800127c:	e011      	b.n	80012a2 <decodeGGA+0x35a>
 800127e:	bf00      	nop
 8001280:	2000021c 	.word	0x2000021c
 8001284:	68db8bad 	.word	0x68db8bad
 8001288:	20000000 	.word	0x20000000
 800128c:	51eb851f 	.word	0x51eb851f
 8001290:	20000220 	.word	0x20000220
 8001294:	20000224 	.word	0x20000224
 8001298:	20000234 	.word	0x20000234
		j++;   // Figure out how many digits before the decimal
 800129c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800129e:	3301      	adds	r3, #1
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 80012a2:	f107 0214 	add.w	r2, r7, #20
 80012a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a8:	4413      	add	r3, r2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b2e      	cmp	r3, #46	; 0x2e
 80012ae:	d1f5      	bne.n	800129c <decodeGGA+0x354>
	j++;
 80012b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b2:	3301      	adds	r3, #1
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
	int declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7fe ffd8 	bl	8000270 <strlen>
 80012c0:	4602      	mov	r2, r0
 80012c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
	int dec = atoi((char*) buffer + j); // conver the decimal part a a separate number
 80012c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ca:	f107 0214 	add.w	r2, r7, #20
 80012ce:	4413      	add	r3, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f009 fc2b 	bl	800ab2c <atoi>
 80012d6:	6278      	str	r0, [r7, #36]	; 0x24
	float lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 80012d8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f921 	bl	8000524 <__aeabi_i2d>
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4bb8      	ldr	r3, [pc, #736]	; (80015c8 <decodeGGA+0x680>)
 80012e8:	f7ff fab0 	bl	800084c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4690      	mov	r8, r2
 80012f2:	4699      	mov	r9, r3
 80012f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012f6:	f7ff f915 	bl	8000524 <__aeabi_i2d>
 80012fa:	4604      	mov	r4, r0
 80012fc:	460d      	mov	r5, r1
 80012fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001300:	3302      	adds	r3, #2
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f90e 	bl	8000524 <__aeabi_i2d>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	ec43 2b11 	vmov	d1, r2, r3
 8001310:	ed9f 0bab 	vldr	d0, [pc, #684]	; 80015c0 <decodeGGA+0x678>
 8001314:	f00c fa06 	bl	800d724 <pow>
 8001318:	ec53 2b10 	vmov	r2, r3, d0
 800131c:	4620      	mov	r0, r4
 800131e:	4629      	mov	r1, r5
 8001320:	f7ff fa94 	bl	800084c <__aeabi_ddiv>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4640      	mov	r0, r8
 800132a:	4649      	mov	r1, r9
 800132c:	f7fe ffae 	bl	800028c <__adddf3>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4610      	mov	r0, r2
 8001336:	4619      	mov	r1, r3
 8001338:	f7ff fc36 	bl	8000ba8 <__aeabi_d2f>
 800133c:	4603      	mov	r3, r0
 800133e:	623b      	str	r3, [r7, #32]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	6a3a      	ldr	r2, [r7, #32]
 8001344:	601a      	str	r2, [r3, #0]
	gga->lcation.latF = (float) gga->lcation.latitude / 100;
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	ed93 7a00 	vldr	s14, [r3]
 800134c:	eddf 6a9f 	vldr	s13, [pc, #636]	; 80015cc <decodeGGA+0x684>
 8001350:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	edc3 7a01 	vstr	s15, [r3, #4]
	gga->lcation.latDeg = (uint8_t) gga->lcation.latitude;
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001364:	edc7 7a01 	vstr	s15, [r7, #4]
 8001368:	793b      	ldrb	r3, [r7, #4]
 800136a:	b2da      	uxtb	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	721a      	strb	r2, [r3, #8]
	gga->lcation.latMin = ((gga->lcation.latitude - gga->lcation.latDeg) / 60)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	ed93 7a00 	vldr	s14, [r3]
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	7a1b      	ldrb	r3, [r3, #8]
 800137a:	ee07 3a90 	vmov	s15, r3
 800137e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001382:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001386:	eddf 6a92 	vldr	s13, [pc, #584]	; 80015d0 <decodeGGA+0x688>
 800138a:	eec7 7a26 	vdiv.f32	s15, s14, s13
			* 100;
 800138e:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80015cc <decodeGGA+0x684>
 8001392:	ee67 7a87 	vmul.f32	s15, s15, s14
	gga->lcation.latMin = ((gga->lcation.latitude - gga->lcation.latDeg) / 60)
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	edc3 7a03 	vstr	s15, [r3, #12]
	gga->lcation.latitude = gga->lcation.latDeg + gga->lcation.latMin;
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	7a1b      	ldrb	r3, [r3, #8]
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80013ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	edc3 7a00 	vstr	s15, [r3]
	inx++;
 80013b8:	4b86      	ldr	r3, [pc, #536]	; (80015d4 <decodeGGA+0x68c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	3301      	adds	r3, #1
 80013be:	4a85      	ldr	r2, [pc, #532]	; (80015d4 <decodeGGA+0x68c>)
 80013c0:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 80013c2:	4b84      	ldr	r3, [pc, #528]	; (80015d4 <decodeGGA+0x68c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4413      	add	r3, r2
 80013cc:	781a      	ldrb	r2, [r3, #0]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	741a      	strb	r2, [r3, #16]

	/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 80013d2:	4b80      	ldr	r3, [pc, #512]	; (80015d4 <decodeGGA+0x68c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	4a7e      	ldr	r2, [pc, #504]	; (80015d4 <decodeGGA+0x68c>)
 80013da:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 80013dc:	4b7d      	ldr	r3, [pc, #500]	; (80015d4 <decodeGGA+0x68c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3301      	adds	r3, #1
 80013e2:	4a7c      	ldr	r2, [pc, #496]	; (80015d4 <decodeGGA+0x68c>)
 80013e4:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	220c      	movs	r2, #12
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f00a fa88 	bl	800b904 <memset>
	i = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 80013f8:	e013      	b.n	8001422 <decodeGGA+0x4da>
	{
		buffer[i] = GGAbuffer[inx];
 80013fa:	4b76      	ldr	r3, [pc, #472]	; (80015d4 <decodeGGA+0x68c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	7819      	ldrb	r1, [r3, #0]
 8001406:	f107 0214 	add.w	r2, r7, #20
 800140a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140c:	4413      	add	r3, r2
 800140e:	460a      	mov	r2, r1
 8001410:	701a      	strb	r2, [r3, #0]
		i++;
 8001412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001414:	3301      	adds	r3, #1
 8001416:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 8001418:	4b6e      	ldr	r3, [pc, #440]	; (80015d4 <decodeGGA+0x68c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	4a6d      	ldr	r2, [pc, #436]	; (80015d4 <decodeGGA+0x68c>)
 8001420:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 8001422:	4b6c      	ldr	r3, [pc, #432]	; (80015d4 <decodeGGA+0x68c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b2c      	cmp	r3, #44	; 0x2c
 8001430:	d1e3      	bne.n	80013fa <decodeGGA+0x4b2>
	}
	num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4618      	mov	r0, r3
 8001438:	f009 fb78 	bl	800ab2c <atoi>
 800143c:	4603      	mov	r3, r0
 800143e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	j = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8001444:	e002      	b.n	800144c <decodeGGA+0x504>
		j++;  // Figure out how many digits before the decimal
 8001446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001448:	3301      	adds	r3, #1
 800144a:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 800144c:	f107 0214 	add.w	r2, r7, #20
 8001450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001452:	4413      	add	r3, r2
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b2e      	cmp	r3, #46	; 0x2e
 8001458:	d1f5      	bne.n	8001446 <decodeGGA+0x4fe>
	j++;
 800145a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800145c:	3301      	adds	r3, #1
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
	declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4618      	mov	r0, r3
 8001466:	f7fe ff03 	bl	8000270 <strlen>
 800146a:	4602      	mov	r2, r0
 800146c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
	dec = atoi((char*) buffer + j); // conver the decimal part a a separate number
 8001472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001474:	f107 0214 	add.w	r2, r7, #20
 8001478:	4413      	add	r3, r2
 800147a:	4618      	mov	r0, r3
 800147c:	f009 fb56 	bl	800ab2c <atoi>
 8001480:	6278      	str	r0, [r7, #36]	; 0x24
	lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 8001482:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f84c 	bl	8000524 <__aeabi_i2d>
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	4b4d      	ldr	r3, [pc, #308]	; (80015c8 <decodeGGA+0x680>)
 8001492:	f7ff f9db 	bl	800084c <__aeabi_ddiv>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4690      	mov	r8, r2
 800149c:	4699      	mov	r9, r3
 800149e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014a0:	f7ff f840 	bl	8000524 <__aeabi_i2d>
 80014a4:	4604      	mov	r4, r0
 80014a6:	460d      	mov	r5, r1
 80014a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014aa:	3302      	adds	r3, #2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f839 	bl	8000524 <__aeabi_i2d>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	ec43 2b11 	vmov	d1, r2, r3
 80014ba:	ed9f 0b41 	vldr	d0, [pc, #260]	; 80015c0 <decodeGGA+0x678>
 80014be:	f00c f931 	bl	800d724 <pow>
 80014c2:	ec53 2b10 	vmov	r2, r3, d0
 80014c6:	4620      	mov	r0, r4
 80014c8:	4629      	mov	r1, r5
 80014ca:	f7ff f9bf 	bl	800084c <__aeabi_ddiv>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4640      	mov	r0, r8
 80014d4:	4649      	mov	r1, r9
 80014d6:	f7fe fed9 	bl	800028c <__adddf3>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f7ff fb61 	bl	8000ba8 <__aeabi_d2f>
 80014e6:	4603      	mov	r3, r0
 80014e8:	623b      	str	r3, [r7, #32]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	6a3a      	ldr	r2, [r7, #32]
 80014ee:	615a      	str	r2, [r3, #20]
	gga->lcation.longF = (float) gga->lcation.longitude / 100;
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	ed93 7a05 	vldr	s14, [r3, #20]
 80014f6:	eddf 6a35 	vldr	s13, [pc, #212]	; 80015cc <decodeGGA+0x684>
 80014fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	edc3 7a06 	vstr	s15, [r3, #24]
	gga->lcation.longDeg = (uint8_t) gga->lcation.longitude;
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	edd3 7a05 	vldr	s15, [r3, #20]
 800150a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800150e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001512:	793b      	ldrb	r3, [r7, #4]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	771a      	strb	r2, [r3, #28]
	gga->lcation.longMin = ((gga->lcation.longitude - gga->lcation.longDeg) / 60)
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	7f1b      	ldrb	r3, [r3, #28]
 8001524:	ee07 3a90 	vmov	s15, r3
 8001528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001530:	eddf 6a27 	vldr	s13, [pc, #156]	; 80015d0 <decodeGGA+0x688>
 8001534:	eec7 7a26 	vdiv.f32	s15, s14, s13
			* 100;
 8001538:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80015cc <decodeGGA+0x684>
 800153c:	ee67 7a87 	vmul.f32	s15, s15, s14
	gga->lcation.longMin = ((gga->lcation.longitude - gga->lcation.longDeg) / 60)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	edc3 7a08 	vstr	s15, [r3, #32]
	gga->lcation.longitude = gga->lcation.longDeg + gga->lcation.longMin;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	7f1b      	ldrb	r3, [r3, #28]
 800154a:	ee07 3a90 	vmov	s15, r3
 800154e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	edd3 7a08 	vldr	s15, [r3, #32]
 8001558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	edc3 7a05 	vstr	s15, [r3, #20]
	inx++;
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <decodeGGA+0x68c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	3301      	adds	r3, #1
 8001568:	4a1a      	ldr	r2, [pc, #104]	; (80015d4 <decodeGGA+0x68c>)
 800156a:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <decodeGGA+0x68c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4413      	add	r3, r2
 8001576:	781a      	ldrb	r2, [r3, #0]
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <decodeGGA+0x68c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	3301      	adds	r3, #1
 8001584:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <decodeGGA+0x68c>)
 8001586:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <decodeGGA+0x68c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	3301      	adds	r3, #1
 800158e:	4a11      	ldr	r2, [pc, #68]	; (80015d4 <decodeGGA+0x68c>)
 8001590:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <decodeGGA+0x68c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3301      	adds	r3, #1
 8001598:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <decodeGGA+0x68c>)
 800159a:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <decodeGGA+0x68c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	4a0c      	ldr	r2, [pc, #48]	; (80015d4 <decodeGGA+0x68c>)
 80015a4:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	220c      	movs	r2, #12
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f00a f9a8 	bl	800b904 <memset>
	i = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 80015b8:	e022      	b.n	8001600 <decodeGGA+0x6b8>
 80015ba:	bf00      	nop
 80015bc:	f3af 8000 	nop.w
 80015c0:	00000000 	.word	0x00000000
 80015c4:	40240000 	.word	0x40240000
 80015c8:	40590000 	.word	0x40590000
 80015cc:	42c80000 	.word	0x42c80000
 80015d0:	42700000 	.word	0x42700000
 80015d4:	2000021c 	.word	0x2000021c
	{
		buffer[i] = GGAbuffer[inx];
 80015d8:	4b67      	ldr	r3, [pc, #412]	; (8001778 <decodeGGA+0x830>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4413      	add	r3, r2
 80015e2:	7819      	ldrb	r1, [r3, #0]
 80015e4:	f107 0214 	add.w	r2, r7, #20
 80015e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ea:	4413      	add	r3, r2
 80015ec:	460a      	mov	r2, r1
 80015ee:	701a      	strb	r2, [r3, #0]
		i++;
 80015f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f2:	3301      	adds	r3, #1
 80015f4:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 80015f6:	4b60      	ldr	r3, [pc, #384]	; (8001778 <decodeGGA+0x830>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	3301      	adds	r3, #1
 80015fc:	4a5e      	ldr	r2, [pc, #376]	; (8001778 <decodeGGA+0x830>)
 80015fe:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 8001600:	4b5d      	ldr	r3, [pc, #372]	; (8001778 <decodeGGA+0x830>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4413      	add	r3, r2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b2c      	cmp	r3, #44	; 0x2c
 800160e:	d1e3      	bne.n	80015d8 <decodeGGA+0x690>
	}
	gga->numofsat = atoi(buffer); // convert the buffer to number and save into the structure
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4618      	mov	r0, r3
 8001616:	f009 fa89 	bl	800ab2c <atoi>
 800161a:	4602      	mov	r2, r0
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	641a      	str	r2, [r3, #64]	; 0x40

	/***************** skip HDOP  *********************/
	inx++;
 8001620:	4b55      	ldr	r3, [pc, #340]	; (8001778 <decodeGGA+0x830>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	4a54      	ldr	r2, [pc, #336]	; (8001778 <decodeGGA+0x830>)
 8001628:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800162a:	e004      	b.n	8001636 <decodeGGA+0x6ee>
		inx++;
 800162c:	4b52      	ldr	r3, [pc, #328]	; (8001778 <decodeGGA+0x830>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	3301      	adds	r3, #1
 8001632:	4a51      	ldr	r2, [pc, #324]	; (8001778 <decodeGGA+0x830>)
 8001634:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001636:	4b50      	ldr	r3, [pc, #320]	; (8001778 <decodeGGA+0x830>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b2c      	cmp	r3, #44	; 0x2c
 8001644:	d1f2      	bne.n	800162c <decodeGGA+0x6e4>

	/*************** Altitude calculation ********************/
	inx++;
 8001646:	4b4c      	ldr	r3, [pc, #304]	; (8001778 <decodeGGA+0x830>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	4a4a      	ldr	r2, [pc, #296]	; (8001778 <decodeGGA+0x830>)
 800164e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	220c      	movs	r2, #12
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f00a f953 	bl	800b904 <memset>
	i = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') {
 8001662:	e013      	b.n	800168c <decodeGGA+0x744>
		buffer[i] = GGAbuffer[inx];
 8001664:	4b44      	ldr	r3, [pc, #272]	; (8001778 <decodeGGA+0x830>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4413      	add	r3, r2
 800166e:	7819      	ldrb	r1, [r3, #0]
 8001670:	f107 0214 	add.w	r2, r7, #20
 8001674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001676:	4413      	add	r3, r2
 8001678:	460a      	mov	r2, r1
 800167a:	701a      	strb	r2, [r3, #0]
		i++;
 800167c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800167e:	3301      	adds	r3, #1
 8001680:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <decodeGGA+0x830>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	4a3b      	ldr	r2, [pc, #236]	; (8001778 <decodeGGA+0x830>)
 800168a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') {
 800168c:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <decodeGGA+0x830>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4413      	add	r3, r2
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b2c      	cmp	r3, #44	; 0x2c
 800169a:	d1e3      	bne.n	8001664 <decodeGGA+0x71c>
	}
	num = (atoi(buffer));
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4618      	mov	r0, r3
 80016a2:	f009 fa43 	bl	800ab2c <atoi>
 80016a6:	4603      	mov	r3, r0
 80016a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	j = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 80016ae:	e002      	b.n	80016b6 <decodeGGA+0x76e>
		j++;
 80016b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b2:	3301      	adds	r3, #1
 80016b4:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 80016b6:	f107 0214 	add.w	r2, r7, #20
 80016ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016bc:	4413      	add	r3, r2
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b2e      	cmp	r3, #46	; 0x2e
 80016c2:	d1f5      	bne.n	80016b0 <decodeGGA+0x768>
	j++;
 80016c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c6:	3301      	adds	r3, #1
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
	declen = (strlen(buffer)) - j;
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fdce 	bl	8000270 <strlen>
 80016d4:	4602      	mov	r2, r0
 80016d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
	dec = atoi((char*) buffer + j);
 80016dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016de:	f107 0214 	add.w	r2, r7, #20
 80016e2:	4413      	add	r3, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f009 fa21 	bl	800ab2c <atoi>
 80016ea:	6278      	str	r0, [r7, #36]	; 0x24
	lat = (num) + (dec / pow(10, (declen)));
 80016ec:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe ff17 	bl	8000524 <__aeabi_i2d>
 80016f6:	4604      	mov	r4, r0
 80016f8:	460d      	mov	r5, r1
 80016fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016fc:	f7fe ff12 	bl	8000524 <__aeabi_i2d>
 8001700:	4680      	mov	r8, r0
 8001702:	4689      	mov	r9, r1
 8001704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001706:	f7fe ff0d 	bl	8000524 <__aeabi_i2d>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	ec43 2b11 	vmov	d1, r2, r3
 8001712:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001770 <decodeGGA+0x828>
 8001716:	f00c f805 	bl	800d724 <pow>
 800171a:	ec53 2b10 	vmov	r2, r3, d0
 800171e:	4640      	mov	r0, r8
 8001720:	4649      	mov	r1, r9
 8001722:	f7ff f893 	bl	800084c <__aeabi_ddiv>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4620      	mov	r0, r4
 800172c:	4629      	mov	r1, r5
 800172e:	f7fe fdad 	bl	800028c <__adddf3>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f7ff fa35 	bl	8000ba8 <__aeabi_d2f>
 800173e:	4603      	mov	r3, r0
 8001740:	623b      	str	r3, [r7, #32]
	gga->alt.altitude = lat;
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	6a3a      	ldr	r2, [r7, #32]
 8001746:	639a      	str	r2, [r3, #56]	; 0x38

	inx++;
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <decodeGGA+0x830>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <decodeGGA+0x830>)
 8001750:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <decodeGGA+0x830>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	781a      	ldrb	r2, [r3, #0]
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return 0;
 8001764:	2300      	movs	r3, #0

}
 8001766:	4618      	mov	r0, r3
 8001768:	3738      	adds	r7, #56	; 0x38
 800176a:	46bd      	mov	sp, r7
 800176c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001770:	00000000 	.word	0x00000000
 8001774:	40240000 	.word	0x40240000
 8001778:	2000021c 	.word	0x2000021c
 800177c:	00000000 	.word	0x00000000

08001780 <decodeRMC>:

int decodeRMC(char *RMCbuffer, RMCSTRUCT *rmc) {
 8001780:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001784:	b090      	sub	sp, #64	; 0x40
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
	inx = 0;
 800178c:	4b94      	ldr	r3, [pc, #592]	; (80019e0 <decodeRMC+0x260>)
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',')
 8001796:	e004      	b.n	80017a2 <decodeRMC+0x22>
		inx++;  // 1st ,
 8001798:	4b91      	ldr	r3, [pc, #580]	; (80019e0 <decodeRMC+0x260>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	4a90      	ldr	r2, [pc, #576]	; (80019e0 <decodeRMC+0x260>)
 80017a0:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80017a2:	4b8f      	ldr	r3, [pc, #572]	; (80019e0 <decodeRMC+0x260>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4413      	add	r3, r2
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b2c      	cmp	r3, #44	; 0x2c
 80017b0:	d1f2      	bne.n	8001798 <decodeRMC+0x18>
	inx++;
 80017b2:	4b8b      	ldr	r3, [pc, #556]	; (80019e0 <decodeRMC+0x260>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	4a89      	ldr	r2, [pc, #548]	; (80019e0 <decodeRMC+0x260>)
 80017ba:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80017bc:	e004      	b.n	80017c8 <decodeRMC+0x48>
		inx++;  // After time ,
 80017be:	4b88      	ldr	r3, [pc, #544]	; (80019e0 <decodeRMC+0x260>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	4a86      	ldr	r2, [pc, #536]	; (80019e0 <decodeRMC+0x260>)
 80017c6:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80017c8:	4b85      	ldr	r3, [pc, #532]	; (80019e0 <decodeRMC+0x260>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b2c      	cmp	r3, #44	; 0x2c
 80017d6:	d1f2      	bne.n	80017be <decodeRMC+0x3e>
	inx++;
 80017d8:	4b81      	ldr	r3, [pc, #516]	; (80019e0 <decodeRMC+0x260>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	4a80      	ldr	r2, [pc, #512]	; (80019e0 <decodeRMC+0x260>)
 80017e0:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A') // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80017e2:	4b7f      	ldr	r3, [pc, #508]	; (80019e0 <decodeRMC+0x260>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4413      	add	r3, r2
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b41      	cmp	r3, #65	; 0x41
 80017f0:	d10d      	bne.n	800180e <decodeRMC+0x8e>
			{
		rmc->isValid = 1;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2201      	movs	r2, #1
 80017f6:	615a      	str	r2, [r3, #20]
	} else {
		rmc->isValid = 0;
		return 1;
	}
	inx++;
 80017f8:	4b79      	ldr	r3, [pc, #484]	; (80019e0 <decodeRMC+0x260>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	4a78      	ldr	r2, [pc, #480]	; (80019e0 <decodeRMC+0x260>)
 8001800:	6013      	str	r3, [r2, #0]
	inx++;
 8001802:	4b77      	ldr	r3, [pc, #476]	; (80019e0 <decodeRMC+0x260>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	3301      	adds	r3, #1
 8001808:	4a75      	ldr	r2, [pc, #468]	; (80019e0 <decodeRMC+0x260>)
 800180a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800180c:	e009      	b.n	8001822 <decodeRMC+0xa2>
		rmc->isValid = 0;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	2200      	movs	r2, #0
 8001812:	615a      	str	r2, [r3, #20]
		return 1;
 8001814:	2301      	movs	r3, #1
 8001816:	e1d8      	b.n	8001bca <decodeRMC+0x44a>
		inx++;  // after latitude,
 8001818:	4b71      	ldr	r3, [pc, #452]	; (80019e0 <decodeRMC+0x260>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	4a70      	ldr	r2, [pc, #448]	; (80019e0 <decodeRMC+0x260>)
 8001820:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001822:	4b6f      	ldr	r3, [pc, #444]	; (80019e0 <decodeRMC+0x260>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b2c      	cmp	r3, #44	; 0x2c
 8001830:	d1f2      	bne.n	8001818 <decodeRMC+0x98>
	inx++;
 8001832:	4b6b      	ldr	r3, [pc, #428]	; (80019e0 <decodeRMC+0x260>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3301      	adds	r3, #1
 8001838:	4a69      	ldr	r2, [pc, #420]	; (80019e0 <decodeRMC+0x260>)
 800183a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800183c:	e004      	b.n	8001848 <decodeRMC+0xc8>
		inx++;  // after NS ,
 800183e:	4b68      	ldr	r3, [pc, #416]	; (80019e0 <decodeRMC+0x260>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	4a66      	ldr	r2, [pc, #408]	; (80019e0 <decodeRMC+0x260>)
 8001846:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001848:	4b65      	ldr	r3, [pc, #404]	; (80019e0 <decodeRMC+0x260>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b2c      	cmp	r3, #44	; 0x2c
 8001856:	d1f2      	bne.n	800183e <decodeRMC+0xbe>
	inx++;
 8001858:	4b61      	ldr	r3, [pc, #388]	; (80019e0 <decodeRMC+0x260>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	4a60      	ldr	r2, [pc, #384]	; (80019e0 <decodeRMC+0x260>)
 8001860:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001862:	e004      	b.n	800186e <decodeRMC+0xee>
		inx++;  // after longitude ,
 8001864:	4b5e      	ldr	r3, [pc, #376]	; (80019e0 <decodeRMC+0x260>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	4a5d      	ldr	r2, [pc, #372]	; (80019e0 <decodeRMC+0x260>)
 800186c:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800186e:	4b5c      	ldr	r3, [pc, #368]	; (80019e0 <decodeRMC+0x260>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b2c      	cmp	r3, #44	; 0x2c
 800187c:	d1f2      	bne.n	8001864 <decodeRMC+0xe4>
	inx++;
 800187e:	4b58      	ldr	r3, [pc, #352]	; (80019e0 <decodeRMC+0x260>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	4a56      	ldr	r2, [pc, #344]	; (80019e0 <decodeRMC+0x260>)
 8001886:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001888:	e004      	b.n	8001894 <decodeRMC+0x114>
		inx++;  // after EW ,
 800188a:	4b55      	ldr	r3, [pc, #340]	; (80019e0 <decodeRMC+0x260>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	4a53      	ldr	r2, [pc, #332]	; (80019e0 <decodeRMC+0x260>)
 8001892:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001894:	4b52      	ldr	r3, [pc, #328]	; (80019e0 <decodeRMC+0x260>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b2c      	cmp	r3, #44	; 0x2c
 80018a2:	d1f2      	bne.n	800188a <decodeRMC+0x10a>

	// Get Speed
	inx++;
 80018a4:	4b4e      	ldr	r3, [pc, #312]	; (80019e0 <decodeRMC+0x260>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	4a4d      	ldr	r2, [pc, #308]	; (80019e0 <decodeRMC+0x260>)
 80018ac:	6013      	str	r3, [r2, #0]
	i = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	220c      	movs	r2, #12
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f00a f822 	bl	800b904 <memset>
	while (RMCbuffer[inx] != ',') {
 80018c0:	e013      	b.n	80018ea <decodeRMC+0x16a>
		buffer[i] = RMCbuffer[inx];
 80018c2:	4b47      	ldr	r3, [pc, #284]	; (80019e0 <decodeRMC+0x260>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	7819      	ldrb	r1, [r3, #0]
 80018ce:	f107 0208 	add.w	r2, r7, #8
 80018d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d4:	4413      	add	r3, r2
 80018d6:	460a      	mov	r2, r1
 80018d8:	701a      	strb	r2, [r3, #0]
		i++;
 80018da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018dc:	3301      	adds	r3, #1
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80018e0:	4b3f      	ldr	r3, [pc, #252]	; (80019e0 <decodeRMC+0x260>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3301      	adds	r3, #1
 80018e6:	4a3e      	ldr	r2, [pc, #248]	; (80019e0 <decodeRMC+0x260>)
 80018e8:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') {
 80018ea:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <decodeRMC+0x260>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b2c      	cmp	r3, #44	; 0x2c
 80018f8:	d1e3      	bne.n	80018c2 <decodeRMC+0x142>
	}

	if (strlen(buffer) > 0) {          // if the speed have some data
 80018fa:	f107 0308 	add.w	r3, r7, #8
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d056      	beq.n	80019b2 <decodeRMC+0x232>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	4618      	mov	r0, r3
 800190a:	f009 f90f 	bl	800ab2c <atoi>
 800190e:	4603      	mov	r3, r0
 8001910:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.')
 8001916:	e002      	b.n	800191e <decodeRMC+0x19e>
			j++;   // same as above
 8001918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800191a:	3301      	adds	r3, #1
 800191c:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.')
 800191e:	f107 0208 	add.w	r2, r7, #8
 8001922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001924:	4413      	add	r3, r2
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b2e      	cmp	r3, #46	; 0x2e
 800192a:	d1f5      	bne.n	8001918 <decodeRMC+0x198>
		j++;
 800192c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800192e:	3301      	adds	r3, #1
 8001930:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer)) - j;
 8001932:	f107 0308 	add.w	r3, r7, #8
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fc9a 	bl	8000270 <strlen>
 800193c:	4602      	mov	r2, r0
 800193e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi((char*) buffer + j);
 8001944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001946:	f107 0208 	add.w	r2, r7, #8
 800194a:	4413      	add	r3, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f009 f8ed 	bl	800ab2c <atoi>
 8001952:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec / pow(10, (declen)));
 8001954:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fde3 	bl	8000524 <__aeabi_i2d>
 800195e:	4604      	mov	r4, r0
 8001960:	460d      	mov	r5, r1
 8001962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001964:	f7fe fdde 	bl	8000524 <__aeabi_i2d>
 8001968:	4680      	mov	r8, r0
 800196a:	4689      	mov	r9, r1
 800196c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800196e:	f7fe fdd9 	bl	8000524 <__aeabi_i2d>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	ec43 2b11 	vmov	d1, r2, r3
 800197a:	ed9f 0b17 	vldr	d0, [pc, #92]	; 80019d8 <decodeRMC+0x258>
 800197e:	f00b fed1 	bl	800d724 <pow>
 8001982:	ec53 2b10 	vmov	r2, r3, d0
 8001986:	4640      	mov	r0, r8
 8001988:	4649      	mov	r1, r9
 800198a:	f7fe ff5f 	bl	800084c <__aeabi_ddiv>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4620      	mov	r0, r4
 8001994:	4629      	mov	r1, r5
 8001996:	f7fe fc79 	bl	800028c <__adddf3>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4610      	mov	r0, r2
 80019a0:	4619      	mov	r1, r3
 80019a2:	f7ff f901 	bl	8000ba8 <__aeabi_d2f>
 80019a6:	4603      	mov	r3, r0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ae:	60da      	str	r2, [r3, #12]
 80019b0:	e003      	b.n	80019ba <decodeRMC+0x23a>
	} else
		rmc->speed = 0;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <decodeRMC+0x260>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	3301      	adds	r3, #1
 80019c0:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <decodeRMC+0x260>)
 80019c2:	6013      	str	r3, [r2, #0]
	i = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80019c8:	f107 0308 	add.w	r3, r7, #8
 80019cc:	220c      	movs	r2, #12
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f009 ff97 	bl	800b904 <memset>
	while (RMCbuffer[inx] != ',') {
 80019d6:	e019      	b.n	8001a0c <decodeRMC+0x28c>
 80019d8:	00000000 	.word	0x00000000
 80019dc:	40240000 	.word	0x40240000
 80019e0:	2000021c 	.word	0x2000021c
		buffer[i] = RMCbuffer[inx];
 80019e4:	4b7e      	ldr	r3, [pc, #504]	; (8001be0 <decodeRMC+0x460>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	7819      	ldrb	r1, [r3, #0]
 80019f0:	f107 0208 	add.w	r2, r7, #8
 80019f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019f6:	4413      	add	r3, r2
 80019f8:	460a      	mov	r2, r1
 80019fa:	701a      	strb	r2, [r3, #0]
		i++;
 80019fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019fe:	3301      	adds	r3, #1
 8001a00:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001a02:	4b77      	ldr	r3, [pc, #476]	; (8001be0 <decodeRMC+0x460>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	3301      	adds	r3, #1
 8001a08:	4a75      	ldr	r2, [pc, #468]	; (8001be0 <decodeRMC+0x460>)
 8001a0a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') {
 8001a0c:	4b74      	ldr	r3, [pc, #464]	; (8001be0 <decodeRMC+0x460>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b2c      	cmp	r3, #44	; 0x2c
 8001a1a:	d1e3      	bne.n	80019e4 <decodeRMC+0x264>
	}

	if (strlen(buffer) > 0) {  // if the course have some data
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d056      	beq.n	8001ad4 <decodeRMC+0x354>
		int16_t num = (atoi(buffer)); // convert the course data into the number
 8001a26:	f107 0308 	add.w	r3, r7, #8
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f009 f87e 	bl	800ab2c <atoi>
 8001a30:	4603      	mov	r3, r0
 8001a32:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.')
 8001a38:	e002      	b.n	8001a40 <decodeRMC+0x2c0>
			j++;   // same as above
 8001a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.')
 8001a40:	f107 0208 	add.w	r2, r7, #8
 8001a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a46:	4413      	add	r3, r2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8001a4c:	d1f5      	bne.n	8001a3a <decodeRMC+0x2ba>
		j++;
 8001a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a50:	3301      	adds	r3, #1
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer)) - j;
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fc09 	bl	8000270 <strlen>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	61fb      	str	r3, [r7, #28]
		int dec = atoi((char*) buffer + j);
 8001a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a68:	f107 0208 	add.w	r2, r7, #8
 8001a6c:	4413      	add	r3, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f009 f85c 	bl	800ab2c <atoi>
 8001a74:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec / pow(10, (declen)));
 8001a76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd52 	bl	8000524 <__aeabi_i2d>
 8001a80:	4604      	mov	r4, r0
 8001a82:	460d      	mov	r5, r1
 8001a84:	69b8      	ldr	r0, [r7, #24]
 8001a86:	f7fe fd4d 	bl	8000524 <__aeabi_i2d>
 8001a8a:	4680      	mov	r8, r0
 8001a8c:	4689      	mov	r9, r1
 8001a8e:	69f8      	ldr	r0, [r7, #28]
 8001a90:	f7fe fd48 	bl	8000524 <__aeabi_i2d>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	ec43 2b11 	vmov	d1, r2, r3
 8001a9c:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 8001bd8 <decodeRMC+0x458>
 8001aa0:	f00b fe40 	bl	800d724 <pow>
 8001aa4:	ec53 2b10 	vmov	r2, r3, d0
 8001aa8:	4640      	mov	r0, r8
 8001aaa:	4649      	mov	r1, r9
 8001aac:	f7fe fece 	bl	800084c <__aeabi_ddiv>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	f7fe fbe8 	bl	800028c <__adddf3>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f7ff f870 	bl	8000ba8 <__aeabi_d2f>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	611a      	str	r2, [r3, #16]
 8001ad2:	e003      	b.n	8001adc <decodeRMC+0x35c>
	} else {
		rmc->course = 0;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
	}

	// Get Date
	inx++;
 8001adc:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <decodeRMC+0x460>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	4a3f      	ldr	r2, [pc, #252]	; (8001be0 <decodeRMC+0x460>)
 8001ae4:	6013      	str	r3, [r2, #0]
	i = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	220c      	movs	r2, #12
 8001af0:	2100      	movs	r1, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f009 ff06 	bl	800b904 <memset>
	while (RMCbuffer[inx] != ',') {
 8001af8:	e013      	b.n	8001b22 <decodeRMC+0x3a2>
		buffer[i] = RMCbuffer[inx];
 8001afa:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <decodeRMC+0x460>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	7819      	ldrb	r1, [r3, #0]
 8001b06:	f107 0208 	add.w	r2, r7, #8
 8001b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b0c:	4413      	add	r3, r2
 8001b0e:	460a      	mov	r2, r1
 8001b10:	701a      	strb	r2, [r3, #0]
		i++;
 8001b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b14:	3301      	adds	r3, #1
 8001b16:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001b18:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <decodeRMC+0x460>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	4a30      	ldr	r2, [pc, #192]	; (8001be0 <decodeRMC+0x460>)
 8001b20:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') {
 8001b22:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <decodeRMC+0x460>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b2c      	cmp	r3, #44	; 0x2c
 8001b30:	d1e3      	bne.n	8001afa <decodeRMC+0x37a>
	}

	// Date in the format 280222
	day = atoi(buffer) / 10000;  // extract 28
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	4618      	mov	r0, r3
 8001b38:	f008 fff8 	bl	800ab2c <atoi>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4a29      	ldr	r2, [pc, #164]	; (8001be4 <decodeRMC+0x464>)
 8001b40:	fb82 1203 	smull	r1, r2, r2, r3
 8001b44:	1312      	asrs	r2, r2, #12
 8001b46:	17db      	asrs	r3, r3, #31
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	4a27      	ldr	r2, [pc, #156]	; (8001be8 <decodeRMC+0x468>)
 8001b4c:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer) / 100) % 100;  // extract 02
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	4618      	mov	r0, r3
 8001b54:	f008 ffea 	bl	800ab2c <atoi>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4a24      	ldr	r2, [pc, #144]	; (8001bec <decodeRMC+0x46c>)
 8001b5c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b60:	1152      	asrs	r2, r2, #5
 8001b62:	17db      	asrs	r3, r3, #31
 8001b64:	1ad2      	subs	r2, r2, r3
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <decodeRMC+0x46c>)
 8001b68:	fb83 1302 	smull	r1, r3, r3, r2
 8001b6c:	1159      	asrs	r1, r3, #5
 8001b6e:	17d3      	asrs	r3, r2, #31
 8001b70:	1acb      	subs	r3, r1, r3
 8001b72:	2164      	movs	r1, #100	; 0x64
 8001b74:	fb01 f303 	mul.w	r3, r1, r3
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <decodeRMC+0x470>)
 8001b7c:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer) % 100;  // extract 22
 8001b7e:	f107 0308 	add.w	r3, r7, #8
 8001b82:	4618      	mov	r0, r3
 8001b84:	f008 ffd2 	bl	800ab2c <atoi>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <decodeRMC+0x46c>)
 8001b8c:	fb83 1302 	smull	r1, r3, r3, r2
 8001b90:	1159      	asrs	r1, r3, #5
 8001b92:	17d3      	asrs	r3, r2, #31
 8001b94:	1acb      	subs	r3, r1, r3
 8001b96:	2164      	movs	r1, #100	; 0x64
 8001b98:	fb01 f303 	mul.w	r3, r1, r3
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	4a15      	ldr	r2, [pc, #84]	; (8001bf4 <decodeRMC+0x474>)
 8001ba0:	6013      	str	r3, [r2, #0]

	day = day + daychange;   // correction due to GMT shift
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <decodeRMC+0x468>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <decodeRMC+0x478>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a0e      	ldr	r2, [pc, #56]	; (8001be8 <decodeRMC+0x468>)
 8001bae:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8001bb0:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <decodeRMC+0x468>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <decodeRMC+0x470>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <decodeRMC+0x474>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	609a      	str	r2, [r3, #8]

	return 0;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3740      	adds	r7, #64	; 0x40
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	00000000 	.word	0x00000000
 8001bdc:	40240000 	.word	0x40240000
 8001be0:	2000021c 	.word	0x2000021c
 8001be4:	68db8bad 	.word	0x68db8bad
 8001be8:	20000228 	.word	0x20000228
 8001bec:	51eb851f 	.word	0x51eb851f
 8001bf0:	2000022c 	.word	0x2000022c
 8001bf4:	20000230 	.word	0x20000230
 8001bf8:	20000234 	.word	0x20000234

08001bfc <PIDController_Init>:


//sadece roll ve pitch için pid yapıyoruz. yaw ve yükseklik işini sonraya bırakacağız.


void PIDController_Init(PIDController *pid) {
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	621a      	str	r2, [r3, #32]
	pid->prevError  = 0.0f;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	625a      	str	r2, [r3, #36]	; 0x24

	pid->differentiator  = 0.0f;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
	pid->prevMeasurement = 0.0f;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c

	pid->out = 0.0f;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30

}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement){
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c44:	edc7 0a01 	vstr	s1, [r7, #4]
	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8001c48:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c54:	edc7 7a05 	vstr	s15, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	edd3 7a00 	vldr	s15, [r3]
 8001c5e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c66:	edc7 7a04 	vstr	s15, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c76:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001c7a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 8001c8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c92:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	edc3 7a08 	vstr	s15, [r3, #32]

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt) {
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	edd3 7a06 	vldr	s15, [r3, #24]
 8001cb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb8:	dd04      	ble.n	8001cc4 <PIDController_Update+0x8c>

        pid->integrator = pid->limMaxInt;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	699a      	ldr	r2, [r3, #24]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	621a      	str	r2, [r3, #32]
 8001cc2:	e00e      	b.n	8001ce2 <PIDController_Update+0xaa>

    } else if (pid->integrator < pid->limMinInt) {
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001cd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd8:	d503      	bpl.n	8001ce2 <PIDController_Update+0xaa>

        pid->integrator = pid->limMinInt;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	621a      	str	r2, [r3, #32]
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
                        / (2.0f * pid->tau + pid->T);
*/
    //https://www.robotsforroboticists.com/pid-control/ //derivative = (error – error_prior) / iteration_time
    pid->differentiator = pid->Kd * ( (error - pid->prevError) / pid->T );
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001cee:	edd7 6a05 	vldr	s13, [r7, #20]
 8001cf2:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	edd3 6a07 	vldr	s13, [r3, #28]
 8001cfc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


	/*
	* Compute output and apply limits
	*/
    pid->out = proportional + pid->integrator + pid->differentiator;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001d10:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    if (pid->out > pid->limMax) {
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3c:	dd04      	ble.n	8001d48 <PIDController_Update+0x110>

        pid->out = pid->limMax;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	691a      	ldr	r2, [r3, #16]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	631a      	str	r2, [r3, #48]	; 0x30
 8001d46:	e00e      	b.n	8001d66 <PIDController_Update+0x12e>

    } else if (pid->out < pid->limMin) {
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5c:	d503      	bpl.n	8001d66 <PIDController_Update+0x12e>

        pid->out = pid->limMin;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	631a      	str	r2, [r3, #48]	; 0x30

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	625a      	str	r2, [r3, #36]	; 0x24
    pid->prevMeasurement = measurement;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Return controller output */
    return pid->out;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	ee07 3a90 	vmov	s15, r3

}
 8001d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d7e:	371c      	adds	r7, #28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d8e:	463b      	mov	r3, r7
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d9a:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001d9c:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <MX_ADC1_Init+0x9c>)
 8001d9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001da0:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001da2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001da6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001da8:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001db4:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001dca:	4a17      	ldr	r2, [pc, #92]	; (8001e28 <MX_ADC1_Init+0xa0>)
 8001dcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001de8:	480d      	ldr	r0, [pc, #52]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001dea:	f002 fd37 	bl	800485c <HAL_ADC_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001df4:	f001 f854 	bl	8002ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e04:	463b      	mov	r3, r7
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001e0a:	f002 ff09 	bl	8004c20 <HAL_ADC_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e14:	f001 f844 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000238 	.word	0x20000238
 8001e24:	40012000 	.word	0x40012000
 8001e28:	0f000001 	.word	0x0f000001

08001e2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	; 0x28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a17      	ldr	r2, [pc, #92]	; (8001ea8 <HAL_ADC_MspInit+0x7c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d127      	bne.n	8001e9e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	4b16      	ldr	r3, [pc, #88]	; (8001eac <HAL_ADC_MspInit+0x80>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	4a15      	ldr	r2, [pc, #84]	; (8001eac <HAL_ADC_MspInit+0x80>)
 8001e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <HAL_ADC_MspInit+0x80>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <HAL_ADC_MspInit+0x80>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a0e      	ldr	r2, [pc, #56]	; (8001eac <HAL_ADC_MspInit+0x80>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_ADC_MspInit+0x80>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = power_module_adc_Pin;
 8001e86:	2302      	movs	r3, #2
 8001e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(power_module_adc_GPIO_Port, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <HAL_ADC_MspInit+0x84>)
 8001e9a:	f003 fa53 	bl	8005344 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3728      	adds	r7, #40	; 0x28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40012000 	.word	0x40012000
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020000 	.word	0x40020000

08001eb4 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	2007      	movs	r0, #7
 8001ec4:	f000 f9ea 	bl	800229c <bno055_writeData>
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	4619      	mov	r1, r3
 8001ede:	203d      	movs	r0, #61	; 0x3d
 8001ee0:	f000 f9dc 	bl	800229c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d103      	bne.n	8001ef2 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001eea:	2013      	movs	r0, #19
 8001eec:	f000 f9ca 	bl	8002284 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001ef0:	e002      	b.n	8001ef8 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001ef2:	2007      	movs	r0, #7
 8001ef4:	f000 f9c6 	bl	8002284 <bno055_delay>
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff ffe3 	bl	8001ed0 <bno055_setOperationMode>
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001f12:	200c      	movs	r0, #12
 8001f14:	f7ff ffdc 	bl	8001ed0 <bno055_setOperationMode>
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001f20:	2120      	movs	r1, #32
 8001f22:	203f      	movs	r0, #63	; 0x3f
 8001f24:	f000 f9ba 	bl	800229c <bno055_writeData>
  bno055_delay(700);
 8001f28:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001f2c:	f000 f9aa 	bl	8002284 <bno055_delay>
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
  bno055_reset();
 8001f3a:	f7ff ffef 	bl	8001f1c <bno055_reset>

  uint8_t id = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001f42:	1dfb      	adds	r3, r7, #7
 8001f44:	2201      	movs	r2, #1
 8001f46:	4619      	mov	r1, r3
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f000 fa93 	bl	8002474 <bno055_readData>
  if (id != BNO055_ID) {
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	2ba0      	cmp	r3, #160	; 0xa0
 8001f52:	d004      	beq.n	8001f5e <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	4619      	mov	r1, r3
 8001f58:	4809      	ldr	r0, [pc, #36]	; (8001f80 <bno055_setup+0x4c>)
 8001f5a:	f009 fb8d 	bl	800b678 <iprintf>
  }
  bno055_setPage(0);
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f7ff ffa8 	bl	8001eb4 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001f64:	2100      	movs	r1, #0
 8001f66:	203f      	movs	r0, #63	; 0x3f
 8001f68:	f000 f998 	bl	800229c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001f6c:	f7ff ffc8 	bl	8001f00 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001f70:	200a      	movs	r0, #10
 8001f72:	f000 f987 	bl	8002284 <bno055_delay>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	0800e5b0 	.word	0x0800e5b0

08001f84 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b093      	sub	sp, #76	; 0x4c
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	75fb      	strb	r3, [r7, #23]
  bno055_setPage(0);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f7ff ff90 	bl	8001eb4 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001f94:	7dfb      	ldrb	r3, [r7, #23]
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	d107      	bne.n	8001faa <bno055_getVector+0x26>
    bno055_readData(vec, buffer, 8);
 8001f9a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001f9e:	7dfb      	ldrb	r3, [r7, #23]
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fa66 	bl	8002474 <bno055_readData>
 8001fa8:	e006      	b.n	8001fb8 <bno055_getVector+0x34>
  else
    bno055_readData(vec, buffer, 6);
 8001faa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
 8001fb0:	2206      	movs	r2, #6
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fa5e 	bl	8002474 <bno055_readData>

  double scale = 1;
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	4b8c      	ldr	r3, [pc, #560]	; (80021f0 <bno055_getVector+0x26c>)
 8001fbe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
 8001fc4:	2b0e      	cmp	r3, #14
 8001fc6:	d109      	bne.n	8001fdc <bno055_getVector+0x58>
    scale = magScale;
 8001fc8:	4b8a      	ldr	r3, [pc, #552]	; (80021f4 <bno055_getVector+0x270>)
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fa99 	bl	8000504 <__aeabi_ui2d>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001fda:	e038      	b.n	800204e <bno055_getVector+0xca>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001fdc:	7dfb      	ldrb	r3, [r7, #23]
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d005      	beq.n	8001fee <bno055_getVector+0x6a>
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
 8001fe4:	2b28      	cmp	r3, #40	; 0x28
 8001fe6:	d002      	beq.n	8001fee <bno055_getVector+0x6a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
 8001fea:	2b2e      	cmp	r3, #46	; 0x2e
 8001fec:	d109      	bne.n	8002002 <bno055_getVector+0x7e>
    scale = accelScale;
 8001fee:	4b82      	ldr	r3, [pc, #520]	; (80021f8 <bno055_getVector+0x274>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fa86 	bl	8000504 <__aeabi_ui2d>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8002000:	e025      	b.n	800204e <bno055_getVector+0xca>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8002002:	7dfb      	ldrb	r3, [r7, #23]
 8002004:	2b14      	cmp	r3, #20
 8002006:	d109      	bne.n	800201c <bno055_getVector+0x98>
    scale = angularRateScale;
 8002008:	4b7c      	ldr	r3, [pc, #496]	; (80021fc <bno055_getVector+0x278>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fa79 	bl	8000504 <__aeabi_ui2d>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800201a:	e018      	b.n	800204e <bno055_getVector+0xca>
  } else if (vec == BNO055_VECTOR_EULER) {
 800201c:	7dfb      	ldrb	r3, [r7, #23]
 800201e:	2b1a      	cmp	r3, #26
 8002020:	d109      	bne.n	8002036 <bno055_getVector+0xb2>
    scale = eulerScale;
 8002022:	4b77      	ldr	r3, [pc, #476]	; (8002200 <bno055_getVector+0x27c>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fa6c 	bl	8000504 <__aeabi_ui2d>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8002034:	e00b      	b.n	800204e <bno055_getVector+0xca>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8002036:	7dfb      	ldrb	r3, [r7, #23]
 8002038:	2b20      	cmp	r3, #32
 800203a:	d108      	bne.n	800204e <bno055_getVector+0xca>
    scale = quaScale;
 800203c:	4b71      	ldr	r3, [pc, #452]	; (8002204 <bno055_getVector+0x280>)
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fa5f 	bl	8000504 <__aeabi_ui2d>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 800204e:	f107 0318 	add.w	r3, r7, #24
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]
  if (vec == BNO055_VECTOR_QUATERNION) {
 800205c:	7dfb      	ldrb	r3, [r7, #23]
 800205e:	2b20      	cmp	r3, #32
 8002060:	d160      	bne.n	8002124 <bno055_getVector+0x1a0>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8002062:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	b21a      	sxth	r2, r3
 800206a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800206e:	b21b      	sxth	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	b21b      	sxth	r3, r3
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fa55 	bl	8000524 <__aeabi_i2d>
 800207a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800207e:	f7fe fbe5 	bl	800084c <__aeabi_ddiv>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	f7fe fd8d 	bl	8000ba8 <__aeabi_d2f>
 800208e:	4603      	mov	r3, r0
 8002090:	61bb      	str	r3, [r7, #24]
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8002092:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	b21a      	sxth	r2, r3
 800209a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800209e:	b21b      	sxth	r3, r3
 80020a0:	4313      	orrs	r3, r2
 80020a2:	b21b      	sxth	r3, r3
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fa3d 	bl	8000524 <__aeabi_i2d>
 80020aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020ae:	f7fe fbcd 	bl	800084c <__aeabi_ddiv>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4610      	mov	r0, r2
 80020b8:	4619      	mov	r1, r3
 80020ba:	f7fe fd75 	bl	8000ba8 <__aeabi_d2f>
 80020be:	4603      	mov	r3, r0
 80020c0:	61fb      	str	r3, [r7, #28]
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80020c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	b21a      	sxth	r2, r3
 80020ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	4313      	orrs	r3, r2
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fa25 	bl	8000524 <__aeabi_i2d>
 80020da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020de:	f7fe fbb5 	bl	800084c <__aeabi_ddiv>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	f7fe fd5d 	bl	8000ba8 <__aeabi_d2f>
 80020ee:	4603      	mov	r3, r0
 80020f0:	623b      	str	r3, [r7, #32]
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80020f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	b21a      	sxth	r2, r3
 80020fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80020fe:	b21b      	sxth	r3, r3
 8002100:	4313      	orrs	r3, r2
 8002102:	b21b      	sxth	r3, r3
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe fa0d 	bl	8000524 <__aeabi_i2d>
 800210a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800210e:	f7fe fb9d 	bl	800084c <__aeabi_ddiv>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	f7fe fd45 	bl	8000ba8 <__aeabi_d2f>
 800211e:	4603      	mov	r3, r0
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
 8002122:	e047      	b.n	80021b4 <bno055_getVector+0x230>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8002124:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002128:	021b      	lsls	r3, r3, #8
 800212a:	b21a      	sxth	r2, r3
 800212c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002130:	b21b      	sxth	r3, r3
 8002132:	4313      	orrs	r3, r2
 8002134:	b21b      	sxth	r3, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe f9f4 	bl	8000524 <__aeabi_i2d>
 800213c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002140:	f7fe fb84 	bl	800084c <__aeabi_ddiv>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f7fe fd2c 	bl	8000ba8 <__aeabi_d2f>
 8002150:	4603      	mov	r3, r0
 8002152:	61fb      	str	r3, [r7, #28]
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8002154:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	b21a      	sxth	r2, r3
 800215c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002160:	b21b      	sxth	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b21b      	sxth	r3, r3
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe f9dc 	bl	8000524 <__aeabi_i2d>
 800216c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002170:	f7fe fb6c 	bl	800084c <__aeabi_ddiv>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	f7fe fd14 	bl	8000ba8 <__aeabi_d2f>
 8002180:	4603      	mov	r3, r0
 8002182:	623b      	str	r3, [r7, #32]
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8002184:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	b21a      	sxth	r2, r3
 800218c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002190:	b21b      	sxth	r3, r3
 8002192:	4313      	orrs	r3, r2
 8002194:	b21b      	sxth	r3, r3
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe f9c4 	bl	8000524 <__aeabi_i2d>
 800219c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021a0:	f7fe fb54 	bl	800084c <__aeabi_ddiv>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	f7fe fcfc 	bl	8000ba8 <__aeabi_d2f>
 80021b0:	4603      	mov	r3, r0
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return xyz;
 80021b4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80021b8:	f107 0318 	add.w	r3, r7, #24
 80021bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80021c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ca:	ee06 0a10 	vmov	s12, r0
 80021ce:	ee06 1a90 	vmov	s13, r1
 80021d2:	ee07 2a10 	vmov	s14, r2
 80021d6:	ee07 3a90 	vmov	s15, r3
}
 80021da:	eeb0 0a46 	vmov.f32	s0, s12
 80021de:	eef0 0a66 	vmov.f32	s1, s13
 80021e2:	eeb0 1a47 	vmov.f32	s2, s14
 80021e6:	eef0 1a67 	vmov.f32	s3, s15
 80021ea:	374c      	adds	r7, #76	; 0x4c
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd90      	pop	{r4, r7, pc}
 80021f0:	3ff00000 	.word	0x3ff00000
 80021f4:	2000000a 	.word	0x2000000a
 80021f8:	20000004 	.word	0x20000004
 80021fc:	20000006 	.word	0x20000006
 8002200:	20000008 	.word	0x20000008
 8002204:	2000000c 	.word	0x2000000c

08002208 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 800220e:	201a      	movs	r0, #26
 8002210:	f7ff feb8 	bl	8001f84 <bno055_getVector>
 8002214:	eeb0 6a40 	vmov.f32	s12, s0
 8002218:	eef0 6a60 	vmov.f32	s13, s1
 800221c:	eeb0 7a41 	vmov.f32	s14, s2
 8002220:	eef0 7a61 	vmov.f32	s15, s3
 8002224:	ed87 6a04 	vstr	s12, [r7, #16]
 8002228:	edc7 6a05 	vstr	s13, [r7, #20]
 800222c:	ed87 7a06 	vstr	s14, [r7, #24]
 8002230:	edc7 7a07 	vstr	s15, [r7, #28]
 8002234:	6938      	ldr	r0, [r7, #16]
 8002236:	6979      	ldr	r1, [r7, #20]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	ee06 0a10 	vmov	s12, r0
 8002240:	ee06 1a90 	vmov	s13, r1
 8002244:	ee07 2a10 	vmov	s14, r2
 8002248:	ee07 3a90 	vmov	s15, r3
}
 800224c:	eeb0 0a46 	vmov.f32	s0, s12
 8002250:	eef0 0a66 	vmov.f32	s1, s13
 8002254:	eeb0 1a47 	vmov.f32	s2, s14
 8002258:	eef0 1a67 	vmov.f32	s3, s15
 800225c:	3720      	adds	r7, #32
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <bno055_assignI2C>:
#include "bno055.h"
#include "main.h"
extern I2C_HandleTypeDef hi2c3;
I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	_bno055_i2c_port = hi2c_device;
 800226c:	4a04      	ldr	r2, [pc, #16]	; (8002280 <bno055_assignI2C+0x1c>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6013      	str	r3, [r2, #0]
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000280 	.word	0x20000280

08002284 <bno055_delay>:

void bno055_delay(int time) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4618      	mov	r0, r3
 8002290:	f007 fa41 	bl	8009716 <osDelay>
#else
	HAL_Delay(time);
#endif
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	4603      	mov	r3, r0
 80022a4:	460a      	mov	r2, r1
 80022a6:	71fb      	strb	r3, [r7, #7]
 80022a8:	4613      	mov	r3, r2
 80022aa:	71bb      	strb	r3, [r7, #6]
	uint8_t txdata[2] = { reg, data };
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	733b      	strb	r3, [r7, #12]
 80022b0:	79bb      	ldrb	r3, [r7, #6]
 80022b2:	737b      	strb	r3, [r7, #13]
	uint8_t status;
	status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80022b4:	4b5a      	ldr	r3, [pc, #360]	; (8002420 <bno055_writeData+0x184>)
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	f107 020c 	add.w	r2, r7, #12
 80022bc:	230a      	movs	r3, #10
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2302      	movs	r3, #2
 80022c2:	2150      	movs	r1, #80	; 0x50
 80022c4:	f003 fb38 	bl	8005938 <HAL_I2C_Master_Transmit>
 80022c8:	4603      	mov	r3, r0
 80022ca:	75fb      	strb	r3, [r7, #23]
			txdata, sizeof(txdata), 10);
	if (status == HAL_OK) {
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 80a0 	beq.w	8002414 <bno055_writeData+0x178>
		return;
	}

	if (status == HAL_ERROR) {
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d103      	bne.n	80022e2 <bno055_writeData+0x46>
		printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80022da:	4852      	ldr	r0, [pc, #328]	; (8002424 <bno055_writeData+0x188>)
 80022dc:	f009 fa32 	bl	800b744 <puts>
 80022e0:	e012      	b.n	8002308 <bno055_writeData+0x6c>
	} else if (status == HAL_TIMEOUT) {
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d103      	bne.n	80022f0 <bno055_writeData+0x54>
		printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80022e8:	484f      	ldr	r0, [pc, #316]	; (8002428 <bno055_writeData+0x18c>)
 80022ea:	f009 fa2b 	bl	800b744 <puts>
 80022ee:	e00b      	b.n	8002308 <bno055_writeData+0x6c>
	} else if (status == HAL_BUSY) {
 80022f0:	7dfb      	ldrb	r3, [r7, #23]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d103      	bne.n	80022fe <bno055_writeData+0x62>
		printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80022f6:	484d      	ldr	r0, [pc, #308]	; (800242c <bno055_writeData+0x190>)
 80022f8:	f009 fa24 	bl	800b744 <puts>
 80022fc:	e004      	b.n	8002308 <bno055_writeData+0x6c>
	} else {
		printf("Unknown status data %d", status);
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
 8002300:	4619      	mov	r1, r3
 8002302:	484b      	ldr	r0, [pc, #300]	; (8002430 <bno055_writeData+0x194>)
 8002304:	f009 f9b8 	bl	800b678 <iprintf>
	}

	uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8002308:	4b45      	ldr	r3, [pc, #276]	; (8002420 <bno055_writeData+0x184>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f003 fe45 	bl	8005f9c <HAL_I2C_GetError>
 8002312:	6138      	str	r0, [r7, #16]
	if (error == HAL_I2C_ERROR_NONE) {
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d07e      	beq.n	8002418 <bno055_writeData+0x17c>
		return;
	} else if (error == HAL_I2C_ERROR_BERR) {
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d103      	bne.n	8002328 <bno055_writeData+0x8c>
		printf("HAL_I2C_ERROR_BERR\r\n");
 8002320:	4844      	ldr	r0, [pc, #272]	; (8002434 <bno055_writeData+0x198>)
 8002322:	f009 fa0f 	bl	800b744 <puts>
 8002326:	e021      	b.n	800236c <bno055_writeData+0xd0>
	} else if (error == HAL_I2C_ERROR_ARLO) {
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d103      	bne.n	8002336 <bno055_writeData+0x9a>
		printf("HAL_I2C_ERROR_ARLO\r\n");
 800232e:	4842      	ldr	r0, [pc, #264]	; (8002438 <bno055_writeData+0x19c>)
 8002330:	f009 fa08 	bl	800b744 <puts>
 8002334:	e01a      	b.n	800236c <bno055_writeData+0xd0>
	} else if (error == HAL_I2C_ERROR_AF) {
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	2b04      	cmp	r3, #4
 800233a:	d103      	bne.n	8002344 <bno055_writeData+0xa8>
		printf("HAL_I2C_ERROR_AF\r\n");
 800233c:	483f      	ldr	r0, [pc, #252]	; (800243c <bno055_writeData+0x1a0>)
 800233e:	f009 fa01 	bl	800b744 <puts>
 8002342:	e013      	b.n	800236c <bno055_writeData+0xd0>
	} else if (error == HAL_I2C_ERROR_OVR) {
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	2b08      	cmp	r3, #8
 8002348:	d103      	bne.n	8002352 <bno055_writeData+0xb6>
		printf("HAL_I2C_ERROR_OVR\r\n");
 800234a:	483d      	ldr	r0, [pc, #244]	; (8002440 <bno055_writeData+0x1a4>)
 800234c:	f009 f9fa 	bl	800b744 <puts>
 8002350:	e00c      	b.n	800236c <bno055_writeData+0xd0>
	} else if (error == HAL_I2C_ERROR_DMA) {
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2b10      	cmp	r3, #16
 8002356:	d103      	bne.n	8002360 <bno055_writeData+0xc4>
		printf("HAL_I2C_ERROR_DMA\r\n");
 8002358:	483a      	ldr	r0, [pc, #232]	; (8002444 <bno055_writeData+0x1a8>)
 800235a:	f009 f9f3 	bl	800b744 <puts>
 800235e:	e005      	b.n	800236c <bno055_writeData+0xd0>
	} else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	2b20      	cmp	r3, #32
 8002364:	d102      	bne.n	800236c <bno055_writeData+0xd0>
		printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8002366:	4838      	ldr	r0, [pc, #224]	; (8002448 <bno055_writeData+0x1ac>)
 8002368:	f009 f9ec 	bl	800b744 <puts>
	}

	HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 800236c:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <bno055_writeData+0x184>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f003 fe05 	bl	8005f80 <HAL_I2C_GetState>
 8002376:	4603      	mov	r3, r0
 8002378:	73fb      	strb	r3, [r7, #15]
	if (state == HAL_I2C_STATE_RESET) {
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d103      	bne.n	8002388 <bno055_writeData+0xec>
		printf("HAL_I2C_STATE_RESET\r\n");
 8002380:	4832      	ldr	r0, [pc, #200]	; (800244c <bno055_writeData+0x1b0>)
 8002382:	f009 f9df 	bl	800b744 <puts>
 8002386:	e048      	b.n	800241a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_READY) {
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	2b20      	cmp	r3, #32
 800238c:	d103      	bne.n	8002396 <bno055_writeData+0xfa>
		printf("HAL_I2C_STATE_RESET\r\n");
 800238e:	482f      	ldr	r0, [pc, #188]	; (800244c <bno055_writeData+0x1b0>)
 8002390:	f009 f9d8 	bl	800b744 <puts>
 8002394:	e041      	b.n	800241a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_BUSY) {
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	2b24      	cmp	r3, #36	; 0x24
 800239a:	d103      	bne.n	80023a4 <bno055_writeData+0x108>
		printf("HAL_I2C_STATE_BUSY\r\n");
 800239c:	482c      	ldr	r0, [pc, #176]	; (8002450 <bno055_writeData+0x1b4>)
 800239e:	f009 f9d1 	bl	800b744 <puts>
 80023a2:	e03a      	b.n	800241a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_BUSY_TX) {
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	2b21      	cmp	r3, #33	; 0x21
 80023a8:	d103      	bne.n	80023b2 <bno055_writeData+0x116>
		printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80023aa:	482a      	ldr	r0, [pc, #168]	; (8002454 <bno055_writeData+0x1b8>)
 80023ac:	f009 f9ca 	bl	800b744 <puts>
 80023b0:	e033      	b.n	800241a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_BUSY_RX) {
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	2b22      	cmp	r3, #34	; 0x22
 80023b6:	d103      	bne.n	80023c0 <bno055_writeData+0x124>
		printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80023b8:	4827      	ldr	r0, [pc, #156]	; (8002458 <bno055_writeData+0x1bc>)
 80023ba:	f009 f9c3 	bl	800b744 <puts>
 80023be:	e02c      	b.n	800241a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_LISTEN) {
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	2b28      	cmp	r3, #40	; 0x28
 80023c4:	d103      	bne.n	80023ce <bno055_writeData+0x132>
		printf("HAL_I2C_STATE_LISTEN\r\n");
 80023c6:	4825      	ldr	r0, [pc, #148]	; (800245c <bno055_writeData+0x1c0>)
 80023c8:	f009 f9bc 	bl	800b744 <puts>
 80023cc:	e025      	b.n	800241a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	2b29      	cmp	r3, #41	; 0x29
 80023d2:	d103      	bne.n	80023dc <bno055_writeData+0x140>
		printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80023d4:	4822      	ldr	r0, [pc, #136]	; (8002460 <bno055_writeData+0x1c4>)
 80023d6:	f009 f9b5 	bl	800b744 <puts>
 80023da:	e01e      	b.n	800241a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	2b2a      	cmp	r3, #42	; 0x2a
 80023e0:	d103      	bne.n	80023ea <bno055_writeData+0x14e>
		printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80023e2:	4820      	ldr	r0, [pc, #128]	; (8002464 <bno055_writeData+0x1c8>)
 80023e4:	f009 f9ae 	bl	800b744 <puts>
 80023e8:	e017      	b.n	800241a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_ABORT) {
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	2b60      	cmp	r3, #96	; 0x60
 80023ee:	d103      	bne.n	80023f8 <bno055_writeData+0x15c>
		printf("HAL_I2C_STATE_ABORT\r\n");
 80023f0:	481d      	ldr	r0, [pc, #116]	; (8002468 <bno055_writeData+0x1cc>)
 80023f2:	f009 f9a7 	bl	800b744 <puts>
 80023f6:	e010      	b.n	800241a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_TIMEOUT) {
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	2ba0      	cmp	r3, #160	; 0xa0
 80023fc:	d103      	bne.n	8002406 <bno055_writeData+0x16a>
		printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80023fe:	481b      	ldr	r0, [pc, #108]	; (800246c <bno055_writeData+0x1d0>)
 8002400:	f009 f9a0 	bl	800b744 <puts>
 8002404:	e009      	b.n	800241a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_ERROR) {
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	2be0      	cmp	r3, #224	; 0xe0
 800240a:	d106      	bne.n	800241a <bno055_writeData+0x17e>
		printf("HAL_I2C_STATE_ERROR\r\n");
 800240c:	4818      	ldr	r0, [pc, #96]	; (8002470 <bno055_writeData+0x1d4>)
 800240e:	f009 f999 	bl	800b744 <puts>
 8002412:	e002      	b.n	800241a <bno055_writeData+0x17e>
		return;
 8002414:	bf00      	nop
 8002416:	e000      	b.n	800241a <bno055_writeData+0x17e>
		return;
 8002418:	bf00      	nop
	}
	// while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
	// return;
}
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000280 	.word	0x20000280
 8002424:	0800e5ec 	.word	0x0800e5ec
 8002428:	0800e610 	.word	0x0800e610
 800242c:	0800e638 	.word	0x0800e638
 8002430:	0800e65c 	.word	0x0800e65c
 8002434:	0800e674 	.word	0x0800e674
 8002438:	0800e688 	.word	0x0800e688
 800243c:	0800e69c 	.word	0x0800e69c
 8002440:	0800e6b0 	.word	0x0800e6b0
 8002444:	0800e6c4 	.word	0x0800e6c4
 8002448:	0800e6d8 	.word	0x0800e6d8
 800244c:	0800e6f0 	.word	0x0800e6f0
 8002450:	0800e708 	.word	0x0800e708
 8002454:	0800e71c 	.word	0x0800e71c
 8002458:	0800e734 	.word	0x0800e734
 800245c:	0800e74c 	.word	0x0800e74c
 8002460:	0800e764 	.word	0x0800e764
 8002464:	0800e784 	.word	0x0800e784
 8002468:	0800e7a4 	.word	0x0800e7a4
 800246c:	0800e7bc 	.word	0x0800e7bc
 8002470:	0800e7d4 	.word	0x0800e7d4

08002474 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af02      	add	r7, sp, #8
 800247a:	4603      	mov	r3, r0
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	71fb      	strb	r3, [r7, #7]
 8002480:	4613      	mov	r3, r2
 8002482:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <bno055_readData+0x40>)
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	1dfa      	adds	r2, r7, #7
 800248a:	2364      	movs	r3, #100	; 0x64
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2301      	movs	r3, #1
 8002490:	2150      	movs	r1, #80	; 0x50
 8002492:	f003 fa51 	bl	8005938 <HAL_I2C_Master_Transmit>
			100);
	HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8002496:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <bno055_readData+0x40>)
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	79bb      	ldrb	r3, [r7, #6]
 800249c:	b29b      	uxth	r3, r3
 800249e:	2264      	movs	r2, #100	; 0x64
 80024a0:	9200      	str	r2, [sp, #0]
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	2150      	movs	r1, #80	; 0x50
 80024a6:	f003 fb45 	bl	8005b34 <HAL_I2C_Master_Receive>
			100);
	// HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
	// I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000280 	.word	0x20000280

080024b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80024c8:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <vApplicationGetIdleTaskMemory+0x30>)
 80024ce:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2280      	movs	r2, #128	; 0x80
 80024d4:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000450 	.word	0x20000450
 80024e8:	200004f0 	.word	0x200004f0

080024ec <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80024ec:	b5b0      	push	{r4, r5, r7, lr}
 80024ee:	b0c0      	sub	sp, #256	; 0x100
 80024f0:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of controlTask */
	osThreadDef(controlTask, StartControlTask, osPriorityNormal, 0, 128);
 80024f2:	4b57      	ldr	r3, [pc, #348]	; (8002650 <MX_FREERTOS_Init+0x164>)
 80024f4:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 80024f8:	461d      	mov	r5, r3
 80024fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002502:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8002506:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f007 f8b6 	bl	800967e <osThreadCreate>
 8002512:	4603      	mov	r3, r0
 8002514:	4a4f      	ldr	r2, [pc, #316]	; (8002654 <MX_FREERTOS_Init+0x168>)
 8002516:	6013      	str	r3, [r2, #0]

	/* definition and creation of barometerTask */
	osThreadDef(barometerTask, startBarometerTask, osPriorityIdle, 0, 128);
 8002518:	4b4f      	ldr	r3, [pc, #316]	; (8002658 <MX_FREERTOS_Init+0x16c>)
 800251a:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800251e:	461d      	mov	r5, r3
 8002520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002524:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002528:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	barometerTaskHandle = osThreadCreate(osThread(barometerTask), NULL);
 800252c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f007 f8a3 	bl	800967e <osThreadCreate>
 8002538:	4603      	mov	r3, r0
 800253a:	4a48      	ldr	r2, [pc, #288]	; (800265c <MX_FREERTOS_Init+0x170>)
 800253c:	6013      	str	r3, [r2, #0]

	/* definition and creation of heartbeatTask */
	osThreadDef(heartbeatTask, starHeartbeatTask, osPriorityIdle, 0, 128);
 800253e:	4b48      	ldr	r3, [pc, #288]	; (8002660 <MX_FREERTOS_Init+0x174>)
 8002540:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8002544:	461d      	mov	r5, r3
 8002546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800254a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800254e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	heartbeatTaskHandle = osThreadCreate(osThread(heartbeatTask), NULL);
 8002552:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002556:	2100      	movs	r1, #0
 8002558:	4618      	mov	r0, r3
 800255a:	f007 f890 	bl	800967e <osThreadCreate>
 800255e:	4603      	mov	r3, r0
 8002560:	4a40      	ldr	r2, [pc, #256]	; (8002664 <MX_FREERTOS_Init+0x178>)
 8002562:	6013      	str	r3, [r2, #0]

	/* definition and creation of pwmTask */
	osThreadDef(pwmTask, startPwmTask, osPriorityIdle, 0, 128);
 8002564:	4b40      	ldr	r3, [pc, #256]	; (8002668 <MX_FREERTOS_Init+0x17c>)
 8002566:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800256a:	461d      	mov	r5, r3
 800256c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800256e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002570:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002574:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	pwmTaskHandle = osThreadCreate(osThread(pwmTask), NULL);
 8002578:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f007 f87d 	bl	800967e <osThreadCreate>
 8002584:	4603      	mov	r3, r0
 8002586:	4a39      	ldr	r2, [pc, #228]	; (800266c <MX_FREERTOS_Init+0x180>)
 8002588:	6013      	str	r3, [r2, #0]

	/* definition and creation of rcTask */
	osThreadDef(rcTask, StartRCTask, osPriorityIdle, 0, 128);
 800258a:	4b39      	ldr	r3, [pc, #228]	; (8002670 <MX_FREERTOS_Init+0x184>)
 800258c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8002590:	461d      	mov	r5, r3
 8002592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002596:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800259a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	rcTaskHandle = osThreadCreate(osThread(rcTask), NULL);
 800259e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f007 f86a 	bl	800967e <osThreadCreate>
 80025aa:	4603      	mov	r3, r0
 80025ac:	4a31      	ldr	r2, [pc, #196]	; (8002674 <MX_FREERTOS_Init+0x188>)
 80025ae:	6013      	str	r3, [r2, #0]

	/* definition and creation of imuTask */
	osThreadDef(imuTask, StartImuTask, osPriorityIdle, 0, 128);
 80025b0:	4b31      	ldr	r3, [pc, #196]	; (8002678 <MX_FREERTOS_Init+0x18c>)
 80025b2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80025b6:	461d      	mov	r5, r3
 80025b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	imuTaskHandle = osThreadCreate(osThread(imuTask), NULL);
 80025c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f007 f857 	bl	800967e <osThreadCreate>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4a2a      	ldr	r2, [pc, #168]	; (800267c <MX_FREERTOS_Init+0x190>)
 80025d4:	6013      	str	r3, [r2, #0]

	/* definition and creation of sendDataTask */
	osThreadDef(sendDataTask, StartSendDataTask, osPriorityIdle, 0, 128);
 80025d6:	4b2a      	ldr	r3, [pc, #168]	; (8002680 <MX_FREERTOS_Init+0x194>)
 80025d8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80025dc:	461d      	mov	r5, r3
 80025de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	sendDataTaskHandle = osThreadCreate(osThread(sendDataTask), NULL);
 80025ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025ee:	2100      	movs	r1, #0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f007 f844 	bl	800967e <osThreadCreate>
 80025f6:	4603      	mov	r3, r0
 80025f8:	4a22      	ldr	r2, [pc, #136]	; (8002684 <MX_FREERTOS_Init+0x198>)
 80025fa:	6013      	str	r3, [r2, #0]

	/* definition and creation of batteryTask */
	osThreadDef(batteryTask, StartBatteryTask, osPriorityIdle, 0, 128);
 80025fc:	4b22      	ldr	r3, [pc, #136]	; (8002688 <MX_FREERTOS_Init+0x19c>)
 80025fe:	f107 0420 	add.w	r4, r7, #32
 8002602:	461d      	mov	r5, r3
 8002604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800260c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	batteryTaskHandle = osThreadCreate(osThread(batteryTask), NULL);
 8002610:	f107 0320 	add.w	r3, r7, #32
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f007 f831 	bl	800967e <osThreadCreate>
 800261c:	4603      	mov	r3, r0
 800261e:	4a1b      	ldr	r2, [pc, #108]	; (800268c <MX_FREERTOS_Init+0x1a0>)
 8002620:	6013      	str	r3, [r2, #0]

	/* definition and creation of gpsTask */
	osThreadDef(gpsTask, StartGPSTask, osPriorityIdle, 0, 128);
 8002622:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <MX_FREERTOS_Init+0x1a4>)
 8002624:	1d3c      	adds	r4, r7, #4
 8002626:	461d      	mov	r5, r3
 8002628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800262a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800262c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002630:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	gpsTaskHandle = osThreadCreate(osThread(gpsTask), NULL);
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f007 f820 	bl	800967e <osThreadCreate>
 800263e:	4603      	mov	r3, r0
 8002640:	4a14      	ldr	r2, [pc, #80]	; (8002694 <MX_FREERTOS_Init+0x1a8>)
 8002642:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 8002644:	bf00      	nop
 8002646:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800264a:	46bd      	mov	sp, r7
 800264c:	bdb0      	pop	{r4, r5, r7, pc}
 800264e:	bf00      	nop
 8002650:	0800e7f8 	.word	0x0800e7f8
 8002654:	2000042c 	.word	0x2000042c
 8002658:	0800e824 	.word	0x0800e824
 800265c:	20000430 	.word	0x20000430
 8002660:	0800e850 	.word	0x0800e850
 8002664:	20000434 	.word	0x20000434
 8002668:	0800e874 	.word	0x0800e874
 800266c:	20000438 	.word	0x20000438
 8002670:	0800e898 	.word	0x0800e898
 8002674:	2000043c 	.word	0x2000043c
 8002678:	0800e8bc 	.word	0x0800e8bc
 800267c:	20000440 	.word	0x20000440
 8002680:	0800e8e8 	.word	0x0800e8e8
 8002684:	20000444 	.word	0x20000444
 8002688:	0800e910 	.word	0x0800e910
 800268c:	20000448 	.word	0x20000448
 8002690:	0800e934 	.word	0x0800e934
 8002694:	2000044c 	.word	0x2000044c

08002698 <StartControlTask>:
 * @brief  Function implementing the controlTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControlTask */
void StartControlTask(void const *argument) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartControlTask */
	/* Infinite loop */
	for (;;) {
		osDelay(SAMPLE_TIME_CONTROL);
 80026a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026a4:	f007 f837 	bl	8009716 <osDelay>
 80026a8:	e7fa      	b.n	80026a0 <StartControlTask+0x8>

080026aa <startBarometerTask>:
 * @brief Function implementing the barometerTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startBarometerTask */
void startBarometerTask(void const *argument) {
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startBarometerTask */
	/* Infinite loop */
	for (;;) {
 80026b2:	e7fe      	b.n	80026b2 <startBarometerTask+0x8>

080026b4 <starHeartbeatTask>:
 * @brief Function implementing the heartbeatTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_starHeartbeatTask */
void starHeartbeatTask(void const *argument) {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
		 gcvt(newAltitude2, 6, ptr + 8);
		 printf("Hello World = ");
		 printf(ptr);
		 printf("\n");
		 */
		osDelay(1000);
 80026bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026c0:	f007 f829 	bl	8009716 <osDelay>
 80026c4:	e7fa      	b.n	80026bc <starHeartbeatTask+0x8>

080026c6 <startPwmTask>:
 * @brief Function implementing the pwmTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startPwmTask */
void startPwmTask(void const *argument) {
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;) {

		//set_pwm(PID_ROLL, PID_PITCH, PID_YAW, THROTTLE, battery);

		osDelay(SAMPLE_TIME_ESC);
 80026ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026d2:	f007 f820 	bl	8009716 <osDelay>
 80026d6:	e7fa      	b.n	80026ce <startPwmTask+0x8>

080026d8 <StartRCTask>:
 * @brief Function implementing the rcTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRCTask */
void StartRCTask(void const *argument) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartRCTask */
	/* Infinite loop */
	for (;;) {
		osDelay(SAMPLE_TIME_PWM_INPUT);
 80026e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026e4:	f007 f817 	bl	8009716 <osDelay>
 80026e8:	e7fa      	b.n	80026e0 <StartRCTask+0x8>
	...

080026ec <StartImuTask>:
 * @brief Function implementing the imuTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartImuTask */
void StartImuTask(void const *argument) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartImuTask */

	bno055_assignI2C(&hi2c3);
 80026f4:	4842      	ldr	r0, [pc, #264]	; (8002800 <StartImuTask+0x114>)
 80026f6:	f7ff fdb5 	bl	8002264 <bno055_assignI2C>
	bno055_setup();
 80026fa:	f7ff fc1b 	bl	8001f34 <bno055_setup>
	bno055_setOperationModeNDOF();
 80026fe:	f7ff fc06 	bl	8001f0e <bno055_setOperationModeNDOF>

	PIDController_Init(&pitch_pid_t); //pid sıfırlama
 8002702:	4840      	ldr	r0, [pc, #256]	; (8002804 <StartImuTask+0x118>)
 8002704:	f7ff fa7a 	bl	8001bfc <PIDController_Init>
	PIDController_Init(&roll_pid_t);
 8002708:	483f      	ldr	r0, [pc, #252]	; (8002808 <StartImuTask+0x11c>)
 800270a:	f7ff fa77 	bl	8001bfc <PIDController_Init>

	//pitch ve roll pid parametreleri x konfigurasyonunda aynı olabilir
	pitch_pid_t.Kp = PITCH_ROLL_KP;
 800270e:	4b3d      	ldr	r3, [pc, #244]	; (8002804 <StartImuTask+0x118>)
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
	pitch_pid_t.Ki = PITCH_ROLL_KI;
 8002716:	4b3b      	ldr	r3, [pc, #236]	; (8002804 <StartImuTask+0x118>)
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	605a      	str	r2, [r3, #4]
	pitch_pid_t.Kd = PITCH_ROLL_KD;
 800271e:	4b39      	ldr	r3, [pc, #228]	; (8002804 <StartImuTask+0x118>)
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	609a      	str	r2, [r3, #8]

	roll_pid_t.Kp = PITCH_ROLL_KP;
 8002726:	4b38      	ldr	r3, [pc, #224]	; (8002808 <StartImuTask+0x11c>)
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
	roll_pid_t.Ki = PITCH_ROLL_KI;
 800272e:	4b36      	ldr	r3, [pc, #216]	; (8002808 <StartImuTask+0x11c>)
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	605a      	str	r2, [r3, #4]
	roll_pid_t.Kd = PITCH_ROLL_KD;
 8002736:	4b34      	ldr	r3, [pc, #208]	; (8002808 <StartImuTask+0x11c>)
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	609a      	str	r2, [r3, #8]

	for (;;) {

		bno055_vector_t imu = bno055_getVectorEuler();
 800273e:	f7ff fd63 	bl	8002208 <bno055_getVectorEuler>
 8002742:	eeb0 6a40 	vmov.f32	s12, s0
 8002746:	eef0 6a60 	vmov.f32	s13, s1
 800274a:	eeb0 7a41 	vmov.f32	s14, s2
 800274e:	eef0 7a61 	vmov.f32	s15, s3
 8002752:	ed87 6a02 	vstr	s12, [r7, #8]
 8002756:	edc7 6a03 	vstr	s13, [r7, #12]
 800275a:	ed87 7a04 	vstr	s14, [r7, #16]
 800275e:	edc7 7a05 	vstr	s15, [r7, #20]

		roll_pid_t.T = deltaT;
 8002762:	4b2a      	ldr	r3, [pc, #168]	; (800280c <StartImuTask+0x120>)
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276e:	4b26      	ldr	r3, [pc, #152]	; (8002808 <StartImuTask+0x11c>)
 8002770:	edc3 7a07 	vstr	s15, [r3, #28]
		pitch_pid_t.T = deltaT;
 8002774:	4b25      	ldr	r3, [pc, #148]	; (800280c <StartImuTask+0x120>)
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	ee07 3a90 	vmov	s15, r3
 800277c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002780:	4b20      	ldr	r3, [pc, #128]	; (8002804 <StartImuTask+0x118>)
 8002782:	edc3 7a07 	vstr	s15, [r3, #28]

		__HAL_TIM_SET_COUNTER(&htim5, 0);
 8002786:	4b22      	ldr	r3, [pc, #136]	; (8002810 <StartImuTask+0x124>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2200      	movs	r2, #0
 800278c:	625a      	str	r2, [r3, #36]	; 0x24


		if (drive_mode == AUTONOMOUS_MODE) {
 800278e:	4b21      	ldr	r3, [pc, #132]	; (8002814 <StartImuTask+0x128>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d029      	beq.n	80027ea <StartImuTask+0xfe>
		*/}


		else
		{
			PID_PITCH = PIDController_Update(&pitch_pid_t, pwm_ch2.dutyCycle,
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <StartImuTask+0x12c>)
 8002798:	edd3 7a02 	vldr	s15, [r3, #8]
 800279c:	ed97 7a03 	vldr	s14, [r7, #12]
 80027a0:	eef0 0a47 	vmov.f32	s1, s14
 80027a4:	eeb0 0a67 	vmov.f32	s0, s15
 80027a8:	4816      	ldr	r0, [pc, #88]	; (8002804 <StartImuTask+0x118>)
 80027aa:	f7ff fa45 	bl	8001c38 <PIDController_Update>
 80027ae:	eef0 7a40 	vmov.f32	s15, s0
 80027b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027b6:	ee17 3a90 	vmov	r3, s15
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	4b17      	ldr	r3, [pc, #92]	; (800281c <StartImuTask+0x130>)
 80027be:	801a      	strh	r2, [r3, #0]
					imu.x);	//pitch +180 -180 aralığında
			PID_ROLL = PIDController_Update(&roll_pid_t, pwm_ch3.dutyCycle,
 80027c0:	4b17      	ldr	r3, [pc, #92]	; (8002820 <StartImuTask+0x134>)
 80027c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80027c6:	ed97 7a04 	vldr	s14, [r7, #16]
 80027ca:	eef0 0a47 	vmov.f32	s1, s14
 80027ce:	eeb0 0a67 	vmov.f32	s0, s15
 80027d2:	480d      	ldr	r0, [pc, #52]	; (8002808 <StartImuTask+0x11c>)
 80027d4:	f7ff fa30 	bl	8001c38 <PIDController_Update>
 80027d8:	eef0 7a40 	vmov.f32	s15, s0
 80027dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027e0:	ee17 3a90 	vmov	r3, s15
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <StartImuTask+0x138>)
 80027e8:	801a      	strh	r2, [r3, #0]
					imu.y);	//roll +90 -90 aralığında
		}


		deltaT = __HAL_TIM_GET_COUNTER(&htim5);
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <StartImuTask+0x124>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <StartImuTask+0x120>)
 80027f4:	801a      	strh	r2, [r3, #0]
		osDelay(SAMPLE_TIME_IMU);
 80027f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027fa:	f006 ff8c 	bl	8009716 <osDelay>
	for (;;) {
 80027fe:	e79e      	b.n	800273e <StartImuTask+0x52>
 8002800:	20000744 	.word	0x20000744
 8002804:	20000284 	.word	0x20000284
 8002808:	200002b8 	.word	0x200002b8
 800280c:	200002ec 	.word	0x200002ec
 8002810:	2000094c 	.word	0x2000094c
 8002814:	200002fc 	.word	0x200002fc
 8002818:	200007b0 	.word	0x200007b0
 800281c:	200002fa 	.word	0x200002fa
 8002820:	200007bc 	.word	0x200007bc
 8002824:	200002f8 	.word	0x200002f8

08002828 <StartSendDataTask>:
 * @brief Function implementing the sendDataTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSendDataTask */
void StartSendDataTask(void const *argument) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartSendDataTask */
	/* Infinite loop */
	for (;;) {
		osDelay(SAMPLE_TIME_TX);
 8002830:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002834:	f006 ff6f 	bl	8009716 <osDelay>
 8002838:	e7fa      	b.n	8002830 <StartSendDataTask+0x8>
 800283a:	0000      	movs	r0, r0
 800283c:	0000      	movs	r0, r0
	...

08002840 <StartBatteryTask>:
 * @brief Function implementing the batteryTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBatteryTask */
void StartBatteryTask(void const *argument) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartBatteryTask */
	BatteryInit();
 8002848:	f000 fb30 	bl	8002eac <BatteryInit>

	/* Infinite loop */
	for (;;) {
		battery.voltage = getBatteryVoltage();
 800284c:	f000 fb38 	bl	8002ec0 <getBatteryVoltage>
 8002850:	eef0 7a40 	vmov.f32	s15, s0
 8002854:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <StartBatteryTask+0xa8>)
 8002856:	edc3 7a00 	vstr	s15, [r3]

		if (battery.voltage < FAILSAFE_VOLTAGE
 800285a:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <StartBatteryTask+0xa8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7fd fe72 	bl	8000548 <__aeabi_f2d>
 8002864:	a31c      	add	r3, pc, #112	; (adr r3, 80028d8 <StartBatteryTask+0x98>)
 8002866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286a:	f7fe f937 	bl	8000adc <__aeabi_dcmplt>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d010      	beq.n	8002896 <StartBatteryTask+0x56>
				&& battery.voltage >= DEAD_VOLTAGE) {
 8002874:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <StartBatteryTask+0xa8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7fd fe65 	bl	8000548 <__aeabi_f2d>
 800287e:	a318      	add	r3, pc, #96	; (adr r3, 80028e0 <StartBatteryTask+0xa0>)
 8002880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002884:	f7fe f93e 	bl	8000b04 <__aeabi_dcmpge>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <StartBatteryTask+0x56>
			battery.isBatteryLow = true;
 800288e:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <StartBatteryTask+0xa8>)
 8002890:	2201      	movs	r2, #1
 8002892:	711a      	strb	r2, [r3, #4]
 8002894:	e019      	b.n	80028ca <StartBatteryTask+0x8a>

		} else if (battery.voltage < DEAD_VOLTAGE) {
 8002896:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <StartBatteryTask+0xa8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fd fe54 	bl	8000548 <__aeabi_f2d>
 80028a0:	a30f      	add	r3, pc, #60	; (adr r3, 80028e0 <StartBatteryTask+0xa0>)
 80028a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a6:	f7fe f919 	bl	8000adc <__aeabi_dcmplt>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d006      	beq.n	80028be <StartBatteryTask+0x7e>
			battery.isBatteryDead = true;
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <StartBatteryTask+0xa8>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	715a      	strb	r2, [r3, #5]
			battery.isBatteryLow = false;
 80028b6:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <StartBatteryTask+0xa8>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	711a      	strb	r2, [r3, #4]
 80028bc:	e005      	b.n	80028ca <StartBatteryTask+0x8a>
		} else {
			battery.isBatteryDead = false;
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <StartBatteryTask+0xa8>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	715a      	strb	r2, [r3, #5]
			battery.isBatteryLow = false;
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <StartBatteryTask+0xa8>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	711a      	strb	r2, [r3, #4]
		}

		osDelay(SAMPLE_TIME_POWER_MODULE);
 80028ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80028ce:	f006 ff22 	bl	8009716 <osDelay>
		battery.voltage = getBatteryVoltage();
 80028d2:	e7bb      	b.n	800284c <StartBatteryTask+0xc>
 80028d4:	f3af 8000 	nop.w
 80028d8:	66666666 	.word	0x66666666
 80028dc:	402e6666 	.word	0x402e6666
 80028e0:	66666666 	.word	0x66666666
 80028e4:	402c6666 	.word	0x402c6666
 80028e8:	200002f0 	.word	0x200002f0

080028ec <StartGPSTask>:
 * @brief Function implementing the gpsTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGPSTask */
void StartGPSTask(void const *argument) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGPSTask */
	/* Infinite loop */
	for (;;) {
		if (Wait_for("GGA") == 1) {
 80028f4:	4836      	ldr	r0, [pc, #216]	; (80029d0 <StartGPSTask+0xe4>)
 80028f6:	f001 fcf9 	bl	80042ec <Wait_for>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d115      	bne.n	800292c <StartGPSTask+0x40>

			VCCTimeout = 5000; // Reset the VCC Timeout indicating the GGA is being received
 8002900:	4b34      	ldr	r3, [pc, #208]	; (80029d4 <StartGPSTask+0xe8>)
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	601a      	str	r2, [r3, #0]

			Copy_upto("*", GGA);
 8002908:	4933      	ldr	r1, [pc, #204]	; (80029d8 <StartGPSTask+0xec>)
 800290a:	4834      	ldr	r0, [pc, #208]	; (80029dc <StartGPSTask+0xf0>)
 800290c:	f001 fc6e 	bl	80041ec <Copy_upto>
			if (decodeGGA(GGA, &gpsData.ggastruct) == 0)
 8002910:	4933      	ldr	r1, [pc, #204]	; (80029e0 <StartGPSTask+0xf4>)
 8002912:	4831      	ldr	r0, [pc, #196]	; (80029d8 <StartGPSTask+0xec>)
 8002914:	f7fe fb18 	bl	8000f48 <decodeGGA>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d103      	bne.n	8002926 <StartGPSTask+0x3a>
				flagGGA = 2;  // 2 indicates the data is valid
 800291e:	4b31      	ldr	r3, [pc, #196]	; (80029e4 <StartGPSTask+0xf8>)
 8002920:	2202      	movs	r2, #2
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e002      	b.n	800292c <StartGPSTask+0x40>
			else
				flagGGA = 1;  // 1 indicates the data is invalid
 8002926:	4b2f      	ldr	r3, [pc, #188]	; (80029e4 <StartGPSTask+0xf8>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]
		}

		if (Wait_for("RMC") == 1) {
 800292c:	482e      	ldr	r0, [pc, #184]	; (80029e8 <StartGPSTask+0xfc>)
 800292e:	f001 fcdd 	bl	80042ec <Wait_for>
 8002932:	4603      	mov	r3, r0
 8002934:	2b01      	cmp	r3, #1
 8002936:	d115      	bne.n	8002964 <StartGPSTask+0x78>

			VCCTimeout = 5000; // Reset the VCC Timeout indicating the RMC is being received
 8002938:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <StartGPSTask+0xe8>)
 800293a:	f241 3288 	movw	r2, #5000	; 0x1388
 800293e:	601a      	str	r2, [r3, #0]

			Copy_upto("*", RMC);
 8002940:	492a      	ldr	r1, [pc, #168]	; (80029ec <StartGPSTask+0x100>)
 8002942:	4826      	ldr	r0, [pc, #152]	; (80029dc <StartGPSTask+0xf0>)
 8002944:	f001 fc52 	bl	80041ec <Copy_upto>
			if (decodeRMC(RMC, &gpsData.rmcstruct) == 0)
 8002948:	4929      	ldr	r1, [pc, #164]	; (80029f0 <StartGPSTask+0x104>)
 800294a:	4828      	ldr	r0, [pc, #160]	; (80029ec <StartGPSTask+0x100>)
 800294c:	f7fe ff18 	bl	8001780 <decodeRMC>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <StartGPSTask+0x72>
				flagRMC = 2;  // 2 indicates the data is valid
 8002956:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <StartGPSTask+0x108>)
 8002958:	2202      	movs	r2, #2
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	e002      	b.n	8002964 <StartGPSTask+0x78>
			else
				flagRMC = 1;  // 1 indicates the data is invalid
 800295e:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <StartGPSTask+0x108>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]
		}

		if ((flagGGA == 2) | (flagRMC == 2)) {
 8002964:	4b1f      	ldr	r3, [pc, #124]	; (80029e4 <StartGPSTask+0xf8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b02      	cmp	r3, #2
 800296a:	bf0c      	ite	eq
 800296c:	2301      	moveq	r3, #1
 800296e:	2300      	movne	r3, #0
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <StartGPSTask+0x108>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b02      	cmp	r3, #2
 8002978:	bf0c      	ite	eq
 800297a:	2301      	moveq	r3, #1
 800297c:	2300      	movne	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	4313      	orrs	r3, r2
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d105      	bne.n	8002994 <StartGPSTask+0xa8>
		}

		else if ((flagGGA == 1) | (flagRMC == 1)) {
 8002988:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <StartGPSTask+0xf8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <StartGPSTask+0x108>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b01      	cmp	r3, #1
			// Instead of clearing the display, it's better if we print spaces.
			// This will avoid the "refreshing" part
		}

		if (VCCTimeout <= 0) {
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <StartGPSTask+0xe8>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	dc0a      	bgt.n	80029b2 <StartGPSTask+0xc6>
			VCCTimeout = 5000;  // Reset the timeout
 800299c:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <StartGPSTask+0xe8>)
 800299e:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a2:	601a      	str	r2, [r3, #0]

			//reset flags
			flagGGA = flagRMC = 0;
 80029a4:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <StartGPSTask+0x108>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <StartGPSTask+0x108>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a0d      	ldr	r2, [pc, #52]	; (80029e4 <StartGPSTask+0xf8>)
 80029b0:	6013      	str	r3, [r2, #0]

			// You are here means the VCC is less, or maybe there is some connection issue
			// Check the VCC, also you can try connecting to the external 5V
		}
		printf("Long : %f\n",gpsData.ggastruct.lcation.longitude);
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <StartGPSTask+0xf4>)
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd fdc6 	bl	8000548 <__aeabi_f2d>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	480d      	ldr	r0, [pc, #52]	; (80029f8 <StartGPSTask+0x10c>)
 80029c2:	f008 fe59 	bl	800b678 <iprintf>
		osDelay(SAMPLE_TIME_GPS);
 80029c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029ca:	f006 fea4 	bl	8009716 <osDelay>
		if (Wait_for("GGA") == 1) {
 80029ce:	e791      	b.n	80028f4 <StartGPSTask+0x8>
 80029d0:	0800e950 	.word	0x0800e950
 80029d4:	20000010 	.word	0x20000010
 80029d8:	20000300 	.word	0x20000300
 80029dc:	0800e954 	.word	0x0800e954
 80029e0:	200003c8 	.word	0x200003c8
 80029e4:	20000424 	.word	0x20000424
 80029e8:	0800e958 	.word	0x0800e958
 80029ec:	20000364 	.word	0x20000364
 80029f0:	2000040c 	.word	0x2000040c
 80029f4:	20000428 	.word	0x20000428
 80029f8:	0800e95c 	.word	0x0800e95c

080029fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08c      	sub	sp, #48	; 0x30
 8002a00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a02:	f107 031c 	add.w	r3, r7, #28
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	60da      	str	r2, [r3, #12]
 8002a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	4b35      	ldr	r3, [pc, #212]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	4a34      	ldr	r2, [pc, #208]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002a1c:	f043 0310 	orr.w	r3, r3, #16
 8002a20:	6313      	str	r3, [r2, #48]	; 0x30
 8002a22:	4b32      	ldr	r3, [pc, #200]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	61bb      	str	r3, [r7, #24]
 8002a2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	4b2e      	ldr	r3, [pc, #184]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	4a2d      	ldr	r2, [pc, #180]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3e:	4b2b      	ldr	r3, [pc, #172]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	4b27      	ldr	r3, [pc, #156]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a26      	ldr	r2, [pc, #152]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b24      	ldr	r3, [pc, #144]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	4a1f      	ldr	r2, [pc, #124]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6313      	str	r3, [r2, #48]	; 0x30
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	4b19      	ldr	r3, [pc, #100]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	4a18      	ldr	r2, [pc, #96]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002a8c:	f043 0302 	orr.w	r3, r3, #2
 8002a90:	6313      	str	r3, [r2, #48]	; 0x30
 8002a92:	4b16      	ldr	r3, [pc, #88]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	607b      	str	r3, [r7, #4]
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	4a11      	ldr	r2, [pc, #68]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002aa8:	f043 0308 	orr.w	r3, r3, #8
 8002aac:	6313      	str	r3, [r2, #48]	; 0x30
 8002aae:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <MX_GPIO_Init+0xf0>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	607b      	str	r3, [r7, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led_2_Pin|led_1_Pin, GPIO_PIN_RESET);
 8002aba:	2200      	movs	r2, #0
 8002abc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002ac0:	480b      	ldr	r0, [pc, #44]	; (8002af0 <MX_GPIO_Init+0xf4>)
 8002ac2:	f002 fddb 	bl	800567c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = led_2_Pin|led_1_Pin;
 8002ac6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002acc:	2301      	movs	r3, #1
 8002ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ad8:	f107 031c 	add.w	r3, r7, #28
 8002adc:	4619      	mov	r1, r3
 8002ade:	4804      	ldr	r0, [pc, #16]	; (8002af0 <MX_GPIO_Init+0xf4>)
 8002ae0:	f002 fc30 	bl	8005344 <HAL_GPIO_Init>

}
 8002ae4:	bf00      	nop
 8002ae6:	3730      	adds	r7, #48	; 0x30
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40020c00 	.word	0x40020c00

08002af4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002afa:	4a13      	ldr	r2, [pc, #76]	; (8002b48 <MX_I2C1_Init+0x54>)
 8002afc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002afe:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002b00:	4a12      	ldr	r2, [pc, #72]	; (8002b4c <MX_I2C1_Init+0x58>)
 8002b02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b04:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b24:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b2a:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b30:	4804      	ldr	r0, [pc, #16]	; (8002b44 <MX_I2C1_Init+0x50>)
 8002b32:	f002 fdbd 	bl	80056b0 <HAL_I2C_Init>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b3c:	f000 f9b0 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	200006f0 	.word	0x200006f0
 8002b48:	40005400 	.word	0x40005400
 8002b4c:	000186a0 	.word	0x000186a0

08002b50 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <MX_I2C3_Init+0x50>)
 8002b56:	4a13      	ldr	r2, [pc, #76]	; (8002ba4 <MX_I2C3_Init+0x54>)
 8002b58:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002b5a:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <MX_I2C3_Init+0x50>)
 8002b5c:	4a12      	ldr	r2, [pc, #72]	; (8002ba8 <MX_I2C3_Init+0x58>)
 8002b5e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b60:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <MX_I2C3_Init+0x50>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <MX_I2C3_Init+0x50>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <MX_I2C3_Init+0x50>)
 8002b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b72:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b74:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <MX_I2C3_Init+0x50>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002b7a:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <MX_I2C3_Init+0x50>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <MX_I2C3_Init+0x50>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b86:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <MX_I2C3_Init+0x50>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002b8c:	4804      	ldr	r0, [pc, #16]	; (8002ba0 <MX_I2C3_Init+0x50>)
 8002b8e:	f002 fd8f 	bl	80056b0 <HAL_I2C_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002b98:	f000 f982 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000744 	.word	0x20000744
 8002ba4:	40005c00 	.word	0x40005c00
 8002ba8:	00061a80 	.word	0x00061a80

08002bac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08c      	sub	sp, #48	; 0x30
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	f107 031c 	add.w	r3, r7, #28
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a42      	ldr	r2, [pc, #264]	; (8002cd4 <HAL_I2C_MspInit+0x128>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d12c      	bne.n	8002c28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <HAL_I2C_MspInit+0x12c>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a40      	ldr	r2, [pc, #256]	; (8002cd8 <HAL_I2C_MspInit+0x12c>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b3e      	ldr	r3, [pc, #248]	; (8002cd8 <HAL_I2C_MspInit+0x12c>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = barometre_scl_Pin|barometre_sda_Pin;
 8002bea:	23c0      	movs	r3, #192	; 0xc0
 8002bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bee:	2312      	movs	r3, #18
 8002bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bfe:	f107 031c 	add.w	r3, r7, #28
 8002c02:	4619      	mov	r1, r3
 8002c04:	4835      	ldr	r0, [pc, #212]	; (8002cdc <HAL_I2C_MspInit+0x130>)
 8002c06:	f002 fb9d 	bl	8005344 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	4b32      	ldr	r3, [pc, #200]	; (8002cd8 <HAL_I2C_MspInit+0x12c>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	4a31      	ldr	r2, [pc, #196]	; (8002cd8 <HAL_I2C_MspInit+0x12c>)
 8002c14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c18:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1a:	4b2f      	ldr	r3, [pc, #188]	; (8002cd8 <HAL_I2C_MspInit+0x12c>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002c26:	e050      	b.n	8002cca <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ce0 <HAL_I2C_MspInit+0x134>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d14b      	bne.n	8002cca <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <HAL_I2C_MspInit+0x12c>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a27      	ldr	r2, [pc, #156]	; (8002cd8 <HAL_I2C_MspInit+0x12c>)
 8002c3c:	f043 0304 	orr.w	r3, r3, #4
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b25      	ldr	r3, [pc, #148]	; (8002cd8 <HAL_I2C_MspInit+0x12c>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <HAL_I2C_MspInit+0x12c>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	4a20      	ldr	r2, [pc, #128]	; (8002cd8 <HAL_I2C_MspInit+0x12c>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5e:	4b1e      	ldr	r3, [pc, #120]	; (8002cd8 <HAL_I2C_MspInit+0x12c>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = imu_sda_i2c3_Pin;
 8002c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c70:	2312      	movs	r3, #18
 8002c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(imu_sda_i2c3_GPIO_Port, &GPIO_InitStruct);
 8002c80:	f107 031c 	add.w	r3, r7, #28
 8002c84:	4619      	mov	r1, r3
 8002c86:	4817      	ldr	r0, [pc, #92]	; (8002ce4 <HAL_I2C_MspInit+0x138>)
 8002c88:	f002 fb5c 	bl	8005344 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = imu_scl_i2c3_Pin;
 8002c8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c92:	2312      	movs	r3, #18
 8002c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(imu_scl_i2c3_GPIO_Port, &GPIO_InitStruct);
 8002ca2:	f107 031c 	add.w	r3, r7, #28
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	480f      	ldr	r0, [pc, #60]	; (8002ce8 <HAL_I2C_MspInit+0x13c>)
 8002caa:	f002 fb4b 	bl	8005344 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_I2C_MspInit+0x12c>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	4a08      	ldr	r2, [pc, #32]	; (8002cd8 <HAL_I2C_MspInit+0x12c>)
 8002cb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_I2C_MspInit+0x12c>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
}
 8002cca:	bf00      	nop
 8002ccc:	3730      	adds	r7, #48	; 0x30
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40005400 	.word	0x40005400
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40020400 	.word	0x40020400
 8002ce0:	40005c00 	.word	0x40005c00
 8002ce4:	40020800 	.word	0x40020800
 8002ce8:	40020000 	.word	0x40020000

08002cec <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	pwm_read_ch1();
 8002cf4:	f000 f936 	bl	8002f64 <pwm_read_ch1>
	pwm_read_ch2();
 8002cf8:	f000 f968 	bl	8002fcc <pwm_read_ch2>
	pwm_read_ch3();
 8002cfc:	f000 f99a 	bl	8003034 <pwm_read_ch3>
	pwm_read_ch4();
 8002d00:	f000 f9cc 	bl	800309c <pwm_read_ch4>
	pwm_read_ch5();
 8002d04:	f000 f9fe 	bl	8003104 <pwm_read_ch5>
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_write>:
int _write(int file, char *ptr, int len) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	4804      	ldr	r0, [pc, #16]	; (8002d38 <_write+0x28>)
 8002d28:	f005 fc55 	bl	80085d6 <HAL_UART_Transmit>
	return len;
 8002d2c:	687b      	ldr	r3, [r7, #4]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000ec8 	.word	0x20000ec8

08002d3c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002d40:	f001 fd26 	bl	8004790 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002d44:	f000 f830 	bl	8002da8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002d48:	f7ff fe58 	bl	80029fc <MX_GPIO_Init>
	MX_TIM1_Init();
 8002d4c:	f000 fbe4 	bl	8003518 <MX_TIM1_Init>
	MX_ADC1_Init();
 8002d50:	f7ff f81a 	bl	8001d88 <MX_ADC1_Init>
	MX_I2C1_Init();
 8002d54:	f7ff fece 	bl	8002af4 <MX_I2C1_Init>
	MX_I2C3_Init();
 8002d58:	f7ff fefa 	bl	8002b50 <MX_I2C3_Init>
	MX_TIM2_Init();
 8002d5c:	f000 fca0 	bl	80036a0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8002d60:	f000 fd3a 	bl	80037d8 <MX_TIM3_Init>
	MX_TIM9_Init();
 8002d64:	f000 fec2 	bl	8003aec <MX_TIM9_Init>
	MX_TIM12_Init();
 8002d68:	f000 ff4a 	bl	8003c00 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 8002d6c:	f001 fba4 	bl	80044b8 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8002d70:	f001 fbcc 	bl	800450c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8002d74:	f001 fbf4 	bl	8004560 <MX_USART3_UART_Init>
	MX_TIM4_Init();
 8002d78:	f000 fdcc 	bl	8003914 <MX_TIM4_Init>
	MX_TIM5_Init();
 8002d7c:	f000 fe68 	bl	8003a50 <MX_TIM5_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart3, (uint8_t*) uartBuffer.buffer, 8);
 8002d80:	2208      	movs	r2, #8
 8002d82:	4907      	ldr	r1, [pc, #28]	; (8002da0 <main+0x64>)
 8002d84:	4807      	ldr	r0, [pc, #28]	; (8002da4 <main+0x68>)
 8002d86:	f005 fcb8 	bl	80086fa <HAL_UART_Receive_IT>

	Ringbuf_init();
 8002d8a:	f001 f97f 	bl	800408c <Ringbuf_init>
	HAL_Delay(500);
 8002d8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d92:	f001 fd3f 	bl	8004814 <HAL_Delay>
	 function();
	 */
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8002d96:	f7ff fba9 	bl	80024ec <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8002d9a:	f006 fc69 	bl	8009670 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8002d9e:	e7fe      	b.n	8002d9e <main+0x62>
 8002da0:	20000798 	.word	0x20000798
 8002da4:	20000ec8 	.word	0x20000ec8

08002da8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b094      	sub	sp, #80	; 0x50
 8002dac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002dae:	f107 0320 	add.w	r3, r7, #32
 8002db2:	2230      	movs	r2, #48	; 0x30
 8002db4:	2100      	movs	r1, #0
 8002db6:	4618      	mov	r0, r3
 8002db8:	f008 fda4 	bl	800b904 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002dbc:	f107 030c 	add.w	r3, r7, #12
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <SystemClock_Config+0xcc>)
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	4a27      	ldr	r2, [pc, #156]	; (8002e74 <SystemClock_Config+0xcc>)
 8002dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dda:	6413      	str	r3, [r2, #64]	; 0x40
 8002ddc:	4b25      	ldr	r3, [pc, #148]	; (8002e74 <SystemClock_Config+0xcc>)
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002de8:	2300      	movs	r3, #0
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <SystemClock_Config+0xd0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a21      	ldr	r2, [pc, #132]	; (8002e78 <SystemClock_Config+0xd0>)
 8002df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <SystemClock_Config+0xd0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e00:	607b      	str	r3, [r7, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e04:	2301      	movs	r3, #1
 8002e06:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e16:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002e18:	2304      	movs	r3, #4
 8002e1a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8002e1c:	23a8      	movs	r3, #168	; 0xa8
 8002e1e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e20:	2302      	movs	r3, #2
 8002e22:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e24:	2304      	movs	r3, #4
 8002e26:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002e28:	f107 0320 	add.w	r3, r7, #32
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f003 fbef 	bl	8006610 <HAL_RCC_OscConfig>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <SystemClock_Config+0x94>
		Error_Handler();
 8002e38:	f000 f832 	bl	8002ea0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002e3c:	230f      	movs	r3, #15
 8002e3e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e40:	2302      	movs	r3, #2
 8002e42:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e4c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e52:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002e54:	f107 030c 	add.w	r3, r7, #12
 8002e58:	2105      	movs	r1, #5
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f003 fe50 	bl	8006b00 <HAL_RCC_ClockConfig>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <SystemClock_Config+0xc2>
		Error_Handler();
 8002e66:	f000 f81b 	bl	8002ea0 <Error_Handler>
	}
}
 8002e6a:	bf00      	nop
 8002e6c:	3750      	adds	r7, #80	; 0x50
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40007000 	.word	0x40007000

08002e7c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM10) {
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d101      	bne.n	8002e92 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002e8e:	f001 fca1 	bl	80047d4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40014400 	.word	0x40014400

08002ea0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea4:	b672      	cpsid	i
}
 8002ea6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002ea8:	e7fe      	b.n	8002ea8 <Error_Handler+0x8>
	...

08002eac <BatteryInit>:
 */
//mainde while hemen öncesinde çağır

#include "power_module.h"

void BatteryInit() {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8002eb0:	4802      	ldr	r0, [pc, #8]	; (8002ebc <BatteryInit+0x10>)
 8002eb2:	f001 fd17 	bl	80048e4 <HAL_ADC_Start>
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000238 	.word	0x20000238

08002ec0 <getBatteryVoltage>:

float getBatteryVoltage() {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
	uint16_t adcValue;
	float adcVoltage;
	HAL_ADC_Start(&hadc1); // start the adc
 8002ec6:	4826      	ldr	r0, [pc, #152]	; (8002f60 <getBatteryVoltage+0xa0>)
 8002ec8:	f001 fd0c 	bl	80048e4 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8002ecc:	2164      	movs	r1, #100	; 0x64
 8002ece:	4824      	ldr	r0, [pc, #144]	; (8002f60 <getBatteryVoltage+0xa0>)
 8002ed0:	f001 fe0d 	bl	8004aee <HAL_ADC_PollForConversion>

	adcValue = HAL_ADC_GetValue(&hadc1); // get the adc value
 8002ed4:	4822      	ldr	r0, [pc, #136]	; (8002f60 <getBatteryVoltage+0xa0>)
 8002ed6:	f001 fe95 	bl	8004c04 <HAL_ADC_GetValue>
 8002eda:	4603      	mov	r3, r0
 8002edc:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Stop(&hadc1); // stop adc
 8002ede:	4820      	ldr	r0, [pc, #128]	; (8002f60 <getBatteryVoltage+0xa0>)
 8002ee0:	f001 fdd2 	bl	8004a88 <HAL_ADC_Stop>

	adcVoltage = 3.3 * adcValue / 4095;
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd fb1c 	bl	8000524 <__aeabi_i2d>
 8002eec:	a316      	add	r3, pc, #88	; (adr r3, 8002f48 <getBatteryVoltage+0x88>)
 8002eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef2:	f7fd fb81 	bl	80005f8 <__aeabi_dmul>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	a314      	add	r3, pc, #80	; (adr r3, 8002f50 <getBatteryVoltage+0x90>)
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f7fd fca2 	bl	800084c <__aeabi_ddiv>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	f7fd fe4a 	bl	8000ba8 <__aeabi_d2f>
 8002f14:	4603      	mov	r3, r0
 8002f16:	603b      	str	r3, [r7, #0]

	return adcVoltage * 10.818;
 8002f18:	6838      	ldr	r0, [r7, #0]
 8002f1a:	f7fd fb15 	bl	8000548 <__aeabi_f2d>
 8002f1e:	a30e      	add	r3, pc, #56	; (adr r3, 8002f58 <getBatteryVoltage+0x98>)
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f7fd fb68 	bl	80005f8 <__aeabi_dmul>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	f7fd fe3a 	bl	8000ba8 <__aeabi_d2f>
 8002f34:	4603      	mov	r3, r0
 8002f36:	ee07 3a90 	vmov	s15, r3
}
 8002f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	f3af 8000 	nop.w
 8002f48:	66666666 	.word	0x66666666
 8002f4c:	400a6666 	.word	0x400a6666
 8002f50:	00000000 	.word	0x00000000
 8002f54:	40affe00 	.word	0x40affe00
 8002f58:	e5604189 	.word	0xe5604189
 8002f5c:	4025a2d0 	.word	0x4025a2d0
 8002f60:	20000238 	.word	0x20000238

08002f64 <pwm_read_ch1>:

	HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1);
	HAL_TIM_IC_Start(&htim12, TIM_CHANNEL_2);
}

void pwm_read_ch1() {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
	if (htim2.Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8002f68:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <pwm_read_ch1+0x5c>)
 8002f6a:	7f1b      	ldrb	r3, [r3, #28]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d125      	bne.n	8002fbc <pwm_read_ch1+0x58>
		pwm_ch1.ICValue = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8002f70:	2100      	movs	r1, #0
 8002f72:	4813      	ldr	r0, [pc, #76]	; (8002fc0 <pwm_read_ch1+0x5c>)
 8002f74:	f004 fcf8 	bl	8007968 <HAL_TIM_ReadCapturedValue>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <pwm_read_ch1+0x60>)
 8002f7c:	6013      	str	r3, [r2, #0]

		if (pwm_ch1.ICValue != 0) {
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <pwm_read_ch1+0x60>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d01a      	beq.n	8002fbc <pwm_read_ch1+0x58>
			pwm_ch1.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim2,
 8002f86:	2104      	movs	r1, #4
 8002f88:	480d      	ldr	r0, [pc, #52]	; (8002fc0 <pwm_read_ch1+0x5c>)
 8002f8a:	f004 fced 	bl	8007968 <HAL_TIM_ReadCapturedValue>
 8002f8e:	4603      	mov	r3, r0
			TIM_CHANNEL_2) * 20000) / pwm_ch1.ICValue;//max2000 oluyor pwm out ile aynı
 8002f90:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002f94:	fb03 f202 	mul.w	r2, r3, r2
 8002f98:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <pwm_read_ch1+0x60>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
			pwm_ch1.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim2,
 8002fa0:	ee07 3a90 	vmov	s15, r3
 8002fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <pwm_read_ch1+0x60>)
 8002faa:	edc3 7a02 	vstr	s15, [r3, #8]

			pwm_ch1.frequency = 400000 / pwm_ch1.ICValue;
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <pwm_read_ch1+0x60>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a05      	ldr	r2, [pc, #20]	; (8002fc8 <pwm_read_ch1+0x64>)
 8002fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb8:	4a02      	ldr	r2, [pc, #8]	; (8002fc4 <pwm_read_ch1+0x60>)
 8002fba:	6053      	str	r3, [r2, #4]
		}
	}
}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20000874 	.word	0x20000874
 8002fc4:	200007a4 	.word	0x200007a4
 8002fc8:	00061a80 	.word	0x00061a80

08002fcc <pwm_read_ch2>:
void pwm_read_ch2() {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
	if (htim3.Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8002fd0:	4b15      	ldr	r3, [pc, #84]	; (8003028 <pwm_read_ch2+0x5c>)
 8002fd2:	7f1b      	ldrb	r3, [r3, #28]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d125      	bne.n	8003024 <pwm_read_ch2+0x58>
		pwm_ch2.ICValue = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4813      	ldr	r0, [pc, #76]	; (8003028 <pwm_read_ch2+0x5c>)
 8002fdc:	f004 fcc4 	bl	8007968 <HAL_TIM_ReadCapturedValue>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4a12      	ldr	r2, [pc, #72]	; (800302c <pwm_read_ch2+0x60>)
 8002fe4:	6013      	str	r3, [r2, #0]

		if (pwm_ch2.ICValue != 0) {
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <pwm_read_ch2+0x60>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d01a      	beq.n	8003024 <pwm_read_ch2+0x58>
			pwm_ch2.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim3,
 8002fee:	2104      	movs	r1, #4
 8002ff0:	480d      	ldr	r0, [pc, #52]	; (8003028 <pwm_read_ch2+0x5c>)
 8002ff2:	f004 fcb9 	bl	8007968 <HAL_TIM_ReadCapturedValue>
 8002ff6:	4603      	mov	r3, r0
			TIM_CHANNEL_2) * 20000) / pwm_ch2.ICValue;
 8002ff8:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002ffc:	fb03 f202 	mul.w	r2, r3, r2
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <pwm_read_ch2+0x60>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
			pwm_ch2.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim3,
 8003008:	ee07 3a90 	vmov	s15, r3
 800300c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <pwm_read_ch2+0x60>)
 8003012:	edc3 7a02 	vstr	s15, [r3, #8]

			pwm_ch2.frequency = 400000 / pwm_ch2.ICValue;
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <pwm_read_ch2+0x60>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a05      	ldr	r2, [pc, #20]	; (8003030 <pwm_read_ch2+0x64>)
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	4a02      	ldr	r2, [pc, #8]	; (800302c <pwm_read_ch2+0x60>)
 8003022:	6053      	str	r3, [r2, #4]
		}
	}
}
 8003024:	bf00      	nop
 8003026:	bd80      	pop	{r7, pc}
 8003028:	200008bc 	.word	0x200008bc
 800302c:	200007b0 	.word	0x200007b0
 8003030:	00061a80 	.word	0x00061a80

08003034 <pwm_read_ch3>:
void pwm_read_ch3() {
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
	if (htim4.Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8003038:	4b15      	ldr	r3, [pc, #84]	; (8003090 <pwm_read_ch3+0x5c>)
 800303a:	7f1b      	ldrb	r3, [r3, #28]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d125      	bne.n	800308c <pwm_read_ch3+0x58>
		pwm_ch3.ICValue = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003040:	2100      	movs	r1, #0
 8003042:	4813      	ldr	r0, [pc, #76]	; (8003090 <pwm_read_ch3+0x5c>)
 8003044:	f004 fc90 	bl	8007968 <HAL_TIM_ReadCapturedValue>
 8003048:	4603      	mov	r3, r0
 800304a:	4a12      	ldr	r2, [pc, #72]	; (8003094 <pwm_read_ch3+0x60>)
 800304c:	6013      	str	r3, [r2, #0]

		if (pwm_ch3.ICValue != 0) {
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <pwm_read_ch3+0x60>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d01a      	beq.n	800308c <pwm_read_ch3+0x58>
			pwm_ch3.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim4,
 8003056:	2104      	movs	r1, #4
 8003058:	480d      	ldr	r0, [pc, #52]	; (8003090 <pwm_read_ch3+0x5c>)
 800305a:	f004 fc85 	bl	8007968 <HAL_TIM_ReadCapturedValue>
 800305e:	4603      	mov	r3, r0
			TIM_CHANNEL_2) * 20000) / pwm_ch3.ICValue;
 8003060:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003064:	fb03 f202 	mul.w	r2, r3, r2
 8003068:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <pwm_read_ch3+0x60>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
			pwm_ch3.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim4,
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <pwm_read_ch3+0x60>)
 800307a:	edc3 7a02 	vstr	s15, [r3, #8]

			pwm_ch3.frequency = 400000 / pwm_ch3.ICValue;
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <pwm_read_ch3+0x60>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a05      	ldr	r2, [pc, #20]	; (8003098 <pwm_read_ch3+0x64>)
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	4a02      	ldr	r2, [pc, #8]	; (8003094 <pwm_read_ch3+0x60>)
 800308a:	6053      	str	r3, [r2, #4]
		}
	}

}
 800308c:	bf00      	nop
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20000904 	.word	0x20000904
 8003094:	200007bc 	.word	0x200007bc
 8003098:	00061a80 	.word	0x00061a80

0800309c <pwm_read_ch4>:
void pwm_read_ch4() {
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
	if (htim9.Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80030a0:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <pwm_read_ch4+0x5c>)
 80030a2:	7f1b      	ldrb	r3, [r3, #28]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d125      	bne.n	80030f4 <pwm_read_ch4+0x58>
		pwm_ch4.ICValue = HAL_TIM_ReadCapturedValue(&htim9, TIM_CHANNEL_1);
 80030a8:	2100      	movs	r1, #0
 80030aa:	4813      	ldr	r0, [pc, #76]	; (80030f8 <pwm_read_ch4+0x5c>)
 80030ac:	f004 fc5c 	bl	8007968 <HAL_TIM_ReadCapturedValue>
 80030b0:	4603      	mov	r3, r0
 80030b2:	4a12      	ldr	r2, [pc, #72]	; (80030fc <pwm_read_ch4+0x60>)
 80030b4:	6013      	str	r3, [r2, #0]

		if (pwm_ch4.ICValue != 0) {
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <pwm_read_ch4+0x60>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d01a      	beq.n	80030f4 <pwm_read_ch4+0x58>
			pwm_ch4.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim9,
 80030be:	2104      	movs	r1, #4
 80030c0:	480d      	ldr	r0, [pc, #52]	; (80030f8 <pwm_read_ch4+0x5c>)
 80030c2:	f004 fc51 	bl	8007968 <HAL_TIM_ReadCapturedValue>
 80030c6:	4603      	mov	r3, r0
			TIM_CHANNEL_2) * 20000) / pwm_ch4.ICValue;
 80030c8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80030cc:	fb03 f202 	mul.w	r2, r3, r2
 80030d0:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <pwm_read_ch4+0x60>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
			pwm_ch4.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim9,
 80030d8:	ee07 3a90 	vmov	s15, r3
 80030dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <pwm_read_ch4+0x60>)
 80030e2:	edc3 7a02 	vstr	s15, [r3, #8]

			pwm_ch4.frequency = 400000 / pwm_ch4.ICValue;
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <pwm_read_ch4+0x60>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a05      	ldr	r2, [pc, #20]	; (8003100 <pwm_read_ch4+0x64>)
 80030ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f0:	4a02      	ldr	r2, [pc, #8]	; (80030fc <pwm_read_ch4+0x60>)
 80030f2:	6053      	str	r3, [r2, #4]
		}
	}

}
 80030f4:	bf00      	nop
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20000994 	.word	0x20000994
 80030fc:	200007c8 	.word	0x200007c8
 8003100:	00061a80 	.word	0x00061a80

08003104 <pwm_read_ch5>:
void pwm_read_ch5() {
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
	if (htim12.Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8003108:	4b15      	ldr	r3, [pc, #84]	; (8003160 <pwm_read_ch5+0x5c>)
 800310a:	7f1b      	ldrb	r3, [r3, #28]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d125      	bne.n	800315c <pwm_read_ch5+0x58>
		pwm_ch5.ICValue = HAL_TIM_ReadCapturedValue(&htim12, TIM_CHANNEL_1);
 8003110:	2100      	movs	r1, #0
 8003112:	4813      	ldr	r0, [pc, #76]	; (8003160 <pwm_read_ch5+0x5c>)
 8003114:	f004 fc28 	bl	8007968 <HAL_TIM_ReadCapturedValue>
 8003118:	4603      	mov	r3, r0
 800311a:	4a12      	ldr	r2, [pc, #72]	; (8003164 <pwm_read_ch5+0x60>)
 800311c:	6013      	str	r3, [r2, #0]

		if (pwm_ch5.ICValue != 0) {
 800311e:	4b11      	ldr	r3, [pc, #68]	; (8003164 <pwm_read_ch5+0x60>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d01a      	beq.n	800315c <pwm_read_ch5+0x58>
			pwm_ch5.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim12,
 8003126:	2104      	movs	r1, #4
 8003128:	480d      	ldr	r0, [pc, #52]	; (8003160 <pwm_read_ch5+0x5c>)
 800312a:	f004 fc1d 	bl	8007968 <HAL_TIM_ReadCapturedValue>
 800312e:	4603      	mov	r3, r0
			TIM_CHANNEL_2) * 20000) / pwm_ch5.ICValue;
 8003130:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003134:	fb03 f202 	mul.w	r2, r3, r2
 8003138:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <pwm_read_ch5+0x60>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	fbb2 f3f3 	udiv	r3, r2, r3
			pwm_ch5.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim12,
 8003140:	ee07 3a90 	vmov	s15, r3
 8003144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003148:	4b06      	ldr	r3, [pc, #24]	; (8003164 <pwm_read_ch5+0x60>)
 800314a:	edc3 7a02 	vstr	s15, [r3, #8]

			pwm_ch5.frequency = 400000 / pwm_ch5.ICValue;
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <pwm_read_ch5+0x60>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a05      	ldr	r2, [pc, #20]	; (8003168 <pwm_read_ch5+0x64>)
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	4a02      	ldr	r2, [pc, #8]	; (8003164 <pwm_read_ch5+0x60>)
 800315a:	6053      	str	r3, [r2, #4]
		}
	}
}
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}
 8003160:	200009dc 	.word	0x200009dc
 8003164:	200007d4 	.word	0x200007d4
 8003168:	00061a80 	.word	0x00061a80

0800316c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
 8003176:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <HAL_MspInit+0x54>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	4a11      	ldr	r2, [pc, #68]	; (80031c0 <HAL_MspInit+0x54>)
 800317c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003180:	6453      	str	r3, [r2, #68]	; 0x44
 8003182:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <HAL_MspInit+0x54>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	603b      	str	r3, [r7, #0]
 8003192:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <HAL_MspInit+0x54>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	4a0a      	ldr	r2, [pc, #40]	; (80031c0 <HAL_MspInit+0x54>)
 8003198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319c:	6413      	str	r3, [r2, #64]	; 0x40
 800319e:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <HAL_MspInit+0x54>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031aa:	2200      	movs	r2, #0
 80031ac:	210f      	movs	r1, #15
 80031ae:	f06f 0001 	mvn.w	r0, #1
 80031b2:	f002 f80b 	bl	80051cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800

080031c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08c      	sub	sp, #48	; 0x30
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80031d4:	2300      	movs	r3, #0
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	4b2f      	ldr	r3, [pc, #188]	; (8003298 <HAL_InitTick+0xd4>)
 80031da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031dc:	4a2e      	ldr	r2, [pc, #184]	; (8003298 <HAL_InitTick+0xd4>)
 80031de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e2:	6453      	str	r3, [r2, #68]	; 0x44
 80031e4:	4b2c      	ldr	r3, [pc, #176]	; (8003298 <HAL_InitTick+0xd4>)
 80031e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80031f0:	f107 020c 	add.w	r2, r7, #12
 80031f4:	f107 0310 	add.w	r3, r7, #16
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f003 fea0 	bl	8006f40 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003200:	f003 fe8a 	bl	8006f18 <HAL_RCC_GetPCLK2Freq>
 8003204:	4603      	mov	r3, r0
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	4a23      	ldr	r2, [pc, #140]	; (800329c <HAL_InitTick+0xd8>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	0c9b      	lsrs	r3, r3, #18
 8003214:	3b01      	subs	r3, #1
 8003216:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8003218:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <HAL_InitTick+0xdc>)
 800321a:	4a22      	ldr	r2, [pc, #136]	; (80032a4 <HAL_InitTick+0xe0>)
 800321c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800321e:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <HAL_InitTick+0xdc>)
 8003220:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003224:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8003226:	4a1e      	ldr	r2, [pc, #120]	; (80032a0 <HAL_InitTick+0xdc>)
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 800322c:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <HAL_InitTick+0xdc>)
 800322e:	2200      	movs	r2, #0
 8003230:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003232:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <HAL_InitTick+0xdc>)
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003238:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <HAL_InitTick+0xdc>)
 800323a:	2200      	movs	r2, #0
 800323c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800323e:	4818      	ldr	r0, [pc, #96]	; (80032a0 <HAL_InitTick+0xdc>)
 8003240:	f003 feb0 	bl	8006fa4 <HAL_TIM_Base_Init>
 8003244:	4603      	mov	r3, r0
 8003246:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800324a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800324e:	2b00      	cmp	r3, #0
 8003250:	d11b      	bne.n	800328a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8003252:	4813      	ldr	r0, [pc, #76]	; (80032a0 <HAL_InitTick+0xdc>)
 8003254:	f003 fef6 	bl	8007044 <HAL_TIM_Base_Start_IT>
 8003258:	4603      	mov	r3, r0
 800325a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800325e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003262:	2b00      	cmp	r3, #0
 8003264:	d111      	bne.n	800328a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003266:	2019      	movs	r0, #25
 8003268:	f001 ffcc 	bl	8005204 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b0f      	cmp	r3, #15
 8003270:	d808      	bhi.n	8003284 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003272:	2200      	movs	r2, #0
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	2019      	movs	r0, #25
 8003278:	f001 ffa8 	bl	80051cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800327c:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <HAL_InitTick+0xe4>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	e002      	b.n	800328a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800328a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800328e:	4618      	mov	r0, r3
 8003290:	3730      	adds	r7, #48	; 0x30
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800
 800329c:	431bde83 	.word	0x431bde83
 80032a0:	200007e0 	.word	0x200007e0
 80032a4:	40014400 	.word	0x40014400
 80032a8:	20000018 	.word	0x20000018

080032ac <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80032b0:	e7fe      	b.n	80032b0 <NMI_Handler+0x4>

080032b2 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80032b2:	b480      	push	{r7}
 80032b4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80032b6:	e7fe      	b.n	80032b6 <HardFault_Handler+0x4>

080032b8 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80032bc:	e7fe      	b.n	80032bc <MemManage_Handler+0x4>

080032be <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80032c2:	e7fe      	b.n	80032c2 <BusFault_Handler+0x4>

080032c4 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80032c8:	e7fe      	b.n	80032c8 <UsageFault_Handler+0x4>

080032ca <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80032ca:	b480      	push	{r7}
 80032cc:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <TIM1_BRK_TIM9_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
 */
void TIM1_BRK_TIM9_IRQHandler(void) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	/* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 80032dc:	4803      	ldr	r0, [pc, #12]	; (80032ec <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80032de:	f003 ffd3 	bl	8007288 <HAL_TIM_IRQHandler>
	HAL_TIM_IRQHandler(&htim9);
 80032e2:	4803      	ldr	r0, [pc, #12]	; (80032f0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80032e4:	f003 ffd0 	bl	8007288 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

	/* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80032e8:	bf00      	nop
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	2000082c 	.word	0x2000082c
 80032f0:	20000994 	.word	0x20000994

080032f4 <TIM1_UP_TIM10_IRQHandler>:

/**
 * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
 */
void TIM1_UP_TIM10_IRQHandler(void) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

	/* USER CODE END TIM1_UP_TIM10_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 80032f8:	4803      	ldr	r0, [pc, #12]	; (8003308 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80032fa:	f003 ffc5 	bl	8007288 <HAL_TIM_IRQHandler>
	HAL_TIM_IRQHandler(&htim10);
 80032fe:	4803      	ldr	r0, [pc, #12]	; (800330c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003300:	f003 ffc2 	bl	8007288 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

	/* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003304:	bf00      	nop
 8003306:	bd80      	pop	{r7, pc}
 8003308:	2000082c 	.word	0x2000082c
 800330c:	200007e0 	.word	0x200007e0

08003310 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8003314:	4802      	ldr	r0, [pc, #8]	; (8003320 <TIM2_IRQHandler+0x10>)
 8003316:	f003 ffb7 	bl	8007288 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000874 	.word	0x20000874

08003324 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8003328:	4802      	ldr	r0, [pc, #8]	; (8003334 <TIM3_IRQHandler+0x10>)
 800332a:	f003 ffad 	bl	8007288 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	200008bc 	.word	0x200008bc

08003338 <TIM4_IRQHandler>:

/**
 * @brief This function handles TIM4 global interrupt.
 */
void TIM4_IRQHandler(void) {
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM4_IRQn 0 */

	/* USER CODE END TIM4_IRQn 0 */
	HAL_TIM_IRQHandler(&htim4);
 800333c:	4802      	ldr	r0, [pc, #8]	; (8003348 <TIM4_IRQHandler+0x10>)
 800333e:	f003 ffa3 	bl	8007288 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM4_IRQn 1 */

	/* USER CODE END TIM4_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000904 	.word	0x20000904

0800334c <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8003350:	4802      	ldr	r0, [pc, #8]	; (800335c <USART2_IRQHandler+0x10>)
 8003352:	f001 f853 	bl	80043fc <Uart_isr>
	/* USER CODE END USART2_IRQn 0 */
	//HAL_UART_IRQHandler(&huart2);
	/* USER CODE BEGIN USART2_IRQn 1 */
	/* USER CODE END USART2_IRQn 1 */
}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000e84 	.word	0x20000e84

08003360 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 8003364:	4806      	ldr	r0, [pc, #24]	; (8003380 <USART3_IRQHandler+0x20>)
 8003366:	f005 f9f9 	bl	800875c <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */
	HAL_UART_Receive_IT(&huart3, (uint8_t*) uartBuffer.buffer, 8);
 800336a:	2208      	movs	r2, #8
 800336c:	4905      	ldr	r1, [pc, #20]	; (8003384 <USART3_IRQHandler+0x24>)
 800336e:	4804      	ldr	r0, [pc, #16]	; (8003380 <USART3_IRQHandler+0x20>)
 8003370:	f005 f9c3 	bl	80086fa <HAL_UART_Receive_IT>
	dataReceived = true;
 8003374:	4b04      	ldr	r3, [pc, #16]	; (8003388 <USART3_IRQHandler+0x28>)
 8003376:	2201      	movs	r2, #1
 8003378:	701a      	strb	r2, [r3, #0]
	/* USER CODE END USART3_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000ec8 	.word	0x20000ec8
 8003384:	20000798 	.word	0x20000798
 8003388:	200007a0 	.word	0x200007a0

0800338c <TIM8_BRK_TIM12_IRQHandler>:

/**
 * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
 */
void TIM8_BRK_TIM12_IRQHandler(void) {
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

	/* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
	HAL_TIM_IRQHandler(&htim12);
 8003390:	4802      	ldr	r0, [pc, #8]	; (800339c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003392:	f003 ff79 	bl	8007288 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

	/* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	200009dc 	.word	0x200009dc

080033a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return 1;
 80033a4:	2301      	movs	r3, #1
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <_kill>:

int _kill(int pid, int sig)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033ba:	f008 fb4b 	bl	800ba54 <__errno>
 80033be:	4603      	mov	r3, r0
 80033c0:	2216      	movs	r2, #22
 80033c2:	601a      	str	r2, [r3, #0]
  return -1;
 80033c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <_exit>:

void _exit (int status)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033d8:	f04f 31ff 	mov.w	r1, #4294967295
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff ffe7 	bl	80033b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033e2:	e7fe      	b.n	80033e2 <_exit+0x12>

080033e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	e00a      	b.n	800340c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033f6:	f3af 8000 	nop.w
 80033fa:	4601      	mov	r1, r0
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	60ba      	str	r2, [r7, #8]
 8003402:	b2ca      	uxtb	r2, r1
 8003404:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	3301      	adds	r3, #1
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	429a      	cmp	r2, r3
 8003412:	dbf0      	blt.n	80033f6 <_read+0x12>
  }

  return len;
 8003414:	687b      	ldr	r3, [r7, #4]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <_close>:
  }
  return len;
}

int _close(int file)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003426:	f04f 33ff 	mov.w	r3, #4294967295
}
 800342a:	4618      	mov	r0, r3
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003446:	605a      	str	r2, [r3, #4]
  return 0;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <_isatty>:

int _isatty(int file)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800345e:	2301      	movs	r3, #1
}
 8003460:	4618      	mov	r0, r3
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003490:	4a14      	ldr	r2, [pc, #80]	; (80034e4 <_sbrk+0x5c>)
 8003492:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <_sbrk+0x60>)
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800349c:	4b13      	ldr	r3, [pc, #76]	; (80034ec <_sbrk+0x64>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d102      	bne.n	80034aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034a4:	4b11      	ldr	r3, [pc, #68]	; (80034ec <_sbrk+0x64>)
 80034a6:	4a12      	ldr	r2, [pc, #72]	; (80034f0 <_sbrk+0x68>)
 80034a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034aa:	4b10      	ldr	r3, [pc, #64]	; (80034ec <_sbrk+0x64>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d207      	bcs.n	80034c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034b8:	f008 facc 	bl	800ba54 <__errno>
 80034bc:	4603      	mov	r3, r0
 80034be:	220c      	movs	r2, #12
 80034c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034c2:	f04f 33ff 	mov.w	r3, #4294967295
 80034c6:	e009      	b.n	80034dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034c8:	4b08      	ldr	r3, [pc, #32]	; (80034ec <_sbrk+0x64>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034ce:	4b07      	ldr	r3, [pc, #28]	; (80034ec <_sbrk+0x64>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	4a05      	ldr	r2, [pc, #20]	; (80034ec <_sbrk+0x64>)
 80034d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034da:	68fb      	ldr	r3, [r7, #12]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	20020000 	.word	0x20020000
 80034e8:	00000400 	.word	0x00000400
 80034ec:	20000828 	.word	0x20000828
 80034f0:	20004db0 	.word	0x20004db0

080034f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034f8:	4b06      	ldr	r3, [pc, #24]	; (8003514 <SystemInit+0x20>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	4a05      	ldr	r2, [pc, #20]	; (8003514 <SystemInit+0x20>)
 8003500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003508:	bf00      	nop
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	e000ed00 	.word	0xe000ed00

08003518 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b096      	sub	sp, #88	; 0x58
 800351c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800351e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	605a      	str	r2, [r3, #4]
 8003528:	609a      	str	r2, [r3, #8]
 800352a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800352c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	609a      	str	r2, [r3, #8]
 8003542:	60da      	str	r2, [r3, #12]
 8003544:	611a      	str	r2, [r3, #16]
 8003546:	615a      	str	r2, [r3, #20]
 8003548:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800354a:	1d3b      	adds	r3, r7, #4
 800354c:	2220      	movs	r2, #32
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f008 f9d7 	bl	800b904 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003556:	4b50      	ldr	r3, [pc, #320]	; (8003698 <MX_TIM1_Init+0x180>)
 8003558:	4a50      	ldr	r2, [pc, #320]	; (800369c <MX_TIM1_Init+0x184>)
 800355a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800355c:	4b4e      	ldr	r3, [pc, #312]	; (8003698 <MX_TIM1_Init+0x180>)
 800355e:	22a7      	movs	r2, #167	; 0xa7
 8003560:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003562:	4b4d      	ldr	r3, [pc, #308]	; (8003698 <MX_TIM1_Init+0x180>)
 8003564:	2200      	movs	r2, #0
 8003566:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8003568:	4b4b      	ldr	r3, [pc, #300]	; (8003698 <MX_TIM1_Init+0x180>)
 800356a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800356e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003570:	4b49      	ldr	r3, [pc, #292]	; (8003698 <MX_TIM1_Init+0x180>)
 8003572:	2200      	movs	r2, #0
 8003574:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003576:	4b48      	ldr	r3, [pc, #288]	; (8003698 <MX_TIM1_Init+0x180>)
 8003578:	2200      	movs	r2, #0
 800357a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800357c:	4b46      	ldr	r3, [pc, #280]	; (8003698 <MX_TIM1_Init+0x180>)
 800357e:	2280      	movs	r2, #128	; 0x80
 8003580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003582:	4845      	ldr	r0, [pc, #276]	; (8003698 <MX_TIM1_Init+0x180>)
 8003584:	f003 fd0e 	bl	8006fa4 <HAL_TIM_Base_Init>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800358e:	f7ff fc87 	bl	8002ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003596:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003598:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800359c:	4619      	mov	r1, r3
 800359e:	483e      	ldr	r0, [pc, #248]	; (8003698 <MX_TIM1_Init+0x180>)
 80035a0:	f004 f8d8 	bl	8007754 <HAL_TIM_ConfigClockSource>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80035aa:	f7ff fc79 	bl	8002ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80035ae:	483a      	ldr	r0, [pc, #232]	; (8003698 <MX_TIM1_Init+0x180>)
 80035b0:	f003 fdb8 	bl	8007124 <HAL_TIM_PWM_Init>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80035ba:	f7ff fc71 	bl	8002ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035be:	2300      	movs	r3, #0
 80035c0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035ca:	4619      	mov	r1, r3
 80035cc:	4832      	ldr	r0, [pc, #200]	; (8003698 <MX_TIM1_Init+0x180>)
 80035ce:	f004 fed3 	bl	8008378 <HAL_TIMEx_MasterConfigSynchronization>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80035d8:	f7ff fc62 	bl	8002ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035dc:	2360      	movs	r3, #96	; 0x60
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035e4:	2300      	movs	r3, #0
 80035e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035e8:	2300      	movs	r3, #0
 80035ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035ec:	2300      	movs	r3, #0
 80035ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035f0:	2300      	movs	r3, #0
 80035f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035f4:	2300      	movs	r3, #0
 80035f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035fc:	2200      	movs	r2, #0
 80035fe:	4619      	mov	r1, r3
 8003600:	4825      	ldr	r0, [pc, #148]	; (8003698 <MX_TIM1_Init+0x180>)
 8003602:	f003 ffe5 	bl	80075d0 <HAL_TIM_PWM_ConfigChannel>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800360c:	f7ff fc48 	bl	8002ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003614:	2204      	movs	r2, #4
 8003616:	4619      	mov	r1, r3
 8003618:	481f      	ldr	r0, [pc, #124]	; (8003698 <MX_TIM1_Init+0x180>)
 800361a:	f003 ffd9 	bl	80075d0 <HAL_TIM_PWM_ConfigChannel>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003624:	f7ff fc3c 	bl	8002ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800362c:	2208      	movs	r2, #8
 800362e:	4619      	mov	r1, r3
 8003630:	4819      	ldr	r0, [pc, #100]	; (8003698 <MX_TIM1_Init+0x180>)
 8003632:	f003 ffcd 	bl	80075d0 <HAL_TIM_PWM_ConfigChannel>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800363c:	f7ff fc30 	bl	8002ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003644:	220c      	movs	r2, #12
 8003646:	4619      	mov	r1, r3
 8003648:	4813      	ldr	r0, [pc, #76]	; (8003698 <MX_TIM1_Init+0x180>)
 800364a:	f003 ffc1 	bl	80075d0 <HAL_TIM_PWM_ConfigChannel>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003654:	f7ff fc24 	bl	8002ea0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003658:	2300      	movs	r3, #0
 800365a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800365c:	2300      	movs	r3, #0
 800365e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003660:	2300      	movs	r3, #0
 8003662:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003664:	2300      	movs	r3, #0
 8003666:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800366c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003670:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003672:	2300      	movs	r3, #0
 8003674:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003676:	1d3b      	adds	r3, r7, #4
 8003678:	4619      	mov	r1, r3
 800367a:	4807      	ldr	r0, [pc, #28]	; (8003698 <MX_TIM1_Init+0x180>)
 800367c:	f004 fef8 	bl	8008470 <HAL_TIMEx_ConfigBreakDeadTime>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8003686:	f7ff fc0b 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800368a:	4803      	ldr	r0, [pc, #12]	; (8003698 <MX_TIM1_Init+0x180>)
 800368c:	f000 fcc4 	bl	8004018 <HAL_TIM_MspPostInit>

}
 8003690:	bf00      	nop
 8003692:	3758      	adds	r7, #88	; 0x58
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	2000082c 	.word	0x2000082c
 800369c:	40010000 	.word	0x40010000

080036a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b090      	sub	sp, #64	; 0x40
 80036a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	605a      	str	r2, [r3, #4]
 80036b0:	609a      	str	r2, [r3, #8]
 80036b2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80036b4:	f107 031c 	add.w	r3, r7, #28
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80036c4:	f107 030c 	add.w	r3, r7, #12
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036d2:	1d3b      	adds	r3, r7, #4
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036da:	4b3e      	ldr	r3, [pc, #248]	; (80037d4 <MX_TIM2_Init+0x134>)
 80036dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 210-1;
 80036e2:	4b3c      	ldr	r3, [pc, #240]	; (80037d4 <MX_TIM2_Init+0x134>)
 80036e4:	22d1      	movs	r2, #209	; 0xd1
 80036e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e8:	4b3a      	ldr	r3, [pc, #232]	; (80037d4 <MX_TIM2_Init+0x134>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000-1;
 80036ee:	4b39      	ldr	r3, [pc, #228]	; (80037d4 <MX_TIM2_Init+0x134>)
 80036f0:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80036f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036f6:	4b37      	ldr	r3, [pc, #220]	; (80037d4 <MX_TIM2_Init+0x134>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036fc:	4b35      	ldr	r3, [pc, #212]	; (80037d4 <MX_TIM2_Init+0x134>)
 80036fe:	2200      	movs	r2, #0
 8003700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003702:	4834      	ldr	r0, [pc, #208]	; (80037d4 <MX_TIM2_Init+0x134>)
 8003704:	f003 fc4e 	bl	8006fa4 <HAL_TIM_Base_Init>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800370e:	f7ff fbc7 	bl	8002ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003716:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003718:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800371c:	4619      	mov	r1, r3
 800371e:	482d      	ldr	r0, [pc, #180]	; (80037d4 <MX_TIM2_Init+0x134>)
 8003720:	f004 f818 	bl	8007754 <HAL_TIM_ConfigClockSource>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800372a:	f7ff fbb9 	bl	8002ea0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800372e:	4829      	ldr	r0, [pc, #164]	; (80037d4 <MX_TIM2_Init+0x134>)
 8003730:	f003 fd51 	bl	80071d6 <HAL_TIM_IC_Init>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800373a:	f7ff fbb1 	bl	8002ea0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800373e:	2304      	movs	r3, #4
 8003740:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003742:	2350      	movs	r3, #80	; 0x50
 8003744:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003746:	2300      	movs	r3, #0
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800374a:	2300      	movs	r3, #0
 800374c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800374e:	2300      	movs	r3, #0
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003752:	f107 031c 	add.w	r3, r7, #28
 8003756:	4619      	mov	r1, r3
 8003758:	481e      	ldr	r0, [pc, #120]	; (80037d4 <MX_TIM2_Init+0x134>)
 800375a:	f004 f8c2 	bl	80078e2 <HAL_TIM_SlaveConfigSynchro>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8003764:	f7ff fb9c 	bl	8002ea0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800376c:	2301      	movs	r3, #1
 800376e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003778:	f107 030c 	add.w	r3, r7, #12
 800377c:	2200      	movs	r2, #0
 800377e:	4619      	mov	r1, r3
 8003780:	4814      	ldr	r0, [pc, #80]	; (80037d4 <MX_TIM2_Init+0x134>)
 8003782:	f003 fe89 	bl	8007498 <HAL_TIM_IC_ConfigChannel>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800378c:	f7ff fb88 	bl	8002ea0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003790:	2302      	movs	r3, #2
 8003792:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003794:	2302      	movs	r3, #2
 8003796:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003798:	f107 030c 	add.w	r3, r7, #12
 800379c:	2204      	movs	r2, #4
 800379e:	4619      	mov	r1, r3
 80037a0:	480c      	ldr	r0, [pc, #48]	; (80037d4 <MX_TIM2_Init+0x134>)
 80037a2:	f003 fe79 	bl	8007498 <HAL_TIM_IC_ConfigChannel>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 80037ac:	f7ff fb78 	bl	8002ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037b0:	2300      	movs	r3, #0
 80037b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037b8:	1d3b      	adds	r3, r7, #4
 80037ba:	4619      	mov	r1, r3
 80037bc:	4805      	ldr	r0, [pc, #20]	; (80037d4 <MX_TIM2_Init+0x134>)
 80037be:	f004 fddb 	bl	8008378 <HAL_TIMEx_MasterConfigSynchronization>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 80037c8:	f7ff fb6a 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80037cc:	bf00      	nop
 80037ce:	3740      	adds	r7, #64	; 0x40
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20000874 	.word	0x20000874

080037d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b090      	sub	sp, #64	; 0x40
 80037dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	605a      	str	r2, [r3, #4]
 80037e8:	609a      	str	r2, [r3, #8]
 80037ea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80037ec:	f107 031c 	add.w	r3, r7, #28
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	609a      	str	r2, [r3, #8]
 80037f8:	60da      	str	r2, [r3, #12]
 80037fa:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80037fc:	f107 030c 	add.w	r3, r7, #12
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800380a:	1d3b      	adds	r3, r7, #4
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003812:	4b3e      	ldr	r3, [pc, #248]	; (800390c <MX_TIM3_Init+0x134>)
 8003814:	4a3e      	ldr	r2, [pc, #248]	; (8003910 <MX_TIM3_Init+0x138>)
 8003816:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 210-1;
 8003818:	4b3c      	ldr	r3, [pc, #240]	; (800390c <MX_TIM3_Init+0x134>)
 800381a:	22d1      	movs	r2, #209	; 0xd1
 800381c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800381e:	4b3b      	ldr	r3, [pc, #236]	; (800390c <MX_TIM3_Init+0x134>)
 8003820:	2200      	movs	r2, #0
 8003822:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 8003824:	4b39      	ldr	r3, [pc, #228]	; (800390c <MX_TIM3_Init+0x134>)
 8003826:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800382a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800382c:	4b37      	ldr	r3, [pc, #220]	; (800390c <MX_TIM3_Init+0x134>)
 800382e:	2200      	movs	r2, #0
 8003830:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003832:	4b36      	ldr	r3, [pc, #216]	; (800390c <MX_TIM3_Init+0x134>)
 8003834:	2200      	movs	r2, #0
 8003836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003838:	4834      	ldr	r0, [pc, #208]	; (800390c <MX_TIM3_Init+0x134>)
 800383a:	f003 fbb3 	bl	8006fa4 <HAL_TIM_Base_Init>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003844:	f7ff fb2c 	bl	8002ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800384c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800384e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003852:	4619      	mov	r1, r3
 8003854:	482d      	ldr	r0, [pc, #180]	; (800390c <MX_TIM3_Init+0x134>)
 8003856:	f003 ff7d 	bl	8007754 <HAL_TIM_ConfigClockSource>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003860:	f7ff fb1e 	bl	8002ea0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003864:	4829      	ldr	r0, [pc, #164]	; (800390c <MX_TIM3_Init+0x134>)
 8003866:	f003 fcb6 	bl	80071d6 <HAL_TIM_IC_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003870:	f7ff fb16 	bl	8002ea0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003874:	2304      	movs	r3, #4
 8003876:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003878:	2350      	movs	r3, #80	; 0x50
 800387a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800387c:	2300      	movs	r3, #0
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003880:	2300      	movs	r3, #0
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8003888:	f107 031c 	add.w	r3, r7, #28
 800388c:	4619      	mov	r1, r3
 800388e:	481f      	ldr	r0, [pc, #124]	; (800390c <MX_TIM3_Init+0x134>)
 8003890:	f004 f827 	bl	80078e2 <HAL_TIM_SlaveConfigSynchro>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800389a:	f7ff fb01 	bl	8002ea0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80038a2:	2301      	movs	r3, #1
 80038a4:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80038ae:	f107 030c 	add.w	r3, r7, #12
 80038b2:	2200      	movs	r2, #0
 80038b4:	4619      	mov	r1, r3
 80038b6:	4815      	ldr	r0, [pc, #84]	; (800390c <MX_TIM3_Init+0x134>)
 80038b8:	f003 fdee 	bl	8007498 <HAL_TIM_IC_ConfigChannel>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80038c2:	f7ff faed 	bl	8002ea0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80038c6:	2302      	movs	r3, #2
 80038c8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80038ca:	2302      	movs	r3, #2
 80038cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80038ce:	f107 030c 	add.w	r3, r7, #12
 80038d2:	2204      	movs	r2, #4
 80038d4:	4619      	mov	r1, r3
 80038d6:	480d      	ldr	r0, [pc, #52]	; (800390c <MX_TIM3_Init+0x134>)
 80038d8:	f003 fdde 	bl	8007498 <HAL_TIM_IC_ConfigChannel>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 80038e2:	f7ff fadd 	bl	8002ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038e6:	2300      	movs	r3, #0
 80038e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038ee:	1d3b      	adds	r3, r7, #4
 80038f0:	4619      	mov	r1, r3
 80038f2:	4806      	ldr	r0, [pc, #24]	; (800390c <MX_TIM3_Init+0x134>)
 80038f4:	f004 fd40 	bl	8008378 <HAL_TIMEx_MasterConfigSynchronization>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 80038fe:	f7ff facf 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003902:	bf00      	nop
 8003904:	3740      	adds	r7, #64	; 0x40
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	200008bc 	.word	0x200008bc
 8003910:	40000400 	.word	0x40000400

08003914 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b090      	sub	sp, #64	; 0x40
 8003918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800391a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	605a      	str	r2, [r3, #4]
 8003924:	609a      	str	r2, [r3, #8]
 8003926:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003928:	f107 031c 	add.w	r3, r7, #28
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	60da      	str	r2, [r3, #12]
 8003936:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003938:	f107 030c 	add.w	r3, r7, #12
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003946:	1d3b      	adds	r3, r7, #4
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800394e:	4b3e      	ldr	r3, [pc, #248]	; (8003a48 <MX_TIM4_Init+0x134>)
 8003950:	4a3e      	ldr	r2, [pc, #248]	; (8003a4c <MX_TIM4_Init+0x138>)
 8003952:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 210-1;
 8003954:	4b3c      	ldr	r3, [pc, #240]	; (8003a48 <MX_TIM4_Init+0x134>)
 8003956:	22d1      	movs	r2, #209	; 0xd1
 8003958:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800395a:	4b3b      	ldr	r3, [pc, #236]	; (8003a48 <MX_TIM4_Init+0x134>)
 800395c:	2200      	movs	r2, #0
 800395e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 40000-1;
 8003960:	4b39      	ldr	r3, [pc, #228]	; (8003a48 <MX_TIM4_Init+0x134>)
 8003962:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003966:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003968:	4b37      	ldr	r3, [pc, #220]	; (8003a48 <MX_TIM4_Init+0x134>)
 800396a:	2200      	movs	r2, #0
 800396c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800396e:	4b36      	ldr	r3, [pc, #216]	; (8003a48 <MX_TIM4_Init+0x134>)
 8003970:	2200      	movs	r2, #0
 8003972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003974:	4834      	ldr	r0, [pc, #208]	; (8003a48 <MX_TIM4_Init+0x134>)
 8003976:	f003 fb15 	bl	8006fa4 <HAL_TIM_Base_Init>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003980:	f7ff fa8e 	bl	8002ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003988:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800398a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800398e:	4619      	mov	r1, r3
 8003990:	482d      	ldr	r0, [pc, #180]	; (8003a48 <MX_TIM4_Init+0x134>)
 8003992:	f003 fedf 	bl	8007754 <HAL_TIM_ConfigClockSource>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800399c:	f7ff fa80 	bl	8002ea0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80039a0:	4829      	ldr	r0, [pc, #164]	; (8003a48 <MX_TIM4_Init+0x134>)
 80039a2:	f003 fc18 	bl	80071d6 <HAL_TIM_IC_Init>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80039ac:	f7ff fa78 	bl	8002ea0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80039b0:	2304      	movs	r3, #4
 80039b2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80039b4:	2350      	movs	r3, #80	; 0x50
 80039b6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80039b8:	2300      	movs	r3, #0
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80039bc:	2300      	movs	r3, #0
 80039be:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80039c4:	f107 031c 	add.w	r3, r7, #28
 80039c8:	4619      	mov	r1, r3
 80039ca:	481f      	ldr	r0, [pc, #124]	; (8003a48 <MX_TIM4_Init+0x134>)
 80039cc:	f003 ff89 	bl	80078e2 <HAL_TIM_SlaveConfigSynchro>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 80039d6:	f7ff fa63 	bl	8002ea0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80039de:	2301      	movs	r3, #1
 80039e0:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80039ea:	f107 030c 	add.w	r3, r7, #12
 80039ee:	2200      	movs	r2, #0
 80039f0:	4619      	mov	r1, r3
 80039f2:	4815      	ldr	r0, [pc, #84]	; (8003a48 <MX_TIM4_Init+0x134>)
 80039f4:	f003 fd50 	bl	8007498 <HAL_TIM_IC_ConfigChannel>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80039fe:	f7ff fa4f 	bl	8002ea0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003a02:	2302      	movs	r3, #2
 8003a04:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003a06:	2302      	movs	r3, #2
 8003a08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003a0a:	f107 030c 	add.w	r3, r7, #12
 8003a0e:	2204      	movs	r2, #4
 8003a10:	4619      	mov	r1, r3
 8003a12:	480d      	ldr	r0, [pc, #52]	; (8003a48 <MX_TIM4_Init+0x134>)
 8003a14:	f003 fd40 	bl	8007498 <HAL_TIM_IC_ConfigChannel>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <MX_TIM4_Init+0x10e>
  {
    Error_Handler();
 8003a1e:	f7ff fa3f 	bl	8002ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a22:	2300      	movs	r3, #0
 8003a24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a26:	2300      	movs	r3, #0
 8003a28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a2a:	1d3b      	adds	r3, r7, #4
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4806      	ldr	r0, [pc, #24]	; (8003a48 <MX_TIM4_Init+0x134>)
 8003a30:	f004 fca2 	bl	8008378 <HAL_TIMEx_MasterConfigSynchronization>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <MX_TIM4_Init+0x12a>
  {
    Error_Handler();
 8003a3a:	f7ff fa31 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003a3e:	bf00      	nop
 8003a40:	3740      	adds	r7, #64	; 0x40
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000904 	.word	0x20000904
 8003a4c:	40000800 	.word	0x40000800

08003a50 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a56:	f107 0308 	add.w	r3, r7, #8
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	605a      	str	r2, [r3, #4]
 8003a60:	609a      	str	r2, [r3, #8]
 8003a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a64:	463b      	mov	r3, r7
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003a6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <MX_TIM5_Init+0x94>)
 8003a6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ae8 <MX_TIM5_Init+0x98>)
 8003a70:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42000-1;
 8003a72:	4b1c      	ldr	r3, [pc, #112]	; (8003ae4 <MX_TIM5_Init+0x94>)
 8003a74:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8003a78:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <MX_TIM5_Init+0x94>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 8003a80:	4b18      	ldr	r3, [pc, #96]	; (8003ae4 <MX_TIM5_Init+0x94>)
 8003a82:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003a86:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a88:	4b16      	ldr	r3, [pc, #88]	; (8003ae4 <MX_TIM5_Init+0x94>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a8e:	4b15      	ldr	r3, [pc, #84]	; (8003ae4 <MX_TIM5_Init+0x94>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003a94:	4813      	ldr	r0, [pc, #76]	; (8003ae4 <MX_TIM5_Init+0x94>)
 8003a96:	f003 fa85 	bl	8006fa4 <HAL_TIM_Base_Init>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003aa0:	f7ff f9fe 	bl	8002ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aa8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003aaa:	f107 0308 	add.w	r3, r7, #8
 8003aae:	4619      	mov	r1, r3
 8003ab0:	480c      	ldr	r0, [pc, #48]	; (8003ae4 <MX_TIM5_Init+0x94>)
 8003ab2:	f003 fe4f 	bl	8007754 <HAL_TIM_ConfigClockSource>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003abc:	f7ff f9f0 	bl	8002ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003ac8:	463b      	mov	r3, r7
 8003aca:	4619      	mov	r1, r3
 8003acc:	4805      	ldr	r0, [pc, #20]	; (8003ae4 <MX_TIM5_Init+0x94>)
 8003ace:	f004 fc53 	bl	8008378 <HAL_TIMEx_MasterConfigSynchronization>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003ad8:	f7ff f9e2 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003adc:	bf00      	nop
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	2000094c 	.word	0x2000094c
 8003ae8:	40000c00 	.word	0x40000c00

08003aec <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08e      	sub	sp, #56	; 0x38
 8003af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003af2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	605a      	str	r2, [r3, #4]
 8003afc:	609a      	str	r2, [r3, #8]
 8003afe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003b00:	f107 0314 	add.w	r3, r7, #20
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	609a      	str	r2, [r3, #8]
 8003b0c:	60da      	str	r2, [r3, #12]
 8003b0e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003b10:	1d3b      	adds	r3, r7, #4
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	605a      	str	r2, [r3, #4]
 8003b18:	609a      	str	r2, [r3, #8]
 8003b1a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003b1c:	4b36      	ldr	r3, [pc, #216]	; (8003bf8 <MX_TIM9_Init+0x10c>)
 8003b1e:	4a37      	ldr	r2, [pc, #220]	; (8003bfc <MX_TIM9_Init+0x110>)
 8003b20:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 420-1;
 8003b22:	4b35      	ldr	r3, [pc, #212]	; (8003bf8 <MX_TIM9_Init+0x10c>)
 8003b24:	f240 12a3 	movw	r2, #419	; 0x1a3
 8003b28:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b2a:	4b33      	ldr	r3, [pc, #204]	; (8003bf8 <MX_TIM9_Init+0x10c>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 40000-1;
 8003b30:	4b31      	ldr	r3, [pc, #196]	; (8003bf8 <MX_TIM9_Init+0x10c>)
 8003b32:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003b36:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b38:	4b2f      	ldr	r3, [pc, #188]	; (8003bf8 <MX_TIM9_Init+0x10c>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b3e:	4b2e      	ldr	r3, [pc, #184]	; (8003bf8 <MX_TIM9_Init+0x10c>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003b44:	482c      	ldr	r0, [pc, #176]	; (8003bf8 <MX_TIM9_Init+0x10c>)
 8003b46:	f003 fa2d 	bl	8006fa4 <HAL_TIM_Base_Init>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <MX_TIM9_Init+0x68>
  {
    Error_Handler();
 8003b50:	f7ff f9a6 	bl	8002ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4825      	ldr	r0, [pc, #148]	; (8003bf8 <MX_TIM9_Init+0x10c>)
 8003b62:	f003 fdf7 	bl	8007754 <HAL_TIM_ConfigClockSource>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <MX_TIM9_Init+0x84>
  {
    Error_Handler();
 8003b6c:	f7ff f998 	bl	8002ea0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8003b70:	4821      	ldr	r0, [pc, #132]	; (8003bf8 <MX_TIM9_Init+0x10c>)
 8003b72:	f003 fb30 	bl	80071d6 <HAL_TIM_IC_Init>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <MX_TIM9_Init+0x94>
  {
    Error_Handler();
 8003b7c:	f7ff f990 	bl	8002ea0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003b80:	2304      	movs	r3, #4
 8003b82:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003b84:	2350      	movs	r3, #80	; 0x50
 8003b86:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8003b94:	f107 0314 	add.w	r3, r7, #20
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4817      	ldr	r0, [pc, #92]	; (8003bf8 <MX_TIM9_Init+0x10c>)
 8003b9c:	f003 fea1 	bl	80078e2 <HAL_TIM_SlaveConfigSynchro>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <MX_TIM9_Init+0xbe>
  {
    Error_Handler();
 8003ba6:	f7ff f97b 	bl	8002ea0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003baa:	2300      	movs	r3, #0
 8003bac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003bba:	1d3b      	adds	r3, r7, #4
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	480d      	ldr	r0, [pc, #52]	; (8003bf8 <MX_TIM9_Init+0x10c>)
 8003bc2:	f003 fc69 	bl	8007498 <HAL_TIM_IC_ConfigChannel>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <MX_TIM9_Init+0xe4>
  {
    Error_Handler();
 8003bcc:	f7ff f968 	bl	8002ea0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003bd8:	1d3b      	adds	r3, r7, #4
 8003bda:	2204      	movs	r2, #4
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4806      	ldr	r0, [pc, #24]	; (8003bf8 <MX_TIM9_Init+0x10c>)
 8003be0:	f003 fc5a 	bl	8007498 <HAL_TIM_IC_ConfigChannel>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <MX_TIM9_Init+0x102>
  {
    Error_Handler();
 8003bea:	f7ff f959 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003bee:	bf00      	nop
 8003bf0:	3738      	adds	r7, #56	; 0x38
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20000994 	.word	0x20000994
 8003bfc:	40014000 	.word	0x40014000

08003c00 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08e      	sub	sp, #56	; 0x38
 8003c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	605a      	str	r2, [r3, #4]
 8003c10:	609a      	str	r2, [r3, #8]
 8003c12:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003c14:	f107 0314 	add.w	r3, r7, #20
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	605a      	str	r2, [r3, #4]
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	60da      	str	r2, [r3, #12]
 8003c22:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003c24:	1d3b      	adds	r3, r7, #4
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	605a      	str	r2, [r3, #4]
 8003c2c:	609a      	str	r2, [r3, #8]
 8003c2e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003c30:	4b35      	ldr	r3, [pc, #212]	; (8003d08 <MX_TIM12_Init+0x108>)
 8003c32:	4a36      	ldr	r2, [pc, #216]	; (8003d0c <MX_TIM12_Init+0x10c>)
 8003c34:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 210-1;
 8003c36:	4b34      	ldr	r3, [pc, #208]	; (8003d08 <MX_TIM12_Init+0x108>)
 8003c38:	22d1      	movs	r2, #209	; 0xd1
 8003c3a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c3c:	4b32      	ldr	r3, [pc, #200]	; (8003d08 <MX_TIM12_Init+0x108>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 40000-1;
 8003c42:	4b31      	ldr	r3, [pc, #196]	; (8003d08 <MX_TIM12_Init+0x108>)
 8003c44:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003c48:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c4a:	4b2f      	ldr	r3, [pc, #188]	; (8003d08 <MX_TIM12_Init+0x108>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c50:	4b2d      	ldr	r3, [pc, #180]	; (8003d08 <MX_TIM12_Init+0x108>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003c56:	482c      	ldr	r0, [pc, #176]	; (8003d08 <MX_TIM12_Init+0x108>)
 8003c58:	f003 f9a4 	bl	8006fa4 <HAL_TIM_Base_Init>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 8003c62:	f7ff f91d 	bl	8002ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003c6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c70:	4619      	mov	r1, r3
 8003c72:	4825      	ldr	r0, [pc, #148]	; (8003d08 <MX_TIM12_Init+0x108>)
 8003c74:	f003 fd6e 	bl	8007754 <HAL_TIM_ConfigClockSource>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8003c7e:	f7ff f90f 	bl	8002ea0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8003c82:	4821      	ldr	r0, [pc, #132]	; (8003d08 <MX_TIM12_Init+0x108>)
 8003c84:	f003 faa7 	bl	80071d6 <HAL_TIM_IC_Init>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <MX_TIM12_Init+0x92>
  {
    Error_Handler();
 8003c8e:	f7ff f907 	bl	8002ea0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003c92:	2304      	movs	r3, #4
 8003c94:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003c96:	2350      	movs	r3, #80	; 0x50
 8003c98:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8003ca6:	f107 0314 	add.w	r3, r7, #20
 8003caa:	4619      	mov	r1, r3
 8003cac:	4816      	ldr	r0, [pc, #88]	; (8003d08 <MX_TIM12_Init+0x108>)
 8003cae:	f003 fe18 	bl	80078e2 <HAL_TIM_SlaveConfigSynchro>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <MX_TIM12_Init+0xbc>
  {
    Error_Handler();
 8003cb8:	f7ff f8f2 	bl	8002ea0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003ccc:	1d3b      	adds	r3, r7, #4
 8003cce:	2200      	movs	r2, #0
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	480d      	ldr	r0, [pc, #52]	; (8003d08 <MX_TIM12_Init+0x108>)
 8003cd4:	f003 fbe0 	bl	8007498 <HAL_TIM_IC_ConfigChannel>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <MX_TIM12_Init+0xe2>
  {
    Error_Handler();
 8003cde:	f7ff f8df 	bl	8002ea0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003cea:	1d3b      	adds	r3, r7, #4
 8003cec:	2204      	movs	r2, #4
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4805      	ldr	r0, [pc, #20]	; (8003d08 <MX_TIM12_Init+0x108>)
 8003cf2:	f003 fbd1 	bl	8007498 <HAL_TIM_IC_ConfigChannel>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <MX_TIM12_Init+0x100>
  {
    Error_Handler();
 8003cfc:	f7ff f8d0 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8003d00:	bf00      	nop
 8003d02:	3738      	adds	r7, #56	; 0x38
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	200009dc 	.word	0x200009dc
 8003d0c:	40001800 	.word	0x40001800

08003d10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b094      	sub	sp, #80	; 0x50
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	60da      	str	r2, [r3, #12]
 8003d26:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a8f      	ldr	r2, [pc, #572]	; (8003f6c <HAL_TIM_Base_MspInit+0x25c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d11e      	bne.n	8003d70 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d36:	4b8e      	ldr	r3, [pc, #568]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	4a8d      	ldr	r2, [pc, #564]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	6453      	str	r3, [r2, #68]	; 0x44
 8003d42:	4b8b      	ldr	r3, [pc, #556]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003d4e:	2200      	movs	r2, #0
 8003d50:	2105      	movs	r1, #5
 8003d52:	2018      	movs	r0, #24
 8003d54:	f001 fa3a 	bl	80051cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003d58:	2018      	movs	r0, #24
 8003d5a:	f001 fa53 	bl	8005204 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8003d5e:	2200      	movs	r2, #0
 8003d60:	210f      	movs	r1, #15
 8003d62:	2019      	movs	r0, #25
 8003d64:	f001 fa32 	bl	80051cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003d68:	2019      	movs	r0, #25
 8003d6a:	f001 fa4b 	bl	8005204 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8003d6e:	e149      	b.n	8004004 <HAL_TIM_Base_MspInit+0x2f4>
  else if(tim_baseHandle->Instance==TIM2)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d78:	d134      	bne.n	8003de4 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d7e:	4b7c      	ldr	r3, [pc, #496]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	4a7b      	ldr	r2, [pc, #492]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8a:	4b79      	ldr	r3, [pc, #484]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	637b      	str	r3, [r7, #52]	; 0x34
 8003d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	633b      	str	r3, [r7, #48]	; 0x30
 8003d9a:	4b75      	ldr	r3, [pc, #468]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	4a74      	ldr	r2, [pc, #464]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	6313      	str	r3, [r2, #48]	; 0x30
 8003da6:	4b72      	ldr	r3, [pc, #456]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	633b      	str	r3, [r7, #48]	; 0x30
 8003db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = pwm_input_2_Pin;
 8003db2:	2301      	movs	r3, #1
 8003db4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db6:	2302      	movs	r3, #2
 8003db8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(pwm_input_2_GPIO_Port, &GPIO_InitStruct);
 8003dc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4869      	ldr	r0, [pc, #420]	; (8003f74 <HAL_TIM_Base_MspInit+0x264>)
 8003dce:	f001 fab9 	bl	8005344 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2106      	movs	r1, #6
 8003dd6:	201c      	movs	r0, #28
 8003dd8:	f001 f9f8 	bl	80051cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ddc:	201c      	movs	r0, #28
 8003dde:	f001 fa11 	bl	8005204 <HAL_NVIC_EnableIRQ>
}
 8003de2:	e10f      	b.n	8004004 <HAL_TIM_Base_MspInit+0x2f4>
  else if(tim_baseHandle->Instance==TIM3)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a63      	ldr	r2, [pc, #396]	; (8003f78 <HAL_TIM_Base_MspInit+0x268>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d134      	bne.n	8003e58 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003df2:	4b5f      	ldr	r3, [pc, #380]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	4a5e      	ldr	r2, [pc, #376]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003df8:	f043 0302 	orr.w	r3, r3, #2
 8003dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfe:	4b5c      	ldr	r3, [pc, #368]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e0e:	4b58      	ldr	r3, [pc, #352]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	4a57      	ldr	r2, [pc, #348]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1a:	4b55      	ldr	r3, [pc, #340]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = pwm_input_3_Pin;
 8003e26:	2340      	movs	r3, #64	; 0x40
 8003e28:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e32:	2300      	movs	r3, #0
 8003e34:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e36:	2302      	movs	r3, #2
 8003e38:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(pwm_input_3_GPIO_Port, &GPIO_InitStruct);
 8003e3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e3e:	4619      	mov	r1, r3
 8003e40:	484c      	ldr	r0, [pc, #304]	; (8003f74 <HAL_TIM_Base_MspInit+0x264>)
 8003e42:	f001 fa7f 	bl	8005344 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 7, 0);
 8003e46:	2200      	movs	r2, #0
 8003e48:	2107      	movs	r1, #7
 8003e4a:	201d      	movs	r0, #29
 8003e4c:	f001 f9be 	bl	80051cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003e50:	201d      	movs	r0, #29
 8003e52:	f001 f9d7 	bl	8005204 <HAL_NVIC_EnableIRQ>
}
 8003e56:	e0d5      	b.n	8004004 <HAL_TIM_Base_MspInit+0x2f4>
  else if(tim_baseHandle->Instance==TIM4)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a47      	ldr	r2, [pc, #284]	; (8003f7c <HAL_TIM_Base_MspInit+0x26c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d135      	bne.n	8003ece <HAL_TIM_Base_MspInit+0x1be>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
 8003e66:	4b42      	ldr	r3, [pc, #264]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	4a41      	ldr	r2, [pc, #260]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003e6c:	f043 0304 	orr.w	r3, r3, #4
 8003e70:	6413      	str	r3, [r2, #64]	; 0x40
 8003e72:	4b3f      	ldr	r3, [pc, #252]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	623b      	str	r3, [r7, #32]
 8003e82:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	4a3a      	ldr	r2, [pc, #232]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003e88:	f043 0308 	orr.w	r3, r3, #8
 8003e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8e:	4b38      	ldr	r3, [pc, #224]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	623b      	str	r3, [r7, #32]
 8003e98:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = pwm_input_4_Pin;
 8003e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003eac:	2302      	movs	r3, #2
 8003eae:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(pwm_input_4_GPIO_Port, &GPIO_InitStruct);
 8003eb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4832      	ldr	r0, [pc, #200]	; (8003f80 <HAL_TIM_Base_MspInit+0x270>)
 8003eb8:	f001 fa44 	bl	8005344 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 8, 0);
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2108      	movs	r1, #8
 8003ec0:	201e      	movs	r0, #30
 8003ec2:	f001 f983 	bl	80051cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ec6:	201e      	movs	r0, #30
 8003ec8:	f001 f99c 	bl	8005204 <HAL_NVIC_EnableIRQ>
}
 8003ecc:	e09a      	b.n	8004004 <HAL_TIM_Base_MspInit+0x2f4>
  else if(tim_baseHandle->Instance==TIM5)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a2c      	ldr	r2, [pc, #176]	; (8003f84 <HAL_TIM_Base_MspInit+0x274>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d10e      	bne.n	8003ef6 <HAL_TIM_Base_MspInit+0x1e6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61fb      	str	r3, [r7, #28]
 8003edc:	4b24      	ldr	r3, [pc, #144]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	4a23      	ldr	r2, [pc, #140]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003ee2:	f043 0308 	orr.w	r3, r3, #8
 8003ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ee8:	4b21      	ldr	r3, [pc, #132]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
}
 8003ef4:	e086      	b.n	8004004 <HAL_TIM_Base_MspInit+0x2f4>
  else if(tim_baseHandle->Instance==TIM9)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a23      	ldr	r2, [pc, #140]	; (8003f88 <HAL_TIM_Base_MspInit+0x278>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d147      	bne.n	8003f90 <HAL_TIM_Base_MspInit+0x280>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003f00:	2300      	movs	r3, #0
 8003f02:	61bb      	str	r3, [r7, #24]
 8003f04:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f08:	4a19      	ldr	r2, [pc, #100]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0e:	6453      	str	r3, [r2, #68]	; 0x44
 8003f10:	4b17      	ldr	r3, [pc, #92]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	4a12      	ldr	r2, [pc, #72]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003f26:	f043 0310 	orr.w	r3, r3, #16
 8003f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2c:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <HAL_TIM_Base_MspInit+0x260>)
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = pwm_input_1_Pin;
 8003f38:	2320      	movs	r3, #32
 8003f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f44:	2300      	movs	r3, #0
 8003f46:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(pwm_input_1_GPIO_Port, &GPIO_InitStruct);
 8003f4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f50:	4619      	mov	r1, r3
 8003f52:	480e      	ldr	r0, [pc, #56]	; (8003f8c <HAL_TIM_Base_MspInit+0x27c>)
 8003f54:	f001 f9f6 	bl	8005344 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2105      	movs	r1, #5
 8003f5c:	2018      	movs	r0, #24
 8003f5e:	f001 f935 	bl	80051cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003f62:	2018      	movs	r0, #24
 8003f64:	f001 f94e 	bl	8005204 <HAL_NVIC_EnableIRQ>
}
 8003f68:	e04c      	b.n	8004004 <HAL_TIM_Base_MspInit+0x2f4>
 8003f6a:	bf00      	nop
 8003f6c:	40010000 	.word	0x40010000
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40020000 	.word	0x40020000
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800
 8003f80:	40020c00 	.word	0x40020c00
 8003f84:	40000c00 	.word	0x40000c00
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40021000 	.word	0x40021000
  else if(tim_baseHandle->Instance==TIM12)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a1d      	ldr	r2, [pc, #116]	; (800400c <HAL_TIM_Base_MspInit+0x2fc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d134      	bne.n	8004004 <HAL_TIM_Base_MspInit+0x2f4>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	4b1c      	ldr	r3, [pc, #112]	; (8004010 <HAL_TIM_Base_MspInit+0x300>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	4a1b      	ldr	r2, [pc, #108]	; (8004010 <HAL_TIM_Base_MspInit+0x300>)
 8003fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8003faa:	4b19      	ldr	r3, [pc, #100]	; (8004010 <HAL_TIM_Base_MspInit+0x300>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	4b15      	ldr	r3, [pc, #84]	; (8004010 <HAL_TIM_Base_MspInit+0x300>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	4a14      	ldr	r2, [pc, #80]	; (8004010 <HAL_TIM_Base_MspInit+0x300>)
 8003fc0:	f043 0302 	orr.w	r3, r3, #2
 8003fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc6:	4b12      	ldr	r3, [pc, #72]	; (8004010 <HAL_TIM_Base_MspInit+0x300>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = pwm_input_5_Pin;
 8003fd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd8:	2302      	movs	r3, #2
 8003fda:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003fe4:	2309      	movs	r3, #9
 8003fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(pwm_input_5_GPIO_Port, &GPIO_InitStruct);
 8003fe8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003fec:	4619      	mov	r1, r3
 8003fee:	4809      	ldr	r0, [pc, #36]	; (8004014 <HAL_TIM_Base_MspInit+0x304>)
 8003ff0:	f001 f9a8 	bl	8005344 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 9, 0);
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2109      	movs	r1, #9
 8003ff8:	202b      	movs	r0, #43	; 0x2b
 8003ffa:	f001 f8e7 	bl	80051cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003ffe:	202b      	movs	r0, #43	; 0x2b
 8004000:	f001 f900 	bl	8005204 <HAL_NVIC_EnableIRQ>
}
 8004004:	bf00      	nop
 8004006:	3750      	adds	r7, #80	; 0x50
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40001800 	.word	0x40001800
 8004010:	40023800 	.word	0x40023800
 8004014:	40020400 	.word	0x40020400

08004018 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004020:	f107 030c 	add.w	r3, r7, #12
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	609a      	str	r2, [r3, #8]
 800402c:	60da      	str	r2, [r3, #12]
 800402e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a12      	ldr	r2, [pc, #72]	; (8004080 <HAL_TIM_MspPostInit+0x68>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d11e      	bne.n	8004078 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	4b11      	ldr	r3, [pc, #68]	; (8004084 <HAL_TIM_MspPostInit+0x6c>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	4a10      	ldr	r2, [pc, #64]	; (8004084 <HAL_TIM_MspPostInit+0x6c>)
 8004044:	f043 0310 	orr.w	r3, r3, #16
 8004048:	6313      	str	r3, [r2, #48]	; 0x30
 800404a:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <HAL_TIM_MspPostInit+0x6c>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = pwm_output_1_Pin|pwm_output_2_Pin|pwm_output_3_Pin|pwm_output_4_Pin;
 8004056:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800405a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800405c:	2302      	movs	r3, #2
 800405e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004064:	2300      	movs	r3, #0
 8004066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004068:	2301      	movs	r3, #1
 800406a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800406c:	f107 030c 	add.w	r3, r7, #12
 8004070:	4619      	mov	r1, r3
 8004072:	4805      	ldr	r0, [pc, #20]	; (8004088 <HAL_TIM_MspPostInit+0x70>)
 8004074:	f001 f966 	bl	8005344 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004078:	bf00      	nop
 800407a:	3720      	adds	r7, #32
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40010000 	.word	0x40010000
 8004084:	40023800 	.word	0x40023800
 8004088:	40021000 	.word	0x40021000

0800408c <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8004090:	4b0d      	ldr	r3, [pc, #52]	; (80040c8 <Ringbuf_init+0x3c>)
 8004092:	4a0e      	ldr	r2, [pc, #56]	; (80040cc <Ringbuf_init+0x40>)
 8004094:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8004096:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <Ringbuf_init+0x44>)
 8004098:	4a0e      	ldr	r2, [pc, #56]	; (80040d4 <Ringbuf_init+0x48>)
 800409a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 800409c:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <Ringbuf_init+0x4c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	4b0d      	ldr	r3, [pc, #52]	; (80040d8 <Ringbuf_init+0x4c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <Ringbuf_init+0x4c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <Ringbuf_init+0x4c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0220 	orr.w	r2, r2, #32
 80040ba:	60da      	str	r2, [r3, #12]
}
 80040bc:	bf00      	nop
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	20000e38 	.word	0x20000e38
 80040cc:	20000a28 	.word	0x20000a28
 80040d0:	20000e3c 	.word	0x20000e3c
 80040d4:	20000c30 	.word	0x20000c30
 80040d8:	20000e84 	.word	0x20000e84

080040dc <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	6039      	str	r1, [r7, #0]
 80040e6:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040ee:	3301      	adds	r3, #1
 80040f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f4:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d009      	beq.n	8004116 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	79f9      	ldrb	r1, [r7, #7]
 800410c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 800412a:	4b13      	ldr	r3, [pc, #76]	; (8004178 <Uart_read+0x54>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004132:	4b11      	ldr	r3, [pc, #68]	; (8004178 <Uart_read+0x54>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800413a:	429a      	cmp	r2, r3
 800413c:	d102      	bne.n	8004144 <Uart_read+0x20>
  {
    return -1;
 800413e:	f04f 33ff 	mov.w	r3, #4294967295
 8004142:	e013      	b.n	800416c <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8004144:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <Uart_read+0x54>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <Uart_read+0x54>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004150:	5cd3      	ldrb	r3, [r2, r3]
 8004152:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8004154:	4b08      	ldr	r3, [pc, #32]	; (8004178 <Uart_read+0x54>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <Uart_read+0x54>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004166:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 800416a:	79fb      	ldrb	r3, [r7, #7]
  }
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	20000e38 	.word	0x20000e38

0800417c <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8004180:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <IsDataAvailable+0x30>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004188:	b29a      	uxth	r2, r3
 800418a:	4b08      	ldr	r3, [pc, #32]	; (80041ac <IsDataAvailable+0x30>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004192:	b29b      	uxth	r3, r3
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	b29b      	uxth	r3, r3
 8004198:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800419c:	b29b      	uxth	r3, r3
 800419e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	20000e38 	.word	0x20000e38

080041b0 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <Uart_peek+0x38>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80041bc:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <Uart_peek+0x38>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d102      	bne.n	80041ce <Uart_peek+0x1e>
  {
    return -1;
 80041c8:	f04f 33ff 	mov.w	r3, #4294967295
 80041cc:	e006      	b.n	80041dc <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <Uart_peek+0x38>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <Uart_peek+0x38>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80041da:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 80041dc:	4618      	mov	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	20000e38 	.word	0x20000e38

080041ec <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fc f838 	bl	8000270 <strlen>
 8004200:	4603      	mov	r3, r0
 8004202:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8004208:	e01e      	b.n	8004248 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 800420a:	4b36      	ldr	r3, [pc, #216]	; (80042e4 <Copy_upto+0xf8>)
 800420c:	6819      	ldr	r1, [r3, #0]
 800420e:	4b35      	ldr	r3, [pc, #212]	; (80042e4 <Copy_upto+0xf8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	6838      	ldr	r0, [r7, #0]
 800421a:	4403      	add	r3, r0
 800421c:	5c8a      	ldrb	r2, [r1, r2]
 800421e:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8004220:	4b30      	ldr	r3, [pc, #192]	; (80042e4 <Copy_upto+0xf8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	4b2e      	ldr	r3, [pc, #184]	; (80042e4 <Copy_upto+0xf8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004232:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	3301      	adds	r3, #1
 800423a:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 800423c:	bf00      	nop
 800423e:	f7ff ff9d 	bl	800417c <IsDataAvailable>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0fa      	beq.n	800423e <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8004248:	f7ff ffb2 	bl	80041b0 <Uart_peek>
 800424c:	4601      	mov	r1, r0
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	4413      	add	r3, r2
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	4299      	cmp	r1, r3
 8004258:	d1d7      	bne.n	800420a <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 800425a:	e027      	b.n	80042ac <Copy_upto+0xc0>
	{
		so_far++;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	3301      	adds	r3, #1
 8004260:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8004262:	f7ff ff5f 	bl	8004124 <Uart_read>
 8004266:	4601      	mov	r1, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	613a      	str	r2, [r7, #16]
 800426e:	461a      	mov	r2, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	4413      	add	r3, r2
 8004274:	b2ca      	uxtb	r2, r1
 8004276:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	429a      	cmp	r2, r3
 800427e:	d101      	bne.n	8004284 <Copy_upto+0x98>
 8004280:	2301      	movs	r3, #1
 8004282:	e02a      	b.n	80042da <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8004284:	4b18      	ldr	r3, [pc, #96]	; (80042e8 <Copy_upto+0xfc>)
 8004286:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800428a:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 800428c:	bf00      	nop
 800428e:	f7ff ff75 	bl	800417c <IsDataAvailable>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d103      	bne.n	80042a0 <Copy_upto+0xb4>
 8004298:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <Copy_upto+0xfc>)
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1f6      	bne.n	800428e <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 80042a0:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <Copy_upto+0xfc>)
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <Copy_upto+0xc0>
 80042a8:	2300      	movs	r3, #0
 80042aa:	e016      	b.n	80042da <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 80042ac:	f7ff ff80 	bl	80041b0 <Uart_peek>
 80042b0:	4601      	mov	r1, r0
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	4413      	add	r3, r2
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	4299      	cmp	r1, r3
 80042bc:	d0ce      	beq.n	800425c <Copy_upto+0x70>
	}

	if (so_far != len)
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d002      	beq.n	80042cc <Copy_upto+0xe0>
	{
		so_far = 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	617b      	str	r3, [r7, #20]
		goto again;
 80042ca:	e79d      	b.n	8004208 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d101      	bne.n	80042d8 <Copy_upto+0xec>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <Copy_upto+0xee>
	else return 0;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000e38 	.word	0x20000e38
 80042e8:	20000a24 	.word	0x20000a24

080042ec <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7fb ffb9 	bl	8000270 <strlen>
 80042fe:	4603      	mov	r3, r0
 8004300:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8004302:	4b3c      	ldr	r3, [pc, #240]	; (80043f4 <Wait_for+0x108>)
 8004304:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004308:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 800430a:	bf00      	nop
 800430c:	f7ff ff36 	bl	800417c <IsDataAvailable>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d103      	bne.n	800431e <Wait_for+0x32>
 8004316:	4b37      	ldr	r3, [pc, #220]	; (80043f4 <Wait_for+0x108>)
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f6      	bne.n	800430c <Wait_for+0x20>
	if (timeout == 0) return 0;
 800431e:	4b35      	ldr	r3, [pc, #212]	; (80043f4 <Wait_for+0x108>)
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d119      	bne.n	800435a <Wait_for+0x6e>
 8004326:	2300      	movs	r3, #0
 8004328:	e060      	b.n	80043ec <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 800432a:	4b33      	ldr	r3, [pc, #204]	; (80043f8 <Wait_for+0x10c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004332:	4b31      	ldr	r3, [pc, #196]	; (80043f8 <Wait_for+0x10c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800433a:	429a      	cmp	r2, r3
 800433c:	d00b      	beq.n	8004356 <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 800433e:	4b2e      	ldr	r3, [pc, #184]	; (80043f8 <Wait_for+0x10c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	4b2b      	ldr	r3, [pc, #172]	; (80043f8 <Wait_for+0x10c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004350:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004354:	e001      	b.n	800435a <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8004356:	2300      	movs	r3, #0
 8004358:	e048      	b.n	80043ec <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 800435a:	f7ff ff29 	bl	80041b0 <Uart_peek>
 800435e:	4601      	mov	r1, r0
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	4299      	cmp	r1, r3
 800436a:	d1de      	bne.n	800432a <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 800436c:	e027      	b.n	80043be <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	3301      	adds	r3, #1
 8004372:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8004374:	4b20      	ldr	r3, [pc, #128]	; (80043f8 <Wait_for+0x10c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	4b1e      	ldr	r3, [pc, #120]	; (80043f8 <Wait_for+0x10c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004386:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	429a      	cmp	r2, r3
 8004390:	d101      	bne.n	8004396 <Wait_for+0xaa>
 8004392:	2301      	movs	r3, #1
 8004394:	e02a      	b.n	80043ec <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8004396:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <Wait_for+0x108>)
 8004398:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800439c:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 800439e:	bf00      	nop
 80043a0:	f7ff feec 	bl	800417c <IsDataAvailable>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d103      	bne.n	80043b2 <Wait_for+0xc6>
 80043aa:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <Wait_for+0x108>)
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f6      	bne.n	80043a0 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 80043b2:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <Wait_for+0x108>)
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <Wait_for+0xd2>
 80043ba:	2300      	movs	r3, #0
 80043bc:	e016      	b.n	80043ec <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80043be:	f7ff fef7 	bl	80041b0 <Uart_peek>
 80043c2:	4601      	mov	r1, r0
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	4413      	add	r3, r2
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	4299      	cmp	r1, r3
 80043ce:	d0ce      	beq.n	800436e <Wait_for+0x82>
	}

	if (so_far != len)
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d002      	beq.n	80043de <Wait_for+0xf2>
	{
		so_far = 0;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]
		goto again;
 80043dc:	e791      	b.n	8004302 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d101      	bne.n	80043ea <Wait_for+0xfe>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <Wait_for+0x100>
	else return 0;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000a24 	.word	0x20000a24
 80043f8:	20000e38 	.word	0x20000e38

080043fc <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b00      	cmp	r3, #0
 800441c:	d013      	beq.n	8004446 <Uart_isr+0x4a>
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00e      	beq.n	8004446 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8004436:	4b1e      	ldr	r3, [pc, #120]	; (80044b0 <Uart_isr+0xb4>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	4611      	mov	r1, r2
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fe4c 	bl	80040dc <store_char>
        return;
 8004444:	e031      	b.n	80044aa <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444c:	2b00      	cmp	r3, #0
 800444e:	d02c      	beq.n	80044aa <Uart_isr+0xae>
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004456:	2b00      	cmp	r3, #0
 8004458:	d027      	beq.n	80044aa <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800445a:	4b16      	ldr	r3, [pc, #88]	; (80044b4 <Uart_isr+0xb8>)
 800445c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004460:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <Uart_isr+0xb8>)
 8004462:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004466:	429a      	cmp	r2, r3
 8004468:	d108      	bne.n	800447c <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004478:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800447a:	e015      	b.n	80044a8 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800447c:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <Uart_isr+0xb8>)
 800447e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004482:	4a0c      	ldr	r2, [pc, #48]	; (80044b4 <Uart_isr+0xb8>)
 8004484:	5cd3      	ldrb	r3, [r2, r3]
 8004486:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8004488:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <Uart_isr+0xb8>)
 800448a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800448e:	3301      	adds	r3, #1
 8004490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004494:	4a07      	ldr	r2, [pc, #28]	; (80044b4 <Uart_isr+0xb8>)
 8004496:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	7bba      	ldrb	r2, [r7, #14]
 80044a6:	605a      	str	r2, [r3, #4]
    	return;
 80044a8:	bf00      	nop
    }
}
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20000e38 	.word	0x20000e38
 80044b4:	20000c30 	.word	0x20000c30

080044b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80044bc:	4b11      	ldr	r3, [pc, #68]	; (8004504 <MX_USART1_UART_Init+0x4c>)
 80044be:	4a12      	ldr	r2, [pc, #72]	; (8004508 <MX_USART1_UART_Init+0x50>)
 80044c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80044c2:	4b10      	ldr	r3, [pc, #64]	; (8004504 <MX_USART1_UART_Init+0x4c>)
 80044c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044ca:	4b0e      	ldr	r3, [pc, #56]	; (8004504 <MX_USART1_UART_Init+0x4c>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80044d0:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <MX_USART1_UART_Init+0x4c>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80044d6:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <MX_USART1_UART_Init+0x4c>)
 80044d8:	2200      	movs	r2, #0
 80044da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <MX_USART1_UART_Init+0x4c>)
 80044de:	220c      	movs	r2, #12
 80044e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044e2:	4b08      	ldr	r3, [pc, #32]	; (8004504 <MX_USART1_UART_Init+0x4c>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044e8:	4b06      	ldr	r3, [pc, #24]	; (8004504 <MX_USART1_UART_Init+0x4c>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80044ee:	4805      	ldr	r0, [pc, #20]	; (8004504 <MX_USART1_UART_Init+0x4c>)
 80044f0:	f004 f824 	bl	800853c <HAL_UART_Init>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80044fa:	f7fe fcd1 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80044fe:	bf00      	nop
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000e40 	.word	0x20000e40
 8004508:	40011000 	.word	0x40011000

0800450c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004510:	4b11      	ldr	r3, [pc, #68]	; (8004558 <MX_USART2_UART_Init+0x4c>)
 8004512:	4a12      	ldr	r2, [pc, #72]	; (800455c <MX_USART2_UART_Init+0x50>)
 8004514:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004516:	4b10      	ldr	r3, [pc, #64]	; (8004558 <MX_USART2_UART_Init+0x4c>)
 8004518:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800451c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800451e:	4b0e      	ldr	r3, [pc, #56]	; (8004558 <MX_USART2_UART_Init+0x4c>)
 8004520:	2200      	movs	r2, #0
 8004522:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <MX_USART2_UART_Init+0x4c>)
 8004526:	2200      	movs	r2, #0
 8004528:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800452a:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <MX_USART2_UART_Init+0x4c>)
 800452c:	2200      	movs	r2, #0
 800452e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004530:	4b09      	ldr	r3, [pc, #36]	; (8004558 <MX_USART2_UART_Init+0x4c>)
 8004532:	220c      	movs	r2, #12
 8004534:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004536:	4b08      	ldr	r3, [pc, #32]	; (8004558 <MX_USART2_UART_Init+0x4c>)
 8004538:	2200      	movs	r2, #0
 800453a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <MX_USART2_UART_Init+0x4c>)
 800453e:	2200      	movs	r2, #0
 8004540:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004542:	4805      	ldr	r0, [pc, #20]	; (8004558 <MX_USART2_UART_Init+0x4c>)
 8004544:	f003 fffa 	bl	800853c <HAL_UART_Init>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800454e:	f7fe fca7 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004552:	bf00      	nop
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20000e84 	.word	0x20000e84
 800455c:	40004400 	.word	0x40004400

08004560 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004564:	4b11      	ldr	r3, [pc, #68]	; (80045ac <MX_USART3_UART_Init+0x4c>)
 8004566:	4a12      	ldr	r2, [pc, #72]	; (80045b0 <MX_USART3_UART_Init+0x50>)
 8004568:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800456a:	4b10      	ldr	r3, [pc, #64]	; (80045ac <MX_USART3_UART_Init+0x4c>)
 800456c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004570:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004572:	4b0e      	ldr	r3, [pc, #56]	; (80045ac <MX_USART3_UART_Init+0x4c>)
 8004574:	2200      	movs	r2, #0
 8004576:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004578:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <MX_USART3_UART_Init+0x4c>)
 800457a:	2200      	movs	r2, #0
 800457c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800457e:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <MX_USART3_UART_Init+0x4c>)
 8004580:	2200      	movs	r2, #0
 8004582:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004584:	4b09      	ldr	r3, [pc, #36]	; (80045ac <MX_USART3_UART_Init+0x4c>)
 8004586:	220c      	movs	r2, #12
 8004588:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800458a:	4b08      	ldr	r3, [pc, #32]	; (80045ac <MX_USART3_UART_Init+0x4c>)
 800458c:	2200      	movs	r2, #0
 800458e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004590:	4b06      	ldr	r3, [pc, #24]	; (80045ac <MX_USART3_UART_Init+0x4c>)
 8004592:	2200      	movs	r2, #0
 8004594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004596:	4805      	ldr	r0, [pc, #20]	; (80045ac <MX_USART3_UART_Init+0x4c>)
 8004598:	f003 ffd0 	bl	800853c <HAL_UART_Init>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80045a2:	f7fe fc7d 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80045a6:	bf00      	nop
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000ec8 	.word	0x20000ec8
 80045b0:	40004800 	.word	0x40004800

080045b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08e      	sub	sp, #56	; 0x38
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	609a      	str	r2, [r3, #8]
 80045c8:	60da      	str	r2, [r3, #12]
 80045ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a54      	ldr	r2, [pc, #336]	; (8004724 <HAL_UART_MspInit+0x170>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d12d      	bne.n	8004632 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	623b      	str	r3, [r7, #32]
 80045da:	4b53      	ldr	r3, [pc, #332]	; (8004728 <HAL_UART_MspInit+0x174>)
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	4a52      	ldr	r2, [pc, #328]	; (8004728 <HAL_UART_MspInit+0x174>)
 80045e0:	f043 0310 	orr.w	r3, r3, #16
 80045e4:	6453      	str	r3, [r2, #68]	; 0x44
 80045e6:	4b50      	ldr	r3, [pc, #320]	; (8004728 <HAL_UART_MspInit+0x174>)
 80045e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	623b      	str	r3, [r7, #32]
 80045f0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
 80045f6:	4b4c      	ldr	r3, [pc, #304]	; (8004728 <HAL_UART_MspInit+0x174>)
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	4a4b      	ldr	r2, [pc, #300]	; (8004728 <HAL_UART_MspInit+0x174>)
 80045fc:	f043 0301 	orr.w	r3, r3, #1
 8004600:	6313      	str	r3, [r2, #48]	; 0x30
 8004602:	4b49      	ldr	r3, [pc, #292]	; (8004728 <HAL_UART_MspInit+0x174>)
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	61fb      	str	r3, [r7, #28]
 800460c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = jetson_uart_tx_Pin|jetson_uart_rx_Pin;
 800460e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004614:	2302      	movs	r3, #2
 8004616:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004618:	2300      	movs	r3, #0
 800461a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800461c:	2303      	movs	r3, #3
 800461e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004620:	2307      	movs	r3, #7
 8004622:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004628:	4619      	mov	r1, r3
 800462a:	4840      	ldr	r0, [pc, #256]	; (800472c <HAL_UART_MspInit+0x178>)
 800462c:	f000 fe8a 	bl	8005344 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004630:	e073      	b.n	800471a <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART2)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a3e      	ldr	r2, [pc, #248]	; (8004730 <HAL_UART_MspInit+0x17c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d134      	bne.n	80046a6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800463c:	2300      	movs	r3, #0
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	4b39      	ldr	r3, [pc, #228]	; (8004728 <HAL_UART_MspInit+0x174>)
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	4a38      	ldr	r2, [pc, #224]	; (8004728 <HAL_UART_MspInit+0x174>)
 8004646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800464a:	6413      	str	r3, [r2, #64]	; 0x40
 800464c:	4b36      	ldr	r3, [pc, #216]	; (8004728 <HAL_UART_MspInit+0x174>)
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004654:	61bb      	str	r3, [r7, #24]
 8004656:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	4b32      	ldr	r3, [pc, #200]	; (8004728 <HAL_UART_MspInit+0x174>)
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	4a31      	ldr	r2, [pc, #196]	; (8004728 <HAL_UART_MspInit+0x174>)
 8004662:	f043 0301 	orr.w	r3, r3, #1
 8004666:	6313      	str	r3, [r2, #48]	; 0x30
 8004668:	4b2f      	ldr	r3, [pc, #188]	; (8004728 <HAL_UART_MspInit+0x174>)
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = gps_uart_tx_Pin|gps_uart_rx_Pin;
 8004674:	230c      	movs	r3, #12
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004678:	2302      	movs	r3, #2
 800467a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467c:	2300      	movs	r3, #0
 800467e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004680:	2303      	movs	r3, #3
 8004682:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004684:	2307      	movs	r3, #7
 8004686:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800468c:	4619      	mov	r1, r3
 800468e:	4827      	ldr	r0, [pc, #156]	; (800472c <HAL_UART_MspInit+0x178>)
 8004690:	f000 fe58 	bl	8005344 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004694:	2200      	movs	r2, #0
 8004696:	2105      	movs	r1, #5
 8004698:	2026      	movs	r0, #38	; 0x26
 800469a:	f000 fd97 	bl	80051cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800469e:	2026      	movs	r0, #38	; 0x26
 80046a0:	f000 fdb0 	bl	8005204 <HAL_NVIC_EnableIRQ>
}
 80046a4:	e039      	b.n	800471a <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART3)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a22      	ldr	r2, [pc, #136]	; (8004734 <HAL_UART_MspInit+0x180>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d134      	bne.n	800471a <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART3_CLK_ENABLE();
 80046b0:	2300      	movs	r3, #0
 80046b2:	613b      	str	r3, [r7, #16]
 80046b4:	4b1c      	ldr	r3, [pc, #112]	; (8004728 <HAL_UART_MspInit+0x174>)
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	4a1b      	ldr	r2, [pc, #108]	; (8004728 <HAL_UART_MspInit+0x174>)
 80046ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046be:	6413      	str	r3, [r2, #64]	; 0x40
 80046c0:	4b19      	ldr	r3, [pc, #100]	; (8004728 <HAL_UART_MspInit+0x174>)
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	4b15      	ldr	r3, [pc, #84]	; (8004728 <HAL_UART_MspInit+0x174>)
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	4a14      	ldr	r2, [pc, #80]	; (8004728 <HAL_UART_MspInit+0x174>)
 80046d6:	f043 0302 	orr.w	r3, r3, #2
 80046da:	6313      	str	r3, [r2, #48]	; 0x30
 80046dc:	4b12      	ldr	r3, [pc, #72]	; (8004728 <HAL_UART_MspInit+0x174>)
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = debug_ttl_tx_Pin|debug_ttl_rx_Pin;
 80046e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ee:	2302      	movs	r3, #2
 80046f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046f6:	2303      	movs	r3, #3
 80046f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80046fa:	2307      	movs	r3, #7
 80046fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004702:	4619      	mov	r1, r3
 8004704:	480c      	ldr	r0, [pc, #48]	; (8004738 <HAL_UART_MspInit+0x184>)
 8004706:	f000 fe1d 	bl	8005344 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800470a:	2200      	movs	r2, #0
 800470c:	2105      	movs	r1, #5
 800470e:	2027      	movs	r0, #39	; 0x27
 8004710:	f000 fd5c 	bl	80051cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004714:	2027      	movs	r0, #39	; 0x27
 8004716:	f000 fd75 	bl	8005204 <HAL_NVIC_EnableIRQ>
}
 800471a:	bf00      	nop
 800471c:	3738      	adds	r7, #56	; 0x38
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40011000 	.word	0x40011000
 8004728:	40023800 	.word	0x40023800
 800472c:	40020000 	.word	0x40020000
 8004730:	40004400 	.word	0x40004400
 8004734:	40004800 	.word	0x40004800
 8004738:	40020400 	.word	0x40020400

0800473c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800473c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004774 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004740:	480d      	ldr	r0, [pc, #52]	; (8004778 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004742:	490e      	ldr	r1, [pc, #56]	; (800477c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004744:	4a0e      	ldr	r2, [pc, #56]	; (8004780 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004748:	e002      	b.n	8004750 <LoopCopyDataInit>

0800474a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800474a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800474c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800474e:	3304      	adds	r3, #4

08004750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004754:	d3f9      	bcc.n	800474a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004756:	4a0b      	ldr	r2, [pc, #44]	; (8004784 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004758:	4c0b      	ldr	r4, [pc, #44]	; (8004788 <LoopFillZerobss+0x26>)
  movs r3, #0
 800475a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800475c:	e001      	b.n	8004762 <LoopFillZerobss>

0800475e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800475e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004760:	3204      	adds	r2, #4

08004762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004764:	d3fb      	bcc.n	800475e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004766:	f7fe fec5 	bl	80034f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800476a:	f007 f979 	bl	800ba60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800476e:	f7fe fae5 	bl	8002d3c <main>
  bx  lr    
 8004772:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004774:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800477c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8004780:	0800ed40 	.word	0x0800ed40
  ldr r2, =_sbss
 8004784:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8004788:	20004db0 	.word	0x20004db0

0800478c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800478c:	e7fe      	b.n	800478c <ADC_IRQHandler>
	...

08004790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004794:	4b0e      	ldr	r3, [pc, #56]	; (80047d0 <HAL_Init+0x40>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a0d      	ldr	r2, [pc, #52]	; (80047d0 <HAL_Init+0x40>)
 800479a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800479e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80047a0:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <HAL_Init+0x40>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <HAL_Init+0x40>)
 80047a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047ac:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <HAL_Init+0x40>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a07      	ldr	r2, [pc, #28]	; (80047d0 <HAL_Init+0x40>)
 80047b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047b8:	2003      	movs	r0, #3
 80047ba:	f000 fcfc 	bl	80051b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047be:	200f      	movs	r0, #15
 80047c0:	f7fe fd00 	bl	80031c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047c4:	f7fe fcd2 	bl	800316c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40023c00 	.word	0x40023c00

080047d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <HAL_IncTick+0x20>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	461a      	mov	r2, r3
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <HAL_IncTick+0x24>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4413      	add	r3, r2
 80047e4:	4a04      	ldr	r2, [pc, #16]	; (80047f8 <HAL_IncTick+0x24>)
 80047e6:	6013      	str	r3, [r2, #0]
}
 80047e8:	bf00      	nop
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	2000001c 	.word	0x2000001c
 80047f8:	20000f0c 	.word	0x20000f0c

080047fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004800:	4b03      	ldr	r3, [pc, #12]	; (8004810 <HAL_GetTick+0x14>)
 8004802:	681b      	ldr	r3, [r3, #0]
}
 8004804:	4618      	mov	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	20000f0c 	.word	0x20000f0c

08004814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800481c:	f7ff ffee 	bl	80047fc <HAL_GetTick>
 8004820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482c:	d005      	beq.n	800483a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800482e:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <HAL_Delay+0x44>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800483a:	bf00      	nop
 800483c:	f7ff ffde 	bl	80047fc <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	429a      	cmp	r2, r3
 800484a:	d8f7      	bhi.n	800483c <HAL_Delay+0x28>
  {
  }
}
 800484c:	bf00      	nop
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	2000001c 	.word	0x2000001c

0800485c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e033      	b.n	80048da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fd fad6 	bl	8001e2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f003 0310 	and.w	r3, r3, #16
 8004896:	2b00      	cmp	r3, #0
 8004898:	d118      	bne.n	80048cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80048a2:	f023 0302 	bic.w	r3, r3, #2
 80048a6:	f043 0202 	orr.w	r2, r3, #2
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fad8 	bl	8004e64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f023 0303 	bic.w	r3, r3, #3
 80048c2:	f043 0201 	orr.w	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40
 80048ca:	e001      	b.n	80048d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_ADC_Start+0x1a>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e0b2      	b.n	8004a64 <HAL_ADC_Start+0x180>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b01      	cmp	r3, #1
 8004912:	d018      	beq.n	8004946 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004924:	4b52      	ldr	r3, [pc, #328]	; (8004a70 <HAL_ADC_Start+0x18c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a52      	ldr	r2, [pc, #328]	; (8004a74 <HAL_ADC_Start+0x190>)
 800492a:	fba2 2303 	umull	r2, r3, r2, r3
 800492e:	0c9a      	lsrs	r2, r3, #18
 8004930:	4613      	mov	r3, r2
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	4413      	add	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004938:	e002      	b.n	8004940 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	3b01      	subs	r3, #1
 800493e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f9      	bne.n	800493a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b01      	cmp	r3, #1
 8004952:	d17a      	bne.n	8004a4a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800497e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800498e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004992:	d106      	bne.n	80049a2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004998:	f023 0206 	bic.w	r2, r3, #6
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	645a      	str	r2, [r3, #68]	; 0x44
 80049a0:	e002      	b.n	80049a8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049b0:	4b31      	ldr	r3, [pc, #196]	; (8004a78 <HAL_ADC_Start+0x194>)
 80049b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80049bc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f003 031f 	and.w	r3, r3, #31
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d12a      	bne.n	8004a20 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a2b      	ldr	r2, [pc, #172]	; (8004a7c <HAL_ADC_Start+0x198>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d015      	beq.n	8004a00 <HAL_ADC_Start+0x11c>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a29      	ldr	r2, [pc, #164]	; (8004a80 <HAL_ADC_Start+0x19c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d105      	bne.n	80049ea <HAL_ADC_Start+0x106>
 80049de:	4b26      	ldr	r3, [pc, #152]	; (8004a78 <HAL_ADC_Start+0x194>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a25      	ldr	r2, [pc, #148]	; (8004a84 <HAL_ADC_Start+0x1a0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d136      	bne.n	8004a62 <HAL_ADC_Start+0x17e>
 80049f4:	4b20      	ldr	r3, [pc, #128]	; (8004a78 <HAL_ADC_Start+0x194>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d130      	bne.n	8004a62 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d129      	bne.n	8004a62 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a1c:	609a      	str	r2, [r3, #8]
 8004a1e:	e020      	b.n	8004a62 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <HAL_ADC_Start+0x198>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d11b      	bne.n	8004a62 <HAL_ADC_Start+0x17e>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d114      	bne.n	8004a62 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a46:	609a      	str	r2, [r3, #8]
 8004a48:	e00b      	b.n	8004a62 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f043 0210 	orr.w	r2, r3, #16
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5a:	f043 0201 	orr.w	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	20000014 	.word	0x20000014
 8004a74:	431bde83 	.word	0x431bde83
 8004a78:	40012300 	.word	0x40012300
 8004a7c:	40012000 	.word	0x40012000
 8004a80:	40012100 	.word	0x40012100
 8004a84:	40012200 	.word	0x40012200

08004a88 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_ADC_Stop+0x16>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e021      	b.n	8004ae2 <HAL_ADC_Stop+0x5a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0201 	bic.w	r2, r2, #1
 8004ab4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d109      	bne.n	8004ad8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004acc:	f023 0301 	bic.w	r3, r3, #1
 8004ad0:	f043 0201 	orr.w	r2, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0a:	d113      	bne.n	8004b34 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b1a:	d10b      	bne.n	8004b34 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	f043 0220 	orr.w	r2, r3, #32
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e063      	b.n	8004bfc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004b34:	f7ff fe62 	bl	80047fc <HAL_GetTick>
 8004b38:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004b3a:	e021      	b.n	8004b80 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b42:	d01d      	beq.n	8004b80 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d007      	beq.n	8004b5a <HAL_ADC_PollForConversion+0x6c>
 8004b4a:	f7ff fe57 	bl	80047fc <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d212      	bcs.n	8004b80 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d00b      	beq.n	8004b80 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	f043 0204 	orr.w	r2, r3, #4
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e03d      	b.n	8004bfc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d1d6      	bne.n	8004b3c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f06f 0212 	mvn.w	r2, #18
 8004b96:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d123      	bne.n	8004bfa <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d11f      	bne.n	8004bfa <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d006      	beq.n	8004bd6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d111      	bne.n	8004bfa <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d105      	bne.n	8004bfa <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f043 0201 	orr.w	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
	...

08004c20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d101      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0x1c>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e105      	b.n	8004e48 <HAL_ADC_ConfigChannel+0x228>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b09      	cmp	r3, #9
 8004c4a:	d925      	bls.n	8004c98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68d9      	ldr	r1, [r3, #12]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	461a      	mov	r2, r3
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	4413      	add	r3, r2
 8004c60:	3b1e      	subs	r3, #30
 8004c62:	2207      	movs	r2, #7
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	43da      	mvns	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	400a      	ands	r2, r1
 8004c70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68d9      	ldr	r1, [r3, #12]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	4618      	mov	r0, r3
 8004c84:	4603      	mov	r3, r0
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	4403      	add	r3, r0
 8004c8a:	3b1e      	subs	r3, #30
 8004c8c:	409a      	lsls	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	60da      	str	r2, [r3, #12]
 8004c96:	e022      	b.n	8004cde <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6919      	ldr	r1, [r3, #16]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	4413      	add	r3, r2
 8004cac:	2207      	movs	r2, #7
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	43da      	mvns	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	400a      	ands	r2, r1
 8004cba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6919      	ldr	r1, [r3, #16]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	4618      	mov	r0, r3
 8004cce:	4603      	mov	r3, r0
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	4403      	add	r3, r0
 8004cd4:	409a      	lsls	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b06      	cmp	r3, #6
 8004ce4:	d824      	bhi.n	8004d30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	3b05      	subs	r3, #5
 8004cf8:	221f      	movs	r2, #31
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	43da      	mvns	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	400a      	ands	r2, r1
 8004d06:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	4618      	mov	r0, r3
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	3b05      	subs	r3, #5
 8004d22:	fa00 f203 	lsl.w	r2, r0, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	635a      	str	r2, [r3, #52]	; 0x34
 8004d2e:	e04c      	b.n	8004dca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b0c      	cmp	r3, #12
 8004d36:	d824      	bhi.n	8004d82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	3b23      	subs	r3, #35	; 0x23
 8004d4a:	221f      	movs	r2, #31
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	43da      	mvns	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	400a      	ands	r2, r1
 8004d58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	4618      	mov	r0, r3
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	3b23      	subs	r3, #35	; 0x23
 8004d74:	fa00 f203 	lsl.w	r2, r0, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	631a      	str	r2, [r3, #48]	; 0x30
 8004d80:	e023      	b.n	8004dca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	3b41      	subs	r3, #65	; 0x41
 8004d94:	221f      	movs	r2, #31
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	43da      	mvns	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	400a      	ands	r2, r1
 8004da2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	4618      	mov	r0, r3
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	4613      	mov	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	3b41      	subs	r3, #65	; 0x41
 8004dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004dca:	4b22      	ldr	r3, [pc, #136]	; (8004e54 <HAL_ADC_ConfigChannel+0x234>)
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a21      	ldr	r2, [pc, #132]	; (8004e58 <HAL_ADC_ConfigChannel+0x238>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d109      	bne.n	8004dec <HAL_ADC_ConfigChannel+0x1cc>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b12      	cmp	r3, #18
 8004dde:	d105      	bne.n	8004dec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a19      	ldr	r2, [pc, #100]	; (8004e58 <HAL_ADC_ConfigChannel+0x238>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d123      	bne.n	8004e3e <HAL_ADC_ConfigChannel+0x21e>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b10      	cmp	r3, #16
 8004dfc:	d003      	beq.n	8004e06 <HAL_ADC_ConfigChannel+0x1e6>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b11      	cmp	r3, #17
 8004e04:	d11b      	bne.n	8004e3e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b10      	cmp	r3, #16
 8004e18:	d111      	bne.n	8004e3e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e1a:	4b10      	ldr	r3, [pc, #64]	; (8004e5c <HAL_ADC_ConfigChannel+0x23c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a10      	ldr	r2, [pc, #64]	; (8004e60 <HAL_ADC_ConfigChannel+0x240>)
 8004e20:	fba2 2303 	umull	r2, r3, r2, r3
 8004e24:	0c9a      	lsrs	r2, r3, #18
 8004e26:	4613      	mov	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e30:	e002      	b.n	8004e38 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f9      	bne.n	8004e32 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	40012300 	.word	0x40012300
 8004e58:	40012000 	.word	0x40012000
 8004e5c:	20000014 	.word	0x20000014
 8004e60:	431bde83 	.word	0x431bde83

08004e64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e6c:	4b79      	ldr	r3, [pc, #484]	; (8005054 <ADC_Init+0x1f0>)
 8004e6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	431a      	orrs	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6859      	ldr	r1, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	021a      	lsls	r2, r3, #8
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ebc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6859      	ldr	r1, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ede:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6899      	ldr	r1, [r3, #8]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef6:	4a58      	ldr	r2, [pc, #352]	; (8005058 <ADC_Init+0x1f4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d022      	beq.n	8004f42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6899      	ldr	r1, [r3, #8]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6899      	ldr	r1, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	609a      	str	r2, [r3, #8]
 8004f40:	e00f      	b.n	8004f62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0202 	bic.w	r2, r2, #2
 8004f70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6899      	ldr	r1, [r3, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	7e1b      	ldrb	r3, [r3, #24]
 8004f7c:	005a      	lsls	r2, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01b      	beq.n	8004fc8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004fae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6859      	ldr	r1, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	035a      	lsls	r2, r3, #13
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
 8004fc6:	e007      	b.n	8004fd8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	051a      	lsls	r2, r3, #20
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800500c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6899      	ldr	r1, [r3, #8]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800501a:	025a      	lsls	r2, r3, #9
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005032:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6899      	ldr	r1, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	029a      	lsls	r2, r3, #10
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	609a      	str	r2, [r3, #8]
}
 8005048:	bf00      	nop
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	40012300 	.word	0x40012300
 8005058:	0f000001 	.word	0x0f000001

0800505c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800506c:	4b0c      	ldr	r3, [pc, #48]	; (80050a0 <__NVIC_SetPriorityGrouping+0x44>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005078:	4013      	ands	r3, r2
 800507a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800508c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800508e:	4a04      	ldr	r2, [pc, #16]	; (80050a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	60d3      	str	r3, [r2, #12]
}
 8005094:	bf00      	nop
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	e000ed00 	.word	0xe000ed00

080050a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050a8:	4b04      	ldr	r3, [pc, #16]	; (80050bc <__NVIC_GetPriorityGrouping+0x18>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	0a1b      	lsrs	r3, r3, #8
 80050ae:	f003 0307 	and.w	r3, r3, #7
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	e000ed00 	.word	0xe000ed00

080050c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4603      	mov	r3, r0
 80050c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	db0b      	blt.n	80050ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	f003 021f 	and.w	r2, r3, #31
 80050d8:	4907      	ldr	r1, [pc, #28]	; (80050f8 <__NVIC_EnableIRQ+0x38>)
 80050da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050de:	095b      	lsrs	r3, r3, #5
 80050e0:	2001      	movs	r0, #1
 80050e2:	fa00 f202 	lsl.w	r2, r0, r2
 80050e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	e000e100 	.word	0xe000e100

080050fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	4603      	mov	r3, r0
 8005104:	6039      	str	r1, [r7, #0]
 8005106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510c:	2b00      	cmp	r3, #0
 800510e:	db0a      	blt.n	8005126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	b2da      	uxtb	r2, r3
 8005114:	490c      	ldr	r1, [pc, #48]	; (8005148 <__NVIC_SetPriority+0x4c>)
 8005116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800511a:	0112      	lsls	r2, r2, #4
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	440b      	add	r3, r1
 8005120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005124:	e00a      	b.n	800513c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	b2da      	uxtb	r2, r3
 800512a:	4908      	ldr	r1, [pc, #32]	; (800514c <__NVIC_SetPriority+0x50>)
 800512c:	79fb      	ldrb	r3, [r7, #7]
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	3b04      	subs	r3, #4
 8005134:	0112      	lsls	r2, r2, #4
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	440b      	add	r3, r1
 800513a:	761a      	strb	r2, [r3, #24]
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	e000e100 	.word	0xe000e100
 800514c:	e000ed00 	.word	0xe000ed00

08005150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005150:	b480      	push	{r7}
 8005152:	b089      	sub	sp, #36	; 0x24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f003 0307 	and.w	r3, r3, #7
 8005162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f1c3 0307 	rsb	r3, r3, #7
 800516a:	2b04      	cmp	r3, #4
 800516c:	bf28      	it	cs
 800516e:	2304      	movcs	r3, #4
 8005170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	3304      	adds	r3, #4
 8005176:	2b06      	cmp	r3, #6
 8005178:	d902      	bls.n	8005180 <NVIC_EncodePriority+0x30>
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	3b03      	subs	r3, #3
 800517e:	e000      	b.n	8005182 <NVIC_EncodePriority+0x32>
 8005180:	2300      	movs	r3, #0
 8005182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005184:	f04f 32ff 	mov.w	r2, #4294967295
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	fa02 f303 	lsl.w	r3, r2, r3
 800518e:	43da      	mvns	r2, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	401a      	ands	r2, r3
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005198:	f04f 31ff 	mov.w	r1, #4294967295
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	fa01 f303 	lsl.w	r3, r1, r3
 80051a2:	43d9      	mvns	r1, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051a8:	4313      	orrs	r3, r2
         );
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3724      	adds	r7, #36	; 0x24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff ff4c 	bl	800505c <__NVIC_SetPriorityGrouping>
}
 80051c4:	bf00      	nop
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051de:	f7ff ff61 	bl	80050a4 <__NVIC_GetPriorityGrouping>
 80051e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	6978      	ldr	r0, [r7, #20]
 80051ea:	f7ff ffb1 	bl	8005150 <NVIC_EncodePriority>
 80051ee:	4602      	mov	r2, r0
 80051f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051f4:	4611      	mov	r1, r2
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff ff80 	bl	80050fc <__NVIC_SetPriority>
}
 80051fc:	bf00      	nop
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800520e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff ff54 	bl	80050c0 <__NVIC_EnableIRQ>
}
 8005218:	bf00      	nop
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800522e:	f7ff fae5 	bl	80047fc <HAL_GetTick>
 8005232:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d008      	beq.n	8005252 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2280      	movs	r2, #128	; 0x80
 8005244:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e052      	b.n	80052f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0216 	bic.w	r2, r2, #22
 8005260:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695a      	ldr	r2, [r3, #20]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005270:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d103      	bne.n	8005282 <HAL_DMA_Abort+0x62>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527e:	2b00      	cmp	r3, #0
 8005280:	d007      	beq.n	8005292 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0208 	bic.w	r2, r2, #8
 8005290:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0201 	bic.w	r2, r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052a2:	e013      	b.n	80052cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052a4:	f7ff faaa 	bl	80047fc <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b05      	cmp	r3, #5
 80052b0:	d90c      	bls.n	80052cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2220      	movs	r2, #32
 80052b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2203      	movs	r2, #3
 80052bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e015      	b.n	80052f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e4      	bne.n	80052a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052de:	223f      	movs	r2, #63	; 0x3f
 80052e0:	409a      	lsls	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d004      	beq.n	800531e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2280      	movs	r2, #128	; 0x80
 8005318:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e00c      	b.n	8005338 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2205      	movs	r2, #5
 8005322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0201 	bic.w	r2, r2, #1
 8005334:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005344:	b480      	push	{r7}
 8005346:	b089      	sub	sp, #36	; 0x24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800534e:	2300      	movs	r3, #0
 8005350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005352:	2300      	movs	r3, #0
 8005354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005356:	2300      	movs	r3, #0
 8005358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800535a:	2300      	movs	r3, #0
 800535c:	61fb      	str	r3, [r7, #28]
 800535e:	e16b      	b.n	8005638 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005360:	2201      	movs	r2, #1
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	4013      	ands	r3, r2
 8005372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	429a      	cmp	r2, r3
 800537a:	f040 815a 	bne.w	8005632 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	2b01      	cmp	r3, #1
 8005388:	d005      	beq.n	8005396 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005392:	2b02      	cmp	r3, #2
 8005394:	d130      	bne.n	80053f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	2203      	movs	r2, #3
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	43db      	mvns	r3, r3
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	4013      	ands	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	4313      	orrs	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053cc:	2201      	movs	r2, #1
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	43db      	mvns	r3, r3
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	4013      	ands	r3, r2
 80053da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	091b      	lsrs	r3, r3, #4
 80053e2:	f003 0201 	and.w	r2, r3, #1
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f003 0303 	and.w	r3, r3, #3
 8005400:	2b03      	cmp	r3, #3
 8005402:	d017      	beq.n	8005434 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	2203      	movs	r2, #3
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	43db      	mvns	r3, r3
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	4013      	ands	r3, r2
 800541a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	fa02 f303 	lsl.w	r3, r2, r3
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	4313      	orrs	r3, r2
 800542c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d123      	bne.n	8005488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	08da      	lsrs	r2, r3, #3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3208      	adds	r2, #8
 8005448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800544c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	220f      	movs	r2, #15
 8005458:	fa02 f303 	lsl.w	r3, r2, r3
 800545c:	43db      	mvns	r3, r3
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	4013      	ands	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	4313      	orrs	r3, r2
 8005478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	08da      	lsrs	r2, r3, #3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	3208      	adds	r2, #8
 8005482:	69b9      	ldr	r1, [r7, #24]
 8005484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	2203      	movs	r2, #3
 8005494:	fa02 f303 	lsl.w	r3, r2, r3
 8005498:	43db      	mvns	r3, r3
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	4013      	ands	r3, r2
 800549e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f003 0203 	and.w	r2, r3, #3
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	fa02 f303 	lsl.w	r3, r2, r3
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 80b4 	beq.w	8005632 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	4b60      	ldr	r3, [pc, #384]	; (8005650 <HAL_GPIO_Init+0x30c>)
 80054d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d2:	4a5f      	ldr	r2, [pc, #380]	; (8005650 <HAL_GPIO_Init+0x30c>)
 80054d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054d8:	6453      	str	r3, [r2, #68]	; 0x44
 80054da:	4b5d      	ldr	r3, [pc, #372]	; (8005650 <HAL_GPIO_Init+0x30c>)
 80054dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054e6:	4a5b      	ldr	r2, [pc, #364]	; (8005654 <HAL_GPIO_Init+0x310>)
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	089b      	lsrs	r3, r3, #2
 80054ec:	3302      	adds	r3, #2
 80054ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	220f      	movs	r2, #15
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	43db      	mvns	r3, r3
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	4013      	ands	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a52      	ldr	r2, [pc, #328]	; (8005658 <HAL_GPIO_Init+0x314>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d02b      	beq.n	800556a <HAL_GPIO_Init+0x226>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a51      	ldr	r2, [pc, #324]	; (800565c <HAL_GPIO_Init+0x318>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d025      	beq.n	8005566 <HAL_GPIO_Init+0x222>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a50      	ldr	r2, [pc, #320]	; (8005660 <HAL_GPIO_Init+0x31c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d01f      	beq.n	8005562 <HAL_GPIO_Init+0x21e>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a4f      	ldr	r2, [pc, #316]	; (8005664 <HAL_GPIO_Init+0x320>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d019      	beq.n	800555e <HAL_GPIO_Init+0x21a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a4e      	ldr	r2, [pc, #312]	; (8005668 <HAL_GPIO_Init+0x324>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d013      	beq.n	800555a <HAL_GPIO_Init+0x216>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a4d      	ldr	r2, [pc, #308]	; (800566c <HAL_GPIO_Init+0x328>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d00d      	beq.n	8005556 <HAL_GPIO_Init+0x212>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a4c      	ldr	r2, [pc, #304]	; (8005670 <HAL_GPIO_Init+0x32c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d007      	beq.n	8005552 <HAL_GPIO_Init+0x20e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a4b      	ldr	r2, [pc, #300]	; (8005674 <HAL_GPIO_Init+0x330>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d101      	bne.n	800554e <HAL_GPIO_Init+0x20a>
 800554a:	2307      	movs	r3, #7
 800554c:	e00e      	b.n	800556c <HAL_GPIO_Init+0x228>
 800554e:	2308      	movs	r3, #8
 8005550:	e00c      	b.n	800556c <HAL_GPIO_Init+0x228>
 8005552:	2306      	movs	r3, #6
 8005554:	e00a      	b.n	800556c <HAL_GPIO_Init+0x228>
 8005556:	2305      	movs	r3, #5
 8005558:	e008      	b.n	800556c <HAL_GPIO_Init+0x228>
 800555a:	2304      	movs	r3, #4
 800555c:	e006      	b.n	800556c <HAL_GPIO_Init+0x228>
 800555e:	2303      	movs	r3, #3
 8005560:	e004      	b.n	800556c <HAL_GPIO_Init+0x228>
 8005562:	2302      	movs	r3, #2
 8005564:	e002      	b.n	800556c <HAL_GPIO_Init+0x228>
 8005566:	2301      	movs	r3, #1
 8005568:	e000      	b.n	800556c <HAL_GPIO_Init+0x228>
 800556a:	2300      	movs	r3, #0
 800556c:	69fa      	ldr	r2, [r7, #28]
 800556e:	f002 0203 	and.w	r2, r2, #3
 8005572:	0092      	lsls	r2, r2, #2
 8005574:	4093      	lsls	r3, r2
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	4313      	orrs	r3, r2
 800557a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800557c:	4935      	ldr	r1, [pc, #212]	; (8005654 <HAL_GPIO_Init+0x310>)
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	089b      	lsrs	r3, r3, #2
 8005582:	3302      	adds	r3, #2
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800558a:	4b3b      	ldr	r3, [pc, #236]	; (8005678 <HAL_GPIO_Init+0x334>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	43db      	mvns	r3, r3
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	4013      	ands	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055ae:	4a32      	ldr	r2, [pc, #200]	; (8005678 <HAL_GPIO_Init+0x334>)
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055b4:	4b30      	ldr	r3, [pc, #192]	; (8005678 <HAL_GPIO_Init+0x334>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	43db      	mvns	r3, r3
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	4013      	ands	r3, r2
 80055c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055d8:	4a27      	ldr	r2, [pc, #156]	; (8005678 <HAL_GPIO_Init+0x334>)
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80055de:	4b26      	ldr	r3, [pc, #152]	; (8005678 <HAL_GPIO_Init+0x334>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	43db      	mvns	r3, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4013      	ands	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005602:	4a1d      	ldr	r2, [pc, #116]	; (8005678 <HAL_GPIO_Init+0x334>)
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005608:	4b1b      	ldr	r3, [pc, #108]	; (8005678 <HAL_GPIO_Init+0x334>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	43db      	mvns	r3, r3
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	4013      	ands	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800562c:	4a12      	ldr	r2, [pc, #72]	; (8005678 <HAL_GPIO_Init+0x334>)
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	3301      	adds	r3, #1
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	2b0f      	cmp	r3, #15
 800563c:	f67f ae90 	bls.w	8005360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005640:	bf00      	nop
 8005642:	bf00      	nop
 8005644:	3724      	adds	r7, #36	; 0x24
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40023800 	.word	0x40023800
 8005654:	40013800 	.word	0x40013800
 8005658:	40020000 	.word	0x40020000
 800565c:	40020400 	.word	0x40020400
 8005660:	40020800 	.word	0x40020800
 8005664:	40020c00 	.word	0x40020c00
 8005668:	40021000 	.word	0x40021000
 800566c:	40021400 	.word	0x40021400
 8005670:	40021800 	.word	0x40021800
 8005674:	40021c00 	.word	0x40021c00
 8005678:	40013c00 	.word	0x40013c00

0800567c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	807b      	strh	r3, [r7, #2]
 8005688:	4613      	mov	r3, r2
 800568a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800568c:	787b      	ldrb	r3, [r7, #1]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005692:	887a      	ldrh	r2, [r7, #2]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005698:	e003      	b.n	80056a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800569a:	887b      	ldrh	r3, [r7, #2]
 800569c:	041a      	lsls	r2, r3, #16
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	619a      	str	r2, [r3, #24]
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e12b      	b.n	800591a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fd fa68 	bl	8002bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2224      	movs	r2, #36	; 0x24
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0201 	bic.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005702:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005712:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005714:	f001 fbec 	bl	8006ef0 <HAL_RCC_GetPCLK1Freq>
 8005718:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	4a81      	ldr	r2, [pc, #516]	; (8005924 <HAL_I2C_Init+0x274>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d807      	bhi.n	8005734 <HAL_I2C_Init+0x84>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4a80      	ldr	r2, [pc, #512]	; (8005928 <HAL_I2C_Init+0x278>)
 8005728:	4293      	cmp	r3, r2
 800572a:	bf94      	ite	ls
 800572c:	2301      	movls	r3, #1
 800572e:	2300      	movhi	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	e006      	b.n	8005742 <HAL_I2C_Init+0x92>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4a7d      	ldr	r2, [pc, #500]	; (800592c <HAL_I2C_Init+0x27c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	bf94      	ite	ls
 800573c:	2301      	movls	r3, #1
 800573e:	2300      	movhi	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e0e7      	b.n	800591a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4a78      	ldr	r2, [pc, #480]	; (8005930 <HAL_I2C_Init+0x280>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	0c9b      	lsrs	r3, r3, #18
 8005754:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	430a      	orrs	r2, r1
 8005768:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	4a6a      	ldr	r2, [pc, #424]	; (8005924 <HAL_I2C_Init+0x274>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d802      	bhi.n	8005784 <HAL_I2C_Init+0xd4>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	3301      	adds	r3, #1
 8005782:	e009      	b.n	8005798 <HAL_I2C_Init+0xe8>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800578a:	fb02 f303 	mul.w	r3, r2, r3
 800578e:	4a69      	ldr	r2, [pc, #420]	; (8005934 <HAL_I2C_Init+0x284>)
 8005790:	fba2 2303 	umull	r2, r3, r2, r3
 8005794:	099b      	lsrs	r3, r3, #6
 8005796:	3301      	adds	r3, #1
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	430b      	orrs	r3, r1
 800579e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80057aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	495c      	ldr	r1, [pc, #368]	; (8005924 <HAL_I2C_Init+0x274>)
 80057b4:	428b      	cmp	r3, r1
 80057b6:	d819      	bhi.n	80057ec <HAL_I2C_Init+0x13c>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	1e59      	subs	r1, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80057c6:	1c59      	adds	r1, r3, #1
 80057c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80057cc:	400b      	ands	r3, r1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_I2C_Init+0x138>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1e59      	subs	r1, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80057e0:	3301      	adds	r3, #1
 80057e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057e6:	e051      	b.n	800588c <HAL_I2C_Init+0x1dc>
 80057e8:	2304      	movs	r3, #4
 80057ea:	e04f      	b.n	800588c <HAL_I2C_Init+0x1dc>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d111      	bne.n	8005818 <HAL_I2C_Init+0x168>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	1e58      	subs	r0, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6859      	ldr	r1, [r3, #4]
 80057fc:	460b      	mov	r3, r1
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	440b      	add	r3, r1
 8005802:	fbb0 f3f3 	udiv	r3, r0, r3
 8005806:	3301      	adds	r3, #1
 8005808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800580c:	2b00      	cmp	r3, #0
 800580e:	bf0c      	ite	eq
 8005810:	2301      	moveq	r3, #1
 8005812:	2300      	movne	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	e012      	b.n	800583e <HAL_I2C_Init+0x18e>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	1e58      	subs	r0, r3, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6859      	ldr	r1, [r3, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	440b      	add	r3, r1
 8005826:	0099      	lsls	r1, r3, #2
 8005828:	440b      	add	r3, r1
 800582a:	fbb0 f3f3 	udiv	r3, r0, r3
 800582e:	3301      	adds	r3, #1
 8005830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005834:	2b00      	cmp	r3, #0
 8005836:	bf0c      	ite	eq
 8005838:	2301      	moveq	r3, #1
 800583a:	2300      	movne	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_I2C_Init+0x196>
 8005842:	2301      	movs	r3, #1
 8005844:	e022      	b.n	800588c <HAL_I2C_Init+0x1dc>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10e      	bne.n	800586c <HAL_I2C_Init+0x1bc>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1e58      	subs	r0, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6859      	ldr	r1, [r3, #4]
 8005856:	460b      	mov	r3, r1
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	440b      	add	r3, r1
 800585c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005860:	3301      	adds	r3, #1
 8005862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800586a:	e00f      	b.n	800588c <HAL_I2C_Init+0x1dc>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	1e58      	subs	r0, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6859      	ldr	r1, [r3, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	0099      	lsls	r1, r3, #2
 800587c:	440b      	add	r3, r1
 800587e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005882:	3301      	adds	r3, #1
 8005884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005888:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800588c:	6879      	ldr	r1, [r7, #4]
 800588e:	6809      	ldr	r1, [r1, #0]
 8005890:	4313      	orrs	r3, r2
 8005892:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69da      	ldr	r2, [r3, #28]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80058ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6911      	ldr	r1, [r2, #16]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	68d2      	ldr	r2, [r2, #12]
 80058c6:	4311      	orrs	r1, r2
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	430b      	orrs	r3, r1
 80058ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695a      	ldr	r2, [r3, #20]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0201 	orr.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	000186a0 	.word	0x000186a0
 8005928:	001e847f 	.word	0x001e847f
 800592c:	003d08ff 	.word	0x003d08ff
 8005930:	431bde83 	.word	0x431bde83
 8005934:	10624dd3 	.word	0x10624dd3

08005938 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af02      	add	r7, sp, #8
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	607a      	str	r2, [r7, #4]
 8005942:	461a      	mov	r2, r3
 8005944:	460b      	mov	r3, r1
 8005946:	817b      	strh	r3, [r7, #10]
 8005948:	4613      	mov	r3, r2
 800594a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800594c:	f7fe ff56 	bl	80047fc <HAL_GetTick>
 8005950:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b20      	cmp	r3, #32
 800595c:	f040 80e0 	bne.w	8005b20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	2319      	movs	r3, #25
 8005966:	2201      	movs	r2, #1
 8005968:	4970      	ldr	r1, [pc, #448]	; (8005b2c <HAL_I2C_Master_Transmit+0x1f4>)
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 fc72 	bl	8006254 <I2C_WaitOnFlagUntilTimeout>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005976:	2302      	movs	r3, #2
 8005978:	e0d3      	b.n	8005b22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005980:	2b01      	cmp	r3, #1
 8005982:	d101      	bne.n	8005988 <HAL_I2C_Master_Transmit+0x50>
 8005984:	2302      	movs	r3, #2
 8005986:	e0cc      	b.n	8005b22 <HAL_I2C_Master_Transmit+0x1ea>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b01      	cmp	r3, #1
 800599c:	d007      	beq.n	80059ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f042 0201 	orr.w	r2, r2, #1
 80059ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2221      	movs	r2, #33	; 0x21
 80059c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2210      	movs	r2, #16
 80059ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	893a      	ldrh	r2, [r7, #8]
 80059de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4a50      	ldr	r2, [pc, #320]	; (8005b30 <HAL_I2C_Master_Transmit+0x1f8>)
 80059ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80059f0:	8979      	ldrh	r1, [r7, #10]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	6a3a      	ldr	r2, [r7, #32]
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 fadc 	bl	8005fb4 <I2C_MasterRequestWrite>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e08d      	b.n	8005b22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a06:	2300      	movs	r3, #0
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005a1c:	e066      	b.n	8005aec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	6a39      	ldr	r1, [r7, #32]
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 fcec 	bl	8006400 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00d      	beq.n	8005a4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d107      	bne.n	8005a46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e06b      	b.n	8005b22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	781a      	ldrb	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d11b      	bne.n	8005ac0 <HAL_I2C_Master_Transmit+0x188>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d017      	beq.n	8005ac0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	781a      	ldrb	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	6a39      	ldr	r1, [r7, #32]
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 fcdc 	bl	8006482 <I2C_WaitOnBTFFlagUntilTimeout>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00d      	beq.n	8005aec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d107      	bne.n	8005ae8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ae6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e01a      	b.n	8005b22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d194      	bne.n	8005a1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e000      	b.n	8005b22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005b20:	2302      	movs	r3, #2
  }
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	00100002 	.word	0x00100002
 8005b30:	ffff0000 	.word	0xffff0000

08005b34 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08c      	sub	sp, #48	; 0x30
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	607a      	str	r2, [r7, #4]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	460b      	mov	r3, r1
 8005b42:	817b      	strh	r3, [r7, #10]
 8005b44:	4613      	mov	r3, r2
 8005b46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b48:	f7fe fe58 	bl	80047fc <HAL_GetTick>
 8005b4c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b20      	cmp	r3, #32
 8005b58:	f040 820b 	bne.w	8005f72 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	2319      	movs	r3, #25
 8005b62:	2201      	movs	r2, #1
 8005b64:	497c      	ldr	r1, [pc, #496]	; (8005d58 <HAL_I2C_Master_Receive+0x224>)
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 fb74 	bl	8006254 <I2C_WaitOnFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005b72:	2302      	movs	r3, #2
 8005b74:	e1fe      	b.n	8005f74 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <HAL_I2C_Master_Receive+0x50>
 8005b80:	2302      	movs	r3, #2
 8005b82:	e1f7      	b.n	8005f74 <HAL_I2C_Master_Receive+0x440>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d007      	beq.n	8005baa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0201 	orr.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2222      	movs	r2, #34	; 0x22
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2210      	movs	r2, #16
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	893a      	ldrh	r2, [r7, #8]
 8005bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4a5c      	ldr	r2, [pc, #368]	; (8005d5c <HAL_I2C_Master_Receive+0x228>)
 8005bea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005bec:	8979      	ldrh	r1, [r7, #10]
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 fa60 	bl	80060b8 <I2C_MasterRequestRead>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e1b8      	b.n	8005f74 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d113      	bne.n	8005c32 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	623b      	str	r3, [r7, #32]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	623b      	str	r3, [r7, #32]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	623b      	str	r3, [r7, #32]
 8005c1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	e18c      	b.n	8005f4c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d11b      	bne.n	8005c72 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61fb      	str	r3, [r7, #28]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	61fb      	str	r3, [r7, #28]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	61fb      	str	r3, [r7, #28]
 8005c5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	e16c      	b.n	8005f4c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d11b      	bne.n	8005cb2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	61bb      	str	r3, [r7, #24]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	61bb      	str	r3, [r7, #24]
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	e14c      	b.n	8005f4c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	617b      	str	r3, [r7, #20]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005cd8:	e138      	b.n	8005f4c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	f200 80f1 	bhi.w	8005ec6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d123      	bne.n	8005d34 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 fc07 	bl	8006504 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e139      	b.n	8005f74 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	691a      	ldr	r2, [r3, #16]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d32:	e10b      	b.n	8005f4c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d14e      	bne.n	8005dda <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	2200      	movs	r2, #0
 8005d44:	4906      	ldr	r1, [pc, #24]	; (8005d60 <HAL_I2C_Master_Receive+0x22c>)
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fa84 	bl	8006254 <I2C_WaitOnFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d008      	beq.n	8005d64 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e10e      	b.n	8005f74 <HAL_I2C_Master_Receive+0x440>
 8005d56:	bf00      	nop
 8005d58:	00100002 	.word	0x00100002
 8005d5c:	ffff0000 	.word	0xffff0000
 8005d60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	b2d2      	uxtb	r2, r2
 8005db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dd8:	e0b8      	b.n	8005f4c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	2200      	movs	r2, #0
 8005de2:	4966      	ldr	r1, [pc, #408]	; (8005f7c <HAL_I2C_Master_Receive+0x448>)
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 fa35 	bl	8006254 <I2C_WaitOnFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e0bf      	b.n	8005f74 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691a      	ldr	r2, [r3, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e20:	3b01      	subs	r3, #1
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	494f      	ldr	r1, [pc, #316]	; (8005f7c <HAL_I2C_Master_Receive+0x448>)
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 fa07 	bl	8006254 <I2C_WaitOnFlagUntilTimeout>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e091      	b.n	8005f74 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	691a      	ldr	r2, [r3, #16]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	b2d2      	uxtb	r2, r2
 8005e9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ec4:	e042      	b.n	8005f4c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 fb1a 	bl	8006504 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e04c      	b.n	8005f74 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691a      	ldr	r2, [r3, #16]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d118      	bne.n	8005f4c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f36:	3b01      	subs	r3, #1
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f47f aec2 	bne.w	8005cda <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e000      	b.n	8005f74 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005f72:	2302      	movs	r3, #2
  }
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3728      	adds	r7, #40	; 0x28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	00010004 	.word	0x00010004

08005f80 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f8e:	b2db      	uxtb	r3, r3
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	607a      	str	r2, [r7, #4]
 8005fbe:	603b      	str	r3, [r7, #0]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d006      	beq.n	8005fde <I2C_MasterRequestWrite+0x2a>
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d003      	beq.n	8005fde <I2C_MasterRequestWrite+0x2a>
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fdc:	d108      	bne.n	8005ff0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	e00b      	b.n	8006008 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff4:	2b12      	cmp	r3, #18
 8005ff6:	d107      	bne.n	8006008 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006006:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f91d 	bl	8006254 <I2C_WaitOnFlagUntilTimeout>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00d      	beq.n	800603c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800602e:	d103      	bne.n	8006038 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006036:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e035      	b.n	80060a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006044:	d108      	bne.n	8006058 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006046:	897b      	ldrh	r3, [r7, #10]
 8006048:	b2db      	uxtb	r3, r3
 800604a:	461a      	mov	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006054:	611a      	str	r2, [r3, #16]
 8006056:	e01b      	b.n	8006090 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006058:	897b      	ldrh	r3, [r7, #10]
 800605a:	11db      	asrs	r3, r3, #7
 800605c:	b2db      	uxtb	r3, r3
 800605e:	f003 0306 	and.w	r3, r3, #6
 8006062:	b2db      	uxtb	r3, r3
 8006064:	f063 030f 	orn	r3, r3, #15
 8006068:	b2da      	uxtb	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	490e      	ldr	r1, [pc, #56]	; (80060b0 <I2C_MasterRequestWrite+0xfc>)
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 f943 	bl	8006302 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e010      	b.n	80060a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006086:	897b      	ldrh	r3, [r7, #10]
 8006088:	b2da      	uxtb	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	4907      	ldr	r1, [pc, #28]	; (80060b4 <I2C_MasterRequestWrite+0x100>)
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 f933 	bl	8006302 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	00010008 	.word	0x00010008
 80060b4:	00010002 	.word	0x00010002

080060b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af02      	add	r7, sp, #8
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	607a      	str	r2, [r7, #4]
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	460b      	mov	r3, r1
 80060c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d006      	beq.n	80060f2 <I2C_MasterRequestRead+0x3a>
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d003      	beq.n	80060f2 <I2C_MasterRequestRead+0x3a>
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060f0:	d108      	bne.n	8006104 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	e00b      	b.n	800611c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006108:	2b11      	cmp	r3, #17
 800610a:	d107      	bne.n	800611c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800611a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 f893 	bl	8006254 <I2C_WaitOnFlagUntilTimeout>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00d      	beq.n	8006150 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006142:	d103      	bne.n	800614c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800614a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e079      	b.n	8006244 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006158:	d108      	bne.n	800616c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800615a:	897b      	ldrh	r3, [r7, #10]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	f043 0301 	orr.w	r3, r3, #1
 8006162:	b2da      	uxtb	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	611a      	str	r2, [r3, #16]
 800616a:	e05f      	b.n	800622c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800616c:	897b      	ldrh	r3, [r7, #10]
 800616e:	11db      	asrs	r3, r3, #7
 8006170:	b2db      	uxtb	r3, r3
 8006172:	f003 0306 	and.w	r3, r3, #6
 8006176:	b2db      	uxtb	r3, r3
 8006178:	f063 030f 	orn	r3, r3, #15
 800617c:	b2da      	uxtb	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	4930      	ldr	r1, [pc, #192]	; (800624c <I2C_MasterRequestRead+0x194>)
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 f8b9 	bl	8006302 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e054      	b.n	8006244 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800619a:	897b      	ldrh	r3, [r7, #10]
 800619c:	b2da      	uxtb	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	4929      	ldr	r1, [pc, #164]	; (8006250 <I2C_MasterRequestRead+0x198>)
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 f8a9 	bl	8006302 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e044      	b.n	8006244 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ba:	2300      	movs	r3, #0
 80061bc:	613b      	str	r3, [r7, #16]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	613b      	str	r3, [r7, #16]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f831 	bl	8006254 <I2C_WaitOnFlagUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00d      	beq.n	8006214 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006206:	d103      	bne.n	8006210 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800620e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e017      	b.n	8006244 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006214:	897b      	ldrh	r3, [r7, #10]
 8006216:	11db      	asrs	r3, r3, #7
 8006218:	b2db      	uxtb	r3, r3
 800621a:	f003 0306 	and.w	r3, r3, #6
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f063 030e 	orn	r3, r3, #14
 8006224:	b2da      	uxtb	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	4907      	ldr	r1, [pc, #28]	; (8006250 <I2C_MasterRequestRead+0x198>)
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 f865 	bl	8006302 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	00010008 	.word	0x00010008
 8006250:	00010002 	.word	0x00010002

08006254 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	4613      	mov	r3, r2
 8006262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006264:	e025      	b.n	80062b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626c:	d021      	beq.n	80062b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800626e:	f7fe fac5 	bl	80047fc <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	429a      	cmp	r2, r3
 800627c:	d302      	bcc.n	8006284 <I2C_WaitOnFlagUntilTimeout+0x30>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d116      	bne.n	80062b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2220      	movs	r2, #32
 800628e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	f043 0220 	orr.w	r2, r3, #32
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e023      	b.n	80062fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	0c1b      	lsrs	r3, r3, #16
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d10d      	bne.n	80062d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	43da      	mvns	r2, r3
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4013      	ands	r3, r2
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	bf0c      	ite	eq
 80062ce:	2301      	moveq	r3, #1
 80062d0:	2300      	movne	r3, #0
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	461a      	mov	r2, r3
 80062d6:	e00c      	b.n	80062f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	43da      	mvns	r2, r3
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	4013      	ands	r3, r2
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	bf0c      	ite	eq
 80062ea:	2301      	moveq	r3, #1
 80062ec:	2300      	movne	r3, #0
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	461a      	mov	r2, r3
 80062f2:	79fb      	ldrb	r3, [r7, #7]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d0b6      	beq.n	8006266 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	60f8      	str	r0, [r7, #12]
 800630a:	60b9      	str	r1, [r7, #8]
 800630c:	607a      	str	r2, [r7, #4]
 800630e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006310:	e051      	b.n	80063b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800631c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006320:	d123      	bne.n	800636a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006330:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800633a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2220      	movs	r2, #32
 8006346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	f043 0204 	orr.w	r2, r3, #4
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e046      	b.n	80063f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006370:	d021      	beq.n	80063b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006372:	f7fe fa43 	bl	80047fc <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	429a      	cmp	r2, r3
 8006380:	d302      	bcc.n	8006388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d116      	bne.n	80063b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2220      	movs	r2, #32
 8006392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	f043 0220 	orr.w	r2, r3, #32
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e020      	b.n	80063f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	0c1b      	lsrs	r3, r3, #16
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d10c      	bne.n	80063da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	43da      	mvns	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4013      	ands	r3, r2
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	bf14      	ite	ne
 80063d2:	2301      	movne	r3, #1
 80063d4:	2300      	moveq	r3, #0
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	e00b      	b.n	80063f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	43da      	mvns	r2, r3
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	4013      	ands	r3, r2
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	bf14      	ite	ne
 80063ec:	2301      	movne	r3, #1
 80063ee:	2300      	moveq	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d18d      	bne.n	8006312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800640c:	e02d      	b.n	800646a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 f8ce 	bl	80065b0 <I2C_IsAcknowledgeFailed>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e02d      	b.n	800647a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006424:	d021      	beq.n	800646a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006426:	f7fe f9e9 	bl	80047fc <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	429a      	cmp	r2, r3
 8006434:	d302      	bcc.n	800643c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d116      	bne.n	800646a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2220      	movs	r2, #32
 8006446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	f043 0220 	orr.w	r2, r3, #32
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e007      	b.n	800647a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006474:	2b80      	cmp	r3, #128	; 0x80
 8006476:	d1ca      	bne.n	800640e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	60f8      	str	r0, [r7, #12]
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800648e:	e02d      	b.n	80064ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 f88d 	bl	80065b0 <I2C_IsAcknowledgeFailed>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e02d      	b.n	80064fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a6:	d021      	beq.n	80064ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a8:	f7fe f9a8 	bl	80047fc <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d302      	bcc.n	80064be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d116      	bne.n	80064ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d8:	f043 0220 	orr.w	r2, r3, #32
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e007      	b.n	80064fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	f003 0304 	and.w	r3, r3, #4
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d1ca      	bne.n	8006490 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006510:	e042      	b.n	8006598 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	f003 0310 	and.w	r3, r3, #16
 800651c:	2b10      	cmp	r3, #16
 800651e:	d119      	bne.n	8006554 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0210 	mvn.w	r2, #16
 8006528:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2220      	movs	r2, #32
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e029      	b.n	80065a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006554:	f7fe f952 	bl	80047fc <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	429a      	cmp	r2, r3
 8006562:	d302      	bcc.n	800656a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d116      	bne.n	8006598 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2220      	movs	r2, #32
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006584:	f043 0220 	orr.w	r2, r3, #32
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e007      	b.n	80065a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a2:	2b40      	cmp	r3, #64	; 0x40
 80065a4:	d1b5      	bne.n	8006512 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c6:	d11b      	bne.n	8006600 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2220      	movs	r2, #32
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ec:	f043 0204 	orr.w	r2, r3, #4
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e000      	b.n	8006602 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
	...

08006610 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e267      	b.n	8006af2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d075      	beq.n	800671a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800662e:	4b88      	ldr	r3, [pc, #544]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 030c 	and.w	r3, r3, #12
 8006636:	2b04      	cmp	r3, #4
 8006638:	d00c      	beq.n	8006654 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800663a:	4b85      	ldr	r3, [pc, #532]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006642:	2b08      	cmp	r3, #8
 8006644:	d112      	bne.n	800666c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006646:	4b82      	ldr	r3, [pc, #520]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800664e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006652:	d10b      	bne.n	800666c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006654:	4b7e      	ldr	r3, [pc, #504]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d05b      	beq.n	8006718 <HAL_RCC_OscConfig+0x108>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d157      	bne.n	8006718 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e242      	b.n	8006af2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006674:	d106      	bne.n	8006684 <HAL_RCC_OscConfig+0x74>
 8006676:	4b76      	ldr	r3, [pc, #472]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a75      	ldr	r2, [pc, #468]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 800667c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	e01d      	b.n	80066c0 <HAL_RCC_OscConfig+0xb0>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800668c:	d10c      	bne.n	80066a8 <HAL_RCC_OscConfig+0x98>
 800668e:	4b70      	ldr	r3, [pc, #448]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a6f      	ldr	r2, [pc, #444]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 8006694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	4b6d      	ldr	r3, [pc, #436]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a6c      	ldr	r2, [pc, #432]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 80066a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	e00b      	b.n	80066c0 <HAL_RCC_OscConfig+0xb0>
 80066a8:	4b69      	ldr	r3, [pc, #420]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a68      	ldr	r2, [pc, #416]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 80066ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	4b66      	ldr	r3, [pc, #408]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a65      	ldr	r2, [pc, #404]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 80066ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d013      	beq.n	80066f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c8:	f7fe f898 	bl	80047fc <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066d0:	f7fe f894 	bl	80047fc <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b64      	cmp	r3, #100	; 0x64
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e207      	b.n	8006af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066e2:	4b5b      	ldr	r3, [pc, #364]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d0f0      	beq.n	80066d0 <HAL_RCC_OscConfig+0xc0>
 80066ee:	e014      	b.n	800671a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066f0:	f7fe f884 	bl	80047fc <HAL_GetTick>
 80066f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066f6:	e008      	b.n	800670a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066f8:	f7fe f880 	bl	80047fc <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	2b64      	cmp	r3, #100	; 0x64
 8006704:	d901      	bls.n	800670a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e1f3      	b.n	8006af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800670a:	4b51      	ldr	r3, [pc, #324]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1f0      	bne.n	80066f8 <HAL_RCC_OscConfig+0xe8>
 8006716:	e000      	b.n	800671a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d063      	beq.n	80067ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006726:	4b4a      	ldr	r3, [pc, #296]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 030c 	and.w	r3, r3, #12
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00b      	beq.n	800674a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006732:	4b47      	ldr	r3, [pc, #284]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800673a:	2b08      	cmp	r3, #8
 800673c:	d11c      	bne.n	8006778 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800673e:	4b44      	ldr	r3, [pc, #272]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d116      	bne.n	8006778 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800674a:	4b41      	ldr	r3, [pc, #260]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <HAL_RCC_OscConfig+0x152>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d001      	beq.n	8006762 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e1c7      	b.n	8006af2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006762:	4b3b      	ldr	r3, [pc, #236]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	4937      	ldr	r1, [pc, #220]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 8006772:	4313      	orrs	r3, r2
 8006774:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006776:	e03a      	b.n	80067ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d020      	beq.n	80067c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006780:	4b34      	ldr	r3, [pc, #208]	; (8006854 <HAL_RCC_OscConfig+0x244>)
 8006782:	2201      	movs	r2, #1
 8006784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006786:	f7fe f839 	bl	80047fc <HAL_GetTick>
 800678a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800678c:	e008      	b.n	80067a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800678e:	f7fe f835 	bl	80047fc <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	2b02      	cmp	r3, #2
 800679a:	d901      	bls.n	80067a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e1a8      	b.n	8006af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067a0:	4b2b      	ldr	r3, [pc, #172]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0f0      	beq.n	800678e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067ac:	4b28      	ldr	r3, [pc, #160]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	00db      	lsls	r3, r3, #3
 80067ba:	4925      	ldr	r1, [pc, #148]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	600b      	str	r3, [r1, #0]
 80067c0:	e015      	b.n	80067ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067c2:	4b24      	ldr	r3, [pc, #144]	; (8006854 <HAL_RCC_OscConfig+0x244>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c8:	f7fe f818 	bl	80047fc <HAL_GetTick>
 80067cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067ce:	e008      	b.n	80067e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067d0:	f7fe f814 	bl	80047fc <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e187      	b.n	8006af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067e2:	4b1b      	ldr	r3, [pc, #108]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1f0      	bne.n	80067d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0308 	and.w	r3, r3, #8
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d036      	beq.n	8006868 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d016      	beq.n	8006830 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006802:	4b15      	ldr	r3, [pc, #84]	; (8006858 <HAL_RCC_OscConfig+0x248>)
 8006804:	2201      	movs	r2, #1
 8006806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006808:	f7fd fff8 	bl	80047fc <HAL_GetTick>
 800680c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800680e:	e008      	b.n	8006822 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006810:	f7fd fff4 	bl	80047fc <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b02      	cmp	r3, #2
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e167      	b.n	8006af2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006822:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <HAL_RCC_OscConfig+0x240>)
 8006824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0f0      	beq.n	8006810 <HAL_RCC_OscConfig+0x200>
 800682e:	e01b      	b.n	8006868 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006830:	4b09      	ldr	r3, [pc, #36]	; (8006858 <HAL_RCC_OscConfig+0x248>)
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006836:	f7fd ffe1 	bl	80047fc <HAL_GetTick>
 800683a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800683c:	e00e      	b.n	800685c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800683e:	f7fd ffdd 	bl	80047fc <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	2b02      	cmp	r3, #2
 800684a:	d907      	bls.n	800685c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e150      	b.n	8006af2 <HAL_RCC_OscConfig+0x4e2>
 8006850:	40023800 	.word	0x40023800
 8006854:	42470000 	.word	0x42470000
 8006858:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800685c:	4b88      	ldr	r3, [pc, #544]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 800685e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1ea      	bne.n	800683e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 8097 	beq.w	80069a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006876:	2300      	movs	r3, #0
 8006878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800687a:	4b81      	ldr	r3, [pc, #516]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10f      	bne.n	80068a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006886:	2300      	movs	r3, #0
 8006888:	60bb      	str	r3, [r7, #8]
 800688a:	4b7d      	ldr	r3, [pc, #500]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	4a7c      	ldr	r2, [pc, #496]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 8006890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006894:	6413      	str	r3, [r2, #64]	; 0x40
 8006896:	4b7a      	ldr	r3, [pc, #488]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800689e:	60bb      	str	r3, [r7, #8]
 80068a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068a2:	2301      	movs	r3, #1
 80068a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068a6:	4b77      	ldr	r3, [pc, #476]	; (8006a84 <HAL_RCC_OscConfig+0x474>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d118      	bne.n	80068e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068b2:	4b74      	ldr	r3, [pc, #464]	; (8006a84 <HAL_RCC_OscConfig+0x474>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a73      	ldr	r2, [pc, #460]	; (8006a84 <HAL_RCC_OscConfig+0x474>)
 80068b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068be:	f7fd ff9d 	bl	80047fc <HAL_GetTick>
 80068c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068c4:	e008      	b.n	80068d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068c6:	f7fd ff99 	bl	80047fc <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d901      	bls.n	80068d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e10c      	b.n	8006af2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068d8:	4b6a      	ldr	r3, [pc, #424]	; (8006a84 <HAL_RCC_OscConfig+0x474>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d0f0      	beq.n	80068c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d106      	bne.n	80068fa <HAL_RCC_OscConfig+0x2ea>
 80068ec:	4b64      	ldr	r3, [pc, #400]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 80068ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f0:	4a63      	ldr	r2, [pc, #396]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 80068f2:	f043 0301 	orr.w	r3, r3, #1
 80068f6:	6713      	str	r3, [r2, #112]	; 0x70
 80068f8:	e01c      	b.n	8006934 <HAL_RCC_OscConfig+0x324>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	2b05      	cmp	r3, #5
 8006900:	d10c      	bne.n	800691c <HAL_RCC_OscConfig+0x30c>
 8006902:	4b5f      	ldr	r3, [pc, #380]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 8006904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006906:	4a5e      	ldr	r2, [pc, #376]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 8006908:	f043 0304 	orr.w	r3, r3, #4
 800690c:	6713      	str	r3, [r2, #112]	; 0x70
 800690e:	4b5c      	ldr	r3, [pc, #368]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 8006910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006912:	4a5b      	ldr	r2, [pc, #364]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 8006914:	f043 0301 	orr.w	r3, r3, #1
 8006918:	6713      	str	r3, [r2, #112]	; 0x70
 800691a:	e00b      	b.n	8006934 <HAL_RCC_OscConfig+0x324>
 800691c:	4b58      	ldr	r3, [pc, #352]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 800691e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006920:	4a57      	ldr	r2, [pc, #348]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 8006922:	f023 0301 	bic.w	r3, r3, #1
 8006926:	6713      	str	r3, [r2, #112]	; 0x70
 8006928:	4b55      	ldr	r3, [pc, #340]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 800692a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692c:	4a54      	ldr	r2, [pc, #336]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 800692e:	f023 0304 	bic.w	r3, r3, #4
 8006932:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d015      	beq.n	8006968 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800693c:	f7fd ff5e 	bl	80047fc <HAL_GetTick>
 8006940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006942:	e00a      	b.n	800695a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006944:	f7fd ff5a 	bl	80047fc <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006952:	4293      	cmp	r3, r2
 8006954:	d901      	bls.n	800695a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e0cb      	b.n	8006af2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800695a:	4b49      	ldr	r3, [pc, #292]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 800695c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0ee      	beq.n	8006944 <HAL_RCC_OscConfig+0x334>
 8006966:	e014      	b.n	8006992 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006968:	f7fd ff48 	bl	80047fc <HAL_GetTick>
 800696c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800696e:	e00a      	b.n	8006986 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006970:	f7fd ff44 	bl	80047fc <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	f241 3288 	movw	r2, #5000	; 0x1388
 800697e:	4293      	cmp	r3, r2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e0b5      	b.n	8006af2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006986:	4b3e      	ldr	r3, [pc, #248]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 8006988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1ee      	bne.n	8006970 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006992:	7dfb      	ldrb	r3, [r7, #23]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d105      	bne.n	80069a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006998:	4b39      	ldr	r3, [pc, #228]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 800699a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699c:	4a38      	ldr	r2, [pc, #224]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 800699e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 80a1 	beq.w	8006af0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069ae:	4b34      	ldr	r3, [pc, #208]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 030c 	and.w	r3, r3, #12
 80069b6:	2b08      	cmp	r3, #8
 80069b8:	d05c      	beq.n	8006a74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d141      	bne.n	8006a46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069c2:	4b31      	ldr	r3, [pc, #196]	; (8006a88 <HAL_RCC_OscConfig+0x478>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c8:	f7fd ff18 	bl	80047fc <HAL_GetTick>
 80069cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ce:	e008      	b.n	80069e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069d0:	f7fd ff14 	bl	80047fc <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e087      	b.n	8006af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069e2:	4b27      	ldr	r3, [pc, #156]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1f0      	bne.n	80069d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	69da      	ldr	r2, [r3, #28]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	431a      	orrs	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fc:	019b      	lsls	r3, r3, #6
 80069fe:	431a      	orrs	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a04:	085b      	lsrs	r3, r3, #1
 8006a06:	3b01      	subs	r3, #1
 8006a08:	041b      	lsls	r3, r3, #16
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a10:	061b      	lsls	r3, r3, #24
 8006a12:	491b      	ldr	r1, [pc, #108]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a18:	4b1b      	ldr	r3, [pc, #108]	; (8006a88 <HAL_RCC_OscConfig+0x478>)
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a1e:	f7fd feed 	bl	80047fc <HAL_GetTick>
 8006a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a24:	e008      	b.n	8006a38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a26:	f7fd fee9 	bl	80047fc <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e05c      	b.n	8006af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a38:	4b11      	ldr	r3, [pc, #68]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0f0      	beq.n	8006a26 <HAL_RCC_OscConfig+0x416>
 8006a44:	e054      	b.n	8006af0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a46:	4b10      	ldr	r3, [pc, #64]	; (8006a88 <HAL_RCC_OscConfig+0x478>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a4c:	f7fd fed6 	bl	80047fc <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a54:	f7fd fed2 	bl	80047fc <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e045      	b.n	8006af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a66:	4b06      	ldr	r3, [pc, #24]	; (8006a80 <HAL_RCC_OscConfig+0x470>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1f0      	bne.n	8006a54 <HAL_RCC_OscConfig+0x444>
 8006a72:	e03d      	b.n	8006af0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d107      	bne.n	8006a8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e038      	b.n	8006af2 <HAL_RCC_OscConfig+0x4e2>
 8006a80:	40023800 	.word	0x40023800
 8006a84:	40007000 	.word	0x40007000
 8006a88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a8c:	4b1b      	ldr	r3, [pc, #108]	; (8006afc <HAL_RCC_OscConfig+0x4ec>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d028      	beq.n	8006aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d121      	bne.n	8006aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d11a      	bne.n	8006aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006abc:	4013      	ands	r3, r2
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ac2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d111      	bne.n	8006aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad2:	085b      	lsrs	r3, r3, #1
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d107      	bne.n	8006aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d001      	beq.n	8006af0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e000      	b.n	8006af2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	40023800 	.word	0x40023800

08006b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e0cc      	b.n	8006cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b14:	4b68      	ldr	r3, [pc, #416]	; (8006cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d90c      	bls.n	8006b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b22:	4b65      	ldr	r3, [pc, #404]	; (8006cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b2a:	4b63      	ldr	r3, [pc, #396]	; (8006cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0307 	and.w	r3, r3, #7
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d001      	beq.n	8006b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e0b8      	b.n	8006cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d020      	beq.n	8006b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0304 	and.w	r3, r3, #4
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d005      	beq.n	8006b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b54:	4b59      	ldr	r3, [pc, #356]	; (8006cbc <HAL_RCC_ClockConfig+0x1bc>)
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	4a58      	ldr	r2, [pc, #352]	; (8006cbc <HAL_RCC_ClockConfig+0x1bc>)
 8006b5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0308 	and.w	r3, r3, #8
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d005      	beq.n	8006b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b6c:	4b53      	ldr	r3, [pc, #332]	; (8006cbc <HAL_RCC_ClockConfig+0x1bc>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	4a52      	ldr	r2, [pc, #328]	; (8006cbc <HAL_RCC_ClockConfig+0x1bc>)
 8006b72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b78:	4b50      	ldr	r3, [pc, #320]	; (8006cbc <HAL_RCC_ClockConfig+0x1bc>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	494d      	ldr	r1, [pc, #308]	; (8006cbc <HAL_RCC_ClockConfig+0x1bc>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d044      	beq.n	8006c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d107      	bne.n	8006bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b9e:	4b47      	ldr	r3, [pc, #284]	; (8006cbc <HAL_RCC_ClockConfig+0x1bc>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d119      	bne.n	8006bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e07f      	b.n	8006cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d003      	beq.n	8006bbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d107      	bne.n	8006bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bbe:	4b3f      	ldr	r3, [pc, #252]	; (8006cbc <HAL_RCC_ClockConfig+0x1bc>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d109      	bne.n	8006bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e06f      	b.n	8006cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bce:	4b3b      	ldr	r3, [pc, #236]	; (8006cbc <HAL_RCC_ClockConfig+0x1bc>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e067      	b.n	8006cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bde:	4b37      	ldr	r3, [pc, #220]	; (8006cbc <HAL_RCC_ClockConfig+0x1bc>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f023 0203 	bic.w	r2, r3, #3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	4934      	ldr	r1, [pc, #208]	; (8006cbc <HAL_RCC_ClockConfig+0x1bc>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bf0:	f7fd fe04 	bl	80047fc <HAL_GetTick>
 8006bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bf6:	e00a      	b.n	8006c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bf8:	f7fd fe00 	bl	80047fc <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d901      	bls.n	8006c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e04f      	b.n	8006cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c0e:	4b2b      	ldr	r3, [pc, #172]	; (8006cbc <HAL_RCC_ClockConfig+0x1bc>)
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 020c 	and.w	r2, r3, #12
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d1eb      	bne.n	8006bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c20:	4b25      	ldr	r3, [pc, #148]	; (8006cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0307 	and.w	r3, r3, #7
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d20c      	bcs.n	8006c48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c2e:	4b22      	ldr	r3, [pc, #136]	; (8006cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c36:	4b20      	ldr	r3, [pc, #128]	; (8006cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d001      	beq.n	8006c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e032      	b.n	8006cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d008      	beq.n	8006c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c54:	4b19      	ldr	r3, [pc, #100]	; (8006cbc <HAL_RCC_ClockConfig+0x1bc>)
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	4916      	ldr	r1, [pc, #88]	; (8006cbc <HAL_RCC_ClockConfig+0x1bc>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0308 	and.w	r3, r3, #8
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d009      	beq.n	8006c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c72:	4b12      	ldr	r3, [pc, #72]	; (8006cbc <HAL_RCC_ClockConfig+0x1bc>)
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	00db      	lsls	r3, r3, #3
 8006c80:	490e      	ldr	r1, [pc, #56]	; (8006cbc <HAL_RCC_ClockConfig+0x1bc>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c86:	f000 f821 	bl	8006ccc <HAL_RCC_GetSysClockFreq>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	4b0b      	ldr	r3, [pc, #44]	; (8006cbc <HAL_RCC_ClockConfig+0x1bc>)
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	091b      	lsrs	r3, r3, #4
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	490a      	ldr	r1, [pc, #40]	; (8006cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8006c98:	5ccb      	ldrb	r3, [r1, r3]
 8006c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c9e:	4a09      	ldr	r2, [pc, #36]	; (8006cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ca2:	4b09      	ldr	r3, [pc, #36]	; (8006cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fc fa8c 	bl	80031c4 <HAL_InitTick>

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	40023c00 	.word	0x40023c00
 8006cbc:	40023800 	.word	0x40023800
 8006cc0:	0800e970 	.word	0x0800e970
 8006cc4:	20000014 	.word	0x20000014
 8006cc8:	20000018 	.word	0x20000018

08006ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cd0:	b094      	sub	sp, #80	; 0x50
 8006cd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8006cd8:	2300      	movs	r3, #0
 8006cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cdc:	2300      	movs	r3, #0
 8006cde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ce4:	4b79      	ldr	r3, [pc, #484]	; (8006ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f003 030c 	and.w	r3, r3, #12
 8006cec:	2b08      	cmp	r3, #8
 8006cee:	d00d      	beq.n	8006d0c <HAL_RCC_GetSysClockFreq+0x40>
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	f200 80e1 	bhi.w	8006eb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d002      	beq.n	8006d00 <HAL_RCC_GetSysClockFreq+0x34>
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	d003      	beq.n	8006d06 <HAL_RCC_GetSysClockFreq+0x3a>
 8006cfe:	e0db      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d00:	4b73      	ldr	r3, [pc, #460]	; (8006ed0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006d04:	e0db      	b.n	8006ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d06:	4b73      	ldr	r3, [pc, #460]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006d08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d0a:	e0d8      	b.n	8006ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d0c:	4b6f      	ldr	r3, [pc, #444]	; (8006ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d16:	4b6d      	ldr	r3, [pc, #436]	; (8006ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d063      	beq.n	8006dea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d22:	4b6a      	ldr	r3, [pc, #424]	; (8006ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	099b      	lsrs	r3, r3, #6
 8006d28:	2200      	movs	r2, #0
 8006d2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d34:	633b      	str	r3, [r7, #48]	; 0x30
 8006d36:	2300      	movs	r3, #0
 8006d38:	637b      	str	r3, [r7, #52]	; 0x34
 8006d3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006d3e:	4622      	mov	r2, r4
 8006d40:	462b      	mov	r3, r5
 8006d42:	f04f 0000 	mov.w	r0, #0
 8006d46:	f04f 0100 	mov.w	r1, #0
 8006d4a:	0159      	lsls	r1, r3, #5
 8006d4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d50:	0150      	lsls	r0, r2, #5
 8006d52:	4602      	mov	r2, r0
 8006d54:	460b      	mov	r3, r1
 8006d56:	4621      	mov	r1, r4
 8006d58:	1a51      	subs	r1, r2, r1
 8006d5a:	6139      	str	r1, [r7, #16]
 8006d5c:	4629      	mov	r1, r5
 8006d5e:	eb63 0301 	sbc.w	r3, r3, r1
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	f04f 0200 	mov.w	r2, #0
 8006d68:	f04f 0300 	mov.w	r3, #0
 8006d6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d70:	4659      	mov	r1, fp
 8006d72:	018b      	lsls	r3, r1, #6
 8006d74:	4651      	mov	r1, sl
 8006d76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d7a:	4651      	mov	r1, sl
 8006d7c:	018a      	lsls	r2, r1, #6
 8006d7e:	4651      	mov	r1, sl
 8006d80:	ebb2 0801 	subs.w	r8, r2, r1
 8006d84:	4659      	mov	r1, fp
 8006d86:	eb63 0901 	sbc.w	r9, r3, r1
 8006d8a:	f04f 0200 	mov.w	r2, #0
 8006d8e:	f04f 0300 	mov.w	r3, #0
 8006d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d9e:	4690      	mov	r8, r2
 8006da0:	4699      	mov	r9, r3
 8006da2:	4623      	mov	r3, r4
 8006da4:	eb18 0303 	adds.w	r3, r8, r3
 8006da8:	60bb      	str	r3, [r7, #8]
 8006daa:	462b      	mov	r3, r5
 8006dac:	eb49 0303 	adc.w	r3, r9, r3
 8006db0:	60fb      	str	r3, [r7, #12]
 8006db2:	f04f 0200 	mov.w	r2, #0
 8006db6:	f04f 0300 	mov.w	r3, #0
 8006dba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	024b      	lsls	r3, r1, #9
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006dc8:	4621      	mov	r1, r4
 8006dca:	024a      	lsls	r2, r1, #9
 8006dcc:	4610      	mov	r0, r2
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ddc:	f7f9 ff34 	bl	8000c48 <__aeabi_uldivmod>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4613      	mov	r3, r2
 8006de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006de8:	e058      	b.n	8006e9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dea:	4b38      	ldr	r3, [pc, #224]	; (8006ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	099b      	lsrs	r3, r3, #6
 8006df0:	2200      	movs	r2, #0
 8006df2:	4618      	mov	r0, r3
 8006df4:	4611      	mov	r1, r2
 8006df6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006dfa:	623b      	str	r3, [r7, #32]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8006e00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e04:	4642      	mov	r2, r8
 8006e06:	464b      	mov	r3, r9
 8006e08:	f04f 0000 	mov.w	r0, #0
 8006e0c:	f04f 0100 	mov.w	r1, #0
 8006e10:	0159      	lsls	r1, r3, #5
 8006e12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e16:	0150      	lsls	r0, r2, #5
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4641      	mov	r1, r8
 8006e1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e22:	4649      	mov	r1, r9
 8006e24:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e28:	f04f 0200 	mov.w	r2, #0
 8006e2c:	f04f 0300 	mov.w	r3, #0
 8006e30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e3c:	ebb2 040a 	subs.w	r4, r2, sl
 8006e40:	eb63 050b 	sbc.w	r5, r3, fp
 8006e44:	f04f 0200 	mov.w	r2, #0
 8006e48:	f04f 0300 	mov.w	r3, #0
 8006e4c:	00eb      	lsls	r3, r5, #3
 8006e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e52:	00e2      	lsls	r2, r4, #3
 8006e54:	4614      	mov	r4, r2
 8006e56:	461d      	mov	r5, r3
 8006e58:	4643      	mov	r3, r8
 8006e5a:	18e3      	adds	r3, r4, r3
 8006e5c:	603b      	str	r3, [r7, #0]
 8006e5e:	464b      	mov	r3, r9
 8006e60:	eb45 0303 	adc.w	r3, r5, r3
 8006e64:	607b      	str	r3, [r7, #4]
 8006e66:	f04f 0200 	mov.w	r2, #0
 8006e6a:	f04f 0300 	mov.w	r3, #0
 8006e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e72:	4629      	mov	r1, r5
 8006e74:	028b      	lsls	r3, r1, #10
 8006e76:	4621      	mov	r1, r4
 8006e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	028a      	lsls	r2, r1, #10
 8006e80:	4610      	mov	r0, r2
 8006e82:	4619      	mov	r1, r3
 8006e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e86:	2200      	movs	r2, #0
 8006e88:	61bb      	str	r3, [r7, #24]
 8006e8a:	61fa      	str	r2, [r7, #28]
 8006e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e90:	f7f9 feda 	bl	8000c48 <__aeabi_uldivmod>
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	4613      	mov	r3, r2
 8006e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e9c:	4b0b      	ldr	r3, [pc, #44]	; (8006ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	0c1b      	lsrs	r3, r3, #16
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006eac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006eb6:	e002      	b.n	8006ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006eb8:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006eba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3750      	adds	r7, #80	; 0x50
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eca:	bf00      	nop
 8006ecc:	40023800 	.word	0x40023800
 8006ed0:	00f42400 	.word	0x00f42400
 8006ed4:	007a1200 	.word	0x007a1200

08006ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006edc:	4b03      	ldr	r3, [pc, #12]	; (8006eec <HAL_RCC_GetHCLKFreq+0x14>)
 8006ede:	681b      	ldr	r3, [r3, #0]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	20000014 	.word	0x20000014

08006ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ef4:	f7ff fff0 	bl	8006ed8 <HAL_RCC_GetHCLKFreq>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	4b05      	ldr	r3, [pc, #20]	; (8006f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	0a9b      	lsrs	r3, r3, #10
 8006f00:	f003 0307 	and.w	r3, r3, #7
 8006f04:	4903      	ldr	r1, [pc, #12]	; (8006f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f06:	5ccb      	ldrb	r3, [r1, r3]
 8006f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	40023800 	.word	0x40023800
 8006f14:	0800e980 	.word	0x0800e980

08006f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f1c:	f7ff ffdc 	bl	8006ed8 <HAL_RCC_GetHCLKFreq>
 8006f20:	4602      	mov	r2, r0
 8006f22:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	0b5b      	lsrs	r3, r3, #13
 8006f28:	f003 0307 	and.w	r3, r3, #7
 8006f2c:	4903      	ldr	r1, [pc, #12]	; (8006f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f2e:	5ccb      	ldrb	r3, [r1, r3]
 8006f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	40023800 	.word	0x40023800
 8006f3c:	0800e980 	.word	0x0800e980

08006f40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	220f      	movs	r2, #15
 8006f4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f50:	4b12      	ldr	r3, [pc, #72]	; (8006f9c <HAL_RCC_GetClockConfig+0x5c>)
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f003 0203 	and.w	r2, r3, #3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f5c:	4b0f      	ldr	r3, [pc, #60]	; (8006f9c <HAL_RCC_GetClockConfig+0x5c>)
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f68:	4b0c      	ldr	r3, [pc, #48]	; (8006f9c <HAL_RCC_GetClockConfig+0x5c>)
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006f74:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <HAL_RCC_GetClockConfig+0x5c>)
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	08db      	lsrs	r3, r3, #3
 8006f7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f82:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <HAL_RCC_GetClockConfig+0x60>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0207 	and.w	r2, r3, #7
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	601a      	str	r2, [r3, #0]
}
 8006f8e:	bf00      	nop
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	40023800 	.word	0x40023800
 8006fa0:	40023c00 	.word	0x40023c00

08006fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e041      	b.n	800703a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d106      	bne.n	8006fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7fc fea0 	bl	8003d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3304      	adds	r3, #4
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	f000 fd22 	bl	8007a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b01      	cmp	r3, #1
 8007056:	d001      	beq.n	800705c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e04e      	b.n	80070fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2202      	movs	r2, #2
 8007060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68da      	ldr	r2, [r3, #12]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f042 0201 	orr.w	r2, r2, #1
 8007072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a23      	ldr	r2, [pc, #140]	; (8007108 <HAL_TIM_Base_Start_IT+0xc4>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d022      	beq.n	80070c4 <HAL_TIM_Base_Start_IT+0x80>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007086:	d01d      	beq.n	80070c4 <HAL_TIM_Base_Start_IT+0x80>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a1f      	ldr	r2, [pc, #124]	; (800710c <HAL_TIM_Base_Start_IT+0xc8>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d018      	beq.n	80070c4 <HAL_TIM_Base_Start_IT+0x80>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a1e      	ldr	r2, [pc, #120]	; (8007110 <HAL_TIM_Base_Start_IT+0xcc>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d013      	beq.n	80070c4 <HAL_TIM_Base_Start_IT+0x80>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a1c      	ldr	r2, [pc, #112]	; (8007114 <HAL_TIM_Base_Start_IT+0xd0>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d00e      	beq.n	80070c4 <HAL_TIM_Base_Start_IT+0x80>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a1b      	ldr	r2, [pc, #108]	; (8007118 <HAL_TIM_Base_Start_IT+0xd4>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d009      	beq.n	80070c4 <HAL_TIM_Base_Start_IT+0x80>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a19      	ldr	r2, [pc, #100]	; (800711c <HAL_TIM_Base_Start_IT+0xd8>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d004      	beq.n	80070c4 <HAL_TIM_Base_Start_IT+0x80>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a18      	ldr	r2, [pc, #96]	; (8007120 <HAL_TIM_Base_Start_IT+0xdc>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d111      	bne.n	80070e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 0307 	and.w	r3, r3, #7
 80070ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b06      	cmp	r3, #6
 80070d4:	d010      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f042 0201 	orr.w	r2, r2, #1
 80070e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070e6:	e007      	b.n	80070f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f042 0201 	orr.w	r2, r2, #1
 80070f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	40010000 	.word	0x40010000
 800710c:	40000400 	.word	0x40000400
 8007110:	40000800 	.word	0x40000800
 8007114:	40000c00 	.word	0x40000c00
 8007118:	40010400 	.word	0x40010400
 800711c:	40014000 	.word	0x40014000
 8007120:	40001800 	.word	0x40001800

08007124 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e041      	b.n	80071ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d106      	bne.n	8007150 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f839 	bl	80071c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3304      	adds	r3, #4
 8007160:	4619      	mov	r1, r3
 8007162:	4610      	mov	r0, r2
 8007164:	f000 fc62 	bl	8007a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071ca:	bf00      	nop
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b082      	sub	sp, #8
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e041      	b.n	800726c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d106      	bne.n	8007202 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f839 	bl	8007274 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2202      	movs	r2, #2
 8007206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3304      	adds	r3, #4
 8007212:	4619      	mov	r1, r3
 8007214:	4610      	mov	r0, r2
 8007216:	f000 fc09 	bl	8007a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b02      	cmp	r3, #2
 800729c:	d122      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d11b      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0202 	mvn.w	r2, #2
 80072b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	f003 0303 	and.w	r3, r3, #3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7fb fd0e 	bl	8002cec <HAL_TIM_IC_CaptureCallback>
 80072d0:	e005      	b.n	80072de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fb8c 	bl	80079f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fb93 	bl	8007a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f003 0304 	and.w	r3, r3, #4
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d122      	bne.n	8007338 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	2b04      	cmp	r3, #4
 80072fe:	d11b      	bne.n	8007338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f06f 0204 	mvn.w	r2, #4
 8007308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2202      	movs	r2, #2
 800730e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7fb fce4 	bl	8002cec <HAL_TIM_IC_CaptureCallback>
 8007324:	e005      	b.n	8007332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fb62 	bl	80079f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fb69 	bl	8007a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f003 0308 	and.w	r3, r3, #8
 8007342:	2b08      	cmp	r3, #8
 8007344:	d122      	bne.n	800738c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f003 0308 	and.w	r3, r3, #8
 8007350:	2b08      	cmp	r3, #8
 8007352:	d11b      	bne.n	800738c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f06f 0208 	mvn.w	r2, #8
 800735c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2204      	movs	r2, #4
 8007362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f003 0303 	and.w	r3, r3, #3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7fb fcba 	bl	8002cec <HAL_TIM_IC_CaptureCallback>
 8007378:	e005      	b.n	8007386 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fb38 	bl	80079f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fb3f 	bl	8007a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f003 0310 	and.w	r3, r3, #16
 8007396:	2b10      	cmp	r3, #16
 8007398:	d122      	bne.n	80073e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f003 0310 	and.w	r3, r3, #16
 80073a4:	2b10      	cmp	r3, #16
 80073a6:	d11b      	bne.n	80073e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f06f 0210 	mvn.w	r2, #16
 80073b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2208      	movs	r2, #8
 80073b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7fb fc90 	bl	8002cec <HAL_TIM_IC_CaptureCallback>
 80073cc:	e005      	b.n	80073da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fb0e 	bl	80079f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fb15 	bl	8007a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d10e      	bne.n	800740c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d107      	bne.n	800740c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f06f 0201 	mvn.w	r2, #1
 8007404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fb fd38 	bl	8002e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007416:	2b80      	cmp	r3, #128	; 0x80
 8007418:	d10e      	bne.n	8007438 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007424:	2b80      	cmp	r3, #128	; 0x80
 8007426:	d107      	bne.n	8007438 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 f878 	bl	8008528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007442:	2b40      	cmp	r3, #64	; 0x40
 8007444:	d10e      	bne.n	8007464 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007450:	2b40      	cmp	r3, #64	; 0x40
 8007452:	d107      	bne.n	8007464 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800745c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fada 	bl	8007a18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	f003 0320 	and.w	r3, r3, #32
 800746e:	2b20      	cmp	r3, #32
 8007470:	d10e      	bne.n	8007490 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f003 0320 	and.w	r3, r3, #32
 800747c:	2b20      	cmp	r3, #32
 800747e:	d107      	bne.n	8007490 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f06f 0220 	mvn.w	r2, #32
 8007488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 f842 	bl	8008514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007490:	bf00      	nop
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80074b2:	2302      	movs	r3, #2
 80074b4:	e088      	b.n	80075c8 <HAL_TIM_IC_ConfigChannel+0x130>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d11b      	bne.n	80074fc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6818      	ldr	r0, [r3, #0]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	6819      	ldr	r1, [r3, #0]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f000 fd8c 	bl	8007ff0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	699a      	ldr	r2, [r3, #24]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 020c 	bic.w	r2, r2, #12
 80074e6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6999      	ldr	r1, [r3, #24]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	689a      	ldr	r2, [r3, #8]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	619a      	str	r2, [r3, #24]
 80074fa:	e060      	b.n	80075be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b04      	cmp	r3, #4
 8007500:	d11c      	bne.n	800753c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6818      	ldr	r0, [r3, #0]
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	6819      	ldr	r1, [r3, #0]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	f000 fe10 	bl	8008136 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	699a      	ldr	r2, [r3, #24]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007524:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6999      	ldr	r1, [r3, #24]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	021a      	lsls	r2, r3, #8
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	619a      	str	r2, [r3, #24]
 800753a:	e040      	b.n	80075be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b08      	cmp	r3, #8
 8007540:	d11b      	bne.n	800757a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6818      	ldr	r0, [r3, #0]
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	6819      	ldr	r1, [r3, #0]
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	f000 fe5d 	bl	8008210 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	69da      	ldr	r2, [r3, #28]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 020c 	bic.w	r2, r2, #12
 8007564:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69d9      	ldr	r1, [r3, #28]
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	61da      	str	r2, [r3, #28]
 8007578:	e021      	b.n	80075be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b0c      	cmp	r3, #12
 800757e:	d11c      	bne.n	80075ba <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6818      	ldr	r0, [r3, #0]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	6819      	ldr	r1, [r3, #0]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f000 fe7a 	bl	8008288 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	69da      	ldr	r2, [r3, #28]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80075a2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	69d9      	ldr	r1, [r3, #28]
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	021a      	lsls	r2, r3, #8
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	61da      	str	r2, [r3, #28]
 80075b8:	e001      	b.n	80075be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3718      	adds	r7, #24
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075dc:	2300      	movs	r3, #0
 80075de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d101      	bne.n	80075ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075ea:	2302      	movs	r3, #2
 80075ec:	e0ae      	b.n	800774c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b0c      	cmp	r3, #12
 80075fa:	f200 809f 	bhi.w	800773c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80075fe:	a201      	add	r2, pc, #4	; (adr r2, 8007604 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007604:	08007639 	.word	0x08007639
 8007608:	0800773d 	.word	0x0800773d
 800760c:	0800773d 	.word	0x0800773d
 8007610:	0800773d 	.word	0x0800773d
 8007614:	08007679 	.word	0x08007679
 8007618:	0800773d 	.word	0x0800773d
 800761c:	0800773d 	.word	0x0800773d
 8007620:	0800773d 	.word	0x0800773d
 8007624:	080076bb 	.word	0x080076bb
 8007628:	0800773d 	.word	0x0800773d
 800762c:	0800773d 	.word	0x0800773d
 8007630:	0800773d 	.word	0x0800773d
 8007634:	080076fb 	.word	0x080076fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68b9      	ldr	r1, [r7, #8]
 800763e:	4618      	mov	r0, r3
 8007640:	f000 fa94 	bl	8007b6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	699a      	ldr	r2, [r3, #24]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f042 0208 	orr.w	r2, r2, #8
 8007652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	699a      	ldr	r2, [r3, #24]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f022 0204 	bic.w	r2, r2, #4
 8007662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6999      	ldr	r1, [r3, #24]
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	691a      	ldr	r2, [r3, #16]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	619a      	str	r2, [r3, #24]
      break;
 8007676:	e064      	b.n	8007742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68b9      	ldr	r1, [r7, #8]
 800767e:	4618      	mov	r0, r3
 8007680:	f000 fae4 	bl	8007c4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	699a      	ldr	r2, [r3, #24]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	699a      	ldr	r2, [r3, #24]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6999      	ldr	r1, [r3, #24]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	021a      	lsls	r2, r3, #8
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	619a      	str	r2, [r3, #24]
      break;
 80076b8:	e043      	b.n	8007742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68b9      	ldr	r1, [r7, #8]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 fb39 	bl	8007d38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	69da      	ldr	r2, [r3, #28]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f042 0208 	orr.w	r2, r2, #8
 80076d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69da      	ldr	r2, [r3, #28]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f022 0204 	bic.w	r2, r2, #4
 80076e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	69d9      	ldr	r1, [r3, #28]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	691a      	ldr	r2, [r3, #16]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	61da      	str	r2, [r3, #28]
      break;
 80076f8:	e023      	b.n	8007742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68b9      	ldr	r1, [r7, #8]
 8007700:	4618      	mov	r0, r3
 8007702:	f000 fb8d 	bl	8007e20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	69da      	ldr	r2, [r3, #28]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69da      	ldr	r2, [r3, #28]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	69d9      	ldr	r1, [r3, #28]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	021a      	lsls	r2, r3, #8
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	430a      	orrs	r2, r1
 8007738:	61da      	str	r2, [r3, #28]
      break;
 800773a:	e002      	b.n	8007742 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	75fb      	strb	r3, [r7, #23]
      break;
 8007740:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800774a:	7dfb      	ldrb	r3, [r7, #23]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3718      	adds	r7, #24
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007768:	2b01      	cmp	r3, #1
 800776a:	d101      	bne.n	8007770 <HAL_TIM_ConfigClockSource+0x1c>
 800776c:	2302      	movs	r3, #2
 800776e:	e0b4      	b.n	80078da <HAL_TIM_ConfigClockSource+0x186>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800778e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007796:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a8:	d03e      	beq.n	8007828 <HAL_TIM_ConfigClockSource+0xd4>
 80077aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077ae:	f200 8087 	bhi.w	80078c0 <HAL_TIM_ConfigClockSource+0x16c>
 80077b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b6:	f000 8086 	beq.w	80078c6 <HAL_TIM_ConfigClockSource+0x172>
 80077ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077be:	d87f      	bhi.n	80078c0 <HAL_TIM_ConfigClockSource+0x16c>
 80077c0:	2b70      	cmp	r3, #112	; 0x70
 80077c2:	d01a      	beq.n	80077fa <HAL_TIM_ConfigClockSource+0xa6>
 80077c4:	2b70      	cmp	r3, #112	; 0x70
 80077c6:	d87b      	bhi.n	80078c0 <HAL_TIM_ConfigClockSource+0x16c>
 80077c8:	2b60      	cmp	r3, #96	; 0x60
 80077ca:	d050      	beq.n	800786e <HAL_TIM_ConfigClockSource+0x11a>
 80077cc:	2b60      	cmp	r3, #96	; 0x60
 80077ce:	d877      	bhi.n	80078c0 <HAL_TIM_ConfigClockSource+0x16c>
 80077d0:	2b50      	cmp	r3, #80	; 0x50
 80077d2:	d03c      	beq.n	800784e <HAL_TIM_ConfigClockSource+0xfa>
 80077d4:	2b50      	cmp	r3, #80	; 0x50
 80077d6:	d873      	bhi.n	80078c0 <HAL_TIM_ConfigClockSource+0x16c>
 80077d8:	2b40      	cmp	r3, #64	; 0x40
 80077da:	d058      	beq.n	800788e <HAL_TIM_ConfigClockSource+0x13a>
 80077dc:	2b40      	cmp	r3, #64	; 0x40
 80077de:	d86f      	bhi.n	80078c0 <HAL_TIM_ConfigClockSource+0x16c>
 80077e0:	2b30      	cmp	r3, #48	; 0x30
 80077e2:	d064      	beq.n	80078ae <HAL_TIM_ConfigClockSource+0x15a>
 80077e4:	2b30      	cmp	r3, #48	; 0x30
 80077e6:	d86b      	bhi.n	80078c0 <HAL_TIM_ConfigClockSource+0x16c>
 80077e8:	2b20      	cmp	r3, #32
 80077ea:	d060      	beq.n	80078ae <HAL_TIM_ConfigClockSource+0x15a>
 80077ec:	2b20      	cmp	r3, #32
 80077ee:	d867      	bhi.n	80078c0 <HAL_TIM_ConfigClockSource+0x16c>
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d05c      	beq.n	80078ae <HAL_TIM_ConfigClockSource+0x15a>
 80077f4:	2b10      	cmp	r3, #16
 80077f6:	d05a      	beq.n	80078ae <HAL_TIM_ConfigClockSource+0x15a>
 80077f8:	e062      	b.n	80078c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6818      	ldr	r0, [r3, #0]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	6899      	ldr	r1, [r3, #8]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	f000 fd95 	bl	8008338 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800781c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	609a      	str	r2, [r3, #8]
      break;
 8007826:	e04f      	b.n	80078c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6818      	ldr	r0, [r3, #0]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	6899      	ldr	r1, [r3, #8]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f000 fd7e 	bl	8008338 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689a      	ldr	r2, [r3, #8]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800784a:	609a      	str	r2, [r3, #8]
      break;
 800784c:	e03c      	b.n	80078c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6818      	ldr	r0, [r3, #0]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	6859      	ldr	r1, [r3, #4]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	461a      	mov	r2, r3
 800785c:	f000 fc3c 	bl	80080d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2150      	movs	r1, #80	; 0x50
 8007866:	4618      	mov	r0, r3
 8007868:	f000 fd4b 	bl	8008302 <TIM_ITRx_SetConfig>
      break;
 800786c:	e02c      	b.n	80078c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6818      	ldr	r0, [r3, #0]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	6859      	ldr	r1, [r3, #4]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	461a      	mov	r2, r3
 800787c:	f000 fc98 	bl	80081b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2160      	movs	r1, #96	; 0x60
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fd3b 	bl	8008302 <TIM_ITRx_SetConfig>
      break;
 800788c:	e01c      	b.n	80078c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	6859      	ldr	r1, [r3, #4]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	461a      	mov	r2, r3
 800789c:	f000 fc1c 	bl	80080d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2140      	movs	r1, #64	; 0x40
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 fd2b 	bl	8008302 <TIM_ITRx_SetConfig>
      break;
 80078ac:	e00c      	b.n	80078c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4619      	mov	r1, r3
 80078b8:	4610      	mov	r0, r2
 80078ba:	f000 fd22 	bl	8008302 <TIM_ITRx_SetConfig>
      break;
 80078be:	e003      	b.n	80078c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	73fb      	strb	r3, [r7, #15]
      break;
 80078c4:	e000      	b.n	80078c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80078c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b082      	sub	sp, #8
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d101      	bne.n	80078fa <HAL_TIM_SlaveConfigSynchro+0x18>
 80078f6:	2302      	movs	r3, #2
 80078f8:	e031      	b.n	800795e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2202      	movs	r2, #2
 8007906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fadd 	bl	8007ecc <TIM_SlaveTimer_SetConfig>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d009      	beq.n	800792c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e018      	b.n	800795e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800793a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800794a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
	...

08007968 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b0c      	cmp	r3, #12
 800797a:	d831      	bhi.n	80079e0 <HAL_TIM_ReadCapturedValue+0x78>
 800797c:	a201      	add	r2, pc, #4	; (adr r2, 8007984 <HAL_TIM_ReadCapturedValue+0x1c>)
 800797e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007982:	bf00      	nop
 8007984:	080079b9 	.word	0x080079b9
 8007988:	080079e1 	.word	0x080079e1
 800798c:	080079e1 	.word	0x080079e1
 8007990:	080079e1 	.word	0x080079e1
 8007994:	080079c3 	.word	0x080079c3
 8007998:	080079e1 	.word	0x080079e1
 800799c:	080079e1 	.word	0x080079e1
 80079a0:	080079e1 	.word	0x080079e1
 80079a4:	080079cd 	.word	0x080079cd
 80079a8:	080079e1 	.word	0x080079e1
 80079ac:	080079e1 	.word	0x080079e1
 80079b0:	080079e1 	.word	0x080079e1
 80079b4:	080079d7 	.word	0x080079d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079be:	60fb      	str	r3, [r7, #12]

      break;
 80079c0:	e00f      	b.n	80079e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c8:	60fb      	str	r3, [r7, #12]

      break;
 80079ca:	e00a      	b.n	80079e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d2:	60fb      	str	r3, [r7, #12]

      break;
 80079d4:	e005      	b.n	80079e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079dc:	60fb      	str	r3, [r7, #12]

      break;
 80079de:	e000      	b.n	80079e2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80079e0:	bf00      	nop
  }

  return tmpreg;
 80079e2:	68fb      	ldr	r3, [r7, #12]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a40      	ldr	r2, [pc, #256]	; (8007b40 <TIM_Base_SetConfig+0x114>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d013      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a4a:	d00f      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a3d      	ldr	r2, [pc, #244]	; (8007b44 <TIM_Base_SetConfig+0x118>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d00b      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a3c      	ldr	r2, [pc, #240]	; (8007b48 <TIM_Base_SetConfig+0x11c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d007      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a3b      	ldr	r2, [pc, #236]	; (8007b4c <TIM_Base_SetConfig+0x120>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d003      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a3a      	ldr	r2, [pc, #232]	; (8007b50 <TIM_Base_SetConfig+0x124>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d108      	bne.n	8007a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a2f      	ldr	r2, [pc, #188]	; (8007b40 <TIM_Base_SetConfig+0x114>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d02b      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a8c:	d027      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a2c      	ldr	r2, [pc, #176]	; (8007b44 <TIM_Base_SetConfig+0x118>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d023      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a2b      	ldr	r2, [pc, #172]	; (8007b48 <TIM_Base_SetConfig+0x11c>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d01f      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a2a      	ldr	r2, [pc, #168]	; (8007b4c <TIM_Base_SetConfig+0x120>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d01b      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a29      	ldr	r2, [pc, #164]	; (8007b50 <TIM_Base_SetConfig+0x124>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d017      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a28      	ldr	r2, [pc, #160]	; (8007b54 <TIM_Base_SetConfig+0x128>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d013      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a27      	ldr	r2, [pc, #156]	; (8007b58 <TIM_Base_SetConfig+0x12c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d00f      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a26      	ldr	r2, [pc, #152]	; (8007b5c <TIM_Base_SetConfig+0x130>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00b      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a25      	ldr	r2, [pc, #148]	; (8007b60 <TIM_Base_SetConfig+0x134>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d007      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a24      	ldr	r2, [pc, #144]	; (8007b64 <TIM_Base_SetConfig+0x138>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d003      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a23      	ldr	r2, [pc, #140]	; (8007b68 <TIM_Base_SetConfig+0x13c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d108      	bne.n	8007af0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	689a      	ldr	r2, [r3, #8]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a0a      	ldr	r2, [pc, #40]	; (8007b40 <TIM_Base_SetConfig+0x114>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d003      	beq.n	8007b24 <TIM_Base_SetConfig+0xf8>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a0c      	ldr	r2, [pc, #48]	; (8007b50 <TIM_Base_SetConfig+0x124>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d103      	bne.n	8007b2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	691a      	ldr	r2, [r3, #16]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	615a      	str	r2, [r3, #20]
}
 8007b32:	bf00      	nop
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	40010000 	.word	0x40010000
 8007b44:	40000400 	.word	0x40000400
 8007b48:	40000800 	.word	0x40000800
 8007b4c:	40000c00 	.word	0x40000c00
 8007b50:	40010400 	.word	0x40010400
 8007b54:	40014000 	.word	0x40014000
 8007b58:	40014400 	.word	0x40014400
 8007b5c:	40014800 	.word	0x40014800
 8007b60:	40001800 	.word	0x40001800
 8007b64:	40001c00 	.word	0x40001c00
 8007b68:	40002000 	.word	0x40002000

08007b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	f023 0201 	bic.w	r2, r3, #1
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 0303 	bic.w	r3, r3, #3
 8007ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f023 0302 	bic.w	r3, r3, #2
 8007bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a20      	ldr	r2, [pc, #128]	; (8007c44 <TIM_OC1_SetConfig+0xd8>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d003      	beq.n	8007bd0 <TIM_OC1_SetConfig+0x64>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a1f      	ldr	r2, [pc, #124]	; (8007c48 <TIM_OC1_SetConfig+0xdc>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d10c      	bne.n	8007bea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f023 0308 	bic.w	r3, r3, #8
 8007bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f023 0304 	bic.w	r3, r3, #4
 8007be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a15      	ldr	r2, [pc, #84]	; (8007c44 <TIM_OC1_SetConfig+0xd8>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d003      	beq.n	8007bfa <TIM_OC1_SetConfig+0x8e>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a14      	ldr	r2, [pc, #80]	; (8007c48 <TIM_OC1_SetConfig+0xdc>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d111      	bne.n	8007c1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	621a      	str	r2, [r3, #32]
}
 8007c38:	bf00      	nop
 8007c3a:	371c      	adds	r7, #28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	40010000 	.word	0x40010000
 8007c48:	40010400 	.word	0x40010400

08007c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	f023 0210 	bic.w	r2, r3, #16
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	021b      	lsls	r3, r3, #8
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f023 0320 	bic.w	r3, r3, #32
 8007c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	011b      	lsls	r3, r3, #4
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a22      	ldr	r2, [pc, #136]	; (8007d30 <TIM_OC2_SetConfig+0xe4>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d003      	beq.n	8007cb4 <TIM_OC2_SetConfig+0x68>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a21      	ldr	r2, [pc, #132]	; (8007d34 <TIM_OC2_SetConfig+0xe8>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d10d      	bne.n	8007cd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	011b      	lsls	r3, r3, #4
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a17      	ldr	r2, [pc, #92]	; (8007d30 <TIM_OC2_SetConfig+0xe4>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d003      	beq.n	8007ce0 <TIM_OC2_SetConfig+0x94>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a16      	ldr	r2, [pc, #88]	; (8007d34 <TIM_OC2_SetConfig+0xe8>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d113      	bne.n	8007d08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ce6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	621a      	str	r2, [r3, #32]
}
 8007d22:	bf00      	nop
 8007d24:	371c      	adds	r7, #28
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	40010000 	.word	0x40010000
 8007d34:	40010400 	.word	0x40010400

08007d38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b087      	sub	sp, #28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f023 0303 	bic.w	r3, r3, #3
 8007d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	021b      	lsls	r3, r3, #8
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a21      	ldr	r2, [pc, #132]	; (8007e18 <TIM_OC3_SetConfig+0xe0>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d003      	beq.n	8007d9e <TIM_OC3_SetConfig+0x66>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a20      	ldr	r2, [pc, #128]	; (8007e1c <TIM_OC3_SetConfig+0xe4>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d10d      	bne.n	8007dba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	021b      	lsls	r3, r3, #8
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a16      	ldr	r2, [pc, #88]	; (8007e18 <TIM_OC3_SetConfig+0xe0>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d003      	beq.n	8007dca <TIM_OC3_SetConfig+0x92>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a15      	ldr	r2, [pc, #84]	; (8007e1c <TIM_OC3_SetConfig+0xe4>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d113      	bne.n	8007df2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	011b      	lsls	r3, r3, #4
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	011b      	lsls	r3, r3, #4
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	621a      	str	r2, [r3, #32]
}
 8007e0c:	bf00      	nop
 8007e0e:	371c      	adds	r7, #28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	40010000 	.word	0x40010000
 8007e1c:	40010400 	.word	0x40010400

08007e20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	69db      	ldr	r3, [r3, #28]
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	021b      	lsls	r3, r3, #8
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	031b      	lsls	r3, r3, #12
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a12      	ldr	r2, [pc, #72]	; (8007ec4 <TIM_OC4_SetConfig+0xa4>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d003      	beq.n	8007e88 <TIM_OC4_SetConfig+0x68>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a11      	ldr	r2, [pc, #68]	; (8007ec8 <TIM_OC4_SetConfig+0xa8>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d109      	bne.n	8007e9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	019b      	lsls	r3, r3, #6
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	621a      	str	r2, [r3, #32]
}
 8007eb6:	bf00      	nop
 8007eb8:	371c      	adds	r7, #28
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	40010000 	.word	0x40010000
 8007ec8:	40010400 	.word	0x40010400

08007ecc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	f023 0307 	bic.w	r3, r3, #7
 8007efa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	2b70      	cmp	r3, #112	; 0x70
 8007f14:	d01a      	beq.n	8007f4c <TIM_SlaveTimer_SetConfig+0x80>
 8007f16:	2b70      	cmp	r3, #112	; 0x70
 8007f18:	d860      	bhi.n	8007fdc <TIM_SlaveTimer_SetConfig+0x110>
 8007f1a:	2b60      	cmp	r3, #96	; 0x60
 8007f1c:	d054      	beq.n	8007fc8 <TIM_SlaveTimer_SetConfig+0xfc>
 8007f1e:	2b60      	cmp	r3, #96	; 0x60
 8007f20:	d85c      	bhi.n	8007fdc <TIM_SlaveTimer_SetConfig+0x110>
 8007f22:	2b50      	cmp	r3, #80	; 0x50
 8007f24:	d046      	beq.n	8007fb4 <TIM_SlaveTimer_SetConfig+0xe8>
 8007f26:	2b50      	cmp	r3, #80	; 0x50
 8007f28:	d858      	bhi.n	8007fdc <TIM_SlaveTimer_SetConfig+0x110>
 8007f2a:	2b40      	cmp	r3, #64	; 0x40
 8007f2c:	d019      	beq.n	8007f62 <TIM_SlaveTimer_SetConfig+0x96>
 8007f2e:	2b40      	cmp	r3, #64	; 0x40
 8007f30:	d854      	bhi.n	8007fdc <TIM_SlaveTimer_SetConfig+0x110>
 8007f32:	2b30      	cmp	r3, #48	; 0x30
 8007f34:	d055      	beq.n	8007fe2 <TIM_SlaveTimer_SetConfig+0x116>
 8007f36:	2b30      	cmp	r3, #48	; 0x30
 8007f38:	d850      	bhi.n	8007fdc <TIM_SlaveTimer_SetConfig+0x110>
 8007f3a:	2b20      	cmp	r3, #32
 8007f3c:	d051      	beq.n	8007fe2 <TIM_SlaveTimer_SetConfig+0x116>
 8007f3e:	2b20      	cmp	r3, #32
 8007f40:	d84c      	bhi.n	8007fdc <TIM_SlaveTimer_SetConfig+0x110>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d04d      	beq.n	8007fe2 <TIM_SlaveTimer_SetConfig+0x116>
 8007f46:	2b10      	cmp	r3, #16
 8007f48:	d04b      	beq.n	8007fe2 <TIM_SlaveTimer_SetConfig+0x116>
 8007f4a:	e047      	b.n	8007fdc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6818      	ldr	r0, [r3, #0]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	68d9      	ldr	r1, [r3, #12]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	689a      	ldr	r2, [r3, #8]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	f000 f9ec 	bl	8008338 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007f60:	e040      	b.n	8007fe4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b05      	cmp	r3, #5
 8007f68:	d101      	bne.n	8007f6e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e03b      	b.n	8007fe6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	6a1b      	ldr	r3, [r3, #32]
 8007f74:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6a1a      	ldr	r2, [r3, #32]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f022 0201 	bic.w	r2, r2, #1
 8007f84:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f94:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	011b      	lsls	r3, r3, #4
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	621a      	str	r2, [r3, #32]
      break;
 8007fb2:	e017      	b.n	8007fe4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6818      	ldr	r0, [r3, #0]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	6899      	ldr	r1, [r3, #8]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	f000 f889 	bl	80080d8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007fc6:	e00d      	b.n	8007fe4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6818      	ldr	r0, [r3, #0]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	6899      	ldr	r1, [r3, #8]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	f000 f8eb 	bl	80081b0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007fda:	e003      	b.n	8007fe4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe0:	e000      	b.n	8007fe4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007fe2:	bf00      	nop
  }

  return status;
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
	...

08007ff0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
 8007ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	f023 0201 	bic.w	r2, r3, #1
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6a1b      	ldr	r3, [r3, #32]
 8008014:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4a28      	ldr	r2, [pc, #160]	; (80080bc <TIM_TI1_SetConfig+0xcc>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d01b      	beq.n	8008056 <TIM_TI1_SetConfig+0x66>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008024:	d017      	beq.n	8008056 <TIM_TI1_SetConfig+0x66>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	4a25      	ldr	r2, [pc, #148]	; (80080c0 <TIM_TI1_SetConfig+0xd0>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d013      	beq.n	8008056 <TIM_TI1_SetConfig+0x66>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	4a24      	ldr	r2, [pc, #144]	; (80080c4 <TIM_TI1_SetConfig+0xd4>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d00f      	beq.n	8008056 <TIM_TI1_SetConfig+0x66>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	4a23      	ldr	r2, [pc, #140]	; (80080c8 <TIM_TI1_SetConfig+0xd8>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d00b      	beq.n	8008056 <TIM_TI1_SetConfig+0x66>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	4a22      	ldr	r2, [pc, #136]	; (80080cc <TIM_TI1_SetConfig+0xdc>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d007      	beq.n	8008056 <TIM_TI1_SetConfig+0x66>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	4a21      	ldr	r2, [pc, #132]	; (80080d0 <TIM_TI1_SetConfig+0xe0>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d003      	beq.n	8008056 <TIM_TI1_SetConfig+0x66>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	4a20      	ldr	r2, [pc, #128]	; (80080d4 <TIM_TI1_SetConfig+0xe4>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d101      	bne.n	800805a <TIM_TI1_SetConfig+0x6a>
 8008056:	2301      	movs	r3, #1
 8008058:	e000      	b.n	800805c <TIM_TI1_SetConfig+0x6c>
 800805a:	2300      	movs	r3, #0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d008      	beq.n	8008072 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	f023 0303 	bic.w	r3, r3, #3
 8008066:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008068:	697a      	ldr	r2, [r7, #20]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4313      	orrs	r3, r2
 800806e:	617b      	str	r3, [r7, #20]
 8008070:	e003      	b.n	800807a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f043 0301 	orr.w	r3, r3, #1
 8008078:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008080:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	011b      	lsls	r3, r3, #4
 8008086:	b2db      	uxtb	r3, r3
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	4313      	orrs	r3, r2
 800808c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	f023 030a 	bic.w	r3, r3, #10
 8008094:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	f003 030a 	and.w	r3, r3, #10
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	4313      	orrs	r3, r2
 80080a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	693a      	ldr	r2, [r7, #16]
 80080ac:	621a      	str	r2, [r3, #32]
}
 80080ae:	bf00      	nop
 80080b0:	371c      	adds	r7, #28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	40010000 	.word	0x40010000
 80080c0:	40000400 	.word	0x40000400
 80080c4:	40000800 	.word	0x40000800
 80080c8:	40000c00 	.word	0x40000c00
 80080cc:	40010400 	.word	0x40010400
 80080d0:	40014000 	.word	0x40014000
 80080d4:	40001800 	.word	0x40001800

080080d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080d8:	b480      	push	{r7}
 80080da:	b087      	sub	sp, #28
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	f023 0201 	bic.w	r2, r3, #1
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	011b      	lsls	r3, r3, #4
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	4313      	orrs	r3, r2
 800810c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f023 030a 	bic.w	r3, r3, #10
 8008114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	4313      	orrs	r3, r2
 800811c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	621a      	str	r2, [r3, #32]
}
 800812a:	bf00      	nop
 800812c:	371c      	adds	r7, #28
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008136:	b480      	push	{r7}
 8008138:	b087      	sub	sp, #28
 800813a:	af00      	add	r7, sp, #0
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	60b9      	str	r1, [r7, #8]
 8008140:	607a      	str	r2, [r7, #4]
 8008142:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6a1b      	ldr	r3, [r3, #32]
 8008148:	f023 0210 	bic.w	r2, r3, #16
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008162:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	021b      	lsls	r3, r3, #8
 8008168:	697a      	ldr	r2, [r7, #20]
 800816a:	4313      	orrs	r3, r2
 800816c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008174:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	031b      	lsls	r3, r3, #12
 800817a:	b29b      	uxth	r3, r3
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	4313      	orrs	r3, r2
 8008180:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008188:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	011b      	lsls	r3, r3, #4
 800818e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	4313      	orrs	r3, r2
 8008196:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	621a      	str	r2, [r3, #32]
}
 80081a4:	bf00      	nop
 80081a6:	371c      	adds	r7, #28
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6a1b      	ldr	r3, [r3, #32]
 80081c0:	f023 0210 	bic.w	r2, r3, #16
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	031b      	lsls	r3, r3, #12
 80081e0:	697a      	ldr	r2, [r7, #20]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	011b      	lsls	r3, r3, #4
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	621a      	str	r2, [r3, #32]
}
 8008204:	bf00      	nop
 8008206:	371c      	adds	r7, #28
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008210:	b480      	push	{r7}
 8008212:	b087      	sub	sp, #28
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6a1b      	ldr	r3, [r3, #32]
 8008234:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f023 0303 	bic.w	r3, r3, #3
 800823c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4313      	orrs	r3, r2
 8008244:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800824c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	011b      	lsls	r3, r3, #4
 8008252:	b2db      	uxtb	r3, r3
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	4313      	orrs	r3, r2
 8008258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008260:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	021b      	lsls	r3, r3, #8
 8008266:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	4313      	orrs	r3, r2
 800826e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	621a      	str	r2, [r3, #32]
}
 800827c:	bf00      	nop
 800827e:	371c      	adds	r7, #28
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008288:	b480      	push	{r7}
 800828a:	b087      	sub	sp, #28
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
 8008294:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6a1b      	ldr	r3, [r3, #32]
 80082ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	021b      	lsls	r3, r3, #8
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	4313      	orrs	r3, r2
 80082be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	031b      	lsls	r3, r3, #12
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80082da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	031b      	lsls	r3, r3, #12
 80082e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	693a      	ldr	r2, [r7, #16]
 80082f4:	621a      	str	r2, [r3, #32]
}
 80082f6:	bf00      	nop
 80082f8:	371c      	adds	r7, #28
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008302:	b480      	push	{r7}
 8008304:	b085      	sub	sp, #20
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008318:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4313      	orrs	r3, r2
 8008320:	f043 0307 	orr.w	r3, r3, #7
 8008324:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	609a      	str	r2, [r3, #8]
}
 800832c:	bf00      	nop
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008338:	b480      	push	{r7}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
 8008344:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008352:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	021a      	lsls	r2, r3, #8
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	431a      	orrs	r2, r3
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	4313      	orrs	r3, r2
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	4313      	orrs	r3, r2
 8008364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	609a      	str	r2, [r3, #8]
}
 800836c:	bf00      	nop
 800836e:	371c      	adds	r7, #28
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008388:	2b01      	cmp	r3, #1
 800838a:	d101      	bne.n	8008390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800838c:	2302      	movs	r3, #2
 800838e:	e05a      	b.n	8008446 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2202      	movs	r2, #2
 800839c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	4313      	orrs	r3, r2
 80083c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a21      	ldr	r2, [pc, #132]	; (8008454 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d022      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083dc:	d01d      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a1d      	ldr	r2, [pc, #116]	; (8008458 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d018      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a1b      	ldr	r2, [pc, #108]	; (800845c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d013      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a1a      	ldr	r2, [pc, #104]	; (8008460 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d00e      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a18      	ldr	r2, [pc, #96]	; (8008464 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d009      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a17      	ldr	r2, [pc, #92]	; (8008468 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d004      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a15      	ldr	r2, [pc, #84]	; (800846c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d10c      	bne.n	8008434 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	4313      	orrs	r3, r2
 800842a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	40010000 	.word	0x40010000
 8008458:	40000400 	.word	0x40000400
 800845c:	40000800 	.word	0x40000800
 8008460:	40000c00 	.word	0x40000c00
 8008464:	40010400 	.word	0x40010400
 8008468:	40014000 	.word	0x40014000
 800846c:	40001800 	.word	0x40001800

08008470 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008484:	2b01      	cmp	r3, #1
 8008486:	d101      	bne.n	800848c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008488:	2302      	movs	r3, #2
 800848a:	e03d      	b.n	8008508 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	4313      	orrs	r3, r2
 80084a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e03f      	b.n	80085ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008554:	b2db      	uxtb	r3, r3
 8008556:	2b00      	cmp	r3, #0
 8008558:	d106      	bne.n	8008568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7fc f826 	bl	80045b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2224      	movs	r2, #36	; 0x24
 800856c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800857e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fde9 	bl	8009158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	691a      	ldr	r2, [r3, #16]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	695a      	ldr	r2, [r3, #20]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68da      	ldr	r2, [r3, #12]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2220      	movs	r2, #32
 80085c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2220      	movs	r2, #32
 80085c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b08a      	sub	sp, #40	; 0x28
 80085da:	af02      	add	r7, sp, #8
 80085dc:	60f8      	str	r0, [r7, #12]
 80085de:	60b9      	str	r1, [r7, #8]
 80085e0:	603b      	str	r3, [r7, #0]
 80085e2:	4613      	mov	r3, r2
 80085e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80085e6:	2300      	movs	r3, #0
 80085e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b20      	cmp	r3, #32
 80085f4:	d17c      	bne.n	80086f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d002      	beq.n	8008602 <HAL_UART_Transmit+0x2c>
 80085fc:	88fb      	ldrh	r3, [r7, #6]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d101      	bne.n	8008606 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e075      	b.n	80086f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800860c:	2b01      	cmp	r3, #1
 800860e:	d101      	bne.n	8008614 <HAL_UART_Transmit+0x3e>
 8008610:	2302      	movs	r3, #2
 8008612:	e06e      	b.n	80086f2 <HAL_UART_Transmit+0x11c>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2221      	movs	r2, #33	; 0x21
 8008626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800862a:	f7fc f8e7 	bl	80047fc <HAL_GetTick>
 800862e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	88fa      	ldrh	r2, [r7, #6]
 8008634:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	88fa      	ldrh	r2, [r7, #6]
 800863a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008644:	d108      	bne.n	8008658 <HAL_UART_Transmit+0x82>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d104      	bne.n	8008658 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800864e:	2300      	movs	r3, #0
 8008650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	61bb      	str	r3, [r7, #24]
 8008656:	e003      	b.n	8008660 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800865c:	2300      	movs	r3, #0
 800865e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008668:	e02a      	b.n	80086c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	9300      	str	r3, [sp, #0]
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2200      	movs	r2, #0
 8008672:	2180      	movs	r1, #128	; 0x80
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 fb29 	bl	8008ccc <UART_WaitOnFlagUntilTimeout>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d001      	beq.n	8008684 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e036      	b.n	80086f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10b      	bne.n	80086a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	461a      	mov	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008698:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	3302      	adds	r3, #2
 800869e:	61bb      	str	r3, [r7, #24]
 80086a0:	e007      	b.n	80086b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	781a      	ldrb	r2, [r3, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	3301      	adds	r3, #1
 80086b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	3b01      	subs	r3, #1
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1cf      	bne.n	800866a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	2200      	movs	r2, #0
 80086d2:	2140      	movs	r1, #64	; 0x40
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 faf9 	bl	8008ccc <UART_WaitOnFlagUntilTimeout>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d001      	beq.n	80086e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e006      	b.n	80086f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2220      	movs	r2, #32
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	e000      	b.n	80086f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80086f0:	2302      	movs	r3, #2
  }
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3720      	adds	r7, #32
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b084      	sub	sp, #16
 80086fe:	af00      	add	r7, sp, #0
 8008700:	60f8      	str	r0, [r7, #12]
 8008702:	60b9      	str	r1, [r7, #8]
 8008704:	4613      	mov	r3, r2
 8008706:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800870e:	b2db      	uxtb	r3, r3
 8008710:	2b20      	cmp	r3, #32
 8008712:	d11d      	bne.n	8008750 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d002      	beq.n	8008720 <HAL_UART_Receive_IT+0x26>
 800871a:	88fb      	ldrh	r3, [r7, #6]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e016      	b.n	8008752 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800872a:	2b01      	cmp	r3, #1
 800872c:	d101      	bne.n	8008732 <HAL_UART_Receive_IT+0x38>
 800872e:	2302      	movs	r3, #2
 8008730:	e00f      	b.n	8008752 <HAL_UART_Receive_IT+0x58>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008740:	88fb      	ldrh	r3, [r7, #6]
 8008742:	461a      	mov	r2, r3
 8008744:	68b9      	ldr	r1, [r7, #8]
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f000 fb2e 	bl	8008da8 <UART_Start_Receive_IT>
 800874c:	4603      	mov	r3, r0
 800874e:	e000      	b.n	8008752 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008750:	2302      	movs	r3, #2
  }
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
	...

0800875c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b0ba      	sub	sp, #232	; 0xe8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008782:	2300      	movs	r3, #0
 8008784:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008788:	2300      	movs	r3, #0
 800878a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800878e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008792:	f003 030f 	and.w	r3, r3, #15
 8008796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800879a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10f      	bne.n	80087c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087a6:	f003 0320 	and.w	r3, r3, #32
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d009      	beq.n	80087c2 <HAL_UART_IRQHandler+0x66>
 80087ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087b2:	f003 0320 	and.w	r3, r3, #32
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fc11 	bl	8008fe2 <UART_Receive_IT>
      return;
 80087c0:	e256      	b.n	8008c70 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80087c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 80de 	beq.w	8008988 <HAL_UART_IRQHandler+0x22c>
 80087cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087d0:	f003 0301 	and.w	r3, r3, #1
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d106      	bne.n	80087e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80087d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 80d1 	beq.w	8008988 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80087e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00b      	beq.n	800880a <HAL_UART_IRQHandler+0xae>
 80087f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d005      	beq.n	800880a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008802:	f043 0201 	orr.w	r2, r3, #1
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800880a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800880e:	f003 0304 	and.w	r3, r3, #4
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00b      	beq.n	800882e <HAL_UART_IRQHandler+0xd2>
 8008816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	d005      	beq.n	800882e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008826:	f043 0202 	orr.w	r2, r3, #2
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800882e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00b      	beq.n	8008852 <HAL_UART_IRQHandler+0xf6>
 800883a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	2b00      	cmp	r3, #0
 8008844:	d005      	beq.n	8008852 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884a:	f043 0204 	orr.w	r2, r3, #4
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008856:	f003 0308 	and.w	r3, r3, #8
 800885a:	2b00      	cmp	r3, #0
 800885c:	d011      	beq.n	8008882 <HAL_UART_IRQHandler+0x126>
 800885e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008862:	f003 0320 	and.w	r3, r3, #32
 8008866:	2b00      	cmp	r3, #0
 8008868:	d105      	bne.n	8008876 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800886a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800886e:	f003 0301 	and.w	r3, r3, #1
 8008872:	2b00      	cmp	r3, #0
 8008874:	d005      	beq.n	8008882 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887a:	f043 0208 	orr.w	r2, r3, #8
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008886:	2b00      	cmp	r3, #0
 8008888:	f000 81ed 	beq.w	8008c66 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800888c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008890:	f003 0320 	and.w	r3, r3, #32
 8008894:	2b00      	cmp	r3, #0
 8008896:	d008      	beq.n	80088aa <HAL_UART_IRQHandler+0x14e>
 8008898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800889c:	f003 0320 	and.w	r3, r3, #32
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fb9c 	bl	8008fe2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	695b      	ldr	r3, [r3, #20]
 80088b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b4:	2b40      	cmp	r3, #64	; 0x40
 80088b6:	bf0c      	ite	eq
 80088b8:	2301      	moveq	r3, #1
 80088ba:	2300      	movne	r3, #0
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c6:	f003 0308 	and.w	r3, r3, #8
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d103      	bne.n	80088d6 <HAL_UART_IRQHandler+0x17a>
 80088ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d04f      	beq.n	8008976 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 faa4 	bl	8008e24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	695b      	ldr	r3, [r3, #20]
 80088e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e6:	2b40      	cmp	r3, #64	; 0x40
 80088e8:	d141      	bne.n	800896e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3314      	adds	r3, #20
 80088f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088f8:	e853 3f00 	ldrex	r3, [r3]
 80088fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008900:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3314      	adds	r3, #20
 8008912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008916:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800891a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008926:	e841 2300 	strex	r3, r2, [r1]
 800892a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800892e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1d9      	bne.n	80088ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893a:	2b00      	cmp	r3, #0
 800893c:	d013      	beq.n	8008966 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008942:	4a7d      	ldr	r2, [pc, #500]	; (8008b38 <HAL_UART_IRQHandler+0x3dc>)
 8008944:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894a:	4618      	mov	r0, r3
 800894c:	f7fc fcd8 	bl	8005300 <HAL_DMA_Abort_IT>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d016      	beq.n	8008984 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008960:	4610      	mov	r0, r2
 8008962:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008964:	e00e      	b.n	8008984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f99a 	bl	8008ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800896c:	e00a      	b.n	8008984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f996 	bl	8008ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008974:	e006      	b.n	8008984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f992 	bl	8008ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008982:	e170      	b.n	8008c66 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008984:	bf00      	nop
    return;
 8008986:	e16e      	b.n	8008c66 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898c:	2b01      	cmp	r3, #1
 800898e:	f040 814a 	bne.w	8008c26 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008996:	f003 0310 	and.w	r3, r3, #16
 800899a:	2b00      	cmp	r3, #0
 800899c:	f000 8143 	beq.w	8008c26 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80089a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089a4:	f003 0310 	and.w	r3, r3, #16
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 813c 	beq.w	8008c26 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089ae:	2300      	movs	r3, #0
 80089b0:	60bb      	str	r3, [r7, #8]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	60bb      	str	r3, [r7, #8]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	60bb      	str	r3, [r7, #8]
 80089c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ce:	2b40      	cmp	r3, #64	; 0x40
 80089d0:	f040 80b4 	bne.w	8008b3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f000 8140 	beq.w	8008c6a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089f2:	429a      	cmp	r2, r3
 80089f4:	f080 8139 	bcs.w	8008c6a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a04:	69db      	ldr	r3, [r3, #28]
 8008a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a0a:	f000 8088 	beq.w	8008b1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	330c      	adds	r3, #12
 8008a14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	330c      	adds	r3, #12
 8008a36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008a3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1d9      	bne.n	8008a0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3314      	adds	r3, #20
 8008a60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a6c:	f023 0301 	bic.w	r3, r3, #1
 8008a70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3314      	adds	r3, #20
 8008a7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a8a:	e841 2300 	strex	r3, r2, [r1]
 8008a8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1e1      	bne.n	8008a5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	3314      	adds	r3, #20
 8008a9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008aa0:	e853 3f00 	ldrex	r3, [r3]
 8008aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	3314      	adds	r3, #20
 8008ab6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008aba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008abc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ac0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ac2:	e841 2300 	strex	r3, r2, [r1]
 8008ac6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1e3      	bne.n	8008a96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	330c      	adds	r3, #12
 8008ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ae6:	e853 3f00 	ldrex	r3, [r3]
 8008aea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aee:	f023 0310 	bic.w	r3, r3, #16
 8008af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	330c      	adds	r3, #12
 8008afc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b00:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b08:	e841 2300 	strex	r3, r2, [r1]
 8008b0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e3      	bne.n	8008adc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7fc fb81 	bl	8005220 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 f8c0 	bl	8008cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b34:	e099      	b.n	8008c6a <HAL_UART_IRQHandler+0x50e>
 8008b36:	bf00      	nop
 8008b38:	08008eeb 	.word	0x08008eeb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f000 808b 	beq.w	8008c6e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008b58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 8086 	beq.w	8008c6e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	330c      	adds	r3, #12
 8008b68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6c:	e853 3f00 	ldrex	r3, [r3]
 8008b70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	330c      	adds	r3, #12
 8008b82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008b86:	647a      	str	r2, [r7, #68]	; 0x44
 8008b88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b8e:	e841 2300 	strex	r3, r2, [r1]
 8008b92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1e3      	bne.n	8008b62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3314      	adds	r3, #20
 8008ba0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba4:	e853 3f00 	ldrex	r3, [r3]
 8008ba8:	623b      	str	r3, [r7, #32]
   return(result);
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	f023 0301 	bic.w	r3, r3, #1
 8008bb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3314      	adds	r3, #20
 8008bba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008bbe:	633a      	str	r2, [r7, #48]	; 0x30
 8008bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bc6:	e841 2300 	strex	r3, r2, [r1]
 8008bca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1e3      	bne.n	8008b9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	330c      	adds	r3, #12
 8008be6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	e853 3f00 	ldrex	r3, [r3]
 8008bee:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f023 0310 	bic.w	r3, r3, #16
 8008bf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	330c      	adds	r3, #12
 8008c00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008c04:	61fa      	str	r2, [r7, #28]
 8008c06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c08:	69b9      	ldr	r1, [r7, #24]
 8008c0a:	69fa      	ldr	r2, [r7, #28]
 8008c0c:	e841 2300 	strex	r3, r2, [r1]
 8008c10:	617b      	str	r3, [r7, #20]
   return(result);
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1e3      	bne.n	8008be0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f848 	bl	8008cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c24:	e023      	b.n	8008c6e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d009      	beq.n	8008c46 <HAL_UART_IRQHandler+0x4ea>
 8008c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f967 	bl	8008f12 <UART_Transmit_IT>
    return;
 8008c44:	e014      	b.n	8008c70 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00e      	beq.n	8008c70 <HAL_UART_IRQHandler+0x514>
 8008c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d008      	beq.n	8008c70 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f9a7 	bl	8008fb2 <UART_EndTransmit_IT>
    return;
 8008c64:	e004      	b.n	8008c70 <HAL_UART_IRQHandler+0x514>
    return;
 8008c66:	bf00      	nop
 8008c68:	e002      	b.n	8008c70 <HAL_UART_IRQHandler+0x514>
      return;
 8008c6a:	bf00      	nop
 8008c6c:	e000      	b.n	8008c70 <HAL_UART_IRQHandler+0x514>
      return;
 8008c6e:	bf00      	nop
  }
}
 8008c70:	37e8      	adds	r7, #232	; 0xe8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop

08008c78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008c94:	bf00      	nop
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b090      	sub	sp, #64	; 0x40
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	603b      	str	r3, [r7, #0]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cdc:	e050      	b.n	8008d80 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce4:	d04c      	beq.n	8008d80 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d007      	beq.n	8008cfc <UART_WaitOnFlagUntilTimeout+0x30>
 8008cec:	f7fb fd86 	bl	80047fc <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d241      	bcs.n	8008d80 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	330c      	adds	r3, #12
 8008d02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d06:	e853 3f00 	ldrex	r3, [r3]
 8008d0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	330c      	adds	r3, #12
 8008d1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d1c:	637a      	str	r2, [r7, #52]	; 0x34
 8008d1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d24:	e841 2300 	strex	r3, r2, [r1]
 8008d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1e5      	bne.n	8008cfc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3314      	adds	r3, #20
 8008d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	e853 3f00 	ldrex	r3, [r3]
 8008d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	f023 0301 	bic.w	r3, r3, #1
 8008d46:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	3314      	adds	r3, #20
 8008d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d50:	623a      	str	r2, [r7, #32]
 8008d52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d54:	69f9      	ldr	r1, [r7, #28]
 8008d56:	6a3a      	ldr	r2, [r7, #32]
 8008d58:	e841 2300 	strex	r3, r2, [r1]
 8008d5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e5      	bne.n	8008d30 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2220      	movs	r2, #32
 8008d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2220      	movs	r2, #32
 8008d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e00f      	b.n	8008da0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	4013      	ands	r3, r2
 8008d8a:	68ba      	ldr	r2, [r7, #8]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	bf0c      	ite	eq
 8008d90:	2301      	moveq	r3, #1
 8008d92:	2300      	movne	r3, #0
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	461a      	mov	r2, r3
 8008d98:	79fb      	ldrb	r3, [r7, #7]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d09f      	beq.n	8008cde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3740      	adds	r7, #64	; 0x40
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	4613      	mov	r3, r2
 8008db4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	88fa      	ldrh	r2, [r7, #6]
 8008dc0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	88fa      	ldrh	r2, [r7, #6]
 8008dc6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2222      	movs	r2, #34	; 0x22
 8008dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d007      	beq.n	8008df6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68da      	ldr	r2, [r3, #12]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008df4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	695a      	ldr	r2, [r3, #20]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f042 0201 	orr.w	r2, r2, #1
 8008e04:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68da      	ldr	r2, [r3, #12]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f042 0220 	orr.w	r2, r2, #32
 8008e14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b095      	sub	sp, #84	; 0x54
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	330c      	adds	r3, #12
 8008e32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e36:	e853 3f00 	ldrex	r3, [r3]
 8008e3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	330c      	adds	r3, #12
 8008e4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e4c:	643a      	str	r2, [r7, #64]	; 0x40
 8008e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e54:	e841 2300 	strex	r3, r2, [r1]
 8008e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1e5      	bne.n	8008e2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3314      	adds	r3, #20
 8008e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	e853 3f00 	ldrex	r3, [r3]
 8008e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	f023 0301 	bic.w	r3, r3, #1
 8008e76:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	3314      	adds	r3, #20
 8008e7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e88:	e841 2300 	strex	r3, r2, [r1]
 8008e8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1e5      	bne.n	8008e60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d119      	bne.n	8008ed0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	330c      	adds	r3, #12
 8008ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	e853 3f00 	ldrex	r3, [r3]
 8008eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	f023 0310 	bic.w	r3, r3, #16
 8008eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	330c      	adds	r3, #12
 8008eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ebc:	61ba      	str	r2, [r7, #24]
 8008ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec0:	6979      	ldr	r1, [r7, #20]
 8008ec2:	69ba      	ldr	r2, [r7, #24]
 8008ec4:	e841 2300 	strex	r3, r2, [r1]
 8008ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1e5      	bne.n	8008e9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008ede:	bf00      	nop
 8008ee0:	3754      	adds	r7, #84	; 0x54
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f7ff fecb 	bl	8008ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f0a:	bf00      	nop
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f12:	b480      	push	{r7}
 8008f14:	b085      	sub	sp, #20
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b21      	cmp	r3, #33	; 0x21
 8008f24:	d13e      	bne.n	8008fa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f2e:	d114      	bne.n	8008f5a <UART_Transmit_IT+0x48>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d110      	bne.n	8008f5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	881b      	ldrh	r3, [r3, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	1c9a      	adds	r2, r3, #2
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	621a      	str	r2, [r3, #32]
 8008f58:	e008      	b.n	8008f6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a1b      	ldr	r3, [r3, #32]
 8008f5e:	1c59      	adds	r1, r3, #1
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	6211      	str	r1, [r2, #32]
 8008f64:	781a      	ldrb	r2, [r3, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	3b01      	subs	r3, #1
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10f      	bne.n	8008fa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68da      	ldr	r2, [r3, #12]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	e000      	b.n	8008fa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008fa4:	2302      	movs	r3, #2
  }
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68da      	ldr	r2, [r3, #12]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7ff fe50 	bl	8008c78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b08c      	sub	sp, #48	; 0x30
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2b22      	cmp	r3, #34	; 0x22
 8008ff4:	f040 80ab 	bne.w	800914e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009000:	d117      	bne.n	8009032 <UART_Receive_IT+0x50>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d113      	bne.n	8009032 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800900a:	2300      	movs	r3, #0
 800900c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009012:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	b29b      	uxth	r3, r3
 800901c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009020:	b29a      	uxth	r2, r3
 8009022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009024:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902a:	1c9a      	adds	r2, r3, #2
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	629a      	str	r2, [r3, #40]	; 0x28
 8009030:	e026      	b.n	8009080 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009036:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009038:	2300      	movs	r3, #0
 800903a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009044:	d007      	beq.n	8009056 <UART_Receive_IT+0x74>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10a      	bne.n	8009064 <UART_Receive_IT+0x82>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d106      	bne.n	8009064 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	b2da      	uxtb	r2, r3
 800905e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009060:	701a      	strb	r2, [r3, #0]
 8009062:	e008      	b.n	8009076 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	b2db      	uxtb	r3, r3
 800906c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009070:	b2da      	uxtb	r2, r3
 8009072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009074:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907a:	1c5a      	adds	r2, r3, #1
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009084:	b29b      	uxth	r3, r3
 8009086:	3b01      	subs	r3, #1
 8009088:	b29b      	uxth	r3, r3
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	4619      	mov	r1, r3
 800908e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009090:	2b00      	cmp	r3, #0
 8009092:	d15a      	bne.n	800914a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68da      	ldr	r2, [r3, #12]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f022 0220 	bic.w	r2, r2, #32
 80090a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68da      	ldr	r2, [r3, #12]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	695a      	ldr	r2, [r3, #20]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f022 0201 	bic.w	r2, r2, #1
 80090c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2220      	movs	r2, #32
 80090c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d135      	bne.n	8009140 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	330c      	adds	r3, #12
 80090e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	e853 3f00 	ldrex	r3, [r3]
 80090e8:	613b      	str	r3, [r7, #16]
   return(result);
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	f023 0310 	bic.w	r3, r3, #16
 80090f0:	627b      	str	r3, [r7, #36]	; 0x24
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	330c      	adds	r3, #12
 80090f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090fa:	623a      	str	r2, [r7, #32]
 80090fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fe:	69f9      	ldr	r1, [r7, #28]
 8009100:	6a3a      	ldr	r2, [r7, #32]
 8009102:	e841 2300 	strex	r3, r2, [r1]
 8009106:	61bb      	str	r3, [r7, #24]
   return(result);
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1e5      	bne.n	80090da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0310 	and.w	r3, r3, #16
 8009118:	2b10      	cmp	r3, #16
 800911a:	d10a      	bne.n	8009132 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800911c:	2300      	movs	r3, #0
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	60fb      	str	r3, [r7, #12]
 8009130:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff fdbb 	bl	8008cb4 <HAL_UARTEx_RxEventCallback>
 800913e:	e002      	b.n	8009146 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7ff fda3 	bl	8008c8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	e002      	b.n	8009150 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	e000      	b.n	8009150 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800914e:	2302      	movs	r3, #2
  }
}
 8009150:	4618      	mov	r0, r3
 8009152:	3730      	adds	r7, #48	; 0x30
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800915c:	b0c0      	sub	sp, #256	; 0x100
 800915e:	af00      	add	r7, sp, #0
 8009160:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009174:	68d9      	ldr	r1, [r3, #12]
 8009176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	ea40 0301 	orr.w	r3, r0, r1
 8009180:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009186:	689a      	ldr	r2, [r3, #8]
 8009188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	431a      	orrs	r2, r3
 8009190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	431a      	orrs	r2, r3
 8009198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	4313      	orrs	r3, r2
 80091a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80091a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80091b0:	f021 010c 	bic.w	r1, r1, #12
 80091b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091be:	430b      	orrs	r3, r1
 80091c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80091c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80091ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d2:	6999      	ldr	r1, [r3, #24]
 80091d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	ea40 0301 	orr.w	r3, r0, r1
 80091de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80091e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	4b8f      	ldr	r3, [pc, #572]	; (8009424 <UART_SetConfig+0x2cc>)
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d005      	beq.n	80091f8 <UART_SetConfig+0xa0>
 80091ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	4b8d      	ldr	r3, [pc, #564]	; (8009428 <UART_SetConfig+0x2d0>)
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d104      	bne.n	8009202 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80091f8:	f7fd fe8e 	bl	8006f18 <HAL_RCC_GetPCLK2Freq>
 80091fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009200:	e003      	b.n	800920a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009202:	f7fd fe75 	bl	8006ef0 <HAL_RCC_GetPCLK1Freq>
 8009206:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800920a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800920e:	69db      	ldr	r3, [r3, #28]
 8009210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009214:	f040 810c 	bne.w	8009430 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800921c:	2200      	movs	r2, #0
 800921e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009222:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009226:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800922a:	4622      	mov	r2, r4
 800922c:	462b      	mov	r3, r5
 800922e:	1891      	adds	r1, r2, r2
 8009230:	65b9      	str	r1, [r7, #88]	; 0x58
 8009232:	415b      	adcs	r3, r3
 8009234:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009236:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800923a:	4621      	mov	r1, r4
 800923c:	eb12 0801 	adds.w	r8, r2, r1
 8009240:	4629      	mov	r1, r5
 8009242:	eb43 0901 	adc.w	r9, r3, r1
 8009246:	f04f 0200 	mov.w	r2, #0
 800924a:	f04f 0300 	mov.w	r3, #0
 800924e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800925a:	4690      	mov	r8, r2
 800925c:	4699      	mov	r9, r3
 800925e:	4623      	mov	r3, r4
 8009260:	eb18 0303 	adds.w	r3, r8, r3
 8009264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009268:	462b      	mov	r3, r5
 800926a:	eb49 0303 	adc.w	r3, r9, r3
 800926e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800927e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009282:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009286:	460b      	mov	r3, r1
 8009288:	18db      	adds	r3, r3, r3
 800928a:	653b      	str	r3, [r7, #80]	; 0x50
 800928c:	4613      	mov	r3, r2
 800928e:	eb42 0303 	adc.w	r3, r2, r3
 8009292:	657b      	str	r3, [r7, #84]	; 0x54
 8009294:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009298:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800929c:	f7f7 fcd4 	bl	8000c48 <__aeabi_uldivmod>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4b61      	ldr	r3, [pc, #388]	; (800942c <UART_SetConfig+0x2d4>)
 80092a6:	fba3 2302 	umull	r2, r3, r3, r2
 80092aa:	095b      	lsrs	r3, r3, #5
 80092ac:	011c      	lsls	r4, r3, #4
 80092ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092b2:	2200      	movs	r2, #0
 80092b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80092bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80092c0:	4642      	mov	r2, r8
 80092c2:	464b      	mov	r3, r9
 80092c4:	1891      	adds	r1, r2, r2
 80092c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80092c8:	415b      	adcs	r3, r3
 80092ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80092d0:	4641      	mov	r1, r8
 80092d2:	eb12 0a01 	adds.w	sl, r2, r1
 80092d6:	4649      	mov	r1, r9
 80092d8:	eb43 0b01 	adc.w	fp, r3, r1
 80092dc:	f04f 0200 	mov.w	r2, #0
 80092e0:	f04f 0300 	mov.w	r3, #0
 80092e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80092e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80092ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092f0:	4692      	mov	sl, r2
 80092f2:	469b      	mov	fp, r3
 80092f4:	4643      	mov	r3, r8
 80092f6:	eb1a 0303 	adds.w	r3, sl, r3
 80092fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092fe:	464b      	mov	r3, r9
 8009300:	eb4b 0303 	adc.w	r3, fp, r3
 8009304:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009314:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009318:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800931c:	460b      	mov	r3, r1
 800931e:	18db      	adds	r3, r3, r3
 8009320:	643b      	str	r3, [r7, #64]	; 0x40
 8009322:	4613      	mov	r3, r2
 8009324:	eb42 0303 	adc.w	r3, r2, r3
 8009328:	647b      	str	r3, [r7, #68]	; 0x44
 800932a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800932e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009332:	f7f7 fc89 	bl	8000c48 <__aeabi_uldivmod>
 8009336:	4602      	mov	r2, r0
 8009338:	460b      	mov	r3, r1
 800933a:	4611      	mov	r1, r2
 800933c:	4b3b      	ldr	r3, [pc, #236]	; (800942c <UART_SetConfig+0x2d4>)
 800933e:	fba3 2301 	umull	r2, r3, r3, r1
 8009342:	095b      	lsrs	r3, r3, #5
 8009344:	2264      	movs	r2, #100	; 0x64
 8009346:	fb02 f303 	mul.w	r3, r2, r3
 800934a:	1acb      	subs	r3, r1, r3
 800934c:	00db      	lsls	r3, r3, #3
 800934e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009352:	4b36      	ldr	r3, [pc, #216]	; (800942c <UART_SetConfig+0x2d4>)
 8009354:	fba3 2302 	umull	r2, r3, r3, r2
 8009358:	095b      	lsrs	r3, r3, #5
 800935a:	005b      	lsls	r3, r3, #1
 800935c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009360:	441c      	add	r4, r3
 8009362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009366:	2200      	movs	r2, #0
 8009368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800936c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009370:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009374:	4642      	mov	r2, r8
 8009376:	464b      	mov	r3, r9
 8009378:	1891      	adds	r1, r2, r2
 800937a:	63b9      	str	r1, [r7, #56]	; 0x38
 800937c:	415b      	adcs	r3, r3
 800937e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009380:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009384:	4641      	mov	r1, r8
 8009386:	1851      	adds	r1, r2, r1
 8009388:	6339      	str	r1, [r7, #48]	; 0x30
 800938a:	4649      	mov	r1, r9
 800938c:	414b      	adcs	r3, r1
 800938e:	637b      	str	r3, [r7, #52]	; 0x34
 8009390:	f04f 0200 	mov.w	r2, #0
 8009394:	f04f 0300 	mov.w	r3, #0
 8009398:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800939c:	4659      	mov	r1, fp
 800939e:	00cb      	lsls	r3, r1, #3
 80093a0:	4651      	mov	r1, sl
 80093a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093a6:	4651      	mov	r1, sl
 80093a8:	00ca      	lsls	r2, r1, #3
 80093aa:	4610      	mov	r0, r2
 80093ac:	4619      	mov	r1, r3
 80093ae:	4603      	mov	r3, r0
 80093b0:	4642      	mov	r2, r8
 80093b2:	189b      	adds	r3, r3, r2
 80093b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093b8:	464b      	mov	r3, r9
 80093ba:	460a      	mov	r2, r1
 80093bc:	eb42 0303 	adc.w	r3, r2, r3
 80093c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80093d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80093d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80093d8:	460b      	mov	r3, r1
 80093da:	18db      	adds	r3, r3, r3
 80093dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80093de:	4613      	mov	r3, r2
 80093e0:	eb42 0303 	adc.w	r3, r2, r3
 80093e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80093ee:	f7f7 fc2b 	bl	8000c48 <__aeabi_uldivmod>
 80093f2:	4602      	mov	r2, r0
 80093f4:	460b      	mov	r3, r1
 80093f6:	4b0d      	ldr	r3, [pc, #52]	; (800942c <UART_SetConfig+0x2d4>)
 80093f8:	fba3 1302 	umull	r1, r3, r3, r2
 80093fc:	095b      	lsrs	r3, r3, #5
 80093fe:	2164      	movs	r1, #100	; 0x64
 8009400:	fb01 f303 	mul.w	r3, r1, r3
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	00db      	lsls	r3, r3, #3
 8009408:	3332      	adds	r3, #50	; 0x32
 800940a:	4a08      	ldr	r2, [pc, #32]	; (800942c <UART_SetConfig+0x2d4>)
 800940c:	fba2 2303 	umull	r2, r3, r2, r3
 8009410:	095b      	lsrs	r3, r3, #5
 8009412:	f003 0207 	and.w	r2, r3, #7
 8009416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4422      	add	r2, r4
 800941e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009420:	e106      	b.n	8009630 <UART_SetConfig+0x4d8>
 8009422:	bf00      	nop
 8009424:	40011000 	.word	0x40011000
 8009428:	40011400 	.word	0x40011400
 800942c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009434:	2200      	movs	r2, #0
 8009436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800943a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800943e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009442:	4642      	mov	r2, r8
 8009444:	464b      	mov	r3, r9
 8009446:	1891      	adds	r1, r2, r2
 8009448:	6239      	str	r1, [r7, #32]
 800944a:	415b      	adcs	r3, r3
 800944c:	627b      	str	r3, [r7, #36]	; 0x24
 800944e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009452:	4641      	mov	r1, r8
 8009454:	1854      	adds	r4, r2, r1
 8009456:	4649      	mov	r1, r9
 8009458:	eb43 0501 	adc.w	r5, r3, r1
 800945c:	f04f 0200 	mov.w	r2, #0
 8009460:	f04f 0300 	mov.w	r3, #0
 8009464:	00eb      	lsls	r3, r5, #3
 8009466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800946a:	00e2      	lsls	r2, r4, #3
 800946c:	4614      	mov	r4, r2
 800946e:	461d      	mov	r5, r3
 8009470:	4643      	mov	r3, r8
 8009472:	18e3      	adds	r3, r4, r3
 8009474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009478:	464b      	mov	r3, r9
 800947a:	eb45 0303 	adc.w	r3, r5, r3
 800947e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800948e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009492:	f04f 0200 	mov.w	r2, #0
 8009496:	f04f 0300 	mov.w	r3, #0
 800949a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800949e:	4629      	mov	r1, r5
 80094a0:	008b      	lsls	r3, r1, #2
 80094a2:	4621      	mov	r1, r4
 80094a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094a8:	4621      	mov	r1, r4
 80094aa:	008a      	lsls	r2, r1, #2
 80094ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80094b0:	f7f7 fbca 	bl	8000c48 <__aeabi_uldivmod>
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	4b60      	ldr	r3, [pc, #384]	; (800963c <UART_SetConfig+0x4e4>)
 80094ba:	fba3 2302 	umull	r2, r3, r3, r2
 80094be:	095b      	lsrs	r3, r3, #5
 80094c0:	011c      	lsls	r4, r3, #4
 80094c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094c6:	2200      	movs	r2, #0
 80094c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80094cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80094d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80094d4:	4642      	mov	r2, r8
 80094d6:	464b      	mov	r3, r9
 80094d8:	1891      	adds	r1, r2, r2
 80094da:	61b9      	str	r1, [r7, #24]
 80094dc:	415b      	adcs	r3, r3
 80094de:	61fb      	str	r3, [r7, #28]
 80094e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094e4:	4641      	mov	r1, r8
 80094e6:	1851      	adds	r1, r2, r1
 80094e8:	6139      	str	r1, [r7, #16]
 80094ea:	4649      	mov	r1, r9
 80094ec:	414b      	adcs	r3, r1
 80094ee:	617b      	str	r3, [r7, #20]
 80094f0:	f04f 0200 	mov.w	r2, #0
 80094f4:	f04f 0300 	mov.w	r3, #0
 80094f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80094fc:	4659      	mov	r1, fp
 80094fe:	00cb      	lsls	r3, r1, #3
 8009500:	4651      	mov	r1, sl
 8009502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009506:	4651      	mov	r1, sl
 8009508:	00ca      	lsls	r2, r1, #3
 800950a:	4610      	mov	r0, r2
 800950c:	4619      	mov	r1, r3
 800950e:	4603      	mov	r3, r0
 8009510:	4642      	mov	r2, r8
 8009512:	189b      	adds	r3, r3, r2
 8009514:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009518:	464b      	mov	r3, r9
 800951a:	460a      	mov	r2, r1
 800951c:	eb42 0303 	adc.w	r3, r2, r3
 8009520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	67bb      	str	r3, [r7, #120]	; 0x78
 800952e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009530:	f04f 0200 	mov.w	r2, #0
 8009534:	f04f 0300 	mov.w	r3, #0
 8009538:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800953c:	4649      	mov	r1, r9
 800953e:	008b      	lsls	r3, r1, #2
 8009540:	4641      	mov	r1, r8
 8009542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009546:	4641      	mov	r1, r8
 8009548:	008a      	lsls	r2, r1, #2
 800954a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800954e:	f7f7 fb7b 	bl	8000c48 <__aeabi_uldivmod>
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	4611      	mov	r1, r2
 8009558:	4b38      	ldr	r3, [pc, #224]	; (800963c <UART_SetConfig+0x4e4>)
 800955a:	fba3 2301 	umull	r2, r3, r3, r1
 800955e:	095b      	lsrs	r3, r3, #5
 8009560:	2264      	movs	r2, #100	; 0x64
 8009562:	fb02 f303 	mul.w	r3, r2, r3
 8009566:	1acb      	subs	r3, r1, r3
 8009568:	011b      	lsls	r3, r3, #4
 800956a:	3332      	adds	r3, #50	; 0x32
 800956c:	4a33      	ldr	r2, [pc, #204]	; (800963c <UART_SetConfig+0x4e4>)
 800956e:	fba2 2303 	umull	r2, r3, r2, r3
 8009572:	095b      	lsrs	r3, r3, #5
 8009574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009578:	441c      	add	r4, r3
 800957a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800957e:	2200      	movs	r2, #0
 8009580:	673b      	str	r3, [r7, #112]	; 0x70
 8009582:	677a      	str	r2, [r7, #116]	; 0x74
 8009584:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009588:	4642      	mov	r2, r8
 800958a:	464b      	mov	r3, r9
 800958c:	1891      	adds	r1, r2, r2
 800958e:	60b9      	str	r1, [r7, #8]
 8009590:	415b      	adcs	r3, r3
 8009592:	60fb      	str	r3, [r7, #12]
 8009594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009598:	4641      	mov	r1, r8
 800959a:	1851      	adds	r1, r2, r1
 800959c:	6039      	str	r1, [r7, #0]
 800959e:	4649      	mov	r1, r9
 80095a0:	414b      	adcs	r3, r1
 80095a2:	607b      	str	r3, [r7, #4]
 80095a4:	f04f 0200 	mov.w	r2, #0
 80095a8:	f04f 0300 	mov.w	r3, #0
 80095ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80095b0:	4659      	mov	r1, fp
 80095b2:	00cb      	lsls	r3, r1, #3
 80095b4:	4651      	mov	r1, sl
 80095b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095ba:	4651      	mov	r1, sl
 80095bc:	00ca      	lsls	r2, r1, #3
 80095be:	4610      	mov	r0, r2
 80095c0:	4619      	mov	r1, r3
 80095c2:	4603      	mov	r3, r0
 80095c4:	4642      	mov	r2, r8
 80095c6:	189b      	adds	r3, r3, r2
 80095c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80095ca:	464b      	mov	r3, r9
 80095cc:	460a      	mov	r2, r1
 80095ce:	eb42 0303 	adc.w	r3, r2, r3
 80095d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	663b      	str	r3, [r7, #96]	; 0x60
 80095de:	667a      	str	r2, [r7, #100]	; 0x64
 80095e0:	f04f 0200 	mov.w	r2, #0
 80095e4:	f04f 0300 	mov.w	r3, #0
 80095e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80095ec:	4649      	mov	r1, r9
 80095ee:	008b      	lsls	r3, r1, #2
 80095f0:	4641      	mov	r1, r8
 80095f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095f6:	4641      	mov	r1, r8
 80095f8:	008a      	lsls	r2, r1, #2
 80095fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80095fe:	f7f7 fb23 	bl	8000c48 <__aeabi_uldivmod>
 8009602:	4602      	mov	r2, r0
 8009604:	460b      	mov	r3, r1
 8009606:	4b0d      	ldr	r3, [pc, #52]	; (800963c <UART_SetConfig+0x4e4>)
 8009608:	fba3 1302 	umull	r1, r3, r3, r2
 800960c:	095b      	lsrs	r3, r3, #5
 800960e:	2164      	movs	r1, #100	; 0x64
 8009610:	fb01 f303 	mul.w	r3, r1, r3
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	011b      	lsls	r3, r3, #4
 8009618:	3332      	adds	r3, #50	; 0x32
 800961a:	4a08      	ldr	r2, [pc, #32]	; (800963c <UART_SetConfig+0x4e4>)
 800961c:	fba2 2303 	umull	r2, r3, r2, r3
 8009620:	095b      	lsrs	r3, r3, #5
 8009622:	f003 020f 	and.w	r2, r3, #15
 8009626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4422      	add	r2, r4
 800962e:	609a      	str	r2, [r3, #8]
}
 8009630:	bf00      	nop
 8009632:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009636:	46bd      	mov	sp, r7
 8009638:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800963c:	51eb851f 	.word	0x51eb851f

08009640 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	4603      	mov	r3, r0
 8009648:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800964a:	2300      	movs	r3, #0
 800964c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800964e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009652:	2b84      	cmp	r3, #132	; 0x84
 8009654:	d005      	beq.n	8009662 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009656:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	4413      	add	r3, r2
 800965e:	3303      	adds	r3, #3
 8009660:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009662:	68fb      	ldr	r3, [r7, #12]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009674:	f000 faf6 	bl	8009c64 <vTaskStartScheduler>
  
  return osOK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	bd80      	pop	{r7, pc}

0800967e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800967e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009680:	b089      	sub	sp, #36	; 0x24
 8009682:	af04      	add	r7, sp, #16
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	695b      	ldr	r3, [r3, #20]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d020      	beq.n	80096d2 <osThreadCreate+0x54>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d01c      	beq.n	80096d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685c      	ldr	r4, [r3, #4]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	691e      	ldr	r6, [r3, #16]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7ff ffc8 	bl	8009640 <makeFreeRtosPriority>
 80096b0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	695b      	ldr	r3, [r3, #20]
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80096ba:	9202      	str	r2, [sp, #8]
 80096bc:	9301      	str	r3, [sp, #4]
 80096be:	9100      	str	r1, [sp, #0]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	4632      	mov	r2, r6
 80096c4:	4629      	mov	r1, r5
 80096c6:	4620      	mov	r0, r4
 80096c8:	f000 f8ed 	bl	80098a6 <xTaskCreateStatic>
 80096cc:	4603      	mov	r3, r0
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	e01c      	b.n	800970c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	685c      	ldr	r4, [r3, #4]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80096de:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7ff ffaa 	bl	8009640 <makeFreeRtosPriority>
 80096ec:	4602      	mov	r2, r0
 80096ee:	f107 030c 	add.w	r3, r7, #12
 80096f2:	9301      	str	r3, [sp, #4]
 80096f4:	9200      	str	r2, [sp, #0]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	4632      	mov	r2, r6
 80096fa:	4629      	mov	r1, r5
 80096fc:	4620      	mov	r0, r4
 80096fe:	f000 f92f 	bl	8009960 <xTaskCreate>
 8009702:	4603      	mov	r3, r0
 8009704:	2b01      	cmp	r3, #1
 8009706:	d001      	beq.n	800970c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009708:	2300      	movs	r3, #0
 800970a:	e000      	b.n	800970e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800970c:	68fb      	ldr	r3, [r7, #12]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3714      	adds	r7, #20
 8009712:	46bd      	mov	sp, r7
 8009714:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009716 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b084      	sub	sp, #16
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d001      	beq.n	800972c <osDelay+0x16>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	e000      	b.n	800972e <osDelay+0x18>
 800972c:	2301      	movs	r3, #1
 800972e:	4618      	mov	r0, r3
 8009730:	f000 fa64 	bl	8009bfc <vTaskDelay>
  
  return osOK;
 8009734:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800973e:	b480      	push	{r7}
 8009740:	b083      	sub	sp, #12
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f103 0208 	add.w	r2, r3, #8
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f04f 32ff 	mov.w	r2, #4294967295
 8009756:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f103 0208 	add.w	r2, r3, #8
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f103 0208 	add.w	r2, r3, #8
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009772:	bf00      	nop
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr

0800977e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800977e:	b480      	push	{r7}
 8009780:	b083      	sub	sp, #12
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	689a      	ldr	r2, [r3, #8]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	683a      	ldr	r2, [r7, #0]
 80097bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	1c5a      	adds	r2, r3, #1
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	601a      	str	r2, [r3, #0]
}
 80097d4:	bf00      	nop
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f6:	d103      	bne.n	8009800 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	60fb      	str	r3, [r7, #12]
 80097fe:	e00c      	b.n	800981a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	3308      	adds	r3, #8
 8009804:	60fb      	str	r3, [r7, #12]
 8009806:	e002      	b.n	800980e <vListInsert+0x2e>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	60fb      	str	r3, [r7, #12]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	429a      	cmp	r2, r3
 8009818:	d2f6      	bcs.n	8009808 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	685a      	ldr	r2, [r3, #4]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	683a      	ldr	r2, [r7, #0]
 8009834:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	1c5a      	adds	r2, r3, #1
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	601a      	str	r2, [r3, #0]
}
 8009846:	bf00      	nop
 8009848:	3714      	adds	r7, #20
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr

08009852 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009852:	b480      	push	{r7}
 8009854:	b085      	sub	sp, #20
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	6892      	ldr	r2, [r2, #8]
 8009868:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	6852      	ldr	r2, [r2, #4]
 8009872:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	429a      	cmp	r2, r3
 800987c:	d103      	bne.n	8009886 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	689a      	ldr	r2, [r3, #8]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	1e5a      	subs	r2, r3, #1
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3714      	adds	r7, #20
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr

080098a6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b08e      	sub	sp, #56	; 0x38
 80098aa:	af04      	add	r7, sp, #16
 80098ac:	60f8      	str	r0, [r7, #12]
 80098ae:	60b9      	str	r1, [r7, #8]
 80098b0:	607a      	str	r2, [r7, #4]
 80098b2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80098b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10a      	bne.n	80098d0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80098ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098be:	f383 8811 	msr	BASEPRI, r3
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	f3bf 8f4f 	dsb	sy
 80098ca:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80098cc:	bf00      	nop
 80098ce:	e7fe      	b.n	80098ce <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80098d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d10a      	bne.n	80098ec <xTaskCreateStatic+0x46>
	__asm volatile
 80098d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098da:	f383 8811 	msr	BASEPRI, r3
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	f3bf 8f4f 	dsb	sy
 80098e6:	61fb      	str	r3, [r7, #28]
}
 80098e8:	bf00      	nop
 80098ea:	e7fe      	b.n	80098ea <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80098ec:	23a0      	movs	r3, #160	; 0xa0
 80098ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	2ba0      	cmp	r3, #160	; 0xa0
 80098f4:	d00a      	beq.n	800990c <xTaskCreateStatic+0x66>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	61bb      	str	r3, [r7, #24]
}
 8009908:	bf00      	nop
 800990a:	e7fe      	b.n	800990a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800990c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800990e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009910:	2b00      	cmp	r3, #0
 8009912:	d01e      	beq.n	8009952 <xTaskCreateStatic+0xac>
 8009914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009916:	2b00      	cmp	r3, #0
 8009918:	d01b      	beq.n	8009952 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800991a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800991e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009922:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009926:	2202      	movs	r2, #2
 8009928:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800992c:	2300      	movs	r3, #0
 800992e:	9303      	str	r3, [sp, #12]
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	9302      	str	r3, [sp, #8]
 8009934:	f107 0314 	add.w	r3, r7, #20
 8009938:	9301      	str	r3, [sp, #4]
 800993a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	68b9      	ldr	r1, [r7, #8]
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f000 f851 	bl	80099ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800994a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800994c:	f000 f8ec 	bl	8009b28 <prvAddNewTaskToReadyList>
 8009950:	e001      	b.n	8009956 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009952:	2300      	movs	r3, #0
 8009954:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009956:	697b      	ldr	r3, [r7, #20]
	}
 8009958:	4618      	mov	r0, r3
 800995a:	3728      	adds	r7, #40	; 0x28
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009960:	b580      	push	{r7, lr}
 8009962:	b08c      	sub	sp, #48	; 0x30
 8009964:	af04      	add	r7, sp, #16
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	603b      	str	r3, [r7, #0]
 800996c:	4613      	mov	r3, r2
 800996e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009970:	88fb      	ldrh	r3, [r7, #6]
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4618      	mov	r0, r3
 8009976:	f000 feef 	bl	800a758 <pvPortMalloc>
 800997a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00e      	beq.n	80099a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009982:	20a0      	movs	r0, #160	; 0xa0
 8009984:	f000 fee8 	bl	800a758 <pvPortMalloc>
 8009988:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d003      	beq.n	8009998 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	631a      	str	r2, [r3, #48]	; 0x30
 8009996:	e005      	b.n	80099a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009998:	6978      	ldr	r0, [r7, #20]
 800999a:	f000 ffa9 	bl	800a8f0 <vPortFree>
 800999e:	e001      	b.n	80099a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80099a0:	2300      	movs	r3, #0
 80099a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d017      	beq.n	80099da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80099b2:	88fa      	ldrh	r2, [r7, #6]
 80099b4:	2300      	movs	r3, #0
 80099b6:	9303      	str	r3, [sp, #12]
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	9302      	str	r3, [sp, #8]
 80099bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099be:	9301      	str	r3, [sp, #4]
 80099c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	68b9      	ldr	r1, [r7, #8]
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f000 f80f 	bl	80099ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099ce:	69f8      	ldr	r0, [r7, #28]
 80099d0:	f000 f8aa 	bl	8009b28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80099d4:	2301      	movs	r3, #1
 80099d6:	61bb      	str	r3, [r7, #24]
 80099d8:	e002      	b.n	80099e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80099da:	f04f 33ff 	mov.w	r3, #4294967295
 80099de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80099e0:	69bb      	ldr	r3, [r7, #24]
	}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3720      	adds	r7, #32
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
	...

080099ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b088      	sub	sp, #32
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
 80099f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80099fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a04:	3b01      	subs	r3, #1
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4413      	add	r3, r2
 8009a0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	f023 0307 	bic.w	r3, r3, #7
 8009a12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	f003 0307 	and.w	r3, r3, #7
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00a      	beq.n	8009a34 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	617b      	str	r3, [r7, #20]
}
 8009a30:	bf00      	nop
 8009a32:	e7fe      	b.n	8009a32 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d01f      	beq.n	8009a7a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	61fb      	str	r3, [r7, #28]
 8009a3e:	e012      	b.n	8009a66 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	4413      	add	r3, r2
 8009a46:	7819      	ldrb	r1, [r3, #0]
 8009a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	3334      	adds	r3, #52	; 0x34
 8009a50:	460a      	mov	r2, r1
 8009a52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	4413      	add	r3, r2
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d006      	beq.n	8009a6e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	3301      	adds	r3, #1
 8009a64:	61fb      	str	r3, [r7, #28]
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	2b0f      	cmp	r3, #15
 8009a6a:	d9e9      	bls.n	8009a40 <prvInitialiseNewTask+0x54>
 8009a6c:	e000      	b.n	8009a70 <prvInitialiseNewTask+0x84>
			{
				break;
 8009a6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a78:	e003      	b.n	8009a82 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a84:	2b06      	cmp	r3, #6
 8009a86:	d901      	bls.n	8009a8c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009a88:	2306      	movs	r3, #6
 8009a8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a96:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7ff fe6b 	bl	800977e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aaa:	3318      	adds	r3, #24
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7ff fe66 	bl	800977e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ab6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aba:	f1c3 0207 	rsb	r2, r3, #7
 8009abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ac6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aca:	2200      	movs	r2, #0
 8009acc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ada:	334c      	adds	r3, #76	; 0x4c
 8009adc:	224c      	movs	r2, #76	; 0x4c
 8009ade:	2100      	movs	r1, #0
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f001 ff0f 	bl	800b904 <memset>
 8009ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae8:	4a0c      	ldr	r2, [pc, #48]	; (8009b1c <prvInitialiseNewTask+0x130>)
 8009aea:	651a      	str	r2, [r3, #80]	; 0x50
 8009aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aee:	4a0c      	ldr	r2, [pc, #48]	; (8009b20 <prvInitialiseNewTask+0x134>)
 8009af0:	655a      	str	r2, [r3, #84]	; 0x54
 8009af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af4:	4a0b      	ldr	r2, [pc, #44]	; (8009b24 <prvInitialiseNewTask+0x138>)
 8009af6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009af8:	683a      	ldr	r2, [r7, #0]
 8009afa:	68f9      	ldr	r1, [r7, #12]
 8009afc:	69b8      	ldr	r0, [r7, #24]
 8009afe:	f000 fc1f 	bl	800a340 <pxPortInitialiseStack>
 8009b02:	4602      	mov	r2, r0
 8009b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b06:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d002      	beq.n	8009b14 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b14:	bf00      	nop
 8009b16:	3720      	adds	r7, #32
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	20004c64 	.word	0x20004c64
 8009b20:	20004ccc 	.word	0x20004ccc
 8009b24:	20004d34 	.word	0x20004d34

08009b28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009b30:	f000 fd30 	bl	800a594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009b34:	4b2a      	ldr	r3, [pc, #168]	; (8009be0 <prvAddNewTaskToReadyList+0xb8>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	4a29      	ldr	r2, [pc, #164]	; (8009be0 <prvAddNewTaskToReadyList+0xb8>)
 8009b3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009b3e:	4b29      	ldr	r3, [pc, #164]	; (8009be4 <prvAddNewTaskToReadyList+0xbc>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d109      	bne.n	8009b5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009b46:	4a27      	ldr	r2, [pc, #156]	; (8009be4 <prvAddNewTaskToReadyList+0xbc>)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009b4c:	4b24      	ldr	r3, [pc, #144]	; (8009be0 <prvAddNewTaskToReadyList+0xb8>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d110      	bne.n	8009b76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009b54:	f000 facc 	bl	800a0f0 <prvInitialiseTaskLists>
 8009b58:	e00d      	b.n	8009b76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009b5a:	4b23      	ldr	r3, [pc, #140]	; (8009be8 <prvAddNewTaskToReadyList+0xc0>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d109      	bne.n	8009b76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009b62:	4b20      	ldr	r3, [pc, #128]	; (8009be4 <prvAddNewTaskToReadyList+0xbc>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d802      	bhi.n	8009b76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009b70:	4a1c      	ldr	r2, [pc, #112]	; (8009be4 <prvAddNewTaskToReadyList+0xbc>)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009b76:	4b1d      	ldr	r3, [pc, #116]	; (8009bec <prvAddNewTaskToReadyList+0xc4>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	4a1b      	ldr	r2, [pc, #108]	; (8009bec <prvAddNewTaskToReadyList+0xc4>)
 8009b7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b84:	2201      	movs	r2, #1
 8009b86:	409a      	lsls	r2, r3
 8009b88:	4b19      	ldr	r3, [pc, #100]	; (8009bf0 <prvAddNewTaskToReadyList+0xc8>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	4a18      	ldr	r2, [pc, #96]	; (8009bf0 <prvAddNewTaskToReadyList+0xc8>)
 8009b90:	6013      	str	r3, [r2, #0]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b96:	4613      	mov	r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4413      	add	r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	4a15      	ldr	r2, [pc, #84]	; (8009bf4 <prvAddNewTaskToReadyList+0xcc>)
 8009ba0:	441a      	add	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	3304      	adds	r3, #4
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	4610      	mov	r0, r2
 8009baa:	f7ff fdf5 	bl	8009798 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009bae:	f000 fd21 	bl	800a5f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009bb2:	4b0d      	ldr	r3, [pc, #52]	; (8009be8 <prvAddNewTaskToReadyList+0xc0>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00e      	beq.n	8009bd8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009bba:	4b0a      	ldr	r3, [pc, #40]	; (8009be4 <prvAddNewTaskToReadyList+0xbc>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d207      	bcs.n	8009bd8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009bc8:	4b0b      	ldr	r3, [pc, #44]	; (8009bf8 <prvAddNewTaskToReadyList+0xd0>)
 8009bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bd8:	bf00      	nop
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	20001010 	.word	0x20001010
 8009be4:	20000f10 	.word	0x20000f10
 8009be8:	2000101c 	.word	0x2000101c
 8009bec:	2000102c 	.word	0x2000102c
 8009bf0:	20001018 	.word	0x20001018
 8009bf4:	20000f14 	.word	0x20000f14
 8009bf8:	e000ed04 	.word	0xe000ed04

08009bfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009c04:	2300      	movs	r3, #0
 8009c06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d017      	beq.n	8009c3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009c0e:	4b13      	ldr	r3, [pc, #76]	; (8009c5c <vTaskDelay+0x60>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00a      	beq.n	8009c2c <vTaskDelay+0x30>
	__asm volatile
 8009c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	60bb      	str	r3, [r7, #8]
}
 8009c28:	bf00      	nop
 8009c2a:	e7fe      	b.n	8009c2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009c2c:	f000 f884 	bl	8009d38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009c30:	2100      	movs	r1, #0
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fb1e 	bl	800a274 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009c38:	f000 f88c 	bl	8009d54 <xTaskResumeAll>
 8009c3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d107      	bne.n	8009c54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009c44:	4b06      	ldr	r3, [pc, #24]	; (8009c60 <vTaskDelay+0x64>)
 8009c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c4a:	601a      	str	r2, [r3, #0]
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c54:	bf00      	nop
 8009c56:	3710      	adds	r7, #16
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	20001038 	.word	0x20001038
 8009c60:	e000ed04 	.word	0xe000ed04

08009c64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b08a      	sub	sp, #40	; 0x28
 8009c68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c72:	463a      	mov	r2, r7
 8009c74:	1d39      	adds	r1, r7, #4
 8009c76:	f107 0308 	add.w	r3, r7, #8
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7f8 fc1c 	bl	80024b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	68ba      	ldr	r2, [r7, #8]
 8009c86:	9202      	str	r2, [sp, #8]
 8009c88:	9301      	str	r3, [sp, #4]
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	460a      	mov	r2, r1
 8009c92:	4921      	ldr	r1, [pc, #132]	; (8009d18 <vTaskStartScheduler+0xb4>)
 8009c94:	4821      	ldr	r0, [pc, #132]	; (8009d1c <vTaskStartScheduler+0xb8>)
 8009c96:	f7ff fe06 	bl	80098a6 <xTaskCreateStatic>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	4a20      	ldr	r2, [pc, #128]	; (8009d20 <vTaskStartScheduler+0xbc>)
 8009c9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ca0:	4b1f      	ldr	r3, [pc, #124]	; (8009d20 <vTaskStartScheduler+0xbc>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d002      	beq.n	8009cae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	617b      	str	r3, [r7, #20]
 8009cac:	e001      	b.n	8009cb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d11b      	bne.n	8009cf0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	613b      	str	r3, [r7, #16]
}
 8009cca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ccc:	4b15      	ldr	r3, [pc, #84]	; (8009d24 <vTaskStartScheduler+0xc0>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	334c      	adds	r3, #76	; 0x4c
 8009cd2:	4a15      	ldr	r2, [pc, #84]	; (8009d28 <vTaskStartScheduler+0xc4>)
 8009cd4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009cd6:	4b15      	ldr	r3, [pc, #84]	; (8009d2c <vTaskStartScheduler+0xc8>)
 8009cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cdc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009cde:	4b14      	ldr	r3, [pc, #80]	; (8009d30 <vTaskStartScheduler+0xcc>)
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009ce4:	4b13      	ldr	r3, [pc, #76]	; (8009d34 <vTaskStartScheduler+0xd0>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009cea:	f000 fbb1 	bl	800a450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009cee:	e00e      	b.n	8009d0e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf6:	d10a      	bne.n	8009d0e <vTaskStartScheduler+0xaa>
	__asm volatile
 8009cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfc:	f383 8811 	msr	BASEPRI, r3
 8009d00:	f3bf 8f6f 	isb	sy
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	60fb      	str	r3, [r7, #12]
}
 8009d0a:	bf00      	nop
 8009d0c:	e7fe      	b.n	8009d0c <vTaskStartScheduler+0xa8>
}
 8009d0e:	bf00      	nop
 8009d10:	3718      	adds	r7, #24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	0800e968 	.word	0x0800e968
 8009d1c:	0800a0c1 	.word	0x0800a0c1
 8009d20:	20001034 	.word	0x20001034
 8009d24:	20000f10 	.word	0x20000f10
 8009d28:	2000007c 	.word	0x2000007c
 8009d2c:	20001030 	.word	0x20001030
 8009d30:	2000101c 	.word	0x2000101c
 8009d34:	20001014 	.word	0x20001014

08009d38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d38:	b480      	push	{r7}
 8009d3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009d3c:	4b04      	ldr	r3, [pc, #16]	; (8009d50 <vTaskSuspendAll+0x18>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	3301      	adds	r3, #1
 8009d42:	4a03      	ldr	r2, [pc, #12]	; (8009d50 <vTaskSuspendAll+0x18>)
 8009d44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009d46:	bf00      	nop
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr
 8009d50:	20001038 	.word	0x20001038

08009d54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009d62:	4b41      	ldr	r3, [pc, #260]	; (8009e68 <xTaskResumeAll+0x114>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10a      	bne.n	8009d80 <xTaskResumeAll+0x2c>
	__asm volatile
 8009d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6e:	f383 8811 	msr	BASEPRI, r3
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	f3bf 8f4f 	dsb	sy
 8009d7a:	603b      	str	r3, [r7, #0]
}
 8009d7c:	bf00      	nop
 8009d7e:	e7fe      	b.n	8009d7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009d80:	f000 fc08 	bl	800a594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009d84:	4b38      	ldr	r3, [pc, #224]	; (8009e68 <xTaskResumeAll+0x114>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	4a37      	ldr	r2, [pc, #220]	; (8009e68 <xTaskResumeAll+0x114>)
 8009d8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d8e:	4b36      	ldr	r3, [pc, #216]	; (8009e68 <xTaskResumeAll+0x114>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d161      	bne.n	8009e5a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d96:	4b35      	ldr	r3, [pc, #212]	; (8009e6c <xTaskResumeAll+0x118>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d05d      	beq.n	8009e5a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d9e:	e02e      	b.n	8009dfe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009da0:	4b33      	ldr	r3, [pc, #204]	; (8009e70 <xTaskResumeAll+0x11c>)
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	3318      	adds	r3, #24
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7ff fd50 	bl	8009852 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	3304      	adds	r3, #4
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7ff fd4b 	bl	8009852 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	409a      	lsls	r2, r3
 8009dc4:	4b2b      	ldr	r3, [pc, #172]	; (8009e74 <xTaskResumeAll+0x120>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	4a2a      	ldr	r2, [pc, #168]	; (8009e74 <xTaskResumeAll+0x120>)
 8009dcc:	6013      	str	r3, [r2, #0]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4a27      	ldr	r2, [pc, #156]	; (8009e78 <xTaskResumeAll+0x124>)
 8009ddc:	441a      	add	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3304      	adds	r3, #4
 8009de2:	4619      	mov	r1, r3
 8009de4:	4610      	mov	r0, r2
 8009de6:	f7ff fcd7 	bl	8009798 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dee:	4b23      	ldr	r3, [pc, #140]	; (8009e7c <xTaskResumeAll+0x128>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d302      	bcc.n	8009dfe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009df8:	4b21      	ldr	r3, [pc, #132]	; (8009e80 <xTaskResumeAll+0x12c>)
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009dfe:	4b1c      	ldr	r3, [pc, #112]	; (8009e70 <xTaskResumeAll+0x11c>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1cc      	bne.n	8009da0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d001      	beq.n	8009e10 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009e0c:	f000 fa12 	bl	800a234 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009e10:	4b1c      	ldr	r3, [pc, #112]	; (8009e84 <xTaskResumeAll+0x130>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d010      	beq.n	8009e3e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009e1c:	f000 f836 	bl	8009e8c <xTaskIncrementTick>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d002      	beq.n	8009e2c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009e26:	4b16      	ldr	r3, [pc, #88]	; (8009e80 <xTaskResumeAll+0x12c>)
 8009e28:	2201      	movs	r2, #1
 8009e2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1f1      	bne.n	8009e1c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009e38:	4b12      	ldr	r3, [pc, #72]	; (8009e84 <xTaskResumeAll+0x130>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009e3e:	4b10      	ldr	r3, [pc, #64]	; (8009e80 <xTaskResumeAll+0x12c>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d009      	beq.n	8009e5a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009e46:	2301      	movs	r3, #1
 8009e48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009e4a:	4b0f      	ldr	r3, [pc, #60]	; (8009e88 <xTaskResumeAll+0x134>)
 8009e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e50:	601a      	str	r2, [r3, #0]
 8009e52:	f3bf 8f4f 	dsb	sy
 8009e56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e5a:	f000 fbcb 	bl	800a5f4 <vPortExitCritical>

	return xAlreadyYielded;
 8009e5e:	68bb      	ldr	r3, [r7, #8]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	20001038 	.word	0x20001038
 8009e6c:	20001010 	.word	0x20001010
 8009e70:	20000fd0 	.word	0x20000fd0
 8009e74:	20001018 	.word	0x20001018
 8009e78:	20000f14 	.word	0x20000f14
 8009e7c:	20000f10 	.word	0x20000f10
 8009e80:	20001024 	.word	0x20001024
 8009e84:	20001020 	.word	0x20001020
 8009e88:	e000ed04 	.word	0xe000ed04

08009e8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e92:	2300      	movs	r3, #0
 8009e94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e96:	4b4e      	ldr	r3, [pc, #312]	; (8009fd0 <xTaskIncrementTick+0x144>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f040 808e 	bne.w	8009fbc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ea0:	4b4c      	ldr	r3, [pc, #304]	; (8009fd4 <xTaskIncrementTick+0x148>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009ea8:	4a4a      	ldr	r2, [pc, #296]	; (8009fd4 <xTaskIncrementTick+0x148>)
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d120      	bne.n	8009ef6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009eb4:	4b48      	ldr	r3, [pc, #288]	; (8009fd8 <xTaskIncrementTick+0x14c>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00a      	beq.n	8009ed4 <xTaskIncrementTick+0x48>
	__asm volatile
 8009ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	603b      	str	r3, [r7, #0]
}
 8009ed0:	bf00      	nop
 8009ed2:	e7fe      	b.n	8009ed2 <xTaskIncrementTick+0x46>
 8009ed4:	4b40      	ldr	r3, [pc, #256]	; (8009fd8 <xTaskIncrementTick+0x14c>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	60fb      	str	r3, [r7, #12]
 8009eda:	4b40      	ldr	r3, [pc, #256]	; (8009fdc <xTaskIncrementTick+0x150>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a3e      	ldr	r2, [pc, #248]	; (8009fd8 <xTaskIncrementTick+0x14c>)
 8009ee0:	6013      	str	r3, [r2, #0]
 8009ee2:	4a3e      	ldr	r2, [pc, #248]	; (8009fdc <xTaskIncrementTick+0x150>)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6013      	str	r3, [r2, #0]
 8009ee8:	4b3d      	ldr	r3, [pc, #244]	; (8009fe0 <xTaskIncrementTick+0x154>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	3301      	adds	r3, #1
 8009eee:	4a3c      	ldr	r2, [pc, #240]	; (8009fe0 <xTaskIncrementTick+0x154>)
 8009ef0:	6013      	str	r3, [r2, #0]
 8009ef2:	f000 f99f 	bl	800a234 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ef6:	4b3b      	ldr	r3, [pc, #236]	; (8009fe4 <xTaskIncrementTick+0x158>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d348      	bcc.n	8009f92 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f00:	4b35      	ldr	r3, [pc, #212]	; (8009fd8 <xTaskIncrementTick+0x14c>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d104      	bne.n	8009f14 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f0a:	4b36      	ldr	r3, [pc, #216]	; (8009fe4 <xTaskIncrementTick+0x158>)
 8009f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f10:	601a      	str	r2, [r3, #0]
					break;
 8009f12:	e03e      	b.n	8009f92 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f14:	4b30      	ldr	r3, [pc, #192]	; (8009fd8 <xTaskIncrementTick+0x14c>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009f24:	693a      	ldr	r2, [r7, #16]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d203      	bcs.n	8009f34 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009f2c:	4a2d      	ldr	r2, [pc, #180]	; (8009fe4 <xTaskIncrementTick+0x158>)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009f32:	e02e      	b.n	8009f92 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	3304      	adds	r3, #4
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7ff fc8a 	bl	8009852 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d004      	beq.n	8009f50 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	3318      	adds	r3, #24
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7ff fc81 	bl	8009852 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f54:	2201      	movs	r2, #1
 8009f56:	409a      	lsls	r2, r3
 8009f58:	4b23      	ldr	r3, [pc, #140]	; (8009fe8 <xTaskIncrementTick+0x15c>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	4a22      	ldr	r2, [pc, #136]	; (8009fe8 <xTaskIncrementTick+0x15c>)
 8009f60:	6013      	str	r3, [r2, #0]
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f66:	4613      	mov	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	4413      	add	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	4a1f      	ldr	r2, [pc, #124]	; (8009fec <xTaskIncrementTick+0x160>)
 8009f70:	441a      	add	r2, r3
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	3304      	adds	r3, #4
 8009f76:	4619      	mov	r1, r3
 8009f78:	4610      	mov	r0, r2
 8009f7a:	f7ff fc0d 	bl	8009798 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f82:	4b1b      	ldr	r3, [pc, #108]	; (8009ff0 <xTaskIncrementTick+0x164>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d3b9      	bcc.n	8009f00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f90:	e7b6      	b.n	8009f00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f92:	4b17      	ldr	r3, [pc, #92]	; (8009ff0 <xTaskIncrementTick+0x164>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f98:	4914      	ldr	r1, [pc, #80]	; (8009fec <xTaskIncrementTick+0x160>)
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	440b      	add	r3, r1
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d901      	bls.n	8009fae <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009faa:	2301      	movs	r3, #1
 8009fac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009fae:	4b11      	ldr	r3, [pc, #68]	; (8009ff4 <xTaskIncrementTick+0x168>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d007      	beq.n	8009fc6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	617b      	str	r3, [r7, #20]
 8009fba:	e004      	b.n	8009fc6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009fbc:	4b0e      	ldr	r3, [pc, #56]	; (8009ff8 <xTaskIncrementTick+0x16c>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	4a0d      	ldr	r2, [pc, #52]	; (8009ff8 <xTaskIncrementTick+0x16c>)
 8009fc4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009fc6:	697b      	ldr	r3, [r7, #20]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3718      	adds	r7, #24
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	20001038 	.word	0x20001038
 8009fd4:	20001014 	.word	0x20001014
 8009fd8:	20000fc8 	.word	0x20000fc8
 8009fdc:	20000fcc 	.word	0x20000fcc
 8009fe0:	20001028 	.word	0x20001028
 8009fe4:	20001030 	.word	0x20001030
 8009fe8:	20001018 	.word	0x20001018
 8009fec:	20000f14 	.word	0x20000f14
 8009ff0:	20000f10 	.word	0x20000f10
 8009ff4:	20001024 	.word	0x20001024
 8009ff8:	20001020 	.word	0x20001020

08009ffc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b087      	sub	sp, #28
 800a000:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a002:	4b29      	ldr	r3, [pc, #164]	; (800a0a8 <vTaskSwitchContext+0xac>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d003      	beq.n	800a012 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a00a:	4b28      	ldr	r3, [pc, #160]	; (800a0ac <vTaskSwitchContext+0xb0>)
 800a00c:	2201      	movs	r2, #1
 800a00e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a010:	e044      	b.n	800a09c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a012:	4b26      	ldr	r3, [pc, #152]	; (800a0ac <vTaskSwitchContext+0xb0>)
 800a014:	2200      	movs	r2, #0
 800a016:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a018:	4b25      	ldr	r3, [pc, #148]	; (800a0b0 <vTaskSwitchContext+0xb4>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	fab3 f383 	clz	r3, r3
 800a024:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a026:	7afb      	ldrb	r3, [r7, #11]
 800a028:	f1c3 031f 	rsb	r3, r3, #31
 800a02c:	617b      	str	r3, [r7, #20]
 800a02e:	4921      	ldr	r1, [pc, #132]	; (800a0b4 <vTaskSwitchContext+0xb8>)
 800a030:	697a      	ldr	r2, [r7, #20]
 800a032:	4613      	mov	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	440b      	add	r3, r1
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10a      	bne.n	800a058 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	607b      	str	r3, [r7, #4]
}
 800a054:	bf00      	nop
 800a056:	e7fe      	b.n	800a056 <vTaskSwitchContext+0x5a>
 800a058:	697a      	ldr	r2, [r7, #20]
 800a05a:	4613      	mov	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4413      	add	r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	4a14      	ldr	r2, [pc, #80]	; (800a0b4 <vTaskSwitchContext+0xb8>)
 800a064:	4413      	add	r3, r2
 800a066:	613b      	str	r3, [r7, #16]
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	605a      	str	r2, [r3, #4]
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	685a      	ldr	r2, [r3, #4]
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	3308      	adds	r3, #8
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d104      	bne.n	800a088 <vTaskSwitchContext+0x8c>
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	685a      	ldr	r2, [r3, #4]
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	605a      	str	r2, [r3, #4]
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	4a0a      	ldr	r2, [pc, #40]	; (800a0b8 <vTaskSwitchContext+0xbc>)
 800a090:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a092:	4b09      	ldr	r3, [pc, #36]	; (800a0b8 <vTaskSwitchContext+0xbc>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	334c      	adds	r3, #76	; 0x4c
 800a098:	4a08      	ldr	r2, [pc, #32]	; (800a0bc <vTaskSwitchContext+0xc0>)
 800a09a:	6013      	str	r3, [r2, #0]
}
 800a09c:	bf00      	nop
 800a09e:	371c      	adds	r7, #28
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr
 800a0a8:	20001038 	.word	0x20001038
 800a0ac:	20001024 	.word	0x20001024
 800a0b0:	20001018 	.word	0x20001018
 800a0b4:	20000f14 	.word	0x20000f14
 800a0b8:	20000f10 	.word	0x20000f10
 800a0bc:	2000007c 	.word	0x2000007c

0800a0c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a0c8:	f000 f852 	bl	800a170 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a0cc:	4b06      	ldr	r3, [pc, #24]	; (800a0e8 <prvIdleTask+0x28>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d9f9      	bls.n	800a0c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a0d4:	4b05      	ldr	r3, [pc, #20]	; (800a0ec <prvIdleTask+0x2c>)
 800a0d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0da:	601a      	str	r2, [r3, #0]
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a0e4:	e7f0      	b.n	800a0c8 <prvIdleTask+0x8>
 800a0e6:	bf00      	nop
 800a0e8:	20000f14 	.word	0x20000f14
 800a0ec:	e000ed04 	.word	0xe000ed04

0800a0f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	607b      	str	r3, [r7, #4]
 800a0fa:	e00c      	b.n	800a116 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	4613      	mov	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	4a12      	ldr	r2, [pc, #72]	; (800a150 <prvInitialiseTaskLists+0x60>)
 800a108:	4413      	add	r3, r2
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7ff fb17 	bl	800973e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	3301      	adds	r3, #1
 800a114:	607b      	str	r3, [r7, #4]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2b06      	cmp	r3, #6
 800a11a:	d9ef      	bls.n	800a0fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a11c:	480d      	ldr	r0, [pc, #52]	; (800a154 <prvInitialiseTaskLists+0x64>)
 800a11e:	f7ff fb0e 	bl	800973e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a122:	480d      	ldr	r0, [pc, #52]	; (800a158 <prvInitialiseTaskLists+0x68>)
 800a124:	f7ff fb0b 	bl	800973e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a128:	480c      	ldr	r0, [pc, #48]	; (800a15c <prvInitialiseTaskLists+0x6c>)
 800a12a:	f7ff fb08 	bl	800973e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a12e:	480c      	ldr	r0, [pc, #48]	; (800a160 <prvInitialiseTaskLists+0x70>)
 800a130:	f7ff fb05 	bl	800973e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a134:	480b      	ldr	r0, [pc, #44]	; (800a164 <prvInitialiseTaskLists+0x74>)
 800a136:	f7ff fb02 	bl	800973e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a13a:	4b0b      	ldr	r3, [pc, #44]	; (800a168 <prvInitialiseTaskLists+0x78>)
 800a13c:	4a05      	ldr	r2, [pc, #20]	; (800a154 <prvInitialiseTaskLists+0x64>)
 800a13e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a140:	4b0a      	ldr	r3, [pc, #40]	; (800a16c <prvInitialiseTaskLists+0x7c>)
 800a142:	4a05      	ldr	r2, [pc, #20]	; (800a158 <prvInitialiseTaskLists+0x68>)
 800a144:	601a      	str	r2, [r3, #0]
}
 800a146:	bf00      	nop
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	20000f14 	.word	0x20000f14
 800a154:	20000fa0 	.word	0x20000fa0
 800a158:	20000fb4 	.word	0x20000fb4
 800a15c:	20000fd0 	.word	0x20000fd0
 800a160:	20000fe4 	.word	0x20000fe4
 800a164:	20000ffc 	.word	0x20000ffc
 800a168:	20000fc8 	.word	0x20000fc8
 800a16c:	20000fcc 	.word	0x20000fcc

0800a170 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a176:	e019      	b.n	800a1ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a178:	f000 fa0c 	bl	800a594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a17c:	4b10      	ldr	r3, [pc, #64]	; (800a1c0 <prvCheckTasksWaitingTermination+0x50>)
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	3304      	adds	r3, #4
 800a188:	4618      	mov	r0, r3
 800a18a:	f7ff fb62 	bl	8009852 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a18e:	4b0d      	ldr	r3, [pc, #52]	; (800a1c4 <prvCheckTasksWaitingTermination+0x54>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	3b01      	subs	r3, #1
 800a194:	4a0b      	ldr	r2, [pc, #44]	; (800a1c4 <prvCheckTasksWaitingTermination+0x54>)
 800a196:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a198:	4b0b      	ldr	r3, [pc, #44]	; (800a1c8 <prvCheckTasksWaitingTermination+0x58>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	3b01      	subs	r3, #1
 800a19e:	4a0a      	ldr	r2, [pc, #40]	; (800a1c8 <prvCheckTasksWaitingTermination+0x58>)
 800a1a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a1a2:	f000 fa27 	bl	800a5f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f810 	bl	800a1cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1ac:	4b06      	ldr	r3, [pc, #24]	; (800a1c8 <prvCheckTasksWaitingTermination+0x58>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1e1      	bne.n	800a178 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a1b4:	bf00      	nop
 800a1b6:	bf00      	nop
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	20000fe4 	.word	0x20000fe4
 800a1c4:	20001010 	.word	0x20001010
 800a1c8:	20000ff8 	.word	0x20000ff8

0800a1cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	334c      	adds	r3, #76	; 0x4c
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f001 fbaf 	bl	800b93c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d108      	bne.n	800a1fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 fb7f 	bl	800a8f0 <vPortFree>
				vPortFree( pxTCB );
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 fb7c 	bl	800a8f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1f8:	e018      	b.n	800a22c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800a200:	2b01      	cmp	r3, #1
 800a202:	d103      	bne.n	800a20c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 fb73 	bl	800a8f0 <vPortFree>
	}
 800a20a:	e00f      	b.n	800a22c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800a212:	2b02      	cmp	r3, #2
 800a214:	d00a      	beq.n	800a22c <prvDeleteTCB+0x60>
	__asm volatile
 800a216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21a:	f383 8811 	msr	BASEPRI, r3
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	60fb      	str	r3, [r7, #12]
}
 800a228:	bf00      	nop
 800a22a:	e7fe      	b.n	800a22a <prvDeleteTCB+0x5e>
	}
 800a22c:	bf00      	nop
 800a22e:	3710      	adds	r7, #16
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a23a:	4b0c      	ldr	r3, [pc, #48]	; (800a26c <prvResetNextTaskUnblockTime+0x38>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d104      	bne.n	800a24e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a244:	4b0a      	ldr	r3, [pc, #40]	; (800a270 <prvResetNextTaskUnblockTime+0x3c>)
 800a246:	f04f 32ff 	mov.w	r2, #4294967295
 800a24a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a24c:	e008      	b.n	800a260 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a24e:	4b07      	ldr	r3, [pc, #28]	; (800a26c <prvResetNextTaskUnblockTime+0x38>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	4a04      	ldr	r2, [pc, #16]	; (800a270 <prvResetNextTaskUnblockTime+0x3c>)
 800a25e:	6013      	str	r3, [r2, #0]
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr
 800a26c:	20000fc8 	.word	0x20000fc8
 800a270:	20001030 	.word	0x20001030

0800a274 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a27e:	4b29      	ldr	r3, [pc, #164]	; (800a324 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a284:	4b28      	ldr	r3, [pc, #160]	; (800a328 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	3304      	adds	r3, #4
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7ff fae1 	bl	8009852 <uxListRemove>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10b      	bne.n	800a2ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a296:	4b24      	ldr	r3, [pc, #144]	; (800a328 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29c:	2201      	movs	r2, #1
 800a29e:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a2:	43da      	mvns	r2, r3
 800a2a4:	4b21      	ldr	r3, [pc, #132]	; (800a32c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	4a20      	ldr	r2, [pc, #128]	; (800a32c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a2ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b4:	d10a      	bne.n	800a2cc <prvAddCurrentTaskToDelayedList+0x58>
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d007      	beq.n	800a2cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2bc:	4b1a      	ldr	r3, [pc, #104]	; (800a328 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3304      	adds	r3, #4
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	481a      	ldr	r0, [pc, #104]	; (800a330 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a2c6:	f7ff fa67 	bl	8009798 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a2ca:	e026      	b.n	800a31a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a2d4:	4b14      	ldr	r3, [pc, #80]	; (800a328 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d209      	bcs.n	800a2f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2e4:	4b13      	ldr	r3, [pc, #76]	; (800a334 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	4b0f      	ldr	r3, [pc, #60]	; (800a328 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3304      	adds	r3, #4
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	4610      	mov	r0, r2
 800a2f2:	f7ff fa75 	bl	80097e0 <vListInsert>
}
 800a2f6:	e010      	b.n	800a31a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2f8:	4b0f      	ldr	r3, [pc, #60]	; (800a338 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	4b0a      	ldr	r3, [pc, #40]	; (800a328 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3304      	adds	r3, #4
 800a302:	4619      	mov	r1, r3
 800a304:	4610      	mov	r0, r2
 800a306:	f7ff fa6b 	bl	80097e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a30a:	4b0c      	ldr	r3, [pc, #48]	; (800a33c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68ba      	ldr	r2, [r7, #8]
 800a310:	429a      	cmp	r2, r3
 800a312:	d202      	bcs.n	800a31a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a314:	4a09      	ldr	r2, [pc, #36]	; (800a33c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	6013      	str	r3, [r2, #0]
}
 800a31a:	bf00      	nop
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	20001014 	.word	0x20001014
 800a328:	20000f10 	.word	0x20000f10
 800a32c:	20001018 	.word	0x20001018
 800a330:	20000ffc 	.word	0x20000ffc
 800a334:	20000fcc 	.word	0x20000fcc
 800a338:	20000fc8 	.word	0x20000fc8
 800a33c:	20001030 	.word	0x20001030

0800a340 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a340:	b480      	push	{r7}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	3b04      	subs	r3, #4
 800a350:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3b04      	subs	r3, #4
 800a35e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	f023 0201 	bic.w	r2, r3, #1
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	3b04      	subs	r3, #4
 800a36e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a370:	4a0c      	ldr	r2, [pc, #48]	; (800a3a4 <pxPortInitialiseStack+0x64>)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3b14      	subs	r3, #20
 800a37a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	3b04      	subs	r3, #4
 800a386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f06f 0202 	mvn.w	r2, #2
 800a38e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3b20      	subs	r3, #32
 800a394:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a396:	68fb      	ldr	r3, [r7, #12]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	0800a3a9 	.word	0x0800a3a9

0800a3a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a3b2:	4b12      	ldr	r3, [pc, #72]	; (800a3fc <prvTaskExitError+0x54>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ba:	d00a      	beq.n	800a3d2 <prvTaskExitError+0x2a>
	__asm volatile
 800a3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c0:	f383 8811 	msr	BASEPRI, r3
 800a3c4:	f3bf 8f6f 	isb	sy
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	60fb      	str	r3, [r7, #12]
}
 800a3ce:	bf00      	nop
 800a3d0:	e7fe      	b.n	800a3d0 <prvTaskExitError+0x28>
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	60bb      	str	r3, [r7, #8]
}
 800a3e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a3e6:	bf00      	nop
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d0fc      	beq.n	800a3e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a3ee:	bf00      	nop
 800a3f0:	bf00      	nop
 800a3f2:	3714      	adds	r7, #20
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr
 800a3fc:	20000020 	.word	0x20000020

0800a400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a400:	4b07      	ldr	r3, [pc, #28]	; (800a420 <pxCurrentTCBConst2>)
 800a402:	6819      	ldr	r1, [r3, #0]
 800a404:	6808      	ldr	r0, [r1, #0]
 800a406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40a:	f380 8809 	msr	PSP, r0
 800a40e:	f3bf 8f6f 	isb	sy
 800a412:	f04f 0000 	mov.w	r0, #0
 800a416:	f380 8811 	msr	BASEPRI, r0
 800a41a:	4770      	bx	lr
 800a41c:	f3af 8000 	nop.w

0800a420 <pxCurrentTCBConst2>:
 800a420:	20000f10 	.word	0x20000f10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a424:	bf00      	nop
 800a426:	bf00      	nop

0800a428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a428:	4808      	ldr	r0, [pc, #32]	; (800a44c <prvPortStartFirstTask+0x24>)
 800a42a:	6800      	ldr	r0, [r0, #0]
 800a42c:	6800      	ldr	r0, [r0, #0]
 800a42e:	f380 8808 	msr	MSP, r0
 800a432:	f04f 0000 	mov.w	r0, #0
 800a436:	f380 8814 	msr	CONTROL, r0
 800a43a:	b662      	cpsie	i
 800a43c:	b661      	cpsie	f
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	df00      	svc	0
 800a448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a44a:	bf00      	nop
 800a44c:	e000ed08 	.word	0xe000ed08

0800a450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b086      	sub	sp, #24
 800a454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a456:	4b46      	ldr	r3, [pc, #280]	; (800a570 <xPortStartScheduler+0x120>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a46      	ldr	r2, [pc, #280]	; (800a574 <xPortStartScheduler+0x124>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d10a      	bne.n	800a476 <xPortStartScheduler+0x26>
	__asm volatile
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	613b      	str	r3, [r7, #16]
}
 800a472:	bf00      	nop
 800a474:	e7fe      	b.n	800a474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a476:	4b3e      	ldr	r3, [pc, #248]	; (800a570 <xPortStartScheduler+0x120>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a3f      	ldr	r2, [pc, #252]	; (800a578 <xPortStartScheduler+0x128>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d10a      	bne.n	800a496 <xPortStartScheduler+0x46>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	60fb      	str	r3, [r7, #12]
}
 800a492:	bf00      	nop
 800a494:	e7fe      	b.n	800a494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a496:	4b39      	ldr	r3, [pc, #228]	; (800a57c <xPortStartScheduler+0x12c>)
 800a498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	22ff      	movs	r2, #255	; 0xff
 800a4a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a4b0:	78fb      	ldrb	r3, [r7, #3]
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a4b8:	b2da      	uxtb	r2, r3
 800a4ba:	4b31      	ldr	r3, [pc, #196]	; (800a580 <xPortStartScheduler+0x130>)
 800a4bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a4be:	4b31      	ldr	r3, [pc, #196]	; (800a584 <xPortStartScheduler+0x134>)
 800a4c0:	2207      	movs	r2, #7
 800a4c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4c4:	e009      	b.n	800a4da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a4c6:	4b2f      	ldr	r3, [pc, #188]	; (800a584 <xPortStartScheduler+0x134>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	4a2d      	ldr	r2, [pc, #180]	; (800a584 <xPortStartScheduler+0x134>)
 800a4ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a4d0:	78fb      	ldrb	r3, [r7, #3]
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4da:	78fb      	ldrb	r3, [r7, #3]
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4e2:	2b80      	cmp	r3, #128	; 0x80
 800a4e4:	d0ef      	beq.n	800a4c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a4e6:	4b27      	ldr	r3, [pc, #156]	; (800a584 <xPortStartScheduler+0x134>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f1c3 0307 	rsb	r3, r3, #7
 800a4ee:	2b04      	cmp	r3, #4
 800a4f0:	d00a      	beq.n	800a508 <xPortStartScheduler+0xb8>
	__asm volatile
 800a4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f6:	f383 8811 	msr	BASEPRI, r3
 800a4fa:	f3bf 8f6f 	isb	sy
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	60bb      	str	r3, [r7, #8]
}
 800a504:	bf00      	nop
 800a506:	e7fe      	b.n	800a506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a508:	4b1e      	ldr	r3, [pc, #120]	; (800a584 <xPortStartScheduler+0x134>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	021b      	lsls	r3, r3, #8
 800a50e:	4a1d      	ldr	r2, [pc, #116]	; (800a584 <xPortStartScheduler+0x134>)
 800a510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a512:	4b1c      	ldr	r3, [pc, #112]	; (800a584 <xPortStartScheduler+0x134>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a51a:	4a1a      	ldr	r2, [pc, #104]	; (800a584 <xPortStartScheduler+0x134>)
 800a51c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	b2da      	uxtb	r2, r3
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a526:	4b18      	ldr	r3, [pc, #96]	; (800a588 <xPortStartScheduler+0x138>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a17      	ldr	r2, [pc, #92]	; (800a588 <xPortStartScheduler+0x138>)
 800a52c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a532:	4b15      	ldr	r3, [pc, #84]	; (800a588 <xPortStartScheduler+0x138>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a14      	ldr	r2, [pc, #80]	; (800a588 <xPortStartScheduler+0x138>)
 800a538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a53c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a53e:	f000 f8dd 	bl	800a6fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a542:	4b12      	ldr	r3, [pc, #72]	; (800a58c <xPortStartScheduler+0x13c>)
 800a544:	2200      	movs	r2, #0
 800a546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a548:	f000 f8fc 	bl	800a744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a54c:	4b10      	ldr	r3, [pc, #64]	; (800a590 <xPortStartScheduler+0x140>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a0f      	ldr	r2, [pc, #60]	; (800a590 <xPortStartScheduler+0x140>)
 800a552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a558:	f7ff ff66 	bl	800a428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a55c:	f7ff fd4e 	bl	8009ffc <vTaskSwitchContext>
	prvTaskExitError();
 800a560:	f7ff ff22 	bl	800a3a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3718      	adds	r7, #24
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	e000ed00 	.word	0xe000ed00
 800a574:	410fc271 	.word	0x410fc271
 800a578:	410fc270 	.word	0x410fc270
 800a57c:	e000e400 	.word	0xe000e400
 800a580:	2000103c 	.word	0x2000103c
 800a584:	20001040 	.word	0x20001040
 800a588:	e000ed20 	.word	0xe000ed20
 800a58c:	20000020 	.word	0x20000020
 800a590:	e000ef34 	.word	0xe000ef34

0800a594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
	__asm volatile
 800a59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	607b      	str	r3, [r7, #4]
}
 800a5ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a5ae:	4b0f      	ldr	r3, [pc, #60]	; (800a5ec <vPortEnterCritical+0x58>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	4a0d      	ldr	r2, [pc, #52]	; (800a5ec <vPortEnterCritical+0x58>)
 800a5b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a5b8:	4b0c      	ldr	r3, [pc, #48]	; (800a5ec <vPortEnterCritical+0x58>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d10f      	bne.n	800a5e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a5c0:	4b0b      	ldr	r3, [pc, #44]	; (800a5f0 <vPortEnterCritical+0x5c>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ce:	f383 8811 	msr	BASEPRI, r3
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	603b      	str	r3, [r7, #0]
}
 800a5dc:	bf00      	nop
 800a5de:	e7fe      	b.n	800a5de <vPortEnterCritical+0x4a>
	}
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	20000020 	.word	0x20000020
 800a5f0:	e000ed04 	.word	0xe000ed04

0800a5f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a5fa:	4b12      	ldr	r3, [pc, #72]	; (800a644 <vPortExitCritical+0x50>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10a      	bne.n	800a618 <vPortExitCritical+0x24>
	__asm volatile
 800a602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	607b      	str	r3, [r7, #4]
}
 800a614:	bf00      	nop
 800a616:	e7fe      	b.n	800a616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a618:	4b0a      	ldr	r3, [pc, #40]	; (800a644 <vPortExitCritical+0x50>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3b01      	subs	r3, #1
 800a61e:	4a09      	ldr	r2, [pc, #36]	; (800a644 <vPortExitCritical+0x50>)
 800a620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a622:	4b08      	ldr	r3, [pc, #32]	; (800a644 <vPortExitCritical+0x50>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d105      	bne.n	800a636 <vPortExitCritical+0x42>
 800a62a:	2300      	movs	r3, #0
 800a62c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a636:	bf00      	nop
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	20000020 	.word	0x20000020
	...

0800a650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a650:	f3ef 8009 	mrs	r0, PSP
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	4b15      	ldr	r3, [pc, #84]	; (800a6b0 <pxCurrentTCBConst>)
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	f01e 0f10 	tst.w	lr, #16
 800a660:	bf08      	it	eq
 800a662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66a:	6010      	str	r0, [r2, #0]
 800a66c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a670:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a674:	f380 8811 	msr	BASEPRI, r0
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f7ff fcbc 	bl	8009ffc <vTaskSwitchContext>
 800a684:	f04f 0000 	mov.w	r0, #0
 800a688:	f380 8811 	msr	BASEPRI, r0
 800a68c:	bc09      	pop	{r0, r3}
 800a68e:	6819      	ldr	r1, [r3, #0]
 800a690:	6808      	ldr	r0, [r1, #0]
 800a692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a696:	f01e 0f10 	tst.w	lr, #16
 800a69a:	bf08      	it	eq
 800a69c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a6a0:	f380 8809 	msr	PSP, r0
 800a6a4:	f3bf 8f6f 	isb	sy
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop
 800a6ac:	f3af 8000 	nop.w

0800a6b0 <pxCurrentTCBConst>:
 800a6b0:	20000f10 	.word	0x20000f10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a6b4:	bf00      	nop
 800a6b6:	bf00      	nop

0800a6b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	607b      	str	r3, [r7, #4]
}
 800a6d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a6d2:	f7ff fbdb 	bl	8009e8c <xTaskIncrementTick>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d003      	beq.n	800a6e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a6dc:	4b06      	ldr	r3, [pc, #24]	; (800a6f8 <SysTick_Handler+0x40>)
 800a6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6e2:	601a      	str	r2, [r3, #0]
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	f383 8811 	msr	BASEPRI, r3
}
 800a6ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a6f0:	bf00      	nop
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	e000ed04 	.word	0xe000ed04

0800a6fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a700:	4b0b      	ldr	r3, [pc, #44]	; (800a730 <vPortSetupTimerInterrupt+0x34>)
 800a702:	2200      	movs	r2, #0
 800a704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a706:	4b0b      	ldr	r3, [pc, #44]	; (800a734 <vPortSetupTimerInterrupt+0x38>)
 800a708:	2200      	movs	r2, #0
 800a70a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a70c:	4b0a      	ldr	r3, [pc, #40]	; (800a738 <vPortSetupTimerInterrupt+0x3c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a0a      	ldr	r2, [pc, #40]	; (800a73c <vPortSetupTimerInterrupt+0x40>)
 800a712:	fba2 2303 	umull	r2, r3, r2, r3
 800a716:	099b      	lsrs	r3, r3, #6
 800a718:	4a09      	ldr	r2, [pc, #36]	; (800a740 <vPortSetupTimerInterrupt+0x44>)
 800a71a:	3b01      	subs	r3, #1
 800a71c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a71e:	4b04      	ldr	r3, [pc, #16]	; (800a730 <vPortSetupTimerInterrupt+0x34>)
 800a720:	2207      	movs	r2, #7
 800a722:	601a      	str	r2, [r3, #0]
}
 800a724:	bf00      	nop
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	e000e010 	.word	0xe000e010
 800a734:	e000e018 	.word	0xe000e018
 800a738:	20000014 	.word	0x20000014
 800a73c:	10624dd3 	.word	0x10624dd3
 800a740:	e000e014 	.word	0xe000e014

0800a744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a754 <vPortEnableVFP+0x10>
 800a748:	6801      	ldr	r1, [r0, #0]
 800a74a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a74e:	6001      	str	r1, [r0, #0]
 800a750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a752:	bf00      	nop
 800a754:	e000ed88 	.word	0xe000ed88

0800a758 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b08a      	sub	sp, #40	; 0x28
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a760:	2300      	movs	r3, #0
 800a762:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a764:	f7ff fae8 	bl	8009d38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a768:	4b5b      	ldr	r3, [pc, #364]	; (800a8d8 <pvPortMalloc+0x180>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d101      	bne.n	800a774 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a770:	f000 f920 	bl	800a9b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a774:	4b59      	ldr	r3, [pc, #356]	; (800a8dc <pvPortMalloc+0x184>)
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4013      	ands	r3, r2
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f040 8093 	bne.w	800a8a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d01d      	beq.n	800a7c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a788:	2208      	movs	r2, #8
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4413      	add	r3, r2
 800a78e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f003 0307 	and.w	r3, r3, #7
 800a796:	2b00      	cmp	r3, #0
 800a798:	d014      	beq.n	800a7c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f023 0307 	bic.w	r3, r3, #7
 800a7a0:	3308      	adds	r3, #8
 800a7a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f003 0307 	and.w	r3, r3, #7
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00a      	beq.n	800a7c4 <pvPortMalloc+0x6c>
	__asm volatile
 800a7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b2:	f383 8811 	msr	BASEPRI, r3
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	617b      	str	r3, [r7, #20]
}
 800a7c0:	bf00      	nop
 800a7c2:	e7fe      	b.n	800a7c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d06e      	beq.n	800a8a8 <pvPortMalloc+0x150>
 800a7ca:	4b45      	ldr	r3, [pc, #276]	; (800a8e0 <pvPortMalloc+0x188>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d869      	bhi.n	800a8a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a7d4:	4b43      	ldr	r3, [pc, #268]	; (800a8e4 <pvPortMalloc+0x18c>)
 800a7d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a7d8:	4b42      	ldr	r3, [pc, #264]	; (800a8e4 <pvPortMalloc+0x18c>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7de:	e004      	b.n	800a7ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d903      	bls.n	800a7fc <pvPortMalloc+0xa4>
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1f1      	bne.n	800a7e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a7fc:	4b36      	ldr	r3, [pc, #216]	; (800a8d8 <pvPortMalloc+0x180>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a802:	429a      	cmp	r2, r3
 800a804:	d050      	beq.n	800a8a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a806:	6a3b      	ldr	r3, [r7, #32]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2208      	movs	r2, #8
 800a80c:	4413      	add	r3, r2
 800a80e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	6a3b      	ldr	r3, [r7, #32]
 800a816:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	1ad2      	subs	r2, r2, r3
 800a820:	2308      	movs	r3, #8
 800a822:	005b      	lsls	r3, r3, #1
 800a824:	429a      	cmp	r2, r3
 800a826:	d91f      	bls.n	800a868 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4413      	add	r3, r2
 800a82e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	f003 0307 	and.w	r3, r3, #7
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00a      	beq.n	800a850 <pvPortMalloc+0xf8>
	__asm volatile
 800a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	613b      	str	r3, [r7, #16]
}
 800a84c:	bf00      	nop
 800a84e:	e7fe      	b.n	800a84e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a852:	685a      	ldr	r2, [r3, #4]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	1ad2      	subs	r2, r2, r3
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a862:	69b8      	ldr	r0, [r7, #24]
 800a864:	f000 f908 	bl	800aa78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a868:	4b1d      	ldr	r3, [pc, #116]	; (800a8e0 <pvPortMalloc+0x188>)
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	4a1b      	ldr	r2, [pc, #108]	; (800a8e0 <pvPortMalloc+0x188>)
 800a874:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a876:	4b1a      	ldr	r3, [pc, #104]	; (800a8e0 <pvPortMalloc+0x188>)
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	4b1b      	ldr	r3, [pc, #108]	; (800a8e8 <pvPortMalloc+0x190>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d203      	bcs.n	800a88a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a882:	4b17      	ldr	r3, [pc, #92]	; (800a8e0 <pvPortMalloc+0x188>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a18      	ldr	r2, [pc, #96]	; (800a8e8 <pvPortMalloc+0x190>)
 800a888:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88c:	685a      	ldr	r2, [r3, #4]
 800a88e:	4b13      	ldr	r3, [pc, #76]	; (800a8dc <pvPortMalloc+0x184>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	431a      	orrs	r2, r3
 800a894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a896:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89a:	2200      	movs	r2, #0
 800a89c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a89e:	4b13      	ldr	r3, [pc, #76]	; (800a8ec <pvPortMalloc+0x194>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	4a11      	ldr	r2, [pc, #68]	; (800a8ec <pvPortMalloc+0x194>)
 800a8a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a8a8:	f7ff fa54 	bl	8009d54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	f003 0307 	and.w	r3, r3, #7
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00a      	beq.n	800a8cc <pvPortMalloc+0x174>
	__asm volatile
 800a8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	60fb      	str	r3, [r7, #12]
}
 800a8c8:	bf00      	nop
 800a8ca:	e7fe      	b.n	800a8ca <pvPortMalloc+0x172>
	return pvReturn;
 800a8cc:	69fb      	ldr	r3, [r7, #28]
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3728      	adds	r7, #40	; 0x28
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	20004c4c 	.word	0x20004c4c
 800a8dc:	20004c60 	.word	0x20004c60
 800a8e0:	20004c50 	.word	0x20004c50
 800a8e4:	20004c44 	.word	0x20004c44
 800a8e8:	20004c54 	.word	0x20004c54
 800a8ec:	20004c58 	.word	0x20004c58

0800a8f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d04d      	beq.n	800a99e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a902:	2308      	movs	r3, #8
 800a904:	425b      	negs	r3, r3
 800a906:	697a      	ldr	r2, [r7, #20]
 800a908:	4413      	add	r3, r2
 800a90a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	685a      	ldr	r2, [r3, #4]
 800a914:	4b24      	ldr	r3, [pc, #144]	; (800a9a8 <vPortFree+0xb8>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4013      	ands	r3, r2
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d10a      	bne.n	800a934 <vPortFree+0x44>
	__asm volatile
 800a91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	60fb      	str	r3, [r7, #12]
}
 800a930:	bf00      	nop
 800a932:	e7fe      	b.n	800a932 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d00a      	beq.n	800a952 <vPortFree+0x62>
	__asm volatile
 800a93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	60bb      	str	r3, [r7, #8]
}
 800a94e:	bf00      	nop
 800a950:	e7fe      	b.n	800a950 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	685a      	ldr	r2, [r3, #4]
 800a956:	4b14      	ldr	r3, [pc, #80]	; (800a9a8 <vPortFree+0xb8>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4013      	ands	r3, r2
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d01e      	beq.n	800a99e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d11a      	bne.n	800a99e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	4b0e      	ldr	r3, [pc, #56]	; (800a9a8 <vPortFree+0xb8>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	43db      	mvns	r3, r3
 800a972:	401a      	ands	r2, r3
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a978:	f7ff f9de 	bl	8009d38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	685a      	ldr	r2, [r3, #4]
 800a980:	4b0a      	ldr	r3, [pc, #40]	; (800a9ac <vPortFree+0xbc>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4413      	add	r3, r2
 800a986:	4a09      	ldr	r2, [pc, #36]	; (800a9ac <vPortFree+0xbc>)
 800a988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a98a:	6938      	ldr	r0, [r7, #16]
 800a98c:	f000 f874 	bl	800aa78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a990:	4b07      	ldr	r3, [pc, #28]	; (800a9b0 <vPortFree+0xc0>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	3301      	adds	r3, #1
 800a996:	4a06      	ldr	r2, [pc, #24]	; (800a9b0 <vPortFree+0xc0>)
 800a998:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a99a:	f7ff f9db 	bl	8009d54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a99e:	bf00      	nop
 800a9a0:	3718      	adds	r7, #24
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	20004c60 	.word	0x20004c60
 800a9ac:	20004c50 	.word	0x20004c50
 800a9b0:	20004c5c 	.word	0x20004c5c

0800a9b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a9ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a9be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a9c0:	4b27      	ldr	r3, [pc, #156]	; (800aa60 <prvHeapInit+0xac>)
 800a9c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f003 0307 	and.w	r3, r3, #7
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00c      	beq.n	800a9e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	3307      	adds	r3, #7
 800a9d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f023 0307 	bic.w	r3, r3, #7
 800a9da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a9dc:	68ba      	ldr	r2, [r7, #8]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	4a1f      	ldr	r2, [pc, #124]	; (800aa60 <prvHeapInit+0xac>)
 800a9e4:	4413      	add	r3, r2
 800a9e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a9ec:	4a1d      	ldr	r2, [pc, #116]	; (800aa64 <prvHeapInit+0xb0>)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a9f2:	4b1c      	ldr	r3, [pc, #112]	; (800aa64 <prvHeapInit+0xb0>)
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa00:	2208      	movs	r2, #8
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	1a9b      	subs	r3, r3, r2
 800aa06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f023 0307 	bic.w	r3, r3, #7
 800aa0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	4a15      	ldr	r2, [pc, #84]	; (800aa68 <prvHeapInit+0xb4>)
 800aa14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa16:	4b14      	ldr	r3, [pc, #80]	; (800aa68 <prvHeapInit+0xb4>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa1e:	4b12      	ldr	r3, [pc, #72]	; (800aa68 <prvHeapInit+0xb4>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2200      	movs	r2, #0
 800aa24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	1ad2      	subs	r2, r2, r3
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa34:	4b0c      	ldr	r3, [pc, #48]	; (800aa68 <prvHeapInit+0xb4>)
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	4a0a      	ldr	r2, [pc, #40]	; (800aa6c <prvHeapInit+0xb8>)
 800aa42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	4a09      	ldr	r2, [pc, #36]	; (800aa70 <prvHeapInit+0xbc>)
 800aa4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa4c:	4b09      	ldr	r3, [pc, #36]	; (800aa74 <prvHeapInit+0xc0>)
 800aa4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aa52:	601a      	str	r2, [r3, #0]
}
 800aa54:	bf00      	nop
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr
 800aa60:	20001044 	.word	0x20001044
 800aa64:	20004c44 	.word	0x20004c44
 800aa68:	20004c4c 	.word	0x20004c4c
 800aa6c:	20004c54 	.word	0x20004c54
 800aa70:	20004c50 	.word	0x20004c50
 800aa74:	20004c60 	.word	0x20004c60

0800aa78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa80:	4b28      	ldr	r3, [pc, #160]	; (800ab24 <prvInsertBlockIntoFreeList+0xac>)
 800aa82:	60fb      	str	r3, [r7, #12]
 800aa84:	e002      	b.n	800aa8c <prvInsertBlockIntoFreeList+0x14>
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	60fb      	str	r3, [r7, #12]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d8f7      	bhi.n	800aa86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	68ba      	ldr	r2, [r7, #8]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d108      	bne.n	800aaba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	685a      	ldr	r2, [r3, #4]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	441a      	add	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	68ba      	ldr	r2, [r7, #8]
 800aac4:	441a      	add	r2, r3
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d118      	bne.n	800ab00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	4b15      	ldr	r3, [pc, #84]	; (800ab28 <prvInsertBlockIntoFreeList+0xb0>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d00d      	beq.n	800aaf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	685a      	ldr	r2, [r3, #4]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	441a      	add	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	601a      	str	r2, [r3, #0]
 800aaf4:	e008      	b.n	800ab08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aaf6:	4b0c      	ldr	r3, [pc, #48]	; (800ab28 <prvInsertBlockIntoFreeList+0xb0>)
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	601a      	str	r2, [r3, #0]
 800aafe:	e003      	b.n	800ab08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d002      	beq.n	800ab16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab16:	bf00      	nop
 800ab18:	3714      	adds	r7, #20
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	20004c44 	.word	0x20004c44
 800ab28:	20004c4c 	.word	0x20004c4c

0800ab2c <atoi>:
 800ab2c:	220a      	movs	r2, #10
 800ab2e:	2100      	movs	r1, #0
 800ab30:	f000 b882 	b.w	800ac38 <strtol>

0800ab34 <_strtol_l.constprop.0>:
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab3a:	d001      	beq.n	800ab40 <_strtol_l.constprop.0+0xc>
 800ab3c:	2b24      	cmp	r3, #36	; 0x24
 800ab3e:	d906      	bls.n	800ab4e <_strtol_l.constprop.0+0x1a>
 800ab40:	f000 ff88 	bl	800ba54 <__errno>
 800ab44:	2316      	movs	r3, #22
 800ab46:	6003      	str	r3, [r0, #0]
 800ab48:	2000      	movs	r0, #0
 800ab4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab4e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ac34 <_strtol_l.constprop.0+0x100>
 800ab52:	460d      	mov	r5, r1
 800ab54:	462e      	mov	r6, r5
 800ab56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab5a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ab5e:	f017 0708 	ands.w	r7, r7, #8
 800ab62:	d1f7      	bne.n	800ab54 <_strtol_l.constprop.0+0x20>
 800ab64:	2c2d      	cmp	r4, #45	; 0x2d
 800ab66:	d132      	bne.n	800abce <_strtol_l.constprop.0+0x9a>
 800ab68:	782c      	ldrb	r4, [r5, #0]
 800ab6a:	2701      	movs	r7, #1
 800ab6c:	1cb5      	adds	r5, r6, #2
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d05b      	beq.n	800ac2a <_strtol_l.constprop.0+0xf6>
 800ab72:	2b10      	cmp	r3, #16
 800ab74:	d109      	bne.n	800ab8a <_strtol_l.constprop.0+0x56>
 800ab76:	2c30      	cmp	r4, #48	; 0x30
 800ab78:	d107      	bne.n	800ab8a <_strtol_l.constprop.0+0x56>
 800ab7a:	782c      	ldrb	r4, [r5, #0]
 800ab7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ab80:	2c58      	cmp	r4, #88	; 0x58
 800ab82:	d14d      	bne.n	800ac20 <_strtol_l.constprop.0+0xec>
 800ab84:	786c      	ldrb	r4, [r5, #1]
 800ab86:	2310      	movs	r3, #16
 800ab88:	3502      	adds	r5, #2
 800ab8a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ab8e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab92:	f04f 0e00 	mov.w	lr, #0
 800ab96:	fbb8 f9f3 	udiv	r9, r8, r3
 800ab9a:	4676      	mov	r6, lr
 800ab9c:	fb03 8a19 	mls	sl, r3, r9, r8
 800aba0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800aba4:	f1bc 0f09 	cmp.w	ip, #9
 800aba8:	d816      	bhi.n	800abd8 <_strtol_l.constprop.0+0xa4>
 800abaa:	4664      	mov	r4, ip
 800abac:	42a3      	cmp	r3, r4
 800abae:	dd24      	ble.n	800abfa <_strtol_l.constprop.0+0xc6>
 800abb0:	f1be 3fff 	cmp.w	lr, #4294967295
 800abb4:	d008      	beq.n	800abc8 <_strtol_l.constprop.0+0x94>
 800abb6:	45b1      	cmp	r9, r6
 800abb8:	d31c      	bcc.n	800abf4 <_strtol_l.constprop.0+0xc0>
 800abba:	d101      	bne.n	800abc0 <_strtol_l.constprop.0+0x8c>
 800abbc:	45a2      	cmp	sl, r4
 800abbe:	db19      	blt.n	800abf4 <_strtol_l.constprop.0+0xc0>
 800abc0:	fb06 4603 	mla	r6, r6, r3, r4
 800abc4:	f04f 0e01 	mov.w	lr, #1
 800abc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abcc:	e7e8      	b.n	800aba0 <_strtol_l.constprop.0+0x6c>
 800abce:	2c2b      	cmp	r4, #43	; 0x2b
 800abd0:	bf04      	itt	eq
 800abd2:	782c      	ldrbeq	r4, [r5, #0]
 800abd4:	1cb5      	addeq	r5, r6, #2
 800abd6:	e7ca      	b.n	800ab6e <_strtol_l.constprop.0+0x3a>
 800abd8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800abdc:	f1bc 0f19 	cmp.w	ip, #25
 800abe0:	d801      	bhi.n	800abe6 <_strtol_l.constprop.0+0xb2>
 800abe2:	3c37      	subs	r4, #55	; 0x37
 800abe4:	e7e2      	b.n	800abac <_strtol_l.constprop.0+0x78>
 800abe6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800abea:	f1bc 0f19 	cmp.w	ip, #25
 800abee:	d804      	bhi.n	800abfa <_strtol_l.constprop.0+0xc6>
 800abf0:	3c57      	subs	r4, #87	; 0x57
 800abf2:	e7db      	b.n	800abac <_strtol_l.constprop.0+0x78>
 800abf4:	f04f 3eff 	mov.w	lr, #4294967295
 800abf8:	e7e6      	b.n	800abc8 <_strtol_l.constprop.0+0x94>
 800abfa:	f1be 3fff 	cmp.w	lr, #4294967295
 800abfe:	d105      	bne.n	800ac0c <_strtol_l.constprop.0+0xd8>
 800ac00:	2322      	movs	r3, #34	; 0x22
 800ac02:	6003      	str	r3, [r0, #0]
 800ac04:	4646      	mov	r6, r8
 800ac06:	b942      	cbnz	r2, 800ac1a <_strtol_l.constprop.0+0xe6>
 800ac08:	4630      	mov	r0, r6
 800ac0a:	e79e      	b.n	800ab4a <_strtol_l.constprop.0+0x16>
 800ac0c:	b107      	cbz	r7, 800ac10 <_strtol_l.constprop.0+0xdc>
 800ac0e:	4276      	negs	r6, r6
 800ac10:	2a00      	cmp	r2, #0
 800ac12:	d0f9      	beq.n	800ac08 <_strtol_l.constprop.0+0xd4>
 800ac14:	f1be 0f00 	cmp.w	lr, #0
 800ac18:	d000      	beq.n	800ac1c <_strtol_l.constprop.0+0xe8>
 800ac1a:	1e69      	subs	r1, r5, #1
 800ac1c:	6011      	str	r1, [r2, #0]
 800ac1e:	e7f3      	b.n	800ac08 <_strtol_l.constprop.0+0xd4>
 800ac20:	2430      	movs	r4, #48	; 0x30
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1b1      	bne.n	800ab8a <_strtol_l.constprop.0+0x56>
 800ac26:	2308      	movs	r3, #8
 800ac28:	e7af      	b.n	800ab8a <_strtol_l.constprop.0+0x56>
 800ac2a:	2c30      	cmp	r4, #48	; 0x30
 800ac2c:	d0a5      	beq.n	800ab7a <_strtol_l.constprop.0+0x46>
 800ac2e:	230a      	movs	r3, #10
 800ac30:	e7ab      	b.n	800ab8a <_strtol_l.constprop.0+0x56>
 800ac32:	bf00      	nop
 800ac34:	0800e989 	.word	0x0800e989

0800ac38 <strtol>:
 800ac38:	4613      	mov	r3, r2
 800ac3a:	460a      	mov	r2, r1
 800ac3c:	4601      	mov	r1, r0
 800ac3e:	4802      	ldr	r0, [pc, #8]	; (800ac48 <strtol+0x10>)
 800ac40:	6800      	ldr	r0, [r0, #0]
 800ac42:	f7ff bf77 	b.w	800ab34 <_strtol_l.constprop.0>
 800ac46:	bf00      	nop
 800ac48:	2000007c 	.word	0x2000007c

0800ac4c <__cvt>:
 800ac4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac50:	ec55 4b10 	vmov	r4, r5, d0
 800ac54:	2d00      	cmp	r5, #0
 800ac56:	460e      	mov	r6, r1
 800ac58:	4619      	mov	r1, r3
 800ac5a:	462b      	mov	r3, r5
 800ac5c:	bfbb      	ittet	lt
 800ac5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ac62:	461d      	movlt	r5, r3
 800ac64:	2300      	movge	r3, #0
 800ac66:	232d      	movlt	r3, #45	; 0x2d
 800ac68:	700b      	strb	r3, [r1, #0]
 800ac6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ac70:	4691      	mov	r9, r2
 800ac72:	f023 0820 	bic.w	r8, r3, #32
 800ac76:	bfbc      	itt	lt
 800ac78:	4622      	movlt	r2, r4
 800ac7a:	4614      	movlt	r4, r2
 800ac7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ac80:	d005      	beq.n	800ac8e <__cvt+0x42>
 800ac82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ac86:	d100      	bne.n	800ac8a <__cvt+0x3e>
 800ac88:	3601      	adds	r6, #1
 800ac8a:	2102      	movs	r1, #2
 800ac8c:	e000      	b.n	800ac90 <__cvt+0x44>
 800ac8e:	2103      	movs	r1, #3
 800ac90:	ab03      	add	r3, sp, #12
 800ac92:	9301      	str	r3, [sp, #4]
 800ac94:	ab02      	add	r3, sp, #8
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	ec45 4b10 	vmov	d0, r4, r5
 800ac9c:	4653      	mov	r3, sl
 800ac9e:	4632      	mov	r2, r6
 800aca0:	f000 ff9a 	bl	800bbd8 <_dtoa_r>
 800aca4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aca8:	4607      	mov	r7, r0
 800acaa:	d102      	bne.n	800acb2 <__cvt+0x66>
 800acac:	f019 0f01 	tst.w	r9, #1
 800acb0:	d022      	beq.n	800acf8 <__cvt+0xac>
 800acb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800acb6:	eb07 0906 	add.w	r9, r7, r6
 800acba:	d110      	bne.n	800acde <__cvt+0x92>
 800acbc:	783b      	ldrb	r3, [r7, #0]
 800acbe:	2b30      	cmp	r3, #48	; 0x30
 800acc0:	d10a      	bne.n	800acd8 <__cvt+0x8c>
 800acc2:	2200      	movs	r2, #0
 800acc4:	2300      	movs	r3, #0
 800acc6:	4620      	mov	r0, r4
 800acc8:	4629      	mov	r1, r5
 800acca:	f7f5 fefd 	bl	8000ac8 <__aeabi_dcmpeq>
 800acce:	b918      	cbnz	r0, 800acd8 <__cvt+0x8c>
 800acd0:	f1c6 0601 	rsb	r6, r6, #1
 800acd4:	f8ca 6000 	str.w	r6, [sl]
 800acd8:	f8da 3000 	ldr.w	r3, [sl]
 800acdc:	4499      	add	r9, r3
 800acde:	2200      	movs	r2, #0
 800ace0:	2300      	movs	r3, #0
 800ace2:	4620      	mov	r0, r4
 800ace4:	4629      	mov	r1, r5
 800ace6:	f7f5 feef 	bl	8000ac8 <__aeabi_dcmpeq>
 800acea:	b108      	cbz	r0, 800acf0 <__cvt+0xa4>
 800acec:	f8cd 900c 	str.w	r9, [sp, #12]
 800acf0:	2230      	movs	r2, #48	; 0x30
 800acf2:	9b03      	ldr	r3, [sp, #12]
 800acf4:	454b      	cmp	r3, r9
 800acf6:	d307      	bcc.n	800ad08 <__cvt+0xbc>
 800acf8:	9b03      	ldr	r3, [sp, #12]
 800acfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acfc:	1bdb      	subs	r3, r3, r7
 800acfe:	4638      	mov	r0, r7
 800ad00:	6013      	str	r3, [r2, #0]
 800ad02:	b004      	add	sp, #16
 800ad04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad08:	1c59      	adds	r1, r3, #1
 800ad0a:	9103      	str	r1, [sp, #12]
 800ad0c:	701a      	strb	r2, [r3, #0]
 800ad0e:	e7f0      	b.n	800acf2 <__cvt+0xa6>

0800ad10 <__exponent>:
 800ad10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad12:	4603      	mov	r3, r0
 800ad14:	2900      	cmp	r1, #0
 800ad16:	bfb8      	it	lt
 800ad18:	4249      	neglt	r1, r1
 800ad1a:	f803 2b02 	strb.w	r2, [r3], #2
 800ad1e:	bfb4      	ite	lt
 800ad20:	222d      	movlt	r2, #45	; 0x2d
 800ad22:	222b      	movge	r2, #43	; 0x2b
 800ad24:	2909      	cmp	r1, #9
 800ad26:	7042      	strb	r2, [r0, #1]
 800ad28:	dd2a      	ble.n	800ad80 <__exponent+0x70>
 800ad2a:	f10d 0207 	add.w	r2, sp, #7
 800ad2e:	4617      	mov	r7, r2
 800ad30:	260a      	movs	r6, #10
 800ad32:	4694      	mov	ip, r2
 800ad34:	fb91 f5f6 	sdiv	r5, r1, r6
 800ad38:	fb06 1415 	mls	r4, r6, r5, r1
 800ad3c:	3430      	adds	r4, #48	; 0x30
 800ad3e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ad42:	460c      	mov	r4, r1
 800ad44:	2c63      	cmp	r4, #99	; 0x63
 800ad46:	f102 32ff 	add.w	r2, r2, #4294967295
 800ad4a:	4629      	mov	r1, r5
 800ad4c:	dcf1      	bgt.n	800ad32 <__exponent+0x22>
 800ad4e:	3130      	adds	r1, #48	; 0x30
 800ad50:	f1ac 0402 	sub.w	r4, ip, #2
 800ad54:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ad58:	1c41      	adds	r1, r0, #1
 800ad5a:	4622      	mov	r2, r4
 800ad5c:	42ba      	cmp	r2, r7
 800ad5e:	d30a      	bcc.n	800ad76 <__exponent+0x66>
 800ad60:	f10d 0209 	add.w	r2, sp, #9
 800ad64:	eba2 020c 	sub.w	r2, r2, ip
 800ad68:	42bc      	cmp	r4, r7
 800ad6a:	bf88      	it	hi
 800ad6c:	2200      	movhi	r2, #0
 800ad6e:	4413      	add	r3, r2
 800ad70:	1a18      	subs	r0, r3, r0
 800ad72:	b003      	add	sp, #12
 800ad74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad76:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ad7a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ad7e:	e7ed      	b.n	800ad5c <__exponent+0x4c>
 800ad80:	2330      	movs	r3, #48	; 0x30
 800ad82:	3130      	adds	r1, #48	; 0x30
 800ad84:	7083      	strb	r3, [r0, #2]
 800ad86:	70c1      	strb	r1, [r0, #3]
 800ad88:	1d03      	adds	r3, r0, #4
 800ad8a:	e7f1      	b.n	800ad70 <__exponent+0x60>

0800ad8c <_printf_float>:
 800ad8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad90:	ed2d 8b02 	vpush	{d8}
 800ad94:	b08d      	sub	sp, #52	; 0x34
 800ad96:	460c      	mov	r4, r1
 800ad98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ad9c:	4616      	mov	r6, r2
 800ad9e:	461f      	mov	r7, r3
 800ada0:	4605      	mov	r5, r0
 800ada2:	f000 fdb7 	bl	800b914 <_localeconv_r>
 800ada6:	f8d0 a000 	ldr.w	sl, [r0]
 800adaa:	4650      	mov	r0, sl
 800adac:	f7f5 fa60 	bl	8000270 <strlen>
 800adb0:	2300      	movs	r3, #0
 800adb2:	930a      	str	r3, [sp, #40]	; 0x28
 800adb4:	6823      	ldr	r3, [r4, #0]
 800adb6:	9305      	str	r3, [sp, #20]
 800adb8:	f8d8 3000 	ldr.w	r3, [r8]
 800adbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800adc0:	3307      	adds	r3, #7
 800adc2:	f023 0307 	bic.w	r3, r3, #7
 800adc6:	f103 0208 	add.w	r2, r3, #8
 800adca:	f8c8 2000 	str.w	r2, [r8]
 800adce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800add2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800add6:	9307      	str	r3, [sp, #28]
 800add8:	f8cd 8018 	str.w	r8, [sp, #24]
 800addc:	ee08 0a10 	vmov	s16, r0
 800ade0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ade4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ade8:	4b9e      	ldr	r3, [pc, #632]	; (800b064 <_printf_float+0x2d8>)
 800adea:	f04f 32ff 	mov.w	r2, #4294967295
 800adee:	f7f5 fe9d 	bl	8000b2c <__aeabi_dcmpun>
 800adf2:	bb88      	cbnz	r0, 800ae58 <_printf_float+0xcc>
 800adf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adf8:	4b9a      	ldr	r3, [pc, #616]	; (800b064 <_printf_float+0x2d8>)
 800adfa:	f04f 32ff 	mov.w	r2, #4294967295
 800adfe:	f7f5 fe77 	bl	8000af0 <__aeabi_dcmple>
 800ae02:	bb48      	cbnz	r0, 800ae58 <_printf_float+0xcc>
 800ae04:	2200      	movs	r2, #0
 800ae06:	2300      	movs	r3, #0
 800ae08:	4640      	mov	r0, r8
 800ae0a:	4649      	mov	r1, r9
 800ae0c:	f7f5 fe66 	bl	8000adc <__aeabi_dcmplt>
 800ae10:	b110      	cbz	r0, 800ae18 <_printf_float+0x8c>
 800ae12:	232d      	movs	r3, #45	; 0x2d
 800ae14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae18:	4a93      	ldr	r2, [pc, #588]	; (800b068 <_printf_float+0x2dc>)
 800ae1a:	4b94      	ldr	r3, [pc, #592]	; (800b06c <_printf_float+0x2e0>)
 800ae1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ae20:	bf94      	ite	ls
 800ae22:	4690      	movls	r8, r2
 800ae24:	4698      	movhi	r8, r3
 800ae26:	2303      	movs	r3, #3
 800ae28:	6123      	str	r3, [r4, #16]
 800ae2a:	9b05      	ldr	r3, [sp, #20]
 800ae2c:	f023 0304 	bic.w	r3, r3, #4
 800ae30:	6023      	str	r3, [r4, #0]
 800ae32:	f04f 0900 	mov.w	r9, #0
 800ae36:	9700      	str	r7, [sp, #0]
 800ae38:	4633      	mov	r3, r6
 800ae3a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	4628      	mov	r0, r5
 800ae40:	f000 f9da 	bl	800b1f8 <_printf_common>
 800ae44:	3001      	adds	r0, #1
 800ae46:	f040 8090 	bne.w	800af6a <_printf_float+0x1de>
 800ae4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4e:	b00d      	add	sp, #52	; 0x34
 800ae50:	ecbd 8b02 	vpop	{d8}
 800ae54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae58:	4642      	mov	r2, r8
 800ae5a:	464b      	mov	r3, r9
 800ae5c:	4640      	mov	r0, r8
 800ae5e:	4649      	mov	r1, r9
 800ae60:	f7f5 fe64 	bl	8000b2c <__aeabi_dcmpun>
 800ae64:	b140      	cbz	r0, 800ae78 <_printf_float+0xec>
 800ae66:	464b      	mov	r3, r9
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	bfbc      	itt	lt
 800ae6c:	232d      	movlt	r3, #45	; 0x2d
 800ae6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ae72:	4a7f      	ldr	r2, [pc, #508]	; (800b070 <_printf_float+0x2e4>)
 800ae74:	4b7f      	ldr	r3, [pc, #508]	; (800b074 <_printf_float+0x2e8>)
 800ae76:	e7d1      	b.n	800ae1c <_printf_float+0x90>
 800ae78:	6863      	ldr	r3, [r4, #4]
 800ae7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ae7e:	9206      	str	r2, [sp, #24]
 800ae80:	1c5a      	adds	r2, r3, #1
 800ae82:	d13f      	bne.n	800af04 <_printf_float+0x178>
 800ae84:	2306      	movs	r3, #6
 800ae86:	6063      	str	r3, [r4, #4]
 800ae88:	9b05      	ldr	r3, [sp, #20]
 800ae8a:	6861      	ldr	r1, [r4, #4]
 800ae8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ae90:	2300      	movs	r3, #0
 800ae92:	9303      	str	r3, [sp, #12]
 800ae94:	ab0a      	add	r3, sp, #40	; 0x28
 800ae96:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ae9a:	ab09      	add	r3, sp, #36	; 0x24
 800ae9c:	ec49 8b10 	vmov	d0, r8, r9
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	6022      	str	r2, [r4, #0]
 800aea4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aea8:	4628      	mov	r0, r5
 800aeaa:	f7ff fecf 	bl	800ac4c <__cvt>
 800aeae:	9b06      	ldr	r3, [sp, #24]
 800aeb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aeb2:	2b47      	cmp	r3, #71	; 0x47
 800aeb4:	4680      	mov	r8, r0
 800aeb6:	d108      	bne.n	800aeca <_printf_float+0x13e>
 800aeb8:	1cc8      	adds	r0, r1, #3
 800aeba:	db02      	blt.n	800aec2 <_printf_float+0x136>
 800aebc:	6863      	ldr	r3, [r4, #4]
 800aebe:	4299      	cmp	r1, r3
 800aec0:	dd41      	ble.n	800af46 <_printf_float+0x1ba>
 800aec2:	f1ab 0302 	sub.w	r3, fp, #2
 800aec6:	fa5f fb83 	uxtb.w	fp, r3
 800aeca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aece:	d820      	bhi.n	800af12 <_printf_float+0x186>
 800aed0:	3901      	subs	r1, #1
 800aed2:	465a      	mov	r2, fp
 800aed4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aed8:	9109      	str	r1, [sp, #36]	; 0x24
 800aeda:	f7ff ff19 	bl	800ad10 <__exponent>
 800aede:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aee0:	1813      	adds	r3, r2, r0
 800aee2:	2a01      	cmp	r2, #1
 800aee4:	4681      	mov	r9, r0
 800aee6:	6123      	str	r3, [r4, #16]
 800aee8:	dc02      	bgt.n	800aef0 <_printf_float+0x164>
 800aeea:	6822      	ldr	r2, [r4, #0]
 800aeec:	07d2      	lsls	r2, r2, #31
 800aeee:	d501      	bpl.n	800aef4 <_printf_float+0x168>
 800aef0:	3301      	adds	r3, #1
 800aef2:	6123      	str	r3, [r4, #16]
 800aef4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d09c      	beq.n	800ae36 <_printf_float+0xaa>
 800aefc:	232d      	movs	r3, #45	; 0x2d
 800aefe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af02:	e798      	b.n	800ae36 <_printf_float+0xaa>
 800af04:	9a06      	ldr	r2, [sp, #24]
 800af06:	2a47      	cmp	r2, #71	; 0x47
 800af08:	d1be      	bne.n	800ae88 <_printf_float+0xfc>
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1bc      	bne.n	800ae88 <_printf_float+0xfc>
 800af0e:	2301      	movs	r3, #1
 800af10:	e7b9      	b.n	800ae86 <_printf_float+0xfa>
 800af12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800af16:	d118      	bne.n	800af4a <_printf_float+0x1be>
 800af18:	2900      	cmp	r1, #0
 800af1a:	6863      	ldr	r3, [r4, #4]
 800af1c:	dd0b      	ble.n	800af36 <_printf_float+0x1aa>
 800af1e:	6121      	str	r1, [r4, #16]
 800af20:	b913      	cbnz	r3, 800af28 <_printf_float+0x19c>
 800af22:	6822      	ldr	r2, [r4, #0]
 800af24:	07d0      	lsls	r0, r2, #31
 800af26:	d502      	bpl.n	800af2e <_printf_float+0x1a2>
 800af28:	3301      	adds	r3, #1
 800af2a:	440b      	add	r3, r1
 800af2c:	6123      	str	r3, [r4, #16]
 800af2e:	65a1      	str	r1, [r4, #88]	; 0x58
 800af30:	f04f 0900 	mov.w	r9, #0
 800af34:	e7de      	b.n	800aef4 <_printf_float+0x168>
 800af36:	b913      	cbnz	r3, 800af3e <_printf_float+0x1b2>
 800af38:	6822      	ldr	r2, [r4, #0]
 800af3a:	07d2      	lsls	r2, r2, #31
 800af3c:	d501      	bpl.n	800af42 <_printf_float+0x1b6>
 800af3e:	3302      	adds	r3, #2
 800af40:	e7f4      	b.n	800af2c <_printf_float+0x1a0>
 800af42:	2301      	movs	r3, #1
 800af44:	e7f2      	b.n	800af2c <_printf_float+0x1a0>
 800af46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800af4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af4c:	4299      	cmp	r1, r3
 800af4e:	db05      	blt.n	800af5c <_printf_float+0x1d0>
 800af50:	6823      	ldr	r3, [r4, #0]
 800af52:	6121      	str	r1, [r4, #16]
 800af54:	07d8      	lsls	r0, r3, #31
 800af56:	d5ea      	bpl.n	800af2e <_printf_float+0x1a2>
 800af58:	1c4b      	adds	r3, r1, #1
 800af5a:	e7e7      	b.n	800af2c <_printf_float+0x1a0>
 800af5c:	2900      	cmp	r1, #0
 800af5e:	bfd4      	ite	le
 800af60:	f1c1 0202 	rsble	r2, r1, #2
 800af64:	2201      	movgt	r2, #1
 800af66:	4413      	add	r3, r2
 800af68:	e7e0      	b.n	800af2c <_printf_float+0x1a0>
 800af6a:	6823      	ldr	r3, [r4, #0]
 800af6c:	055a      	lsls	r2, r3, #21
 800af6e:	d407      	bmi.n	800af80 <_printf_float+0x1f4>
 800af70:	6923      	ldr	r3, [r4, #16]
 800af72:	4642      	mov	r2, r8
 800af74:	4631      	mov	r1, r6
 800af76:	4628      	mov	r0, r5
 800af78:	47b8      	blx	r7
 800af7a:	3001      	adds	r0, #1
 800af7c:	d12c      	bne.n	800afd8 <_printf_float+0x24c>
 800af7e:	e764      	b.n	800ae4a <_printf_float+0xbe>
 800af80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800af84:	f240 80e0 	bls.w	800b148 <_printf_float+0x3bc>
 800af88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af8c:	2200      	movs	r2, #0
 800af8e:	2300      	movs	r3, #0
 800af90:	f7f5 fd9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800af94:	2800      	cmp	r0, #0
 800af96:	d034      	beq.n	800b002 <_printf_float+0x276>
 800af98:	4a37      	ldr	r2, [pc, #220]	; (800b078 <_printf_float+0x2ec>)
 800af9a:	2301      	movs	r3, #1
 800af9c:	4631      	mov	r1, r6
 800af9e:	4628      	mov	r0, r5
 800afa0:	47b8      	blx	r7
 800afa2:	3001      	adds	r0, #1
 800afa4:	f43f af51 	beq.w	800ae4a <_printf_float+0xbe>
 800afa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800afac:	429a      	cmp	r2, r3
 800afae:	db02      	blt.n	800afb6 <_printf_float+0x22a>
 800afb0:	6823      	ldr	r3, [r4, #0]
 800afb2:	07d8      	lsls	r0, r3, #31
 800afb4:	d510      	bpl.n	800afd8 <_printf_float+0x24c>
 800afb6:	ee18 3a10 	vmov	r3, s16
 800afba:	4652      	mov	r2, sl
 800afbc:	4631      	mov	r1, r6
 800afbe:	4628      	mov	r0, r5
 800afc0:	47b8      	blx	r7
 800afc2:	3001      	adds	r0, #1
 800afc4:	f43f af41 	beq.w	800ae4a <_printf_float+0xbe>
 800afc8:	f04f 0800 	mov.w	r8, #0
 800afcc:	f104 091a 	add.w	r9, r4, #26
 800afd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afd2:	3b01      	subs	r3, #1
 800afd4:	4543      	cmp	r3, r8
 800afd6:	dc09      	bgt.n	800afec <_printf_float+0x260>
 800afd8:	6823      	ldr	r3, [r4, #0]
 800afda:	079b      	lsls	r3, r3, #30
 800afdc:	f100 8107 	bmi.w	800b1ee <_printf_float+0x462>
 800afe0:	68e0      	ldr	r0, [r4, #12]
 800afe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afe4:	4298      	cmp	r0, r3
 800afe6:	bfb8      	it	lt
 800afe8:	4618      	movlt	r0, r3
 800afea:	e730      	b.n	800ae4e <_printf_float+0xc2>
 800afec:	2301      	movs	r3, #1
 800afee:	464a      	mov	r2, r9
 800aff0:	4631      	mov	r1, r6
 800aff2:	4628      	mov	r0, r5
 800aff4:	47b8      	blx	r7
 800aff6:	3001      	adds	r0, #1
 800aff8:	f43f af27 	beq.w	800ae4a <_printf_float+0xbe>
 800affc:	f108 0801 	add.w	r8, r8, #1
 800b000:	e7e6      	b.n	800afd0 <_printf_float+0x244>
 800b002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b004:	2b00      	cmp	r3, #0
 800b006:	dc39      	bgt.n	800b07c <_printf_float+0x2f0>
 800b008:	4a1b      	ldr	r2, [pc, #108]	; (800b078 <_printf_float+0x2ec>)
 800b00a:	2301      	movs	r3, #1
 800b00c:	4631      	mov	r1, r6
 800b00e:	4628      	mov	r0, r5
 800b010:	47b8      	blx	r7
 800b012:	3001      	adds	r0, #1
 800b014:	f43f af19 	beq.w	800ae4a <_printf_float+0xbe>
 800b018:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b01c:	4313      	orrs	r3, r2
 800b01e:	d102      	bne.n	800b026 <_printf_float+0x29a>
 800b020:	6823      	ldr	r3, [r4, #0]
 800b022:	07d9      	lsls	r1, r3, #31
 800b024:	d5d8      	bpl.n	800afd8 <_printf_float+0x24c>
 800b026:	ee18 3a10 	vmov	r3, s16
 800b02a:	4652      	mov	r2, sl
 800b02c:	4631      	mov	r1, r6
 800b02e:	4628      	mov	r0, r5
 800b030:	47b8      	blx	r7
 800b032:	3001      	adds	r0, #1
 800b034:	f43f af09 	beq.w	800ae4a <_printf_float+0xbe>
 800b038:	f04f 0900 	mov.w	r9, #0
 800b03c:	f104 0a1a 	add.w	sl, r4, #26
 800b040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b042:	425b      	negs	r3, r3
 800b044:	454b      	cmp	r3, r9
 800b046:	dc01      	bgt.n	800b04c <_printf_float+0x2c0>
 800b048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b04a:	e792      	b.n	800af72 <_printf_float+0x1e6>
 800b04c:	2301      	movs	r3, #1
 800b04e:	4652      	mov	r2, sl
 800b050:	4631      	mov	r1, r6
 800b052:	4628      	mov	r0, r5
 800b054:	47b8      	blx	r7
 800b056:	3001      	adds	r0, #1
 800b058:	f43f aef7 	beq.w	800ae4a <_printf_float+0xbe>
 800b05c:	f109 0901 	add.w	r9, r9, #1
 800b060:	e7ee      	b.n	800b040 <_printf_float+0x2b4>
 800b062:	bf00      	nop
 800b064:	7fefffff 	.word	0x7fefffff
 800b068:	0800ea89 	.word	0x0800ea89
 800b06c:	0800ea8d 	.word	0x0800ea8d
 800b070:	0800ea91 	.word	0x0800ea91
 800b074:	0800ea95 	.word	0x0800ea95
 800b078:	0800ea99 	.word	0x0800ea99
 800b07c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b07e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b080:	429a      	cmp	r2, r3
 800b082:	bfa8      	it	ge
 800b084:	461a      	movge	r2, r3
 800b086:	2a00      	cmp	r2, #0
 800b088:	4691      	mov	r9, r2
 800b08a:	dc37      	bgt.n	800b0fc <_printf_float+0x370>
 800b08c:	f04f 0b00 	mov.w	fp, #0
 800b090:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b094:	f104 021a 	add.w	r2, r4, #26
 800b098:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b09a:	9305      	str	r3, [sp, #20]
 800b09c:	eba3 0309 	sub.w	r3, r3, r9
 800b0a0:	455b      	cmp	r3, fp
 800b0a2:	dc33      	bgt.n	800b10c <_printf_float+0x380>
 800b0a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	db3b      	blt.n	800b124 <_printf_float+0x398>
 800b0ac:	6823      	ldr	r3, [r4, #0]
 800b0ae:	07da      	lsls	r2, r3, #31
 800b0b0:	d438      	bmi.n	800b124 <_printf_float+0x398>
 800b0b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b0b6:	eba2 0903 	sub.w	r9, r2, r3
 800b0ba:	9b05      	ldr	r3, [sp, #20]
 800b0bc:	1ad2      	subs	r2, r2, r3
 800b0be:	4591      	cmp	r9, r2
 800b0c0:	bfa8      	it	ge
 800b0c2:	4691      	movge	r9, r2
 800b0c4:	f1b9 0f00 	cmp.w	r9, #0
 800b0c8:	dc35      	bgt.n	800b136 <_printf_float+0x3aa>
 800b0ca:	f04f 0800 	mov.w	r8, #0
 800b0ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0d2:	f104 0a1a 	add.w	sl, r4, #26
 800b0d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0da:	1a9b      	subs	r3, r3, r2
 800b0dc:	eba3 0309 	sub.w	r3, r3, r9
 800b0e0:	4543      	cmp	r3, r8
 800b0e2:	f77f af79 	ble.w	800afd8 <_printf_float+0x24c>
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	4652      	mov	r2, sl
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	47b8      	blx	r7
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	f43f aeaa 	beq.w	800ae4a <_printf_float+0xbe>
 800b0f6:	f108 0801 	add.w	r8, r8, #1
 800b0fa:	e7ec      	b.n	800b0d6 <_printf_float+0x34a>
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	4631      	mov	r1, r6
 800b100:	4642      	mov	r2, r8
 800b102:	4628      	mov	r0, r5
 800b104:	47b8      	blx	r7
 800b106:	3001      	adds	r0, #1
 800b108:	d1c0      	bne.n	800b08c <_printf_float+0x300>
 800b10a:	e69e      	b.n	800ae4a <_printf_float+0xbe>
 800b10c:	2301      	movs	r3, #1
 800b10e:	4631      	mov	r1, r6
 800b110:	4628      	mov	r0, r5
 800b112:	9205      	str	r2, [sp, #20]
 800b114:	47b8      	blx	r7
 800b116:	3001      	adds	r0, #1
 800b118:	f43f ae97 	beq.w	800ae4a <_printf_float+0xbe>
 800b11c:	9a05      	ldr	r2, [sp, #20]
 800b11e:	f10b 0b01 	add.w	fp, fp, #1
 800b122:	e7b9      	b.n	800b098 <_printf_float+0x30c>
 800b124:	ee18 3a10 	vmov	r3, s16
 800b128:	4652      	mov	r2, sl
 800b12a:	4631      	mov	r1, r6
 800b12c:	4628      	mov	r0, r5
 800b12e:	47b8      	blx	r7
 800b130:	3001      	adds	r0, #1
 800b132:	d1be      	bne.n	800b0b2 <_printf_float+0x326>
 800b134:	e689      	b.n	800ae4a <_printf_float+0xbe>
 800b136:	9a05      	ldr	r2, [sp, #20]
 800b138:	464b      	mov	r3, r9
 800b13a:	4442      	add	r2, r8
 800b13c:	4631      	mov	r1, r6
 800b13e:	4628      	mov	r0, r5
 800b140:	47b8      	blx	r7
 800b142:	3001      	adds	r0, #1
 800b144:	d1c1      	bne.n	800b0ca <_printf_float+0x33e>
 800b146:	e680      	b.n	800ae4a <_printf_float+0xbe>
 800b148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b14a:	2a01      	cmp	r2, #1
 800b14c:	dc01      	bgt.n	800b152 <_printf_float+0x3c6>
 800b14e:	07db      	lsls	r3, r3, #31
 800b150:	d53a      	bpl.n	800b1c8 <_printf_float+0x43c>
 800b152:	2301      	movs	r3, #1
 800b154:	4642      	mov	r2, r8
 800b156:	4631      	mov	r1, r6
 800b158:	4628      	mov	r0, r5
 800b15a:	47b8      	blx	r7
 800b15c:	3001      	adds	r0, #1
 800b15e:	f43f ae74 	beq.w	800ae4a <_printf_float+0xbe>
 800b162:	ee18 3a10 	vmov	r3, s16
 800b166:	4652      	mov	r2, sl
 800b168:	4631      	mov	r1, r6
 800b16a:	4628      	mov	r0, r5
 800b16c:	47b8      	blx	r7
 800b16e:	3001      	adds	r0, #1
 800b170:	f43f ae6b 	beq.w	800ae4a <_printf_float+0xbe>
 800b174:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b178:	2200      	movs	r2, #0
 800b17a:	2300      	movs	r3, #0
 800b17c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b180:	f7f5 fca2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b184:	b9d8      	cbnz	r0, 800b1be <_printf_float+0x432>
 800b186:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b18a:	f108 0201 	add.w	r2, r8, #1
 800b18e:	4631      	mov	r1, r6
 800b190:	4628      	mov	r0, r5
 800b192:	47b8      	blx	r7
 800b194:	3001      	adds	r0, #1
 800b196:	d10e      	bne.n	800b1b6 <_printf_float+0x42a>
 800b198:	e657      	b.n	800ae4a <_printf_float+0xbe>
 800b19a:	2301      	movs	r3, #1
 800b19c:	4652      	mov	r2, sl
 800b19e:	4631      	mov	r1, r6
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	47b8      	blx	r7
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	f43f ae50 	beq.w	800ae4a <_printf_float+0xbe>
 800b1aa:	f108 0801 	add.w	r8, r8, #1
 800b1ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1b0:	3b01      	subs	r3, #1
 800b1b2:	4543      	cmp	r3, r8
 800b1b4:	dcf1      	bgt.n	800b19a <_printf_float+0x40e>
 800b1b6:	464b      	mov	r3, r9
 800b1b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b1bc:	e6da      	b.n	800af74 <_printf_float+0x1e8>
 800b1be:	f04f 0800 	mov.w	r8, #0
 800b1c2:	f104 0a1a 	add.w	sl, r4, #26
 800b1c6:	e7f2      	b.n	800b1ae <_printf_float+0x422>
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	4642      	mov	r2, r8
 800b1cc:	e7df      	b.n	800b18e <_printf_float+0x402>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	464a      	mov	r2, r9
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	47b8      	blx	r7
 800b1d8:	3001      	adds	r0, #1
 800b1da:	f43f ae36 	beq.w	800ae4a <_printf_float+0xbe>
 800b1de:	f108 0801 	add.w	r8, r8, #1
 800b1e2:	68e3      	ldr	r3, [r4, #12]
 800b1e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b1e6:	1a5b      	subs	r3, r3, r1
 800b1e8:	4543      	cmp	r3, r8
 800b1ea:	dcf0      	bgt.n	800b1ce <_printf_float+0x442>
 800b1ec:	e6f8      	b.n	800afe0 <_printf_float+0x254>
 800b1ee:	f04f 0800 	mov.w	r8, #0
 800b1f2:	f104 0919 	add.w	r9, r4, #25
 800b1f6:	e7f4      	b.n	800b1e2 <_printf_float+0x456>

0800b1f8 <_printf_common>:
 800b1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1fc:	4616      	mov	r6, r2
 800b1fe:	4699      	mov	r9, r3
 800b200:	688a      	ldr	r2, [r1, #8]
 800b202:	690b      	ldr	r3, [r1, #16]
 800b204:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b208:	4293      	cmp	r3, r2
 800b20a:	bfb8      	it	lt
 800b20c:	4613      	movlt	r3, r2
 800b20e:	6033      	str	r3, [r6, #0]
 800b210:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b214:	4607      	mov	r7, r0
 800b216:	460c      	mov	r4, r1
 800b218:	b10a      	cbz	r2, 800b21e <_printf_common+0x26>
 800b21a:	3301      	adds	r3, #1
 800b21c:	6033      	str	r3, [r6, #0]
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	0699      	lsls	r1, r3, #26
 800b222:	bf42      	ittt	mi
 800b224:	6833      	ldrmi	r3, [r6, #0]
 800b226:	3302      	addmi	r3, #2
 800b228:	6033      	strmi	r3, [r6, #0]
 800b22a:	6825      	ldr	r5, [r4, #0]
 800b22c:	f015 0506 	ands.w	r5, r5, #6
 800b230:	d106      	bne.n	800b240 <_printf_common+0x48>
 800b232:	f104 0a19 	add.w	sl, r4, #25
 800b236:	68e3      	ldr	r3, [r4, #12]
 800b238:	6832      	ldr	r2, [r6, #0]
 800b23a:	1a9b      	subs	r3, r3, r2
 800b23c:	42ab      	cmp	r3, r5
 800b23e:	dc26      	bgt.n	800b28e <_printf_common+0x96>
 800b240:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b244:	1e13      	subs	r3, r2, #0
 800b246:	6822      	ldr	r2, [r4, #0]
 800b248:	bf18      	it	ne
 800b24a:	2301      	movne	r3, #1
 800b24c:	0692      	lsls	r2, r2, #26
 800b24e:	d42b      	bmi.n	800b2a8 <_printf_common+0xb0>
 800b250:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b254:	4649      	mov	r1, r9
 800b256:	4638      	mov	r0, r7
 800b258:	47c0      	blx	r8
 800b25a:	3001      	adds	r0, #1
 800b25c:	d01e      	beq.n	800b29c <_printf_common+0xa4>
 800b25e:	6823      	ldr	r3, [r4, #0]
 800b260:	6922      	ldr	r2, [r4, #16]
 800b262:	f003 0306 	and.w	r3, r3, #6
 800b266:	2b04      	cmp	r3, #4
 800b268:	bf02      	ittt	eq
 800b26a:	68e5      	ldreq	r5, [r4, #12]
 800b26c:	6833      	ldreq	r3, [r6, #0]
 800b26e:	1aed      	subeq	r5, r5, r3
 800b270:	68a3      	ldr	r3, [r4, #8]
 800b272:	bf0c      	ite	eq
 800b274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b278:	2500      	movne	r5, #0
 800b27a:	4293      	cmp	r3, r2
 800b27c:	bfc4      	itt	gt
 800b27e:	1a9b      	subgt	r3, r3, r2
 800b280:	18ed      	addgt	r5, r5, r3
 800b282:	2600      	movs	r6, #0
 800b284:	341a      	adds	r4, #26
 800b286:	42b5      	cmp	r5, r6
 800b288:	d11a      	bne.n	800b2c0 <_printf_common+0xc8>
 800b28a:	2000      	movs	r0, #0
 800b28c:	e008      	b.n	800b2a0 <_printf_common+0xa8>
 800b28e:	2301      	movs	r3, #1
 800b290:	4652      	mov	r2, sl
 800b292:	4649      	mov	r1, r9
 800b294:	4638      	mov	r0, r7
 800b296:	47c0      	blx	r8
 800b298:	3001      	adds	r0, #1
 800b29a:	d103      	bne.n	800b2a4 <_printf_common+0xac>
 800b29c:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2a4:	3501      	adds	r5, #1
 800b2a6:	e7c6      	b.n	800b236 <_printf_common+0x3e>
 800b2a8:	18e1      	adds	r1, r4, r3
 800b2aa:	1c5a      	adds	r2, r3, #1
 800b2ac:	2030      	movs	r0, #48	; 0x30
 800b2ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b2b2:	4422      	add	r2, r4
 800b2b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2bc:	3302      	adds	r3, #2
 800b2be:	e7c7      	b.n	800b250 <_printf_common+0x58>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	4622      	mov	r2, r4
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	4638      	mov	r0, r7
 800b2c8:	47c0      	blx	r8
 800b2ca:	3001      	adds	r0, #1
 800b2cc:	d0e6      	beq.n	800b29c <_printf_common+0xa4>
 800b2ce:	3601      	adds	r6, #1
 800b2d0:	e7d9      	b.n	800b286 <_printf_common+0x8e>
	...

0800b2d4 <_printf_i>:
 800b2d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2d8:	7e0f      	ldrb	r7, [r1, #24]
 800b2da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b2dc:	2f78      	cmp	r7, #120	; 0x78
 800b2de:	4691      	mov	r9, r2
 800b2e0:	4680      	mov	r8, r0
 800b2e2:	460c      	mov	r4, r1
 800b2e4:	469a      	mov	sl, r3
 800b2e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b2ea:	d807      	bhi.n	800b2fc <_printf_i+0x28>
 800b2ec:	2f62      	cmp	r7, #98	; 0x62
 800b2ee:	d80a      	bhi.n	800b306 <_printf_i+0x32>
 800b2f0:	2f00      	cmp	r7, #0
 800b2f2:	f000 80d4 	beq.w	800b49e <_printf_i+0x1ca>
 800b2f6:	2f58      	cmp	r7, #88	; 0x58
 800b2f8:	f000 80c0 	beq.w	800b47c <_printf_i+0x1a8>
 800b2fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b300:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b304:	e03a      	b.n	800b37c <_printf_i+0xa8>
 800b306:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b30a:	2b15      	cmp	r3, #21
 800b30c:	d8f6      	bhi.n	800b2fc <_printf_i+0x28>
 800b30e:	a101      	add	r1, pc, #4	; (adr r1, 800b314 <_printf_i+0x40>)
 800b310:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b314:	0800b36d 	.word	0x0800b36d
 800b318:	0800b381 	.word	0x0800b381
 800b31c:	0800b2fd 	.word	0x0800b2fd
 800b320:	0800b2fd 	.word	0x0800b2fd
 800b324:	0800b2fd 	.word	0x0800b2fd
 800b328:	0800b2fd 	.word	0x0800b2fd
 800b32c:	0800b381 	.word	0x0800b381
 800b330:	0800b2fd 	.word	0x0800b2fd
 800b334:	0800b2fd 	.word	0x0800b2fd
 800b338:	0800b2fd 	.word	0x0800b2fd
 800b33c:	0800b2fd 	.word	0x0800b2fd
 800b340:	0800b485 	.word	0x0800b485
 800b344:	0800b3ad 	.word	0x0800b3ad
 800b348:	0800b43f 	.word	0x0800b43f
 800b34c:	0800b2fd 	.word	0x0800b2fd
 800b350:	0800b2fd 	.word	0x0800b2fd
 800b354:	0800b4a7 	.word	0x0800b4a7
 800b358:	0800b2fd 	.word	0x0800b2fd
 800b35c:	0800b3ad 	.word	0x0800b3ad
 800b360:	0800b2fd 	.word	0x0800b2fd
 800b364:	0800b2fd 	.word	0x0800b2fd
 800b368:	0800b447 	.word	0x0800b447
 800b36c:	682b      	ldr	r3, [r5, #0]
 800b36e:	1d1a      	adds	r2, r3, #4
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	602a      	str	r2, [r5, #0]
 800b374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b378:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b37c:	2301      	movs	r3, #1
 800b37e:	e09f      	b.n	800b4c0 <_printf_i+0x1ec>
 800b380:	6820      	ldr	r0, [r4, #0]
 800b382:	682b      	ldr	r3, [r5, #0]
 800b384:	0607      	lsls	r7, r0, #24
 800b386:	f103 0104 	add.w	r1, r3, #4
 800b38a:	6029      	str	r1, [r5, #0]
 800b38c:	d501      	bpl.n	800b392 <_printf_i+0xbe>
 800b38e:	681e      	ldr	r6, [r3, #0]
 800b390:	e003      	b.n	800b39a <_printf_i+0xc6>
 800b392:	0646      	lsls	r6, r0, #25
 800b394:	d5fb      	bpl.n	800b38e <_printf_i+0xba>
 800b396:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b39a:	2e00      	cmp	r6, #0
 800b39c:	da03      	bge.n	800b3a6 <_printf_i+0xd2>
 800b39e:	232d      	movs	r3, #45	; 0x2d
 800b3a0:	4276      	negs	r6, r6
 800b3a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3a6:	485a      	ldr	r0, [pc, #360]	; (800b510 <_printf_i+0x23c>)
 800b3a8:	230a      	movs	r3, #10
 800b3aa:	e012      	b.n	800b3d2 <_printf_i+0xfe>
 800b3ac:	682b      	ldr	r3, [r5, #0]
 800b3ae:	6820      	ldr	r0, [r4, #0]
 800b3b0:	1d19      	adds	r1, r3, #4
 800b3b2:	6029      	str	r1, [r5, #0]
 800b3b4:	0605      	lsls	r5, r0, #24
 800b3b6:	d501      	bpl.n	800b3bc <_printf_i+0xe8>
 800b3b8:	681e      	ldr	r6, [r3, #0]
 800b3ba:	e002      	b.n	800b3c2 <_printf_i+0xee>
 800b3bc:	0641      	lsls	r1, r0, #25
 800b3be:	d5fb      	bpl.n	800b3b8 <_printf_i+0xe4>
 800b3c0:	881e      	ldrh	r6, [r3, #0]
 800b3c2:	4853      	ldr	r0, [pc, #332]	; (800b510 <_printf_i+0x23c>)
 800b3c4:	2f6f      	cmp	r7, #111	; 0x6f
 800b3c6:	bf0c      	ite	eq
 800b3c8:	2308      	moveq	r3, #8
 800b3ca:	230a      	movne	r3, #10
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3d2:	6865      	ldr	r5, [r4, #4]
 800b3d4:	60a5      	str	r5, [r4, #8]
 800b3d6:	2d00      	cmp	r5, #0
 800b3d8:	bfa2      	ittt	ge
 800b3da:	6821      	ldrge	r1, [r4, #0]
 800b3dc:	f021 0104 	bicge.w	r1, r1, #4
 800b3e0:	6021      	strge	r1, [r4, #0]
 800b3e2:	b90e      	cbnz	r6, 800b3e8 <_printf_i+0x114>
 800b3e4:	2d00      	cmp	r5, #0
 800b3e6:	d04b      	beq.n	800b480 <_printf_i+0x1ac>
 800b3e8:	4615      	mov	r5, r2
 800b3ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800b3ee:	fb03 6711 	mls	r7, r3, r1, r6
 800b3f2:	5dc7      	ldrb	r7, [r0, r7]
 800b3f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b3f8:	4637      	mov	r7, r6
 800b3fa:	42bb      	cmp	r3, r7
 800b3fc:	460e      	mov	r6, r1
 800b3fe:	d9f4      	bls.n	800b3ea <_printf_i+0x116>
 800b400:	2b08      	cmp	r3, #8
 800b402:	d10b      	bne.n	800b41c <_printf_i+0x148>
 800b404:	6823      	ldr	r3, [r4, #0]
 800b406:	07de      	lsls	r6, r3, #31
 800b408:	d508      	bpl.n	800b41c <_printf_i+0x148>
 800b40a:	6923      	ldr	r3, [r4, #16]
 800b40c:	6861      	ldr	r1, [r4, #4]
 800b40e:	4299      	cmp	r1, r3
 800b410:	bfde      	ittt	le
 800b412:	2330      	movle	r3, #48	; 0x30
 800b414:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b418:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b41c:	1b52      	subs	r2, r2, r5
 800b41e:	6122      	str	r2, [r4, #16]
 800b420:	f8cd a000 	str.w	sl, [sp]
 800b424:	464b      	mov	r3, r9
 800b426:	aa03      	add	r2, sp, #12
 800b428:	4621      	mov	r1, r4
 800b42a:	4640      	mov	r0, r8
 800b42c:	f7ff fee4 	bl	800b1f8 <_printf_common>
 800b430:	3001      	adds	r0, #1
 800b432:	d14a      	bne.n	800b4ca <_printf_i+0x1f6>
 800b434:	f04f 30ff 	mov.w	r0, #4294967295
 800b438:	b004      	add	sp, #16
 800b43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	f043 0320 	orr.w	r3, r3, #32
 800b444:	6023      	str	r3, [r4, #0]
 800b446:	4833      	ldr	r0, [pc, #204]	; (800b514 <_printf_i+0x240>)
 800b448:	2778      	movs	r7, #120	; 0x78
 800b44a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b44e:	6823      	ldr	r3, [r4, #0]
 800b450:	6829      	ldr	r1, [r5, #0]
 800b452:	061f      	lsls	r7, r3, #24
 800b454:	f851 6b04 	ldr.w	r6, [r1], #4
 800b458:	d402      	bmi.n	800b460 <_printf_i+0x18c>
 800b45a:	065f      	lsls	r7, r3, #25
 800b45c:	bf48      	it	mi
 800b45e:	b2b6      	uxthmi	r6, r6
 800b460:	07df      	lsls	r7, r3, #31
 800b462:	bf48      	it	mi
 800b464:	f043 0320 	orrmi.w	r3, r3, #32
 800b468:	6029      	str	r1, [r5, #0]
 800b46a:	bf48      	it	mi
 800b46c:	6023      	strmi	r3, [r4, #0]
 800b46e:	b91e      	cbnz	r6, 800b478 <_printf_i+0x1a4>
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	f023 0320 	bic.w	r3, r3, #32
 800b476:	6023      	str	r3, [r4, #0]
 800b478:	2310      	movs	r3, #16
 800b47a:	e7a7      	b.n	800b3cc <_printf_i+0xf8>
 800b47c:	4824      	ldr	r0, [pc, #144]	; (800b510 <_printf_i+0x23c>)
 800b47e:	e7e4      	b.n	800b44a <_printf_i+0x176>
 800b480:	4615      	mov	r5, r2
 800b482:	e7bd      	b.n	800b400 <_printf_i+0x12c>
 800b484:	682b      	ldr	r3, [r5, #0]
 800b486:	6826      	ldr	r6, [r4, #0]
 800b488:	6961      	ldr	r1, [r4, #20]
 800b48a:	1d18      	adds	r0, r3, #4
 800b48c:	6028      	str	r0, [r5, #0]
 800b48e:	0635      	lsls	r5, r6, #24
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	d501      	bpl.n	800b498 <_printf_i+0x1c4>
 800b494:	6019      	str	r1, [r3, #0]
 800b496:	e002      	b.n	800b49e <_printf_i+0x1ca>
 800b498:	0670      	lsls	r0, r6, #25
 800b49a:	d5fb      	bpl.n	800b494 <_printf_i+0x1c0>
 800b49c:	8019      	strh	r1, [r3, #0]
 800b49e:	2300      	movs	r3, #0
 800b4a0:	6123      	str	r3, [r4, #16]
 800b4a2:	4615      	mov	r5, r2
 800b4a4:	e7bc      	b.n	800b420 <_printf_i+0x14c>
 800b4a6:	682b      	ldr	r3, [r5, #0]
 800b4a8:	1d1a      	adds	r2, r3, #4
 800b4aa:	602a      	str	r2, [r5, #0]
 800b4ac:	681d      	ldr	r5, [r3, #0]
 800b4ae:	6862      	ldr	r2, [r4, #4]
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	4628      	mov	r0, r5
 800b4b4:	f7f4 fe8c 	bl	80001d0 <memchr>
 800b4b8:	b108      	cbz	r0, 800b4be <_printf_i+0x1ea>
 800b4ba:	1b40      	subs	r0, r0, r5
 800b4bc:	6060      	str	r0, [r4, #4]
 800b4be:	6863      	ldr	r3, [r4, #4]
 800b4c0:	6123      	str	r3, [r4, #16]
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4c8:	e7aa      	b.n	800b420 <_printf_i+0x14c>
 800b4ca:	6923      	ldr	r3, [r4, #16]
 800b4cc:	462a      	mov	r2, r5
 800b4ce:	4649      	mov	r1, r9
 800b4d0:	4640      	mov	r0, r8
 800b4d2:	47d0      	blx	sl
 800b4d4:	3001      	adds	r0, #1
 800b4d6:	d0ad      	beq.n	800b434 <_printf_i+0x160>
 800b4d8:	6823      	ldr	r3, [r4, #0]
 800b4da:	079b      	lsls	r3, r3, #30
 800b4dc:	d413      	bmi.n	800b506 <_printf_i+0x232>
 800b4de:	68e0      	ldr	r0, [r4, #12]
 800b4e0:	9b03      	ldr	r3, [sp, #12]
 800b4e2:	4298      	cmp	r0, r3
 800b4e4:	bfb8      	it	lt
 800b4e6:	4618      	movlt	r0, r3
 800b4e8:	e7a6      	b.n	800b438 <_printf_i+0x164>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	4632      	mov	r2, r6
 800b4ee:	4649      	mov	r1, r9
 800b4f0:	4640      	mov	r0, r8
 800b4f2:	47d0      	blx	sl
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	d09d      	beq.n	800b434 <_printf_i+0x160>
 800b4f8:	3501      	adds	r5, #1
 800b4fa:	68e3      	ldr	r3, [r4, #12]
 800b4fc:	9903      	ldr	r1, [sp, #12]
 800b4fe:	1a5b      	subs	r3, r3, r1
 800b500:	42ab      	cmp	r3, r5
 800b502:	dcf2      	bgt.n	800b4ea <_printf_i+0x216>
 800b504:	e7eb      	b.n	800b4de <_printf_i+0x20a>
 800b506:	2500      	movs	r5, #0
 800b508:	f104 0619 	add.w	r6, r4, #25
 800b50c:	e7f5      	b.n	800b4fa <_printf_i+0x226>
 800b50e:	bf00      	nop
 800b510:	0800ea9b 	.word	0x0800ea9b
 800b514:	0800eaac 	.word	0x0800eaac

0800b518 <std>:
 800b518:	2300      	movs	r3, #0
 800b51a:	b510      	push	{r4, lr}
 800b51c:	4604      	mov	r4, r0
 800b51e:	e9c0 3300 	strd	r3, r3, [r0]
 800b522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b526:	6083      	str	r3, [r0, #8]
 800b528:	8181      	strh	r1, [r0, #12]
 800b52a:	6643      	str	r3, [r0, #100]	; 0x64
 800b52c:	81c2      	strh	r2, [r0, #14]
 800b52e:	6183      	str	r3, [r0, #24]
 800b530:	4619      	mov	r1, r3
 800b532:	2208      	movs	r2, #8
 800b534:	305c      	adds	r0, #92	; 0x5c
 800b536:	f000 f9e5 	bl	800b904 <memset>
 800b53a:	4b05      	ldr	r3, [pc, #20]	; (800b550 <std+0x38>)
 800b53c:	6263      	str	r3, [r4, #36]	; 0x24
 800b53e:	4b05      	ldr	r3, [pc, #20]	; (800b554 <std+0x3c>)
 800b540:	62a3      	str	r3, [r4, #40]	; 0x28
 800b542:	4b05      	ldr	r3, [pc, #20]	; (800b558 <std+0x40>)
 800b544:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b546:	4b05      	ldr	r3, [pc, #20]	; (800b55c <std+0x44>)
 800b548:	6224      	str	r4, [r4, #32]
 800b54a:	6323      	str	r3, [r4, #48]	; 0x30
 800b54c:	bd10      	pop	{r4, pc}
 800b54e:	bf00      	nop
 800b550:	0800b755 	.word	0x0800b755
 800b554:	0800b777 	.word	0x0800b777
 800b558:	0800b7af 	.word	0x0800b7af
 800b55c:	0800b7d3 	.word	0x0800b7d3

0800b560 <stdio_exit_handler>:
 800b560:	4a02      	ldr	r2, [pc, #8]	; (800b56c <stdio_exit_handler+0xc>)
 800b562:	4903      	ldr	r1, [pc, #12]	; (800b570 <stdio_exit_handler+0x10>)
 800b564:	4803      	ldr	r0, [pc, #12]	; (800b574 <stdio_exit_handler+0x14>)
 800b566:	f000 b869 	b.w	800b63c <_fwalk_sglue>
 800b56a:	bf00      	nop
 800b56c:	20000024 	.word	0x20000024
 800b570:	0800d449 	.word	0x0800d449
 800b574:	20000030 	.word	0x20000030

0800b578 <cleanup_stdio>:
 800b578:	6841      	ldr	r1, [r0, #4]
 800b57a:	4b0c      	ldr	r3, [pc, #48]	; (800b5ac <cleanup_stdio+0x34>)
 800b57c:	4299      	cmp	r1, r3
 800b57e:	b510      	push	{r4, lr}
 800b580:	4604      	mov	r4, r0
 800b582:	d001      	beq.n	800b588 <cleanup_stdio+0x10>
 800b584:	f001 ff60 	bl	800d448 <_fflush_r>
 800b588:	68a1      	ldr	r1, [r4, #8]
 800b58a:	4b09      	ldr	r3, [pc, #36]	; (800b5b0 <cleanup_stdio+0x38>)
 800b58c:	4299      	cmp	r1, r3
 800b58e:	d002      	beq.n	800b596 <cleanup_stdio+0x1e>
 800b590:	4620      	mov	r0, r4
 800b592:	f001 ff59 	bl	800d448 <_fflush_r>
 800b596:	68e1      	ldr	r1, [r4, #12]
 800b598:	4b06      	ldr	r3, [pc, #24]	; (800b5b4 <cleanup_stdio+0x3c>)
 800b59a:	4299      	cmp	r1, r3
 800b59c:	d004      	beq.n	800b5a8 <cleanup_stdio+0x30>
 800b59e:	4620      	mov	r0, r4
 800b5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5a4:	f001 bf50 	b.w	800d448 <_fflush_r>
 800b5a8:	bd10      	pop	{r4, pc}
 800b5aa:	bf00      	nop
 800b5ac:	20004c64 	.word	0x20004c64
 800b5b0:	20004ccc 	.word	0x20004ccc
 800b5b4:	20004d34 	.word	0x20004d34

0800b5b8 <global_stdio_init.part.0>:
 800b5b8:	b510      	push	{r4, lr}
 800b5ba:	4b0b      	ldr	r3, [pc, #44]	; (800b5e8 <global_stdio_init.part.0+0x30>)
 800b5bc:	4c0b      	ldr	r4, [pc, #44]	; (800b5ec <global_stdio_init.part.0+0x34>)
 800b5be:	4a0c      	ldr	r2, [pc, #48]	; (800b5f0 <global_stdio_init.part.0+0x38>)
 800b5c0:	601a      	str	r2, [r3, #0]
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	2104      	movs	r1, #4
 800b5c8:	f7ff ffa6 	bl	800b518 <std>
 800b5cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	2109      	movs	r1, #9
 800b5d4:	f7ff ffa0 	bl	800b518 <std>
 800b5d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b5dc:	2202      	movs	r2, #2
 800b5de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5e2:	2112      	movs	r1, #18
 800b5e4:	f7ff bf98 	b.w	800b518 <std>
 800b5e8:	20004d9c 	.word	0x20004d9c
 800b5ec:	20004c64 	.word	0x20004c64
 800b5f0:	0800b561 	.word	0x0800b561

0800b5f4 <__sfp_lock_acquire>:
 800b5f4:	4801      	ldr	r0, [pc, #4]	; (800b5fc <__sfp_lock_acquire+0x8>)
 800b5f6:	f000 ba57 	b.w	800baa8 <__retarget_lock_acquire_recursive>
 800b5fa:	bf00      	nop
 800b5fc:	20004da5 	.word	0x20004da5

0800b600 <__sfp_lock_release>:
 800b600:	4801      	ldr	r0, [pc, #4]	; (800b608 <__sfp_lock_release+0x8>)
 800b602:	f000 ba52 	b.w	800baaa <__retarget_lock_release_recursive>
 800b606:	bf00      	nop
 800b608:	20004da5 	.word	0x20004da5

0800b60c <__sinit>:
 800b60c:	b510      	push	{r4, lr}
 800b60e:	4604      	mov	r4, r0
 800b610:	f7ff fff0 	bl	800b5f4 <__sfp_lock_acquire>
 800b614:	6a23      	ldr	r3, [r4, #32]
 800b616:	b11b      	cbz	r3, 800b620 <__sinit+0x14>
 800b618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b61c:	f7ff bff0 	b.w	800b600 <__sfp_lock_release>
 800b620:	4b04      	ldr	r3, [pc, #16]	; (800b634 <__sinit+0x28>)
 800b622:	6223      	str	r3, [r4, #32]
 800b624:	4b04      	ldr	r3, [pc, #16]	; (800b638 <__sinit+0x2c>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1f5      	bne.n	800b618 <__sinit+0xc>
 800b62c:	f7ff ffc4 	bl	800b5b8 <global_stdio_init.part.0>
 800b630:	e7f2      	b.n	800b618 <__sinit+0xc>
 800b632:	bf00      	nop
 800b634:	0800b579 	.word	0x0800b579
 800b638:	20004d9c 	.word	0x20004d9c

0800b63c <_fwalk_sglue>:
 800b63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b640:	4607      	mov	r7, r0
 800b642:	4688      	mov	r8, r1
 800b644:	4614      	mov	r4, r2
 800b646:	2600      	movs	r6, #0
 800b648:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b64c:	f1b9 0901 	subs.w	r9, r9, #1
 800b650:	d505      	bpl.n	800b65e <_fwalk_sglue+0x22>
 800b652:	6824      	ldr	r4, [r4, #0]
 800b654:	2c00      	cmp	r4, #0
 800b656:	d1f7      	bne.n	800b648 <_fwalk_sglue+0xc>
 800b658:	4630      	mov	r0, r6
 800b65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b65e:	89ab      	ldrh	r3, [r5, #12]
 800b660:	2b01      	cmp	r3, #1
 800b662:	d907      	bls.n	800b674 <_fwalk_sglue+0x38>
 800b664:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b668:	3301      	adds	r3, #1
 800b66a:	d003      	beq.n	800b674 <_fwalk_sglue+0x38>
 800b66c:	4629      	mov	r1, r5
 800b66e:	4638      	mov	r0, r7
 800b670:	47c0      	blx	r8
 800b672:	4306      	orrs	r6, r0
 800b674:	3568      	adds	r5, #104	; 0x68
 800b676:	e7e9      	b.n	800b64c <_fwalk_sglue+0x10>

0800b678 <iprintf>:
 800b678:	b40f      	push	{r0, r1, r2, r3}
 800b67a:	b507      	push	{r0, r1, r2, lr}
 800b67c:	4906      	ldr	r1, [pc, #24]	; (800b698 <iprintf+0x20>)
 800b67e:	ab04      	add	r3, sp, #16
 800b680:	6808      	ldr	r0, [r1, #0]
 800b682:	f853 2b04 	ldr.w	r2, [r3], #4
 800b686:	6881      	ldr	r1, [r0, #8]
 800b688:	9301      	str	r3, [sp, #4]
 800b68a:	f001 fd3d 	bl	800d108 <_vfiprintf_r>
 800b68e:	b003      	add	sp, #12
 800b690:	f85d eb04 	ldr.w	lr, [sp], #4
 800b694:	b004      	add	sp, #16
 800b696:	4770      	bx	lr
 800b698:	2000007c 	.word	0x2000007c

0800b69c <_puts_r>:
 800b69c:	6a03      	ldr	r3, [r0, #32]
 800b69e:	b570      	push	{r4, r5, r6, lr}
 800b6a0:	6884      	ldr	r4, [r0, #8]
 800b6a2:	4605      	mov	r5, r0
 800b6a4:	460e      	mov	r6, r1
 800b6a6:	b90b      	cbnz	r3, 800b6ac <_puts_r+0x10>
 800b6a8:	f7ff ffb0 	bl	800b60c <__sinit>
 800b6ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6ae:	07db      	lsls	r3, r3, #31
 800b6b0:	d405      	bmi.n	800b6be <_puts_r+0x22>
 800b6b2:	89a3      	ldrh	r3, [r4, #12]
 800b6b4:	0598      	lsls	r0, r3, #22
 800b6b6:	d402      	bmi.n	800b6be <_puts_r+0x22>
 800b6b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6ba:	f000 f9f5 	bl	800baa8 <__retarget_lock_acquire_recursive>
 800b6be:	89a3      	ldrh	r3, [r4, #12]
 800b6c0:	0719      	lsls	r1, r3, #28
 800b6c2:	d513      	bpl.n	800b6ec <_puts_r+0x50>
 800b6c4:	6923      	ldr	r3, [r4, #16]
 800b6c6:	b18b      	cbz	r3, 800b6ec <_puts_r+0x50>
 800b6c8:	3e01      	subs	r6, #1
 800b6ca:	68a3      	ldr	r3, [r4, #8]
 800b6cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b6d0:	3b01      	subs	r3, #1
 800b6d2:	60a3      	str	r3, [r4, #8]
 800b6d4:	b9e9      	cbnz	r1, 800b712 <_puts_r+0x76>
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	da2e      	bge.n	800b738 <_puts_r+0x9c>
 800b6da:	4622      	mov	r2, r4
 800b6dc:	210a      	movs	r1, #10
 800b6de:	4628      	mov	r0, r5
 800b6e0:	f000 f87b 	bl	800b7da <__swbuf_r>
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	d007      	beq.n	800b6f8 <_puts_r+0x5c>
 800b6e8:	250a      	movs	r5, #10
 800b6ea:	e007      	b.n	800b6fc <_puts_r+0x60>
 800b6ec:	4621      	mov	r1, r4
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	f000 f8b0 	bl	800b854 <__swsetup_r>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d0e7      	beq.n	800b6c8 <_puts_r+0x2c>
 800b6f8:	f04f 35ff 	mov.w	r5, #4294967295
 800b6fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6fe:	07da      	lsls	r2, r3, #31
 800b700:	d405      	bmi.n	800b70e <_puts_r+0x72>
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	059b      	lsls	r3, r3, #22
 800b706:	d402      	bmi.n	800b70e <_puts_r+0x72>
 800b708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b70a:	f000 f9ce 	bl	800baaa <__retarget_lock_release_recursive>
 800b70e:	4628      	mov	r0, r5
 800b710:	bd70      	pop	{r4, r5, r6, pc}
 800b712:	2b00      	cmp	r3, #0
 800b714:	da04      	bge.n	800b720 <_puts_r+0x84>
 800b716:	69a2      	ldr	r2, [r4, #24]
 800b718:	429a      	cmp	r2, r3
 800b71a:	dc06      	bgt.n	800b72a <_puts_r+0x8e>
 800b71c:	290a      	cmp	r1, #10
 800b71e:	d004      	beq.n	800b72a <_puts_r+0x8e>
 800b720:	6823      	ldr	r3, [r4, #0]
 800b722:	1c5a      	adds	r2, r3, #1
 800b724:	6022      	str	r2, [r4, #0]
 800b726:	7019      	strb	r1, [r3, #0]
 800b728:	e7cf      	b.n	800b6ca <_puts_r+0x2e>
 800b72a:	4622      	mov	r2, r4
 800b72c:	4628      	mov	r0, r5
 800b72e:	f000 f854 	bl	800b7da <__swbuf_r>
 800b732:	3001      	adds	r0, #1
 800b734:	d1c9      	bne.n	800b6ca <_puts_r+0x2e>
 800b736:	e7df      	b.n	800b6f8 <_puts_r+0x5c>
 800b738:	6823      	ldr	r3, [r4, #0]
 800b73a:	250a      	movs	r5, #10
 800b73c:	1c5a      	adds	r2, r3, #1
 800b73e:	6022      	str	r2, [r4, #0]
 800b740:	701d      	strb	r5, [r3, #0]
 800b742:	e7db      	b.n	800b6fc <_puts_r+0x60>

0800b744 <puts>:
 800b744:	4b02      	ldr	r3, [pc, #8]	; (800b750 <puts+0xc>)
 800b746:	4601      	mov	r1, r0
 800b748:	6818      	ldr	r0, [r3, #0]
 800b74a:	f7ff bfa7 	b.w	800b69c <_puts_r>
 800b74e:	bf00      	nop
 800b750:	2000007c 	.word	0x2000007c

0800b754 <__sread>:
 800b754:	b510      	push	{r4, lr}
 800b756:	460c      	mov	r4, r1
 800b758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b75c:	f000 f956 	bl	800ba0c <_read_r>
 800b760:	2800      	cmp	r0, #0
 800b762:	bfab      	itete	ge
 800b764:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b766:	89a3      	ldrhlt	r3, [r4, #12]
 800b768:	181b      	addge	r3, r3, r0
 800b76a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b76e:	bfac      	ite	ge
 800b770:	6563      	strge	r3, [r4, #84]	; 0x54
 800b772:	81a3      	strhlt	r3, [r4, #12]
 800b774:	bd10      	pop	{r4, pc}

0800b776 <__swrite>:
 800b776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b77a:	461f      	mov	r7, r3
 800b77c:	898b      	ldrh	r3, [r1, #12]
 800b77e:	05db      	lsls	r3, r3, #23
 800b780:	4605      	mov	r5, r0
 800b782:	460c      	mov	r4, r1
 800b784:	4616      	mov	r6, r2
 800b786:	d505      	bpl.n	800b794 <__swrite+0x1e>
 800b788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b78c:	2302      	movs	r3, #2
 800b78e:	2200      	movs	r2, #0
 800b790:	f000 f92a 	bl	800b9e8 <_lseek_r>
 800b794:	89a3      	ldrh	r3, [r4, #12]
 800b796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b79a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b79e:	81a3      	strh	r3, [r4, #12]
 800b7a0:	4632      	mov	r2, r6
 800b7a2:	463b      	mov	r3, r7
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7aa:	f000 b941 	b.w	800ba30 <_write_r>

0800b7ae <__sseek>:
 800b7ae:	b510      	push	{r4, lr}
 800b7b0:	460c      	mov	r4, r1
 800b7b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7b6:	f000 f917 	bl	800b9e8 <_lseek_r>
 800b7ba:	1c43      	adds	r3, r0, #1
 800b7bc:	89a3      	ldrh	r3, [r4, #12]
 800b7be:	bf15      	itete	ne
 800b7c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7ca:	81a3      	strheq	r3, [r4, #12]
 800b7cc:	bf18      	it	ne
 800b7ce:	81a3      	strhne	r3, [r4, #12]
 800b7d0:	bd10      	pop	{r4, pc}

0800b7d2 <__sclose>:
 800b7d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d6:	f000 b8a1 	b.w	800b91c <_close_r>

0800b7da <__swbuf_r>:
 800b7da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7dc:	460e      	mov	r6, r1
 800b7de:	4614      	mov	r4, r2
 800b7e0:	4605      	mov	r5, r0
 800b7e2:	b118      	cbz	r0, 800b7ec <__swbuf_r+0x12>
 800b7e4:	6a03      	ldr	r3, [r0, #32]
 800b7e6:	b90b      	cbnz	r3, 800b7ec <__swbuf_r+0x12>
 800b7e8:	f7ff ff10 	bl	800b60c <__sinit>
 800b7ec:	69a3      	ldr	r3, [r4, #24]
 800b7ee:	60a3      	str	r3, [r4, #8]
 800b7f0:	89a3      	ldrh	r3, [r4, #12]
 800b7f2:	071a      	lsls	r2, r3, #28
 800b7f4:	d525      	bpl.n	800b842 <__swbuf_r+0x68>
 800b7f6:	6923      	ldr	r3, [r4, #16]
 800b7f8:	b31b      	cbz	r3, 800b842 <__swbuf_r+0x68>
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	6922      	ldr	r2, [r4, #16]
 800b7fe:	1a98      	subs	r0, r3, r2
 800b800:	6963      	ldr	r3, [r4, #20]
 800b802:	b2f6      	uxtb	r6, r6
 800b804:	4283      	cmp	r3, r0
 800b806:	4637      	mov	r7, r6
 800b808:	dc04      	bgt.n	800b814 <__swbuf_r+0x3a>
 800b80a:	4621      	mov	r1, r4
 800b80c:	4628      	mov	r0, r5
 800b80e:	f001 fe1b 	bl	800d448 <_fflush_r>
 800b812:	b9e0      	cbnz	r0, 800b84e <__swbuf_r+0x74>
 800b814:	68a3      	ldr	r3, [r4, #8]
 800b816:	3b01      	subs	r3, #1
 800b818:	60a3      	str	r3, [r4, #8]
 800b81a:	6823      	ldr	r3, [r4, #0]
 800b81c:	1c5a      	adds	r2, r3, #1
 800b81e:	6022      	str	r2, [r4, #0]
 800b820:	701e      	strb	r6, [r3, #0]
 800b822:	6962      	ldr	r2, [r4, #20]
 800b824:	1c43      	adds	r3, r0, #1
 800b826:	429a      	cmp	r2, r3
 800b828:	d004      	beq.n	800b834 <__swbuf_r+0x5a>
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	07db      	lsls	r3, r3, #31
 800b82e:	d506      	bpl.n	800b83e <__swbuf_r+0x64>
 800b830:	2e0a      	cmp	r6, #10
 800b832:	d104      	bne.n	800b83e <__swbuf_r+0x64>
 800b834:	4621      	mov	r1, r4
 800b836:	4628      	mov	r0, r5
 800b838:	f001 fe06 	bl	800d448 <_fflush_r>
 800b83c:	b938      	cbnz	r0, 800b84e <__swbuf_r+0x74>
 800b83e:	4638      	mov	r0, r7
 800b840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b842:	4621      	mov	r1, r4
 800b844:	4628      	mov	r0, r5
 800b846:	f000 f805 	bl	800b854 <__swsetup_r>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	d0d5      	beq.n	800b7fa <__swbuf_r+0x20>
 800b84e:	f04f 37ff 	mov.w	r7, #4294967295
 800b852:	e7f4      	b.n	800b83e <__swbuf_r+0x64>

0800b854 <__swsetup_r>:
 800b854:	b538      	push	{r3, r4, r5, lr}
 800b856:	4b2a      	ldr	r3, [pc, #168]	; (800b900 <__swsetup_r+0xac>)
 800b858:	4605      	mov	r5, r0
 800b85a:	6818      	ldr	r0, [r3, #0]
 800b85c:	460c      	mov	r4, r1
 800b85e:	b118      	cbz	r0, 800b868 <__swsetup_r+0x14>
 800b860:	6a03      	ldr	r3, [r0, #32]
 800b862:	b90b      	cbnz	r3, 800b868 <__swsetup_r+0x14>
 800b864:	f7ff fed2 	bl	800b60c <__sinit>
 800b868:	89a3      	ldrh	r3, [r4, #12]
 800b86a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b86e:	0718      	lsls	r0, r3, #28
 800b870:	d422      	bmi.n	800b8b8 <__swsetup_r+0x64>
 800b872:	06d9      	lsls	r1, r3, #27
 800b874:	d407      	bmi.n	800b886 <__swsetup_r+0x32>
 800b876:	2309      	movs	r3, #9
 800b878:	602b      	str	r3, [r5, #0]
 800b87a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b87e:	81a3      	strh	r3, [r4, #12]
 800b880:	f04f 30ff 	mov.w	r0, #4294967295
 800b884:	e034      	b.n	800b8f0 <__swsetup_r+0x9c>
 800b886:	0758      	lsls	r0, r3, #29
 800b888:	d512      	bpl.n	800b8b0 <__swsetup_r+0x5c>
 800b88a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b88c:	b141      	cbz	r1, 800b8a0 <__swsetup_r+0x4c>
 800b88e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b892:	4299      	cmp	r1, r3
 800b894:	d002      	beq.n	800b89c <__swsetup_r+0x48>
 800b896:	4628      	mov	r0, r5
 800b898:	f000 ff90 	bl	800c7bc <_free_r>
 800b89c:	2300      	movs	r3, #0
 800b89e:	6363      	str	r3, [r4, #52]	; 0x34
 800b8a0:	89a3      	ldrh	r3, [r4, #12]
 800b8a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b8a6:	81a3      	strh	r3, [r4, #12]
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	6063      	str	r3, [r4, #4]
 800b8ac:	6923      	ldr	r3, [r4, #16]
 800b8ae:	6023      	str	r3, [r4, #0]
 800b8b0:	89a3      	ldrh	r3, [r4, #12]
 800b8b2:	f043 0308 	orr.w	r3, r3, #8
 800b8b6:	81a3      	strh	r3, [r4, #12]
 800b8b8:	6923      	ldr	r3, [r4, #16]
 800b8ba:	b94b      	cbnz	r3, 800b8d0 <__swsetup_r+0x7c>
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b8c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8c6:	d003      	beq.n	800b8d0 <__swsetup_r+0x7c>
 800b8c8:	4621      	mov	r1, r4
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	f001 fe0a 	bl	800d4e4 <__smakebuf_r>
 800b8d0:	89a0      	ldrh	r0, [r4, #12]
 800b8d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8d6:	f010 0301 	ands.w	r3, r0, #1
 800b8da:	d00a      	beq.n	800b8f2 <__swsetup_r+0x9e>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	60a3      	str	r3, [r4, #8]
 800b8e0:	6963      	ldr	r3, [r4, #20]
 800b8e2:	425b      	negs	r3, r3
 800b8e4:	61a3      	str	r3, [r4, #24]
 800b8e6:	6923      	ldr	r3, [r4, #16]
 800b8e8:	b943      	cbnz	r3, 800b8fc <__swsetup_r+0xa8>
 800b8ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b8ee:	d1c4      	bne.n	800b87a <__swsetup_r+0x26>
 800b8f0:	bd38      	pop	{r3, r4, r5, pc}
 800b8f2:	0781      	lsls	r1, r0, #30
 800b8f4:	bf58      	it	pl
 800b8f6:	6963      	ldrpl	r3, [r4, #20]
 800b8f8:	60a3      	str	r3, [r4, #8]
 800b8fa:	e7f4      	b.n	800b8e6 <__swsetup_r+0x92>
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	e7f7      	b.n	800b8f0 <__swsetup_r+0x9c>
 800b900:	2000007c 	.word	0x2000007c

0800b904 <memset>:
 800b904:	4402      	add	r2, r0
 800b906:	4603      	mov	r3, r0
 800b908:	4293      	cmp	r3, r2
 800b90a:	d100      	bne.n	800b90e <memset+0xa>
 800b90c:	4770      	bx	lr
 800b90e:	f803 1b01 	strb.w	r1, [r3], #1
 800b912:	e7f9      	b.n	800b908 <memset+0x4>

0800b914 <_localeconv_r>:
 800b914:	4800      	ldr	r0, [pc, #0]	; (800b918 <_localeconv_r+0x4>)
 800b916:	4770      	bx	lr
 800b918:	20000170 	.word	0x20000170

0800b91c <_close_r>:
 800b91c:	b538      	push	{r3, r4, r5, lr}
 800b91e:	4d06      	ldr	r5, [pc, #24]	; (800b938 <_close_r+0x1c>)
 800b920:	2300      	movs	r3, #0
 800b922:	4604      	mov	r4, r0
 800b924:	4608      	mov	r0, r1
 800b926:	602b      	str	r3, [r5, #0]
 800b928:	f7f7 fd79 	bl	800341e <_close>
 800b92c:	1c43      	adds	r3, r0, #1
 800b92e:	d102      	bne.n	800b936 <_close_r+0x1a>
 800b930:	682b      	ldr	r3, [r5, #0]
 800b932:	b103      	cbz	r3, 800b936 <_close_r+0x1a>
 800b934:	6023      	str	r3, [r4, #0]
 800b936:	bd38      	pop	{r3, r4, r5, pc}
 800b938:	20004da0 	.word	0x20004da0

0800b93c <_reclaim_reent>:
 800b93c:	4b29      	ldr	r3, [pc, #164]	; (800b9e4 <_reclaim_reent+0xa8>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4283      	cmp	r3, r0
 800b942:	b570      	push	{r4, r5, r6, lr}
 800b944:	4604      	mov	r4, r0
 800b946:	d04b      	beq.n	800b9e0 <_reclaim_reent+0xa4>
 800b948:	69c3      	ldr	r3, [r0, #28]
 800b94a:	b143      	cbz	r3, 800b95e <_reclaim_reent+0x22>
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d144      	bne.n	800b9dc <_reclaim_reent+0xa0>
 800b952:	69e3      	ldr	r3, [r4, #28]
 800b954:	6819      	ldr	r1, [r3, #0]
 800b956:	b111      	cbz	r1, 800b95e <_reclaim_reent+0x22>
 800b958:	4620      	mov	r0, r4
 800b95a:	f000 ff2f 	bl	800c7bc <_free_r>
 800b95e:	6961      	ldr	r1, [r4, #20]
 800b960:	b111      	cbz	r1, 800b968 <_reclaim_reent+0x2c>
 800b962:	4620      	mov	r0, r4
 800b964:	f000 ff2a 	bl	800c7bc <_free_r>
 800b968:	69e1      	ldr	r1, [r4, #28]
 800b96a:	b111      	cbz	r1, 800b972 <_reclaim_reent+0x36>
 800b96c:	4620      	mov	r0, r4
 800b96e:	f000 ff25 	bl	800c7bc <_free_r>
 800b972:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b974:	b111      	cbz	r1, 800b97c <_reclaim_reent+0x40>
 800b976:	4620      	mov	r0, r4
 800b978:	f000 ff20 	bl	800c7bc <_free_r>
 800b97c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b97e:	b111      	cbz	r1, 800b986 <_reclaim_reent+0x4a>
 800b980:	4620      	mov	r0, r4
 800b982:	f000 ff1b 	bl	800c7bc <_free_r>
 800b986:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b988:	b111      	cbz	r1, 800b990 <_reclaim_reent+0x54>
 800b98a:	4620      	mov	r0, r4
 800b98c:	f000 ff16 	bl	800c7bc <_free_r>
 800b990:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b992:	b111      	cbz	r1, 800b99a <_reclaim_reent+0x5e>
 800b994:	4620      	mov	r0, r4
 800b996:	f000 ff11 	bl	800c7bc <_free_r>
 800b99a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b99c:	b111      	cbz	r1, 800b9a4 <_reclaim_reent+0x68>
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f000 ff0c 	bl	800c7bc <_free_r>
 800b9a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b9a6:	b111      	cbz	r1, 800b9ae <_reclaim_reent+0x72>
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	f000 ff07 	bl	800c7bc <_free_r>
 800b9ae:	6a23      	ldr	r3, [r4, #32]
 800b9b0:	b1b3      	cbz	r3, 800b9e0 <_reclaim_reent+0xa4>
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b9b8:	4718      	bx	r3
 800b9ba:	5949      	ldr	r1, [r1, r5]
 800b9bc:	b941      	cbnz	r1, 800b9d0 <_reclaim_reent+0x94>
 800b9be:	3504      	adds	r5, #4
 800b9c0:	69e3      	ldr	r3, [r4, #28]
 800b9c2:	2d80      	cmp	r5, #128	; 0x80
 800b9c4:	68d9      	ldr	r1, [r3, #12]
 800b9c6:	d1f8      	bne.n	800b9ba <_reclaim_reent+0x7e>
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f000 fef7 	bl	800c7bc <_free_r>
 800b9ce:	e7c0      	b.n	800b952 <_reclaim_reent+0x16>
 800b9d0:	680e      	ldr	r6, [r1, #0]
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f000 fef2 	bl	800c7bc <_free_r>
 800b9d8:	4631      	mov	r1, r6
 800b9da:	e7ef      	b.n	800b9bc <_reclaim_reent+0x80>
 800b9dc:	2500      	movs	r5, #0
 800b9de:	e7ef      	b.n	800b9c0 <_reclaim_reent+0x84>
 800b9e0:	bd70      	pop	{r4, r5, r6, pc}
 800b9e2:	bf00      	nop
 800b9e4:	2000007c 	.word	0x2000007c

0800b9e8 <_lseek_r>:
 800b9e8:	b538      	push	{r3, r4, r5, lr}
 800b9ea:	4d07      	ldr	r5, [pc, #28]	; (800ba08 <_lseek_r+0x20>)
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	4608      	mov	r0, r1
 800b9f0:	4611      	mov	r1, r2
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	602a      	str	r2, [r5, #0]
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	f7f7 fd38 	bl	800346c <_lseek>
 800b9fc:	1c43      	adds	r3, r0, #1
 800b9fe:	d102      	bne.n	800ba06 <_lseek_r+0x1e>
 800ba00:	682b      	ldr	r3, [r5, #0]
 800ba02:	b103      	cbz	r3, 800ba06 <_lseek_r+0x1e>
 800ba04:	6023      	str	r3, [r4, #0]
 800ba06:	bd38      	pop	{r3, r4, r5, pc}
 800ba08:	20004da0 	.word	0x20004da0

0800ba0c <_read_r>:
 800ba0c:	b538      	push	{r3, r4, r5, lr}
 800ba0e:	4d07      	ldr	r5, [pc, #28]	; (800ba2c <_read_r+0x20>)
 800ba10:	4604      	mov	r4, r0
 800ba12:	4608      	mov	r0, r1
 800ba14:	4611      	mov	r1, r2
 800ba16:	2200      	movs	r2, #0
 800ba18:	602a      	str	r2, [r5, #0]
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	f7f7 fce2 	bl	80033e4 <_read>
 800ba20:	1c43      	adds	r3, r0, #1
 800ba22:	d102      	bne.n	800ba2a <_read_r+0x1e>
 800ba24:	682b      	ldr	r3, [r5, #0]
 800ba26:	b103      	cbz	r3, 800ba2a <_read_r+0x1e>
 800ba28:	6023      	str	r3, [r4, #0]
 800ba2a:	bd38      	pop	{r3, r4, r5, pc}
 800ba2c:	20004da0 	.word	0x20004da0

0800ba30 <_write_r>:
 800ba30:	b538      	push	{r3, r4, r5, lr}
 800ba32:	4d07      	ldr	r5, [pc, #28]	; (800ba50 <_write_r+0x20>)
 800ba34:	4604      	mov	r4, r0
 800ba36:	4608      	mov	r0, r1
 800ba38:	4611      	mov	r1, r2
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	602a      	str	r2, [r5, #0]
 800ba3e:	461a      	mov	r2, r3
 800ba40:	f7f7 f966 	bl	8002d10 <_write>
 800ba44:	1c43      	adds	r3, r0, #1
 800ba46:	d102      	bne.n	800ba4e <_write_r+0x1e>
 800ba48:	682b      	ldr	r3, [r5, #0]
 800ba4a:	b103      	cbz	r3, 800ba4e <_write_r+0x1e>
 800ba4c:	6023      	str	r3, [r4, #0]
 800ba4e:	bd38      	pop	{r3, r4, r5, pc}
 800ba50:	20004da0 	.word	0x20004da0

0800ba54 <__errno>:
 800ba54:	4b01      	ldr	r3, [pc, #4]	; (800ba5c <__errno+0x8>)
 800ba56:	6818      	ldr	r0, [r3, #0]
 800ba58:	4770      	bx	lr
 800ba5a:	bf00      	nop
 800ba5c:	2000007c 	.word	0x2000007c

0800ba60 <__libc_init_array>:
 800ba60:	b570      	push	{r4, r5, r6, lr}
 800ba62:	4d0d      	ldr	r5, [pc, #52]	; (800ba98 <__libc_init_array+0x38>)
 800ba64:	4c0d      	ldr	r4, [pc, #52]	; (800ba9c <__libc_init_array+0x3c>)
 800ba66:	1b64      	subs	r4, r4, r5
 800ba68:	10a4      	asrs	r4, r4, #2
 800ba6a:	2600      	movs	r6, #0
 800ba6c:	42a6      	cmp	r6, r4
 800ba6e:	d109      	bne.n	800ba84 <__libc_init_array+0x24>
 800ba70:	4d0b      	ldr	r5, [pc, #44]	; (800baa0 <__libc_init_array+0x40>)
 800ba72:	4c0c      	ldr	r4, [pc, #48]	; (800baa4 <__libc_init_array+0x44>)
 800ba74:	f002 fd90 	bl	800e598 <_init>
 800ba78:	1b64      	subs	r4, r4, r5
 800ba7a:	10a4      	asrs	r4, r4, #2
 800ba7c:	2600      	movs	r6, #0
 800ba7e:	42a6      	cmp	r6, r4
 800ba80:	d105      	bne.n	800ba8e <__libc_init_array+0x2e>
 800ba82:	bd70      	pop	{r4, r5, r6, pc}
 800ba84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba88:	4798      	blx	r3
 800ba8a:	3601      	adds	r6, #1
 800ba8c:	e7ee      	b.n	800ba6c <__libc_init_array+0xc>
 800ba8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba92:	4798      	blx	r3
 800ba94:	3601      	adds	r6, #1
 800ba96:	e7f2      	b.n	800ba7e <__libc_init_array+0x1e>
 800ba98:	0800ed38 	.word	0x0800ed38
 800ba9c:	0800ed38 	.word	0x0800ed38
 800baa0:	0800ed38 	.word	0x0800ed38
 800baa4:	0800ed3c 	.word	0x0800ed3c

0800baa8 <__retarget_lock_acquire_recursive>:
 800baa8:	4770      	bx	lr

0800baaa <__retarget_lock_release_recursive>:
 800baaa:	4770      	bx	lr

0800baac <memcpy>:
 800baac:	440a      	add	r2, r1
 800baae:	4291      	cmp	r1, r2
 800bab0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bab4:	d100      	bne.n	800bab8 <memcpy+0xc>
 800bab6:	4770      	bx	lr
 800bab8:	b510      	push	{r4, lr}
 800baba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800babe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bac2:	4291      	cmp	r1, r2
 800bac4:	d1f9      	bne.n	800baba <memcpy+0xe>
 800bac6:	bd10      	pop	{r4, pc}

0800bac8 <quorem>:
 800bac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bacc:	6903      	ldr	r3, [r0, #16]
 800bace:	690c      	ldr	r4, [r1, #16]
 800bad0:	42a3      	cmp	r3, r4
 800bad2:	4607      	mov	r7, r0
 800bad4:	db7e      	blt.n	800bbd4 <quorem+0x10c>
 800bad6:	3c01      	subs	r4, #1
 800bad8:	f101 0814 	add.w	r8, r1, #20
 800badc:	f100 0514 	add.w	r5, r0, #20
 800bae0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bae4:	9301      	str	r3, [sp, #4]
 800bae6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800baea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800baee:	3301      	adds	r3, #1
 800baf0:	429a      	cmp	r2, r3
 800baf2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800baf6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bafa:	fbb2 f6f3 	udiv	r6, r2, r3
 800bafe:	d331      	bcc.n	800bb64 <quorem+0x9c>
 800bb00:	f04f 0e00 	mov.w	lr, #0
 800bb04:	4640      	mov	r0, r8
 800bb06:	46ac      	mov	ip, r5
 800bb08:	46f2      	mov	sl, lr
 800bb0a:	f850 2b04 	ldr.w	r2, [r0], #4
 800bb0e:	b293      	uxth	r3, r2
 800bb10:	fb06 e303 	mla	r3, r6, r3, lr
 800bb14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bb18:	0c1a      	lsrs	r2, r3, #16
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	ebaa 0303 	sub.w	r3, sl, r3
 800bb20:	f8dc a000 	ldr.w	sl, [ip]
 800bb24:	fa13 f38a 	uxtah	r3, r3, sl
 800bb28:	fb06 220e 	mla	r2, r6, lr, r2
 800bb2c:	9300      	str	r3, [sp, #0]
 800bb2e:	9b00      	ldr	r3, [sp, #0]
 800bb30:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bb34:	b292      	uxth	r2, r2
 800bb36:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bb3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb3e:	f8bd 3000 	ldrh.w	r3, [sp]
 800bb42:	4581      	cmp	r9, r0
 800bb44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb48:	f84c 3b04 	str.w	r3, [ip], #4
 800bb4c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bb50:	d2db      	bcs.n	800bb0a <quorem+0x42>
 800bb52:	f855 300b 	ldr.w	r3, [r5, fp]
 800bb56:	b92b      	cbnz	r3, 800bb64 <quorem+0x9c>
 800bb58:	9b01      	ldr	r3, [sp, #4]
 800bb5a:	3b04      	subs	r3, #4
 800bb5c:	429d      	cmp	r5, r3
 800bb5e:	461a      	mov	r2, r3
 800bb60:	d32c      	bcc.n	800bbbc <quorem+0xf4>
 800bb62:	613c      	str	r4, [r7, #16]
 800bb64:	4638      	mov	r0, r7
 800bb66:	f001 f9a5 	bl	800ceb4 <__mcmp>
 800bb6a:	2800      	cmp	r0, #0
 800bb6c:	db22      	blt.n	800bbb4 <quorem+0xec>
 800bb6e:	3601      	adds	r6, #1
 800bb70:	4629      	mov	r1, r5
 800bb72:	2000      	movs	r0, #0
 800bb74:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb78:	f8d1 c000 	ldr.w	ip, [r1]
 800bb7c:	b293      	uxth	r3, r2
 800bb7e:	1ac3      	subs	r3, r0, r3
 800bb80:	0c12      	lsrs	r2, r2, #16
 800bb82:	fa13 f38c 	uxtah	r3, r3, ip
 800bb86:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bb8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb94:	45c1      	cmp	r9, r8
 800bb96:	f841 3b04 	str.w	r3, [r1], #4
 800bb9a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bb9e:	d2e9      	bcs.n	800bb74 <quorem+0xac>
 800bba0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bba4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bba8:	b922      	cbnz	r2, 800bbb4 <quorem+0xec>
 800bbaa:	3b04      	subs	r3, #4
 800bbac:	429d      	cmp	r5, r3
 800bbae:	461a      	mov	r2, r3
 800bbb0:	d30a      	bcc.n	800bbc8 <quorem+0x100>
 800bbb2:	613c      	str	r4, [r7, #16]
 800bbb4:	4630      	mov	r0, r6
 800bbb6:	b003      	add	sp, #12
 800bbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbbc:	6812      	ldr	r2, [r2, #0]
 800bbbe:	3b04      	subs	r3, #4
 800bbc0:	2a00      	cmp	r2, #0
 800bbc2:	d1ce      	bne.n	800bb62 <quorem+0x9a>
 800bbc4:	3c01      	subs	r4, #1
 800bbc6:	e7c9      	b.n	800bb5c <quorem+0x94>
 800bbc8:	6812      	ldr	r2, [r2, #0]
 800bbca:	3b04      	subs	r3, #4
 800bbcc:	2a00      	cmp	r2, #0
 800bbce:	d1f0      	bne.n	800bbb2 <quorem+0xea>
 800bbd0:	3c01      	subs	r4, #1
 800bbd2:	e7eb      	b.n	800bbac <quorem+0xe4>
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	e7ee      	b.n	800bbb6 <quorem+0xee>

0800bbd8 <_dtoa_r>:
 800bbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbdc:	ed2d 8b04 	vpush	{d8-d9}
 800bbe0:	69c5      	ldr	r5, [r0, #28]
 800bbe2:	b093      	sub	sp, #76	; 0x4c
 800bbe4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bbe8:	ec57 6b10 	vmov	r6, r7, d0
 800bbec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bbf0:	9107      	str	r1, [sp, #28]
 800bbf2:	4604      	mov	r4, r0
 800bbf4:	920a      	str	r2, [sp, #40]	; 0x28
 800bbf6:	930d      	str	r3, [sp, #52]	; 0x34
 800bbf8:	b975      	cbnz	r5, 800bc18 <_dtoa_r+0x40>
 800bbfa:	2010      	movs	r0, #16
 800bbfc:	f000 fe2a 	bl	800c854 <malloc>
 800bc00:	4602      	mov	r2, r0
 800bc02:	61e0      	str	r0, [r4, #28]
 800bc04:	b920      	cbnz	r0, 800bc10 <_dtoa_r+0x38>
 800bc06:	4bae      	ldr	r3, [pc, #696]	; (800bec0 <_dtoa_r+0x2e8>)
 800bc08:	21ef      	movs	r1, #239	; 0xef
 800bc0a:	48ae      	ldr	r0, [pc, #696]	; (800bec4 <_dtoa_r+0x2ec>)
 800bc0c:	f001 fcd8 	bl	800d5c0 <__assert_func>
 800bc10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bc14:	6005      	str	r5, [r0, #0]
 800bc16:	60c5      	str	r5, [r0, #12]
 800bc18:	69e3      	ldr	r3, [r4, #28]
 800bc1a:	6819      	ldr	r1, [r3, #0]
 800bc1c:	b151      	cbz	r1, 800bc34 <_dtoa_r+0x5c>
 800bc1e:	685a      	ldr	r2, [r3, #4]
 800bc20:	604a      	str	r2, [r1, #4]
 800bc22:	2301      	movs	r3, #1
 800bc24:	4093      	lsls	r3, r2
 800bc26:	608b      	str	r3, [r1, #8]
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f000 ff07 	bl	800ca3c <_Bfree>
 800bc2e:	69e3      	ldr	r3, [r4, #28]
 800bc30:	2200      	movs	r2, #0
 800bc32:	601a      	str	r2, [r3, #0]
 800bc34:	1e3b      	subs	r3, r7, #0
 800bc36:	bfbb      	ittet	lt
 800bc38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bc3c:	9303      	strlt	r3, [sp, #12]
 800bc3e:	2300      	movge	r3, #0
 800bc40:	2201      	movlt	r2, #1
 800bc42:	bfac      	ite	ge
 800bc44:	f8c8 3000 	strge.w	r3, [r8]
 800bc48:	f8c8 2000 	strlt.w	r2, [r8]
 800bc4c:	4b9e      	ldr	r3, [pc, #632]	; (800bec8 <_dtoa_r+0x2f0>)
 800bc4e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bc52:	ea33 0308 	bics.w	r3, r3, r8
 800bc56:	d11b      	bne.n	800bc90 <_dtoa_r+0xb8>
 800bc58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc5a:	f242 730f 	movw	r3, #9999	; 0x270f
 800bc5e:	6013      	str	r3, [r2, #0]
 800bc60:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bc64:	4333      	orrs	r3, r6
 800bc66:	f000 8593 	beq.w	800c790 <_dtoa_r+0xbb8>
 800bc6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc6c:	b963      	cbnz	r3, 800bc88 <_dtoa_r+0xb0>
 800bc6e:	4b97      	ldr	r3, [pc, #604]	; (800becc <_dtoa_r+0x2f4>)
 800bc70:	e027      	b.n	800bcc2 <_dtoa_r+0xea>
 800bc72:	4b97      	ldr	r3, [pc, #604]	; (800bed0 <_dtoa_r+0x2f8>)
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	3308      	adds	r3, #8
 800bc78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bc7a:	6013      	str	r3, [r2, #0]
 800bc7c:	9800      	ldr	r0, [sp, #0]
 800bc7e:	b013      	add	sp, #76	; 0x4c
 800bc80:	ecbd 8b04 	vpop	{d8-d9}
 800bc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc88:	4b90      	ldr	r3, [pc, #576]	; (800becc <_dtoa_r+0x2f4>)
 800bc8a:	9300      	str	r3, [sp, #0]
 800bc8c:	3303      	adds	r3, #3
 800bc8e:	e7f3      	b.n	800bc78 <_dtoa_r+0xa0>
 800bc90:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc94:	2200      	movs	r2, #0
 800bc96:	ec51 0b17 	vmov	r0, r1, d7
 800bc9a:	eeb0 8a47 	vmov.f32	s16, s14
 800bc9e:	eef0 8a67 	vmov.f32	s17, s15
 800bca2:	2300      	movs	r3, #0
 800bca4:	f7f4 ff10 	bl	8000ac8 <__aeabi_dcmpeq>
 800bca8:	4681      	mov	r9, r0
 800bcaa:	b160      	cbz	r0, 800bcc6 <_dtoa_r+0xee>
 800bcac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bcae:	2301      	movs	r3, #1
 800bcb0:	6013      	str	r3, [r2, #0]
 800bcb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f000 8568 	beq.w	800c78a <_dtoa_r+0xbb2>
 800bcba:	4b86      	ldr	r3, [pc, #536]	; (800bed4 <_dtoa_r+0x2fc>)
 800bcbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bcbe:	6013      	str	r3, [r2, #0]
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	e7da      	b.n	800bc7c <_dtoa_r+0xa4>
 800bcc6:	aa10      	add	r2, sp, #64	; 0x40
 800bcc8:	a911      	add	r1, sp, #68	; 0x44
 800bcca:	4620      	mov	r0, r4
 800bccc:	eeb0 0a48 	vmov.f32	s0, s16
 800bcd0:	eef0 0a68 	vmov.f32	s1, s17
 800bcd4:	f001 f994 	bl	800d000 <__d2b>
 800bcd8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bcdc:	4682      	mov	sl, r0
 800bcde:	2d00      	cmp	r5, #0
 800bce0:	d07f      	beq.n	800bde2 <_dtoa_r+0x20a>
 800bce2:	ee18 3a90 	vmov	r3, s17
 800bce6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bcea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bcee:	ec51 0b18 	vmov	r0, r1, d8
 800bcf2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bcf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bcfa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bcfe:	4619      	mov	r1, r3
 800bd00:	2200      	movs	r2, #0
 800bd02:	4b75      	ldr	r3, [pc, #468]	; (800bed8 <_dtoa_r+0x300>)
 800bd04:	f7f4 fac0 	bl	8000288 <__aeabi_dsub>
 800bd08:	a367      	add	r3, pc, #412	; (adr r3, 800bea8 <_dtoa_r+0x2d0>)
 800bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0e:	f7f4 fc73 	bl	80005f8 <__aeabi_dmul>
 800bd12:	a367      	add	r3, pc, #412	; (adr r3, 800beb0 <_dtoa_r+0x2d8>)
 800bd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd18:	f7f4 fab8 	bl	800028c <__adddf3>
 800bd1c:	4606      	mov	r6, r0
 800bd1e:	4628      	mov	r0, r5
 800bd20:	460f      	mov	r7, r1
 800bd22:	f7f4 fbff 	bl	8000524 <__aeabi_i2d>
 800bd26:	a364      	add	r3, pc, #400	; (adr r3, 800beb8 <_dtoa_r+0x2e0>)
 800bd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2c:	f7f4 fc64 	bl	80005f8 <__aeabi_dmul>
 800bd30:	4602      	mov	r2, r0
 800bd32:	460b      	mov	r3, r1
 800bd34:	4630      	mov	r0, r6
 800bd36:	4639      	mov	r1, r7
 800bd38:	f7f4 faa8 	bl	800028c <__adddf3>
 800bd3c:	4606      	mov	r6, r0
 800bd3e:	460f      	mov	r7, r1
 800bd40:	f7f4 ff0a 	bl	8000b58 <__aeabi_d2iz>
 800bd44:	2200      	movs	r2, #0
 800bd46:	4683      	mov	fp, r0
 800bd48:	2300      	movs	r3, #0
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	4639      	mov	r1, r7
 800bd4e:	f7f4 fec5 	bl	8000adc <__aeabi_dcmplt>
 800bd52:	b148      	cbz	r0, 800bd68 <_dtoa_r+0x190>
 800bd54:	4658      	mov	r0, fp
 800bd56:	f7f4 fbe5 	bl	8000524 <__aeabi_i2d>
 800bd5a:	4632      	mov	r2, r6
 800bd5c:	463b      	mov	r3, r7
 800bd5e:	f7f4 feb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd62:	b908      	cbnz	r0, 800bd68 <_dtoa_r+0x190>
 800bd64:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd68:	f1bb 0f16 	cmp.w	fp, #22
 800bd6c:	d857      	bhi.n	800be1e <_dtoa_r+0x246>
 800bd6e:	4b5b      	ldr	r3, [pc, #364]	; (800bedc <_dtoa_r+0x304>)
 800bd70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd78:	ec51 0b18 	vmov	r0, r1, d8
 800bd7c:	f7f4 feae 	bl	8000adc <__aeabi_dcmplt>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d04e      	beq.n	800be22 <_dtoa_r+0x24a>
 800bd84:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd88:	2300      	movs	r3, #0
 800bd8a:	930c      	str	r3, [sp, #48]	; 0x30
 800bd8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd8e:	1b5b      	subs	r3, r3, r5
 800bd90:	1e5a      	subs	r2, r3, #1
 800bd92:	bf45      	ittet	mi
 800bd94:	f1c3 0301 	rsbmi	r3, r3, #1
 800bd98:	9305      	strmi	r3, [sp, #20]
 800bd9a:	2300      	movpl	r3, #0
 800bd9c:	2300      	movmi	r3, #0
 800bd9e:	9206      	str	r2, [sp, #24]
 800bda0:	bf54      	ite	pl
 800bda2:	9305      	strpl	r3, [sp, #20]
 800bda4:	9306      	strmi	r3, [sp, #24]
 800bda6:	f1bb 0f00 	cmp.w	fp, #0
 800bdaa:	db3c      	blt.n	800be26 <_dtoa_r+0x24e>
 800bdac:	9b06      	ldr	r3, [sp, #24]
 800bdae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bdb2:	445b      	add	r3, fp
 800bdb4:	9306      	str	r3, [sp, #24]
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	9308      	str	r3, [sp, #32]
 800bdba:	9b07      	ldr	r3, [sp, #28]
 800bdbc:	2b09      	cmp	r3, #9
 800bdbe:	d868      	bhi.n	800be92 <_dtoa_r+0x2ba>
 800bdc0:	2b05      	cmp	r3, #5
 800bdc2:	bfc4      	itt	gt
 800bdc4:	3b04      	subgt	r3, #4
 800bdc6:	9307      	strgt	r3, [sp, #28]
 800bdc8:	9b07      	ldr	r3, [sp, #28]
 800bdca:	f1a3 0302 	sub.w	r3, r3, #2
 800bdce:	bfcc      	ite	gt
 800bdd0:	2500      	movgt	r5, #0
 800bdd2:	2501      	movle	r5, #1
 800bdd4:	2b03      	cmp	r3, #3
 800bdd6:	f200 8085 	bhi.w	800bee4 <_dtoa_r+0x30c>
 800bdda:	e8df f003 	tbb	[pc, r3]
 800bdde:	3b2e      	.short	0x3b2e
 800bde0:	5839      	.short	0x5839
 800bde2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bde6:	441d      	add	r5, r3
 800bde8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bdec:	2b20      	cmp	r3, #32
 800bdee:	bfc1      	itttt	gt
 800bdf0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bdf4:	fa08 f803 	lslgt.w	r8, r8, r3
 800bdf8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bdfc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800be00:	bfd6      	itet	le
 800be02:	f1c3 0320 	rsble	r3, r3, #32
 800be06:	ea48 0003 	orrgt.w	r0, r8, r3
 800be0a:	fa06 f003 	lslle.w	r0, r6, r3
 800be0e:	f7f4 fb79 	bl	8000504 <__aeabi_ui2d>
 800be12:	2201      	movs	r2, #1
 800be14:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800be18:	3d01      	subs	r5, #1
 800be1a:	920e      	str	r2, [sp, #56]	; 0x38
 800be1c:	e76f      	b.n	800bcfe <_dtoa_r+0x126>
 800be1e:	2301      	movs	r3, #1
 800be20:	e7b3      	b.n	800bd8a <_dtoa_r+0x1b2>
 800be22:	900c      	str	r0, [sp, #48]	; 0x30
 800be24:	e7b2      	b.n	800bd8c <_dtoa_r+0x1b4>
 800be26:	9b05      	ldr	r3, [sp, #20]
 800be28:	eba3 030b 	sub.w	r3, r3, fp
 800be2c:	9305      	str	r3, [sp, #20]
 800be2e:	f1cb 0300 	rsb	r3, fp, #0
 800be32:	9308      	str	r3, [sp, #32]
 800be34:	2300      	movs	r3, #0
 800be36:	930b      	str	r3, [sp, #44]	; 0x2c
 800be38:	e7bf      	b.n	800bdba <_dtoa_r+0x1e2>
 800be3a:	2300      	movs	r3, #0
 800be3c:	9309      	str	r3, [sp, #36]	; 0x24
 800be3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be40:	2b00      	cmp	r3, #0
 800be42:	dc52      	bgt.n	800beea <_dtoa_r+0x312>
 800be44:	2301      	movs	r3, #1
 800be46:	9301      	str	r3, [sp, #4]
 800be48:	9304      	str	r3, [sp, #16]
 800be4a:	461a      	mov	r2, r3
 800be4c:	920a      	str	r2, [sp, #40]	; 0x28
 800be4e:	e00b      	b.n	800be68 <_dtoa_r+0x290>
 800be50:	2301      	movs	r3, #1
 800be52:	e7f3      	b.n	800be3c <_dtoa_r+0x264>
 800be54:	2300      	movs	r3, #0
 800be56:	9309      	str	r3, [sp, #36]	; 0x24
 800be58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be5a:	445b      	add	r3, fp
 800be5c:	9301      	str	r3, [sp, #4]
 800be5e:	3301      	adds	r3, #1
 800be60:	2b01      	cmp	r3, #1
 800be62:	9304      	str	r3, [sp, #16]
 800be64:	bfb8      	it	lt
 800be66:	2301      	movlt	r3, #1
 800be68:	69e0      	ldr	r0, [r4, #28]
 800be6a:	2100      	movs	r1, #0
 800be6c:	2204      	movs	r2, #4
 800be6e:	f102 0614 	add.w	r6, r2, #20
 800be72:	429e      	cmp	r6, r3
 800be74:	d93d      	bls.n	800bef2 <_dtoa_r+0x31a>
 800be76:	6041      	str	r1, [r0, #4]
 800be78:	4620      	mov	r0, r4
 800be7a:	f000 fd9f 	bl	800c9bc <_Balloc>
 800be7e:	9000      	str	r0, [sp, #0]
 800be80:	2800      	cmp	r0, #0
 800be82:	d139      	bne.n	800bef8 <_dtoa_r+0x320>
 800be84:	4b16      	ldr	r3, [pc, #88]	; (800bee0 <_dtoa_r+0x308>)
 800be86:	4602      	mov	r2, r0
 800be88:	f240 11af 	movw	r1, #431	; 0x1af
 800be8c:	e6bd      	b.n	800bc0a <_dtoa_r+0x32>
 800be8e:	2301      	movs	r3, #1
 800be90:	e7e1      	b.n	800be56 <_dtoa_r+0x27e>
 800be92:	2501      	movs	r5, #1
 800be94:	2300      	movs	r3, #0
 800be96:	9307      	str	r3, [sp, #28]
 800be98:	9509      	str	r5, [sp, #36]	; 0x24
 800be9a:	f04f 33ff 	mov.w	r3, #4294967295
 800be9e:	9301      	str	r3, [sp, #4]
 800bea0:	9304      	str	r3, [sp, #16]
 800bea2:	2200      	movs	r2, #0
 800bea4:	2312      	movs	r3, #18
 800bea6:	e7d1      	b.n	800be4c <_dtoa_r+0x274>
 800bea8:	636f4361 	.word	0x636f4361
 800beac:	3fd287a7 	.word	0x3fd287a7
 800beb0:	8b60c8b3 	.word	0x8b60c8b3
 800beb4:	3fc68a28 	.word	0x3fc68a28
 800beb8:	509f79fb 	.word	0x509f79fb
 800bebc:	3fd34413 	.word	0x3fd34413
 800bec0:	0800eaca 	.word	0x0800eaca
 800bec4:	0800eae1 	.word	0x0800eae1
 800bec8:	7ff00000 	.word	0x7ff00000
 800becc:	0800eac6 	.word	0x0800eac6
 800bed0:	0800eabd 	.word	0x0800eabd
 800bed4:	0800ea9a 	.word	0x0800ea9a
 800bed8:	3ff80000 	.word	0x3ff80000
 800bedc:	0800ebd0 	.word	0x0800ebd0
 800bee0:	0800eb39 	.word	0x0800eb39
 800bee4:	2301      	movs	r3, #1
 800bee6:	9309      	str	r3, [sp, #36]	; 0x24
 800bee8:	e7d7      	b.n	800be9a <_dtoa_r+0x2c2>
 800beea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beec:	9301      	str	r3, [sp, #4]
 800beee:	9304      	str	r3, [sp, #16]
 800bef0:	e7ba      	b.n	800be68 <_dtoa_r+0x290>
 800bef2:	3101      	adds	r1, #1
 800bef4:	0052      	lsls	r2, r2, #1
 800bef6:	e7ba      	b.n	800be6e <_dtoa_r+0x296>
 800bef8:	69e3      	ldr	r3, [r4, #28]
 800befa:	9a00      	ldr	r2, [sp, #0]
 800befc:	601a      	str	r2, [r3, #0]
 800befe:	9b04      	ldr	r3, [sp, #16]
 800bf00:	2b0e      	cmp	r3, #14
 800bf02:	f200 80a8 	bhi.w	800c056 <_dtoa_r+0x47e>
 800bf06:	2d00      	cmp	r5, #0
 800bf08:	f000 80a5 	beq.w	800c056 <_dtoa_r+0x47e>
 800bf0c:	f1bb 0f00 	cmp.w	fp, #0
 800bf10:	dd38      	ble.n	800bf84 <_dtoa_r+0x3ac>
 800bf12:	4bc0      	ldr	r3, [pc, #768]	; (800c214 <_dtoa_r+0x63c>)
 800bf14:	f00b 020f 	and.w	r2, fp, #15
 800bf18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf1c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bf20:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bf24:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bf28:	d019      	beq.n	800bf5e <_dtoa_r+0x386>
 800bf2a:	4bbb      	ldr	r3, [pc, #748]	; (800c218 <_dtoa_r+0x640>)
 800bf2c:	ec51 0b18 	vmov	r0, r1, d8
 800bf30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf34:	f7f4 fc8a 	bl	800084c <__aeabi_ddiv>
 800bf38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf3c:	f008 080f 	and.w	r8, r8, #15
 800bf40:	2503      	movs	r5, #3
 800bf42:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c218 <_dtoa_r+0x640>
 800bf46:	f1b8 0f00 	cmp.w	r8, #0
 800bf4a:	d10a      	bne.n	800bf62 <_dtoa_r+0x38a>
 800bf4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf50:	4632      	mov	r2, r6
 800bf52:	463b      	mov	r3, r7
 800bf54:	f7f4 fc7a 	bl	800084c <__aeabi_ddiv>
 800bf58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf5c:	e02b      	b.n	800bfb6 <_dtoa_r+0x3de>
 800bf5e:	2502      	movs	r5, #2
 800bf60:	e7ef      	b.n	800bf42 <_dtoa_r+0x36a>
 800bf62:	f018 0f01 	tst.w	r8, #1
 800bf66:	d008      	beq.n	800bf7a <_dtoa_r+0x3a2>
 800bf68:	4630      	mov	r0, r6
 800bf6a:	4639      	mov	r1, r7
 800bf6c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bf70:	f7f4 fb42 	bl	80005f8 <__aeabi_dmul>
 800bf74:	3501      	adds	r5, #1
 800bf76:	4606      	mov	r6, r0
 800bf78:	460f      	mov	r7, r1
 800bf7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bf7e:	f109 0908 	add.w	r9, r9, #8
 800bf82:	e7e0      	b.n	800bf46 <_dtoa_r+0x36e>
 800bf84:	f000 809f 	beq.w	800c0c6 <_dtoa_r+0x4ee>
 800bf88:	f1cb 0600 	rsb	r6, fp, #0
 800bf8c:	4ba1      	ldr	r3, [pc, #644]	; (800c214 <_dtoa_r+0x63c>)
 800bf8e:	4fa2      	ldr	r7, [pc, #648]	; (800c218 <_dtoa_r+0x640>)
 800bf90:	f006 020f 	and.w	r2, r6, #15
 800bf94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9c:	ec51 0b18 	vmov	r0, r1, d8
 800bfa0:	f7f4 fb2a 	bl	80005f8 <__aeabi_dmul>
 800bfa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfa8:	1136      	asrs	r6, r6, #4
 800bfaa:	2300      	movs	r3, #0
 800bfac:	2502      	movs	r5, #2
 800bfae:	2e00      	cmp	r6, #0
 800bfb0:	d17e      	bne.n	800c0b0 <_dtoa_r+0x4d8>
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d1d0      	bne.n	800bf58 <_dtoa_r+0x380>
 800bfb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfb8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f000 8084 	beq.w	800c0ca <_dtoa_r+0x4f2>
 800bfc2:	4b96      	ldr	r3, [pc, #600]	; (800c21c <_dtoa_r+0x644>)
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	4640      	mov	r0, r8
 800bfc8:	4649      	mov	r1, r9
 800bfca:	f7f4 fd87 	bl	8000adc <__aeabi_dcmplt>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d07b      	beq.n	800c0ca <_dtoa_r+0x4f2>
 800bfd2:	9b04      	ldr	r3, [sp, #16]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d078      	beq.n	800c0ca <_dtoa_r+0x4f2>
 800bfd8:	9b01      	ldr	r3, [sp, #4]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	dd39      	ble.n	800c052 <_dtoa_r+0x47a>
 800bfde:	4b90      	ldr	r3, [pc, #576]	; (800c220 <_dtoa_r+0x648>)
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	4640      	mov	r0, r8
 800bfe4:	4649      	mov	r1, r9
 800bfe6:	f7f4 fb07 	bl	80005f8 <__aeabi_dmul>
 800bfea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfee:	9e01      	ldr	r6, [sp, #4]
 800bff0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bff4:	3501      	adds	r5, #1
 800bff6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bffa:	4628      	mov	r0, r5
 800bffc:	f7f4 fa92 	bl	8000524 <__aeabi_i2d>
 800c000:	4642      	mov	r2, r8
 800c002:	464b      	mov	r3, r9
 800c004:	f7f4 faf8 	bl	80005f8 <__aeabi_dmul>
 800c008:	4b86      	ldr	r3, [pc, #536]	; (800c224 <_dtoa_r+0x64c>)
 800c00a:	2200      	movs	r2, #0
 800c00c:	f7f4 f93e 	bl	800028c <__adddf3>
 800c010:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c018:	9303      	str	r3, [sp, #12]
 800c01a:	2e00      	cmp	r6, #0
 800c01c:	d158      	bne.n	800c0d0 <_dtoa_r+0x4f8>
 800c01e:	4b82      	ldr	r3, [pc, #520]	; (800c228 <_dtoa_r+0x650>)
 800c020:	2200      	movs	r2, #0
 800c022:	4640      	mov	r0, r8
 800c024:	4649      	mov	r1, r9
 800c026:	f7f4 f92f 	bl	8000288 <__aeabi_dsub>
 800c02a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c02e:	4680      	mov	r8, r0
 800c030:	4689      	mov	r9, r1
 800c032:	f7f4 fd71 	bl	8000b18 <__aeabi_dcmpgt>
 800c036:	2800      	cmp	r0, #0
 800c038:	f040 8296 	bne.w	800c568 <_dtoa_r+0x990>
 800c03c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c040:	4640      	mov	r0, r8
 800c042:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c046:	4649      	mov	r1, r9
 800c048:	f7f4 fd48 	bl	8000adc <__aeabi_dcmplt>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	f040 8289 	bne.w	800c564 <_dtoa_r+0x98c>
 800c052:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c056:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f2c0 814e 	blt.w	800c2fa <_dtoa_r+0x722>
 800c05e:	f1bb 0f0e 	cmp.w	fp, #14
 800c062:	f300 814a 	bgt.w	800c2fa <_dtoa_r+0x722>
 800c066:	4b6b      	ldr	r3, [pc, #428]	; (800c214 <_dtoa_r+0x63c>)
 800c068:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c06c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c072:	2b00      	cmp	r3, #0
 800c074:	f280 80dc 	bge.w	800c230 <_dtoa_r+0x658>
 800c078:	9b04      	ldr	r3, [sp, #16]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	f300 80d8 	bgt.w	800c230 <_dtoa_r+0x658>
 800c080:	f040 826f 	bne.w	800c562 <_dtoa_r+0x98a>
 800c084:	4b68      	ldr	r3, [pc, #416]	; (800c228 <_dtoa_r+0x650>)
 800c086:	2200      	movs	r2, #0
 800c088:	4640      	mov	r0, r8
 800c08a:	4649      	mov	r1, r9
 800c08c:	f7f4 fab4 	bl	80005f8 <__aeabi_dmul>
 800c090:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c094:	f7f4 fd36 	bl	8000b04 <__aeabi_dcmpge>
 800c098:	9e04      	ldr	r6, [sp, #16]
 800c09a:	4637      	mov	r7, r6
 800c09c:	2800      	cmp	r0, #0
 800c09e:	f040 8245 	bne.w	800c52c <_dtoa_r+0x954>
 800c0a2:	9d00      	ldr	r5, [sp, #0]
 800c0a4:	2331      	movs	r3, #49	; 0x31
 800c0a6:	f805 3b01 	strb.w	r3, [r5], #1
 800c0aa:	f10b 0b01 	add.w	fp, fp, #1
 800c0ae:	e241      	b.n	800c534 <_dtoa_r+0x95c>
 800c0b0:	07f2      	lsls	r2, r6, #31
 800c0b2:	d505      	bpl.n	800c0c0 <_dtoa_r+0x4e8>
 800c0b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0b8:	f7f4 fa9e 	bl	80005f8 <__aeabi_dmul>
 800c0bc:	3501      	adds	r5, #1
 800c0be:	2301      	movs	r3, #1
 800c0c0:	1076      	asrs	r6, r6, #1
 800c0c2:	3708      	adds	r7, #8
 800c0c4:	e773      	b.n	800bfae <_dtoa_r+0x3d6>
 800c0c6:	2502      	movs	r5, #2
 800c0c8:	e775      	b.n	800bfb6 <_dtoa_r+0x3de>
 800c0ca:	9e04      	ldr	r6, [sp, #16]
 800c0cc:	465f      	mov	r7, fp
 800c0ce:	e792      	b.n	800bff6 <_dtoa_r+0x41e>
 800c0d0:	9900      	ldr	r1, [sp, #0]
 800c0d2:	4b50      	ldr	r3, [pc, #320]	; (800c214 <_dtoa_r+0x63c>)
 800c0d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0d8:	4431      	add	r1, r6
 800c0da:	9102      	str	r1, [sp, #8]
 800c0dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0de:	eeb0 9a47 	vmov.f32	s18, s14
 800c0e2:	eef0 9a67 	vmov.f32	s19, s15
 800c0e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c0ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c0ee:	2900      	cmp	r1, #0
 800c0f0:	d044      	beq.n	800c17c <_dtoa_r+0x5a4>
 800c0f2:	494e      	ldr	r1, [pc, #312]	; (800c22c <_dtoa_r+0x654>)
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	f7f4 fba9 	bl	800084c <__aeabi_ddiv>
 800c0fa:	ec53 2b19 	vmov	r2, r3, d9
 800c0fe:	f7f4 f8c3 	bl	8000288 <__aeabi_dsub>
 800c102:	9d00      	ldr	r5, [sp, #0]
 800c104:	ec41 0b19 	vmov	d9, r0, r1
 800c108:	4649      	mov	r1, r9
 800c10a:	4640      	mov	r0, r8
 800c10c:	f7f4 fd24 	bl	8000b58 <__aeabi_d2iz>
 800c110:	4606      	mov	r6, r0
 800c112:	f7f4 fa07 	bl	8000524 <__aeabi_i2d>
 800c116:	4602      	mov	r2, r0
 800c118:	460b      	mov	r3, r1
 800c11a:	4640      	mov	r0, r8
 800c11c:	4649      	mov	r1, r9
 800c11e:	f7f4 f8b3 	bl	8000288 <__aeabi_dsub>
 800c122:	3630      	adds	r6, #48	; 0x30
 800c124:	f805 6b01 	strb.w	r6, [r5], #1
 800c128:	ec53 2b19 	vmov	r2, r3, d9
 800c12c:	4680      	mov	r8, r0
 800c12e:	4689      	mov	r9, r1
 800c130:	f7f4 fcd4 	bl	8000adc <__aeabi_dcmplt>
 800c134:	2800      	cmp	r0, #0
 800c136:	d164      	bne.n	800c202 <_dtoa_r+0x62a>
 800c138:	4642      	mov	r2, r8
 800c13a:	464b      	mov	r3, r9
 800c13c:	4937      	ldr	r1, [pc, #220]	; (800c21c <_dtoa_r+0x644>)
 800c13e:	2000      	movs	r0, #0
 800c140:	f7f4 f8a2 	bl	8000288 <__aeabi_dsub>
 800c144:	ec53 2b19 	vmov	r2, r3, d9
 800c148:	f7f4 fcc8 	bl	8000adc <__aeabi_dcmplt>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	f040 80b6 	bne.w	800c2be <_dtoa_r+0x6e6>
 800c152:	9b02      	ldr	r3, [sp, #8]
 800c154:	429d      	cmp	r5, r3
 800c156:	f43f af7c 	beq.w	800c052 <_dtoa_r+0x47a>
 800c15a:	4b31      	ldr	r3, [pc, #196]	; (800c220 <_dtoa_r+0x648>)
 800c15c:	ec51 0b19 	vmov	r0, r1, d9
 800c160:	2200      	movs	r2, #0
 800c162:	f7f4 fa49 	bl	80005f8 <__aeabi_dmul>
 800c166:	4b2e      	ldr	r3, [pc, #184]	; (800c220 <_dtoa_r+0x648>)
 800c168:	ec41 0b19 	vmov	d9, r0, r1
 800c16c:	2200      	movs	r2, #0
 800c16e:	4640      	mov	r0, r8
 800c170:	4649      	mov	r1, r9
 800c172:	f7f4 fa41 	bl	80005f8 <__aeabi_dmul>
 800c176:	4680      	mov	r8, r0
 800c178:	4689      	mov	r9, r1
 800c17a:	e7c5      	b.n	800c108 <_dtoa_r+0x530>
 800c17c:	ec51 0b17 	vmov	r0, r1, d7
 800c180:	f7f4 fa3a 	bl	80005f8 <__aeabi_dmul>
 800c184:	9b02      	ldr	r3, [sp, #8]
 800c186:	9d00      	ldr	r5, [sp, #0]
 800c188:	930f      	str	r3, [sp, #60]	; 0x3c
 800c18a:	ec41 0b19 	vmov	d9, r0, r1
 800c18e:	4649      	mov	r1, r9
 800c190:	4640      	mov	r0, r8
 800c192:	f7f4 fce1 	bl	8000b58 <__aeabi_d2iz>
 800c196:	4606      	mov	r6, r0
 800c198:	f7f4 f9c4 	bl	8000524 <__aeabi_i2d>
 800c19c:	3630      	adds	r6, #48	; 0x30
 800c19e:	4602      	mov	r2, r0
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	4640      	mov	r0, r8
 800c1a4:	4649      	mov	r1, r9
 800c1a6:	f7f4 f86f 	bl	8000288 <__aeabi_dsub>
 800c1aa:	f805 6b01 	strb.w	r6, [r5], #1
 800c1ae:	9b02      	ldr	r3, [sp, #8]
 800c1b0:	429d      	cmp	r5, r3
 800c1b2:	4680      	mov	r8, r0
 800c1b4:	4689      	mov	r9, r1
 800c1b6:	f04f 0200 	mov.w	r2, #0
 800c1ba:	d124      	bne.n	800c206 <_dtoa_r+0x62e>
 800c1bc:	4b1b      	ldr	r3, [pc, #108]	; (800c22c <_dtoa_r+0x654>)
 800c1be:	ec51 0b19 	vmov	r0, r1, d9
 800c1c2:	f7f4 f863 	bl	800028c <__adddf3>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	4640      	mov	r0, r8
 800c1cc:	4649      	mov	r1, r9
 800c1ce:	f7f4 fca3 	bl	8000b18 <__aeabi_dcmpgt>
 800c1d2:	2800      	cmp	r0, #0
 800c1d4:	d173      	bne.n	800c2be <_dtoa_r+0x6e6>
 800c1d6:	ec53 2b19 	vmov	r2, r3, d9
 800c1da:	4914      	ldr	r1, [pc, #80]	; (800c22c <_dtoa_r+0x654>)
 800c1dc:	2000      	movs	r0, #0
 800c1de:	f7f4 f853 	bl	8000288 <__aeabi_dsub>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	4640      	mov	r0, r8
 800c1e8:	4649      	mov	r1, r9
 800c1ea:	f7f4 fc77 	bl	8000adc <__aeabi_dcmplt>
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	f43f af2f 	beq.w	800c052 <_dtoa_r+0x47a>
 800c1f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c1f6:	1e6b      	subs	r3, r5, #1
 800c1f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c1fe:	2b30      	cmp	r3, #48	; 0x30
 800c200:	d0f8      	beq.n	800c1f4 <_dtoa_r+0x61c>
 800c202:	46bb      	mov	fp, r7
 800c204:	e04a      	b.n	800c29c <_dtoa_r+0x6c4>
 800c206:	4b06      	ldr	r3, [pc, #24]	; (800c220 <_dtoa_r+0x648>)
 800c208:	f7f4 f9f6 	bl	80005f8 <__aeabi_dmul>
 800c20c:	4680      	mov	r8, r0
 800c20e:	4689      	mov	r9, r1
 800c210:	e7bd      	b.n	800c18e <_dtoa_r+0x5b6>
 800c212:	bf00      	nop
 800c214:	0800ebd0 	.word	0x0800ebd0
 800c218:	0800eba8 	.word	0x0800eba8
 800c21c:	3ff00000 	.word	0x3ff00000
 800c220:	40240000 	.word	0x40240000
 800c224:	401c0000 	.word	0x401c0000
 800c228:	40140000 	.word	0x40140000
 800c22c:	3fe00000 	.word	0x3fe00000
 800c230:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c234:	9d00      	ldr	r5, [sp, #0]
 800c236:	4642      	mov	r2, r8
 800c238:	464b      	mov	r3, r9
 800c23a:	4630      	mov	r0, r6
 800c23c:	4639      	mov	r1, r7
 800c23e:	f7f4 fb05 	bl	800084c <__aeabi_ddiv>
 800c242:	f7f4 fc89 	bl	8000b58 <__aeabi_d2iz>
 800c246:	9001      	str	r0, [sp, #4]
 800c248:	f7f4 f96c 	bl	8000524 <__aeabi_i2d>
 800c24c:	4642      	mov	r2, r8
 800c24e:	464b      	mov	r3, r9
 800c250:	f7f4 f9d2 	bl	80005f8 <__aeabi_dmul>
 800c254:	4602      	mov	r2, r0
 800c256:	460b      	mov	r3, r1
 800c258:	4630      	mov	r0, r6
 800c25a:	4639      	mov	r1, r7
 800c25c:	f7f4 f814 	bl	8000288 <__aeabi_dsub>
 800c260:	9e01      	ldr	r6, [sp, #4]
 800c262:	9f04      	ldr	r7, [sp, #16]
 800c264:	3630      	adds	r6, #48	; 0x30
 800c266:	f805 6b01 	strb.w	r6, [r5], #1
 800c26a:	9e00      	ldr	r6, [sp, #0]
 800c26c:	1bae      	subs	r6, r5, r6
 800c26e:	42b7      	cmp	r7, r6
 800c270:	4602      	mov	r2, r0
 800c272:	460b      	mov	r3, r1
 800c274:	d134      	bne.n	800c2e0 <_dtoa_r+0x708>
 800c276:	f7f4 f809 	bl	800028c <__adddf3>
 800c27a:	4642      	mov	r2, r8
 800c27c:	464b      	mov	r3, r9
 800c27e:	4606      	mov	r6, r0
 800c280:	460f      	mov	r7, r1
 800c282:	f7f4 fc49 	bl	8000b18 <__aeabi_dcmpgt>
 800c286:	b9c8      	cbnz	r0, 800c2bc <_dtoa_r+0x6e4>
 800c288:	4642      	mov	r2, r8
 800c28a:	464b      	mov	r3, r9
 800c28c:	4630      	mov	r0, r6
 800c28e:	4639      	mov	r1, r7
 800c290:	f7f4 fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c294:	b110      	cbz	r0, 800c29c <_dtoa_r+0x6c4>
 800c296:	9b01      	ldr	r3, [sp, #4]
 800c298:	07db      	lsls	r3, r3, #31
 800c29a:	d40f      	bmi.n	800c2bc <_dtoa_r+0x6e4>
 800c29c:	4651      	mov	r1, sl
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f000 fbcc 	bl	800ca3c <_Bfree>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2a8:	702b      	strb	r3, [r5, #0]
 800c2aa:	f10b 0301 	add.w	r3, fp, #1
 800c2ae:	6013      	str	r3, [r2, #0]
 800c2b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	f43f ace2 	beq.w	800bc7c <_dtoa_r+0xa4>
 800c2b8:	601d      	str	r5, [r3, #0]
 800c2ba:	e4df      	b.n	800bc7c <_dtoa_r+0xa4>
 800c2bc:	465f      	mov	r7, fp
 800c2be:	462b      	mov	r3, r5
 800c2c0:	461d      	mov	r5, r3
 800c2c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2c6:	2a39      	cmp	r2, #57	; 0x39
 800c2c8:	d106      	bne.n	800c2d8 <_dtoa_r+0x700>
 800c2ca:	9a00      	ldr	r2, [sp, #0]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d1f7      	bne.n	800c2c0 <_dtoa_r+0x6e8>
 800c2d0:	9900      	ldr	r1, [sp, #0]
 800c2d2:	2230      	movs	r2, #48	; 0x30
 800c2d4:	3701      	adds	r7, #1
 800c2d6:	700a      	strb	r2, [r1, #0]
 800c2d8:	781a      	ldrb	r2, [r3, #0]
 800c2da:	3201      	adds	r2, #1
 800c2dc:	701a      	strb	r2, [r3, #0]
 800c2de:	e790      	b.n	800c202 <_dtoa_r+0x62a>
 800c2e0:	4ba3      	ldr	r3, [pc, #652]	; (800c570 <_dtoa_r+0x998>)
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f7f4 f988 	bl	80005f8 <__aeabi_dmul>
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	4606      	mov	r6, r0
 800c2ee:	460f      	mov	r7, r1
 800c2f0:	f7f4 fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	d09e      	beq.n	800c236 <_dtoa_r+0x65e>
 800c2f8:	e7d0      	b.n	800c29c <_dtoa_r+0x6c4>
 800c2fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2fc:	2a00      	cmp	r2, #0
 800c2fe:	f000 80ca 	beq.w	800c496 <_dtoa_r+0x8be>
 800c302:	9a07      	ldr	r2, [sp, #28]
 800c304:	2a01      	cmp	r2, #1
 800c306:	f300 80ad 	bgt.w	800c464 <_dtoa_r+0x88c>
 800c30a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c30c:	2a00      	cmp	r2, #0
 800c30e:	f000 80a5 	beq.w	800c45c <_dtoa_r+0x884>
 800c312:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c316:	9e08      	ldr	r6, [sp, #32]
 800c318:	9d05      	ldr	r5, [sp, #20]
 800c31a:	9a05      	ldr	r2, [sp, #20]
 800c31c:	441a      	add	r2, r3
 800c31e:	9205      	str	r2, [sp, #20]
 800c320:	9a06      	ldr	r2, [sp, #24]
 800c322:	2101      	movs	r1, #1
 800c324:	441a      	add	r2, r3
 800c326:	4620      	mov	r0, r4
 800c328:	9206      	str	r2, [sp, #24]
 800c32a:	f000 fc3d 	bl	800cba8 <__i2b>
 800c32e:	4607      	mov	r7, r0
 800c330:	b165      	cbz	r5, 800c34c <_dtoa_r+0x774>
 800c332:	9b06      	ldr	r3, [sp, #24]
 800c334:	2b00      	cmp	r3, #0
 800c336:	dd09      	ble.n	800c34c <_dtoa_r+0x774>
 800c338:	42ab      	cmp	r3, r5
 800c33a:	9a05      	ldr	r2, [sp, #20]
 800c33c:	bfa8      	it	ge
 800c33e:	462b      	movge	r3, r5
 800c340:	1ad2      	subs	r2, r2, r3
 800c342:	9205      	str	r2, [sp, #20]
 800c344:	9a06      	ldr	r2, [sp, #24]
 800c346:	1aed      	subs	r5, r5, r3
 800c348:	1ad3      	subs	r3, r2, r3
 800c34a:	9306      	str	r3, [sp, #24]
 800c34c:	9b08      	ldr	r3, [sp, #32]
 800c34e:	b1f3      	cbz	r3, 800c38e <_dtoa_r+0x7b6>
 800c350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c352:	2b00      	cmp	r3, #0
 800c354:	f000 80a3 	beq.w	800c49e <_dtoa_r+0x8c6>
 800c358:	2e00      	cmp	r6, #0
 800c35a:	dd10      	ble.n	800c37e <_dtoa_r+0x7a6>
 800c35c:	4639      	mov	r1, r7
 800c35e:	4632      	mov	r2, r6
 800c360:	4620      	mov	r0, r4
 800c362:	f000 fce1 	bl	800cd28 <__pow5mult>
 800c366:	4652      	mov	r2, sl
 800c368:	4601      	mov	r1, r0
 800c36a:	4607      	mov	r7, r0
 800c36c:	4620      	mov	r0, r4
 800c36e:	f000 fc31 	bl	800cbd4 <__multiply>
 800c372:	4651      	mov	r1, sl
 800c374:	4680      	mov	r8, r0
 800c376:	4620      	mov	r0, r4
 800c378:	f000 fb60 	bl	800ca3c <_Bfree>
 800c37c:	46c2      	mov	sl, r8
 800c37e:	9b08      	ldr	r3, [sp, #32]
 800c380:	1b9a      	subs	r2, r3, r6
 800c382:	d004      	beq.n	800c38e <_dtoa_r+0x7b6>
 800c384:	4651      	mov	r1, sl
 800c386:	4620      	mov	r0, r4
 800c388:	f000 fcce 	bl	800cd28 <__pow5mult>
 800c38c:	4682      	mov	sl, r0
 800c38e:	2101      	movs	r1, #1
 800c390:	4620      	mov	r0, r4
 800c392:	f000 fc09 	bl	800cba8 <__i2b>
 800c396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c398:	2b00      	cmp	r3, #0
 800c39a:	4606      	mov	r6, r0
 800c39c:	f340 8081 	ble.w	800c4a2 <_dtoa_r+0x8ca>
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	4601      	mov	r1, r0
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	f000 fcbf 	bl	800cd28 <__pow5mult>
 800c3aa:	9b07      	ldr	r3, [sp, #28]
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	4606      	mov	r6, r0
 800c3b0:	dd7a      	ble.n	800c4a8 <_dtoa_r+0x8d0>
 800c3b2:	f04f 0800 	mov.w	r8, #0
 800c3b6:	6933      	ldr	r3, [r6, #16]
 800c3b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c3bc:	6918      	ldr	r0, [r3, #16]
 800c3be:	f000 fba5 	bl	800cb0c <__hi0bits>
 800c3c2:	f1c0 0020 	rsb	r0, r0, #32
 800c3c6:	9b06      	ldr	r3, [sp, #24]
 800c3c8:	4418      	add	r0, r3
 800c3ca:	f010 001f 	ands.w	r0, r0, #31
 800c3ce:	f000 8094 	beq.w	800c4fa <_dtoa_r+0x922>
 800c3d2:	f1c0 0320 	rsb	r3, r0, #32
 800c3d6:	2b04      	cmp	r3, #4
 800c3d8:	f340 8085 	ble.w	800c4e6 <_dtoa_r+0x90e>
 800c3dc:	9b05      	ldr	r3, [sp, #20]
 800c3de:	f1c0 001c 	rsb	r0, r0, #28
 800c3e2:	4403      	add	r3, r0
 800c3e4:	9305      	str	r3, [sp, #20]
 800c3e6:	9b06      	ldr	r3, [sp, #24]
 800c3e8:	4403      	add	r3, r0
 800c3ea:	4405      	add	r5, r0
 800c3ec:	9306      	str	r3, [sp, #24]
 800c3ee:	9b05      	ldr	r3, [sp, #20]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	dd05      	ble.n	800c400 <_dtoa_r+0x828>
 800c3f4:	4651      	mov	r1, sl
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f000 fcef 	bl	800cddc <__lshift>
 800c3fe:	4682      	mov	sl, r0
 800c400:	9b06      	ldr	r3, [sp, #24]
 800c402:	2b00      	cmp	r3, #0
 800c404:	dd05      	ble.n	800c412 <_dtoa_r+0x83a>
 800c406:	4631      	mov	r1, r6
 800c408:	461a      	mov	r2, r3
 800c40a:	4620      	mov	r0, r4
 800c40c:	f000 fce6 	bl	800cddc <__lshift>
 800c410:	4606      	mov	r6, r0
 800c412:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c414:	2b00      	cmp	r3, #0
 800c416:	d072      	beq.n	800c4fe <_dtoa_r+0x926>
 800c418:	4631      	mov	r1, r6
 800c41a:	4650      	mov	r0, sl
 800c41c:	f000 fd4a 	bl	800ceb4 <__mcmp>
 800c420:	2800      	cmp	r0, #0
 800c422:	da6c      	bge.n	800c4fe <_dtoa_r+0x926>
 800c424:	2300      	movs	r3, #0
 800c426:	4651      	mov	r1, sl
 800c428:	220a      	movs	r2, #10
 800c42a:	4620      	mov	r0, r4
 800c42c:	f000 fb28 	bl	800ca80 <__multadd>
 800c430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c432:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c436:	4682      	mov	sl, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f000 81b0 	beq.w	800c79e <_dtoa_r+0xbc6>
 800c43e:	2300      	movs	r3, #0
 800c440:	4639      	mov	r1, r7
 800c442:	220a      	movs	r2, #10
 800c444:	4620      	mov	r0, r4
 800c446:	f000 fb1b 	bl	800ca80 <__multadd>
 800c44a:	9b01      	ldr	r3, [sp, #4]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	4607      	mov	r7, r0
 800c450:	f300 8096 	bgt.w	800c580 <_dtoa_r+0x9a8>
 800c454:	9b07      	ldr	r3, [sp, #28]
 800c456:	2b02      	cmp	r3, #2
 800c458:	dc59      	bgt.n	800c50e <_dtoa_r+0x936>
 800c45a:	e091      	b.n	800c580 <_dtoa_r+0x9a8>
 800c45c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c45e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c462:	e758      	b.n	800c316 <_dtoa_r+0x73e>
 800c464:	9b04      	ldr	r3, [sp, #16]
 800c466:	1e5e      	subs	r6, r3, #1
 800c468:	9b08      	ldr	r3, [sp, #32]
 800c46a:	42b3      	cmp	r3, r6
 800c46c:	bfbf      	itttt	lt
 800c46e:	9b08      	ldrlt	r3, [sp, #32]
 800c470:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c472:	9608      	strlt	r6, [sp, #32]
 800c474:	1af3      	sublt	r3, r6, r3
 800c476:	bfb4      	ite	lt
 800c478:	18d2      	addlt	r2, r2, r3
 800c47a:	1b9e      	subge	r6, r3, r6
 800c47c:	9b04      	ldr	r3, [sp, #16]
 800c47e:	bfbc      	itt	lt
 800c480:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c482:	2600      	movlt	r6, #0
 800c484:	2b00      	cmp	r3, #0
 800c486:	bfb7      	itett	lt
 800c488:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c48c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c490:	1a9d      	sublt	r5, r3, r2
 800c492:	2300      	movlt	r3, #0
 800c494:	e741      	b.n	800c31a <_dtoa_r+0x742>
 800c496:	9e08      	ldr	r6, [sp, #32]
 800c498:	9d05      	ldr	r5, [sp, #20]
 800c49a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c49c:	e748      	b.n	800c330 <_dtoa_r+0x758>
 800c49e:	9a08      	ldr	r2, [sp, #32]
 800c4a0:	e770      	b.n	800c384 <_dtoa_r+0x7ac>
 800c4a2:	9b07      	ldr	r3, [sp, #28]
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	dc19      	bgt.n	800c4dc <_dtoa_r+0x904>
 800c4a8:	9b02      	ldr	r3, [sp, #8]
 800c4aa:	b9bb      	cbnz	r3, 800c4dc <_dtoa_r+0x904>
 800c4ac:	9b03      	ldr	r3, [sp, #12]
 800c4ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4b2:	b99b      	cbnz	r3, 800c4dc <_dtoa_r+0x904>
 800c4b4:	9b03      	ldr	r3, [sp, #12]
 800c4b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c4ba:	0d1b      	lsrs	r3, r3, #20
 800c4bc:	051b      	lsls	r3, r3, #20
 800c4be:	b183      	cbz	r3, 800c4e2 <_dtoa_r+0x90a>
 800c4c0:	9b05      	ldr	r3, [sp, #20]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	9305      	str	r3, [sp, #20]
 800c4c6:	9b06      	ldr	r3, [sp, #24]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	9306      	str	r3, [sp, #24]
 800c4cc:	f04f 0801 	mov.w	r8, #1
 800c4d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	f47f af6f 	bne.w	800c3b6 <_dtoa_r+0x7de>
 800c4d8:	2001      	movs	r0, #1
 800c4da:	e774      	b.n	800c3c6 <_dtoa_r+0x7ee>
 800c4dc:	f04f 0800 	mov.w	r8, #0
 800c4e0:	e7f6      	b.n	800c4d0 <_dtoa_r+0x8f8>
 800c4e2:	4698      	mov	r8, r3
 800c4e4:	e7f4      	b.n	800c4d0 <_dtoa_r+0x8f8>
 800c4e6:	d082      	beq.n	800c3ee <_dtoa_r+0x816>
 800c4e8:	9a05      	ldr	r2, [sp, #20]
 800c4ea:	331c      	adds	r3, #28
 800c4ec:	441a      	add	r2, r3
 800c4ee:	9205      	str	r2, [sp, #20]
 800c4f0:	9a06      	ldr	r2, [sp, #24]
 800c4f2:	441a      	add	r2, r3
 800c4f4:	441d      	add	r5, r3
 800c4f6:	9206      	str	r2, [sp, #24]
 800c4f8:	e779      	b.n	800c3ee <_dtoa_r+0x816>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	e7f4      	b.n	800c4e8 <_dtoa_r+0x910>
 800c4fe:	9b04      	ldr	r3, [sp, #16]
 800c500:	2b00      	cmp	r3, #0
 800c502:	dc37      	bgt.n	800c574 <_dtoa_r+0x99c>
 800c504:	9b07      	ldr	r3, [sp, #28]
 800c506:	2b02      	cmp	r3, #2
 800c508:	dd34      	ble.n	800c574 <_dtoa_r+0x99c>
 800c50a:	9b04      	ldr	r3, [sp, #16]
 800c50c:	9301      	str	r3, [sp, #4]
 800c50e:	9b01      	ldr	r3, [sp, #4]
 800c510:	b963      	cbnz	r3, 800c52c <_dtoa_r+0x954>
 800c512:	4631      	mov	r1, r6
 800c514:	2205      	movs	r2, #5
 800c516:	4620      	mov	r0, r4
 800c518:	f000 fab2 	bl	800ca80 <__multadd>
 800c51c:	4601      	mov	r1, r0
 800c51e:	4606      	mov	r6, r0
 800c520:	4650      	mov	r0, sl
 800c522:	f000 fcc7 	bl	800ceb4 <__mcmp>
 800c526:	2800      	cmp	r0, #0
 800c528:	f73f adbb 	bgt.w	800c0a2 <_dtoa_r+0x4ca>
 800c52c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c52e:	9d00      	ldr	r5, [sp, #0]
 800c530:	ea6f 0b03 	mvn.w	fp, r3
 800c534:	f04f 0800 	mov.w	r8, #0
 800c538:	4631      	mov	r1, r6
 800c53a:	4620      	mov	r0, r4
 800c53c:	f000 fa7e 	bl	800ca3c <_Bfree>
 800c540:	2f00      	cmp	r7, #0
 800c542:	f43f aeab 	beq.w	800c29c <_dtoa_r+0x6c4>
 800c546:	f1b8 0f00 	cmp.w	r8, #0
 800c54a:	d005      	beq.n	800c558 <_dtoa_r+0x980>
 800c54c:	45b8      	cmp	r8, r7
 800c54e:	d003      	beq.n	800c558 <_dtoa_r+0x980>
 800c550:	4641      	mov	r1, r8
 800c552:	4620      	mov	r0, r4
 800c554:	f000 fa72 	bl	800ca3c <_Bfree>
 800c558:	4639      	mov	r1, r7
 800c55a:	4620      	mov	r0, r4
 800c55c:	f000 fa6e 	bl	800ca3c <_Bfree>
 800c560:	e69c      	b.n	800c29c <_dtoa_r+0x6c4>
 800c562:	2600      	movs	r6, #0
 800c564:	4637      	mov	r7, r6
 800c566:	e7e1      	b.n	800c52c <_dtoa_r+0x954>
 800c568:	46bb      	mov	fp, r7
 800c56a:	4637      	mov	r7, r6
 800c56c:	e599      	b.n	800c0a2 <_dtoa_r+0x4ca>
 800c56e:	bf00      	nop
 800c570:	40240000 	.word	0x40240000
 800c574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c576:	2b00      	cmp	r3, #0
 800c578:	f000 80c8 	beq.w	800c70c <_dtoa_r+0xb34>
 800c57c:	9b04      	ldr	r3, [sp, #16]
 800c57e:	9301      	str	r3, [sp, #4]
 800c580:	2d00      	cmp	r5, #0
 800c582:	dd05      	ble.n	800c590 <_dtoa_r+0x9b8>
 800c584:	4639      	mov	r1, r7
 800c586:	462a      	mov	r2, r5
 800c588:	4620      	mov	r0, r4
 800c58a:	f000 fc27 	bl	800cddc <__lshift>
 800c58e:	4607      	mov	r7, r0
 800c590:	f1b8 0f00 	cmp.w	r8, #0
 800c594:	d05b      	beq.n	800c64e <_dtoa_r+0xa76>
 800c596:	6879      	ldr	r1, [r7, #4]
 800c598:	4620      	mov	r0, r4
 800c59a:	f000 fa0f 	bl	800c9bc <_Balloc>
 800c59e:	4605      	mov	r5, r0
 800c5a0:	b928      	cbnz	r0, 800c5ae <_dtoa_r+0x9d6>
 800c5a2:	4b83      	ldr	r3, [pc, #524]	; (800c7b0 <_dtoa_r+0xbd8>)
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c5aa:	f7ff bb2e 	b.w	800bc0a <_dtoa_r+0x32>
 800c5ae:	693a      	ldr	r2, [r7, #16]
 800c5b0:	3202      	adds	r2, #2
 800c5b2:	0092      	lsls	r2, r2, #2
 800c5b4:	f107 010c 	add.w	r1, r7, #12
 800c5b8:	300c      	adds	r0, #12
 800c5ba:	f7ff fa77 	bl	800baac <memcpy>
 800c5be:	2201      	movs	r2, #1
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f000 fc0a 	bl	800cddc <__lshift>
 800c5c8:	9b00      	ldr	r3, [sp, #0]
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	9304      	str	r3, [sp, #16]
 800c5ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	9308      	str	r3, [sp, #32]
 800c5d6:	9b02      	ldr	r3, [sp, #8]
 800c5d8:	f003 0301 	and.w	r3, r3, #1
 800c5dc:	46b8      	mov	r8, r7
 800c5de:	9306      	str	r3, [sp, #24]
 800c5e0:	4607      	mov	r7, r0
 800c5e2:	9b04      	ldr	r3, [sp, #16]
 800c5e4:	4631      	mov	r1, r6
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	4650      	mov	r0, sl
 800c5ea:	9301      	str	r3, [sp, #4]
 800c5ec:	f7ff fa6c 	bl	800bac8 <quorem>
 800c5f0:	4641      	mov	r1, r8
 800c5f2:	9002      	str	r0, [sp, #8]
 800c5f4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c5f8:	4650      	mov	r0, sl
 800c5fa:	f000 fc5b 	bl	800ceb4 <__mcmp>
 800c5fe:	463a      	mov	r2, r7
 800c600:	9005      	str	r0, [sp, #20]
 800c602:	4631      	mov	r1, r6
 800c604:	4620      	mov	r0, r4
 800c606:	f000 fc71 	bl	800ceec <__mdiff>
 800c60a:	68c2      	ldr	r2, [r0, #12]
 800c60c:	4605      	mov	r5, r0
 800c60e:	bb02      	cbnz	r2, 800c652 <_dtoa_r+0xa7a>
 800c610:	4601      	mov	r1, r0
 800c612:	4650      	mov	r0, sl
 800c614:	f000 fc4e 	bl	800ceb4 <__mcmp>
 800c618:	4602      	mov	r2, r0
 800c61a:	4629      	mov	r1, r5
 800c61c:	4620      	mov	r0, r4
 800c61e:	9209      	str	r2, [sp, #36]	; 0x24
 800c620:	f000 fa0c 	bl	800ca3c <_Bfree>
 800c624:	9b07      	ldr	r3, [sp, #28]
 800c626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c628:	9d04      	ldr	r5, [sp, #16]
 800c62a:	ea43 0102 	orr.w	r1, r3, r2
 800c62e:	9b06      	ldr	r3, [sp, #24]
 800c630:	4319      	orrs	r1, r3
 800c632:	d110      	bne.n	800c656 <_dtoa_r+0xa7e>
 800c634:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c638:	d029      	beq.n	800c68e <_dtoa_r+0xab6>
 800c63a:	9b05      	ldr	r3, [sp, #20]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	dd02      	ble.n	800c646 <_dtoa_r+0xa6e>
 800c640:	9b02      	ldr	r3, [sp, #8]
 800c642:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c646:	9b01      	ldr	r3, [sp, #4]
 800c648:	f883 9000 	strb.w	r9, [r3]
 800c64c:	e774      	b.n	800c538 <_dtoa_r+0x960>
 800c64e:	4638      	mov	r0, r7
 800c650:	e7ba      	b.n	800c5c8 <_dtoa_r+0x9f0>
 800c652:	2201      	movs	r2, #1
 800c654:	e7e1      	b.n	800c61a <_dtoa_r+0xa42>
 800c656:	9b05      	ldr	r3, [sp, #20]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	db04      	blt.n	800c666 <_dtoa_r+0xa8e>
 800c65c:	9907      	ldr	r1, [sp, #28]
 800c65e:	430b      	orrs	r3, r1
 800c660:	9906      	ldr	r1, [sp, #24]
 800c662:	430b      	orrs	r3, r1
 800c664:	d120      	bne.n	800c6a8 <_dtoa_r+0xad0>
 800c666:	2a00      	cmp	r2, #0
 800c668:	dded      	ble.n	800c646 <_dtoa_r+0xa6e>
 800c66a:	4651      	mov	r1, sl
 800c66c:	2201      	movs	r2, #1
 800c66e:	4620      	mov	r0, r4
 800c670:	f000 fbb4 	bl	800cddc <__lshift>
 800c674:	4631      	mov	r1, r6
 800c676:	4682      	mov	sl, r0
 800c678:	f000 fc1c 	bl	800ceb4 <__mcmp>
 800c67c:	2800      	cmp	r0, #0
 800c67e:	dc03      	bgt.n	800c688 <_dtoa_r+0xab0>
 800c680:	d1e1      	bne.n	800c646 <_dtoa_r+0xa6e>
 800c682:	f019 0f01 	tst.w	r9, #1
 800c686:	d0de      	beq.n	800c646 <_dtoa_r+0xa6e>
 800c688:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c68c:	d1d8      	bne.n	800c640 <_dtoa_r+0xa68>
 800c68e:	9a01      	ldr	r2, [sp, #4]
 800c690:	2339      	movs	r3, #57	; 0x39
 800c692:	7013      	strb	r3, [r2, #0]
 800c694:	462b      	mov	r3, r5
 800c696:	461d      	mov	r5, r3
 800c698:	3b01      	subs	r3, #1
 800c69a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c69e:	2a39      	cmp	r2, #57	; 0x39
 800c6a0:	d06c      	beq.n	800c77c <_dtoa_r+0xba4>
 800c6a2:	3201      	adds	r2, #1
 800c6a4:	701a      	strb	r2, [r3, #0]
 800c6a6:	e747      	b.n	800c538 <_dtoa_r+0x960>
 800c6a8:	2a00      	cmp	r2, #0
 800c6aa:	dd07      	ble.n	800c6bc <_dtoa_r+0xae4>
 800c6ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c6b0:	d0ed      	beq.n	800c68e <_dtoa_r+0xab6>
 800c6b2:	9a01      	ldr	r2, [sp, #4]
 800c6b4:	f109 0301 	add.w	r3, r9, #1
 800c6b8:	7013      	strb	r3, [r2, #0]
 800c6ba:	e73d      	b.n	800c538 <_dtoa_r+0x960>
 800c6bc:	9b04      	ldr	r3, [sp, #16]
 800c6be:	9a08      	ldr	r2, [sp, #32]
 800c6c0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d043      	beq.n	800c750 <_dtoa_r+0xb78>
 800c6c8:	4651      	mov	r1, sl
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	220a      	movs	r2, #10
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	f000 f9d6 	bl	800ca80 <__multadd>
 800c6d4:	45b8      	cmp	r8, r7
 800c6d6:	4682      	mov	sl, r0
 800c6d8:	f04f 0300 	mov.w	r3, #0
 800c6dc:	f04f 020a 	mov.w	r2, #10
 800c6e0:	4641      	mov	r1, r8
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	d107      	bne.n	800c6f6 <_dtoa_r+0xb1e>
 800c6e6:	f000 f9cb 	bl	800ca80 <__multadd>
 800c6ea:	4680      	mov	r8, r0
 800c6ec:	4607      	mov	r7, r0
 800c6ee:	9b04      	ldr	r3, [sp, #16]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	9304      	str	r3, [sp, #16]
 800c6f4:	e775      	b.n	800c5e2 <_dtoa_r+0xa0a>
 800c6f6:	f000 f9c3 	bl	800ca80 <__multadd>
 800c6fa:	4639      	mov	r1, r7
 800c6fc:	4680      	mov	r8, r0
 800c6fe:	2300      	movs	r3, #0
 800c700:	220a      	movs	r2, #10
 800c702:	4620      	mov	r0, r4
 800c704:	f000 f9bc 	bl	800ca80 <__multadd>
 800c708:	4607      	mov	r7, r0
 800c70a:	e7f0      	b.n	800c6ee <_dtoa_r+0xb16>
 800c70c:	9b04      	ldr	r3, [sp, #16]
 800c70e:	9301      	str	r3, [sp, #4]
 800c710:	9d00      	ldr	r5, [sp, #0]
 800c712:	4631      	mov	r1, r6
 800c714:	4650      	mov	r0, sl
 800c716:	f7ff f9d7 	bl	800bac8 <quorem>
 800c71a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c71e:	9b00      	ldr	r3, [sp, #0]
 800c720:	f805 9b01 	strb.w	r9, [r5], #1
 800c724:	1aea      	subs	r2, r5, r3
 800c726:	9b01      	ldr	r3, [sp, #4]
 800c728:	4293      	cmp	r3, r2
 800c72a:	dd07      	ble.n	800c73c <_dtoa_r+0xb64>
 800c72c:	4651      	mov	r1, sl
 800c72e:	2300      	movs	r3, #0
 800c730:	220a      	movs	r2, #10
 800c732:	4620      	mov	r0, r4
 800c734:	f000 f9a4 	bl	800ca80 <__multadd>
 800c738:	4682      	mov	sl, r0
 800c73a:	e7ea      	b.n	800c712 <_dtoa_r+0xb3a>
 800c73c:	9b01      	ldr	r3, [sp, #4]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	bfc8      	it	gt
 800c742:	461d      	movgt	r5, r3
 800c744:	9b00      	ldr	r3, [sp, #0]
 800c746:	bfd8      	it	le
 800c748:	2501      	movle	r5, #1
 800c74a:	441d      	add	r5, r3
 800c74c:	f04f 0800 	mov.w	r8, #0
 800c750:	4651      	mov	r1, sl
 800c752:	2201      	movs	r2, #1
 800c754:	4620      	mov	r0, r4
 800c756:	f000 fb41 	bl	800cddc <__lshift>
 800c75a:	4631      	mov	r1, r6
 800c75c:	4682      	mov	sl, r0
 800c75e:	f000 fba9 	bl	800ceb4 <__mcmp>
 800c762:	2800      	cmp	r0, #0
 800c764:	dc96      	bgt.n	800c694 <_dtoa_r+0xabc>
 800c766:	d102      	bne.n	800c76e <_dtoa_r+0xb96>
 800c768:	f019 0f01 	tst.w	r9, #1
 800c76c:	d192      	bne.n	800c694 <_dtoa_r+0xabc>
 800c76e:	462b      	mov	r3, r5
 800c770:	461d      	mov	r5, r3
 800c772:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c776:	2a30      	cmp	r2, #48	; 0x30
 800c778:	d0fa      	beq.n	800c770 <_dtoa_r+0xb98>
 800c77a:	e6dd      	b.n	800c538 <_dtoa_r+0x960>
 800c77c:	9a00      	ldr	r2, [sp, #0]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d189      	bne.n	800c696 <_dtoa_r+0xabe>
 800c782:	f10b 0b01 	add.w	fp, fp, #1
 800c786:	2331      	movs	r3, #49	; 0x31
 800c788:	e796      	b.n	800c6b8 <_dtoa_r+0xae0>
 800c78a:	4b0a      	ldr	r3, [pc, #40]	; (800c7b4 <_dtoa_r+0xbdc>)
 800c78c:	f7ff ba99 	b.w	800bcc2 <_dtoa_r+0xea>
 800c790:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c792:	2b00      	cmp	r3, #0
 800c794:	f47f aa6d 	bne.w	800bc72 <_dtoa_r+0x9a>
 800c798:	4b07      	ldr	r3, [pc, #28]	; (800c7b8 <_dtoa_r+0xbe0>)
 800c79a:	f7ff ba92 	b.w	800bcc2 <_dtoa_r+0xea>
 800c79e:	9b01      	ldr	r3, [sp, #4]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	dcb5      	bgt.n	800c710 <_dtoa_r+0xb38>
 800c7a4:	9b07      	ldr	r3, [sp, #28]
 800c7a6:	2b02      	cmp	r3, #2
 800c7a8:	f73f aeb1 	bgt.w	800c50e <_dtoa_r+0x936>
 800c7ac:	e7b0      	b.n	800c710 <_dtoa_r+0xb38>
 800c7ae:	bf00      	nop
 800c7b0:	0800eb39 	.word	0x0800eb39
 800c7b4:	0800ea99 	.word	0x0800ea99
 800c7b8:	0800eabd 	.word	0x0800eabd

0800c7bc <_free_r>:
 800c7bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7be:	2900      	cmp	r1, #0
 800c7c0:	d044      	beq.n	800c84c <_free_r+0x90>
 800c7c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7c6:	9001      	str	r0, [sp, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f1a1 0404 	sub.w	r4, r1, #4
 800c7ce:	bfb8      	it	lt
 800c7d0:	18e4      	addlt	r4, r4, r3
 800c7d2:	f000 f8e7 	bl	800c9a4 <__malloc_lock>
 800c7d6:	4a1e      	ldr	r2, [pc, #120]	; (800c850 <_free_r+0x94>)
 800c7d8:	9801      	ldr	r0, [sp, #4]
 800c7da:	6813      	ldr	r3, [r2, #0]
 800c7dc:	b933      	cbnz	r3, 800c7ec <_free_r+0x30>
 800c7de:	6063      	str	r3, [r4, #4]
 800c7e0:	6014      	str	r4, [r2, #0]
 800c7e2:	b003      	add	sp, #12
 800c7e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7e8:	f000 b8e2 	b.w	800c9b0 <__malloc_unlock>
 800c7ec:	42a3      	cmp	r3, r4
 800c7ee:	d908      	bls.n	800c802 <_free_r+0x46>
 800c7f0:	6825      	ldr	r5, [r4, #0]
 800c7f2:	1961      	adds	r1, r4, r5
 800c7f4:	428b      	cmp	r3, r1
 800c7f6:	bf01      	itttt	eq
 800c7f8:	6819      	ldreq	r1, [r3, #0]
 800c7fa:	685b      	ldreq	r3, [r3, #4]
 800c7fc:	1949      	addeq	r1, r1, r5
 800c7fe:	6021      	streq	r1, [r4, #0]
 800c800:	e7ed      	b.n	800c7de <_free_r+0x22>
 800c802:	461a      	mov	r2, r3
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	b10b      	cbz	r3, 800c80c <_free_r+0x50>
 800c808:	42a3      	cmp	r3, r4
 800c80a:	d9fa      	bls.n	800c802 <_free_r+0x46>
 800c80c:	6811      	ldr	r1, [r2, #0]
 800c80e:	1855      	adds	r5, r2, r1
 800c810:	42a5      	cmp	r5, r4
 800c812:	d10b      	bne.n	800c82c <_free_r+0x70>
 800c814:	6824      	ldr	r4, [r4, #0]
 800c816:	4421      	add	r1, r4
 800c818:	1854      	adds	r4, r2, r1
 800c81a:	42a3      	cmp	r3, r4
 800c81c:	6011      	str	r1, [r2, #0]
 800c81e:	d1e0      	bne.n	800c7e2 <_free_r+0x26>
 800c820:	681c      	ldr	r4, [r3, #0]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	6053      	str	r3, [r2, #4]
 800c826:	440c      	add	r4, r1
 800c828:	6014      	str	r4, [r2, #0]
 800c82a:	e7da      	b.n	800c7e2 <_free_r+0x26>
 800c82c:	d902      	bls.n	800c834 <_free_r+0x78>
 800c82e:	230c      	movs	r3, #12
 800c830:	6003      	str	r3, [r0, #0]
 800c832:	e7d6      	b.n	800c7e2 <_free_r+0x26>
 800c834:	6825      	ldr	r5, [r4, #0]
 800c836:	1961      	adds	r1, r4, r5
 800c838:	428b      	cmp	r3, r1
 800c83a:	bf04      	itt	eq
 800c83c:	6819      	ldreq	r1, [r3, #0]
 800c83e:	685b      	ldreq	r3, [r3, #4]
 800c840:	6063      	str	r3, [r4, #4]
 800c842:	bf04      	itt	eq
 800c844:	1949      	addeq	r1, r1, r5
 800c846:	6021      	streq	r1, [r4, #0]
 800c848:	6054      	str	r4, [r2, #4]
 800c84a:	e7ca      	b.n	800c7e2 <_free_r+0x26>
 800c84c:	b003      	add	sp, #12
 800c84e:	bd30      	pop	{r4, r5, pc}
 800c850:	20004da8 	.word	0x20004da8

0800c854 <malloc>:
 800c854:	4b02      	ldr	r3, [pc, #8]	; (800c860 <malloc+0xc>)
 800c856:	4601      	mov	r1, r0
 800c858:	6818      	ldr	r0, [r3, #0]
 800c85a:	f000 b823 	b.w	800c8a4 <_malloc_r>
 800c85e:	bf00      	nop
 800c860:	2000007c 	.word	0x2000007c

0800c864 <sbrk_aligned>:
 800c864:	b570      	push	{r4, r5, r6, lr}
 800c866:	4e0e      	ldr	r6, [pc, #56]	; (800c8a0 <sbrk_aligned+0x3c>)
 800c868:	460c      	mov	r4, r1
 800c86a:	6831      	ldr	r1, [r6, #0]
 800c86c:	4605      	mov	r5, r0
 800c86e:	b911      	cbnz	r1, 800c876 <sbrk_aligned+0x12>
 800c870:	f000 fe96 	bl	800d5a0 <_sbrk_r>
 800c874:	6030      	str	r0, [r6, #0]
 800c876:	4621      	mov	r1, r4
 800c878:	4628      	mov	r0, r5
 800c87a:	f000 fe91 	bl	800d5a0 <_sbrk_r>
 800c87e:	1c43      	adds	r3, r0, #1
 800c880:	d00a      	beq.n	800c898 <sbrk_aligned+0x34>
 800c882:	1cc4      	adds	r4, r0, #3
 800c884:	f024 0403 	bic.w	r4, r4, #3
 800c888:	42a0      	cmp	r0, r4
 800c88a:	d007      	beq.n	800c89c <sbrk_aligned+0x38>
 800c88c:	1a21      	subs	r1, r4, r0
 800c88e:	4628      	mov	r0, r5
 800c890:	f000 fe86 	bl	800d5a0 <_sbrk_r>
 800c894:	3001      	adds	r0, #1
 800c896:	d101      	bne.n	800c89c <sbrk_aligned+0x38>
 800c898:	f04f 34ff 	mov.w	r4, #4294967295
 800c89c:	4620      	mov	r0, r4
 800c89e:	bd70      	pop	{r4, r5, r6, pc}
 800c8a0:	20004dac 	.word	0x20004dac

0800c8a4 <_malloc_r>:
 800c8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8a8:	1ccd      	adds	r5, r1, #3
 800c8aa:	f025 0503 	bic.w	r5, r5, #3
 800c8ae:	3508      	adds	r5, #8
 800c8b0:	2d0c      	cmp	r5, #12
 800c8b2:	bf38      	it	cc
 800c8b4:	250c      	movcc	r5, #12
 800c8b6:	2d00      	cmp	r5, #0
 800c8b8:	4607      	mov	r7, r0
 800c8ba:	db01      	blt.n	800c8c0 <_malloc_r+0x1c>
 800c8bc:	42a9      	cmp	r1, r5
 800c8be:	d905      	bls.n	800c8cc <_malloc_r+0x28>
 800c8c0:	230c      	movs	r3, #12
 800c8c2:	603b      	str	r3, [r7, #0]
 800c8c4:	2600      	movs	r6, #0
 800c8c6:	4630      	mov	r0, r6
 800c8c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c9a0 <_malloc_r+0xfc>
 800c8d0:	f000 f868 	bl	800c9a4 <__malloc_lock>
 800c8d4:	f8d8 3000 	ldr.w	r3, [r8]
 800c8d8:	461c      	mov	r4, r3
 800c8da:	bb5c      	cbnz	r4, 800c934 <_malloc_r+0x90>
 800c8dc:	4629      	mov	r1, r5
 800c8de:	4638      	mov	r0, r7
 800c8e0:	f7ff ffc0 	bl	800c864 <sbrk_aligned>
 800c8e4:	1c43      	adds	r3, r0, #1
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	d155      	bne.n	800c996 <_malloc_r+0xf2>
 800c8ea:	f8d8 4000 	ldr.w	r4, [r8]
 800c8ee:	4626      	mov	r6, r4
 800c8f0:	2e00      	cmp	r6, #0
 800c8f2:	d145      	bne.n	800c980 <_malloc_r+0xdc>
 800c8f4:	2c00      	cmp	r4, #0
 800c8f6:	d048      	beq.n	800c98a <_malloc_r+0xe6>
 800c8f8:	6823      	ldr	r3, [r4, #0]
 800c8fa:	4631      	mov	r1, r6
 800c8fc:	4638      	mov	r0, r7
 800c8fe:	eb04 0903 	add.w	r9, r4, r3
 800c902:	f000 fe4d 	bl	800d5a0 <_sbrk_r>
 800c906:	4581      	cmp	r9, r0
 800c908:	d13f      	bne.n	800c98a <_malloc_r+0xe6>
 800c90a:	6821      	ldr	r1, [r4, #0]
 800c90c:	1a6d      	subs	r5, r5, r1
 800c90e:	4629      	mov	r1, r5
 800c910:	4638      	mov	r0, r7
 800c912:	f7ff ffa7 	bl	800c864 <sbrk_aligned>
 800c916:	3001      	adds	r0, #1
 800c918:	d037      	beq.n	800c98a <_malloc_r+0xe6>
 800c91a:	6823      	ldr	r3, [r4, #0]
 800c91c:	442b      	add	r3, r5
 800c91e:	6023      	str	r3, [r4, #0]
 800c920:	f8d8 3000 	ldr.w	r3, [r8]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d038      	beq.n	800c99a <_malloc_r+0xf6>
 800c928:	685a      	ldr	r2, [r3, #4]
 800c92a:	42a2      	cmp	r2, r4
 800c92c:	d12b      	bne.n	800c986 <_malloc_r+0xe2>
 800c92e:	2200      	movs	r2, #0
 800c930:	605a      	str	r2, [r3, #4]
 800c932:	e00f      	b.n	800c954 <_malloc_r+0xb0>
 800c934:	6822      	ldr	r2, [r4, #0]
 800c936:	1b52      	subs	r2, r2, r5
 800c938:	d41f      	bmi.n	800c97a <_malloc_r+0xd6>
 800c93a:	2a0b      	cmp	r2, #11
 800c93c:	d917      	bls.n	800c96e <_malloc_r+0xca>
 800c93e:	1961      	adds	r1, r4, r5
 800c940:	42a3      	cmp	r3, r4
 800c942:	6025      	str	r5, [r4, #0]
 800c944:	bf18      	it	ne
 800c946:	6059      	strne	r1, [r3, #4]
 800c948:	6863      	ldr	r3, [r4, #4]
 800c94a:	bf08      	it	eq
 800c94c:	f8c8 1000 	streq.w	r1, [r8]
 800c950:	5162      	str	r2, [r4, r5]
 800c952:	604b      	str	r3, [r1, #4]
 800c954:	4638      	mov	r0, r7
 800c956:	f104 060b 	add.w	r6, r4, #11
 800c95a:	f000 f829 	bl	800c9b0 <__malloc_unlock>
 800c95e:	f026 0607 	bic.w	r6, r6, #7
 800c962:	1d23      	adds	r3, r4, #4
 800c964:	1af2      	subs	r2, r6, r3
 800c966:	d0ae      	beq.n	800c8c6 <_malloc_r+0x22>
 800c968:	1b9b      	subs	r3, r3, r6
 800c96a:	50a3      	str	r3, [r4, r2]
 800c96c:	e7ab      	b.n	800c8c6 <_malloc_r+0x22>
 800c96e:	42a3      	cmp	r3, r4
 800c970:	6862      	ldr	r2, [r4, #4]
 800c972:	d1dd      	bne.n	800c930 <_malloc_r+0x8c>
 800c974:	f8c8 2000 	str.w	r2, [r8]
 800c978:	e7ec      	b.n	800c954 <_malloc_r+0xb0>
 800c97a:	4623      	mov	r3, r4
 800c97c:	6864      	ldr	r4, [r4, #4]
 800c97e:	e7ac      	b.n	800c8da <_malloc_r+0x36>
 800c980:	4634      	mov	r4, r6
 800c982:	6876      	ldr	r6, [r6, #4]
 800c984:	e7b4      	b.n	800c8f0 <_malloc_r+0x4c>
 800c986:	4613      	mov	r3, r2
 800c988:	e7cc      	b.n	800c924 <_malloc_r+0x80>
 800c98a:	230c      	movs	r3, #12
 800c98c:	603b      	str	r3, [r7, #0]
 800c98e:	4638      	mov	r0, r7
 800c990:	f000 f80e 	bl	800c9b0 <__malloc_unlock>
 800c994:	e797      	b.n	800c8c6 <_malloc_r+0x22>
 800c996:	6025      	str	r5, [r4, #0]
 800c998:	e7dc      	b.n	800c954 <_malloc_r+0xb0>
 800c99a:	605b      	str	r3, [r3, #4]
 800c99c:	deff      	udf	#255	; 0xff
 800c99e:	bf00      	nop
 800c9a0:	20004da8 	.word	0x20004da8

0800c9a4 <__malloc_lock>:
 800c9a4:	4801      	ldr	r0, [pc, #4]	; (800c9ac <__malloc_lock+0x8>)
 800c9a6:	f7ff b87f 	b.w	800baa8 <__retarget_lock_acquire_recursive>
 800c9aa:	bf00      	nop
 800c9ac:	20004da4 	.word	0x20004da4

0800c9b0 <__malloc_unlock>:
 800c9b0:	4801      	ldr	r0, [pc, #4]	; (800c9b8 <__malloc_unlock+0x8>)
 800c9b2:	f7ff b87a 	b.w	800baaa <__retarget_lock_release_recursive>
 800c9b6:	bf00      	nop
 800c9b8:	20004da4 	.word	0x20004da4

0800c9bc <_Balloc>:
 800c9bc:	b570      	push	{r4, r5, r6, lr}
 800c9be:	69c6      	ldr	r6, [r0, #28]
 800c9c0:	4604      	mov	r4, r0
 800c9c2:	460d      	mov	r5, r1
 800c9c4:	b976      	cbnz	r6, 800c9e4 <_Balloc+0x28>
 800c9c6:	2010      	movs	r0, #16
 800c9c8:	f7ff ff44 	bl	800c854 <malloc>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	61e0      	str	r0, [r4, #28]
 800c9d0:	b920      	cbnz	r0, 800c9dc <_Balloc+0x20>
 800c9d2:	4b18      	ldr	r3, [pc, #96]	; (800ca34 <_Balloc+0x78>)
 800c9d4:	4818      	ldr	r0, [pc, #96]	; (800ca38 <_Balloc+0x7c>)
 800c9d6:	216b      	movs	r1, #107	; 0x6b
 800c9d8:	f000 fdf2 	bl	800d5c0 <__assert_func>
 800c9dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9e0:	6006      	str	r6, [r0, #0]
 800c9e2:	60c6      	str	r6, [r0, #12]
 800c9e4:	69e6      	ldr	r6, [r4, #28]
 800c9e6:	68f3      	ldr	r3, [r6, #12]
 800c9e8:	b183      	cbz	r3, 800ca0c <_Balloc+0x50>
 800c9ea:	69e3      	ldr	r3, [r4, #28]
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c9f2:	b9b8      	cbnz	r0, 800ca24 <_Balloc+0x68>
 800c9f4:	2101      	movs	r1, #1
 800c9f6:	fa01 f605 	lsl.w	r6, r1, r5
 800c9fa:	1d72      	adds	r2, r6, #5
 800c9fc:	0092      	lsls	r2, r2, #2
 800c9fe:	4620      	mov	r0, r4
 800ca00:	f000 fdfc 	bl	800d5fc <_calloc_r>
 800ca04:	b160      	cbz	r0, 800ca20 <_Balloc+0x64>
 800ca06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca0a:	e00e      	b.n	800ca2a <_Balloc+0x6e>
 800ca0c:	2221      	movs	r2, #33	; 0x21
 800ca0e:	2104      	movs	r1, #4
 800ca10:	4620      	mov	r0, r4
 800ca12:	f000 fdf3 	bl	800d5fc <_calloc_r>
 800ca16:	69e3      	ldr	r3, [r4, #28]
 800ca18:	60f0      	str	r0, [r6, #12]
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d1e4      	bne.n	800c9ea <_Balloc+0x2e>
 800ca20:	2000      	movs	r0, #0
 800ca22:	bd70      	pop	{r4, r5, r6, pc}
 800ca24:	6802      	ldr	r2, [r0, #0]
 800ca26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca30:	e7f7      	b.n	800ca22 <_Balloc+0x66>
 800ca32:	bf00      	nop
 800ca34:	0800eaca 	.word	0x0800eaca
 800ca38:	0800eb4a 	.word	0x0800eb4a

0800ca3c <_Bfree>:
 800ca3c:	b570      	push	{r4, r5, r6, lr}
 800ca3e:	69c6      	ldr	r6, [r0, #28]
 800ca40:	4605      	mov	r5, r0
 800ca42:	460c      	mov	r4, r1
 800ca44:	b976      	cbnz	r6, 800ca64 <_Bfree+0x28>
 800ca46:	2010      	movs	r0, #16
 800ca48:	f7ff ff04 	bl	800c854 <malloc>
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	61e8      	str	r0, [r5, #28]
 800ca50:	b920      	cbnz	r0, 800ca5c <_Bfree+0x20>
 800ca52:	4b09      	ldr	r3, [pc, #36]	; (800ca78 <_Bfree+0x3c>)
 800ca54:	4809      	ldr	r0, [pc, #36]	; (800ca7c <_Bfree+0x40>)
 800ca56:	218f      	movs	r1, #143	; 0x8f
 800ca58:	f000 fdb2 	bl	800d5c0 <__assert_func>
 800ca5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca60:	6006      	str	r6, [r0, #0]
 800ca62:	60c6      	str	r6, [r0, #12]
 800ca64:	b13c      	cbz	r4, 800ca76 <_Bfree+0x3a>
 800ca66:	69eb      	ldr	r3, [r5, #28]
 800ca68:	6862      	ldr	r2, [r4, #4]
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca70:	6021      	str	r1, [r4, #0]
 800ca72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca76:	bd70      	pop	{r4, r5, r6, pc}
 800ca78:	0800eaca 	.word	0x0800eaca
 800ca7c:	0800eb4a 	.word	0x0800eb4a

0800ca80 <__multadd>:
 800ca80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca84:	690d      	ldr	r5, [r1, #16]
 800ca86:	4607      	mov	r7, r0
 800ca88:	460c      	mov	r4, r1
 800ca8a:	461e      	mov	r6, r3
 800ca8c:	f101 0c14 	add.w	ip, r1, #20
 800ca90:	2000      	movs	r0, #0
 800ca92:	f8dc 3000 	ldr.w	r3, [ip]
 800ca96:	b299      	uxth	r1, r3
 800ca98:	fb02 6101 	mla	r1, r2, r1, r6
 800ca9c:	0c1e      	lsrs	r6, r3, #16
 800ca9e:	0c0b      	lsrs	r3, r1, #16
 800caa0:	fb02 3306 	mla	r3, r2, r6, r3
 800caa4:	b289      	uxth	r1, r1
 800caa6:	3001      	adds	r0, #1
 800caa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800caac:	4285      	cmp	r5, r0
 800caae:	f84c 1b04 	str.w	r1, [ip], #4
 800cab2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cab6:	dcec      	bgt.n	800ca92 <__multadd+0x12>
 800cab8:	b30e      	cbz	r6, 800cafe <__multadd+0x7e>
 800caba:	68a3      	ldr	r3, [r4, #8]
 800cabc:	42ab      	cmp	r3, r5
 800cabe:	dc19      	bgt.n	800caf4 <__multadd+0x74>
 800cac0:	6861      	ldr	r1, [r4, #4]
 800cac2:	4638      	mov	r0, r7
 800cac4:	3101      	adds	r1, #1
 800cac6:	f7ff ff79 	bl	800c9bc <_Balloc>
 800caca:	4680      	mov	r8, r0
 800cacc:	b928      	cbnz	r0, 800cada <__multadd+0x5a>
 800cace:	4602      	mov	r2, r0
 800cad0:	4b0c      	ldr	r3, [pc, #48]	; (800cb04 <__multadd+0x84>)
 800cad2:	480d      	ldr	r0, [pc, #52]	; (800cb08 <__multadd+0x88>)
 800cad4:	21ba      	movs	r1, #186	; 0xba
 800cad6:	f000 fd73 	bl	800d5c0 <__assert_func>
 800cada:	6922      	ldr	r2, [r4, #16]
 800cadc:	3202      	adds	r2, #2
 800cade:	f104 010c 	add.w	r1, r4, #12
 800cae2:	0092      	lsls	r2, r2, #2
 800cae4:	300c      	adds	r0, #12
 800cae6:	f7fe ffe1 	bl	800baac <memcpy>
 800caea:	4621      	mov	r1, r4
 800caec:	4638      	mov	r0, r7
 800caee:	f7ff ffa5 	bl	800ca3c <_Bfree>
 800caf2:	4644      	mov	r4, r8
 800caf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800caf8:	3501      	adds	r5, #1
 800cafa:	615e      	str	r6, [r3, #20]
 800cafc:	6125      	str	r5, [r4, #16]
 800cafe:	4620      	mov	r0, r4
 800cb00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb04:	0800eb39 	.word	0x0800eb39
 800cb08:	0800eb4a 	.word	0x0800eb4a

0800cb0c <__hi0bits>:
 800cb0c:	0c03      	lsrs	r3, r0, #16
 800cb0e:	041b      	lsls	r3, r3, #16
 800cb10:	b9d3      	cbnz	r3, 800cb48 <__hi0bits+0x3c>
 800cb12:	0400      	lsls	r0, r0, #16
 800cb14:	2310      	movs	r3, #16
 800cb16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cb1a:	bf04      	itt	eq
 800cb1c:	0200      	lsleq	r0, r0, #8
 800cb1e:	3308      	addeq	r3, #8
 800cb20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cb24:	bf04      	itt	eq
 800cb26:	0100      	lsleq	r0, r0, #4
 800cb28:	3304      	addeq	r3, #4
 800cb2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cb2e:	bf04      	itt	eq
 800cb30:	0080      	lsleq	r0, r0, #2
 800cb32:	3302      	addeq	r3, #2
 800cb34:	2800      	cmp	r0, #0
 800cb36:	db05      	blt.n	800cb44 <__hi0bits+0x38>
 800cb38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cb3c:	f103 0301 	add.w	r3, r3, #1
 800cb40:	bf08      	it	eq
 800cb42:	2320      	moveq	r3, #32
 800cb44:	4618      	mov	r0, r3
 800cb46:	4770      	bx	lr
 800cb48:	2300      	movs	r3, #0
 800cb4a:	e7e4      	b.n	800cb16 <__hi0bits+0xa>

0800cb4c <__lo0bits>:
 800cb4c:	6803      	ldr	r3, [r0, #0]
 800cb4e:	f013 0207 	ands.w	r2, r3, #7
 800cb52:	d00c      	beq.n	800cb6e <__lo0bits+0x22>
 800cb54:	07d9      	lsls	r1, r3, #31
 800cb56:	d422      	bmi.n	800cb9e <__lo0bits+0x52>
 800cb58:	079a      	lsls	r2, r3, #30
 800cb5a:	bf49      	itett	mi
 800cb5c:	085b      	lsrmi	r3, r3, #1
 800cb5e:	089b      	lsrpl	r3, r3, #2
 800cb60:	6003      	strmi	r3, [r0, #0]
 800cb62:	2201      	movmi	r2, #1
 800cb64:	bf5c      	itt	pl
 800cb66:	6003      	strpl	r3, [r0, #0]
 800cb68:	2202      	movpl	r2, #2
 800cb6a:	4610      	mov	r0, r2
 800cb6c:	4770      	bx	lr
 800cb6e:	b299      	uxth	r1, r3
 800cb70:	b909      	cbnz	r1, 800cb76 <__lo0bits+0x2a>
 800cb72:	0c1b      	lsrs	r3, r3, #16
 800cb74:	2210      	movs	r2, #16
 800cb76:	b2d9      	uxtb	r1, r3
 800cb78:	b909      	cbnz	r1, 800cb7e <__lo0bits+0x32>
 800cb7a:	3208      	adds	r2, #8
 800cb7c:	0a1b      	lsrs	r3, r3, #8
 800cb7e:	0719      	lsls	r1, r3, #28
 800cb80:	bf04      	itt	eq
 800cb82:	091b      	lsreq	r3, r3, #4
 800cb84:	3204      	addeq	r2, #4
 800cb86:	0799      	lsls	r1, r3, #30
 800cb88:	bf04      	itt	eq
 800cb8a:	089b      	lsreq	r3, r3, #2
 800cb8c:	3202      	addeq	r2, #2
 800cb8e:	07d9      	lsls	r1, r3, #31
 800cb90:	d403      	bmi.n	800cb9a <__lo0bits+0x4e>
 800cb92:	085b      	lsrs	r3, r3, #1
 800cb94:	f102 0201 	add.w	r2, r2, #1
 800cb98:	d003      	beq.n	800cba2 <__lo0bits+0x56>
 800cb9a:	6003      	str	r3, [r0, #0]
 800cb9c:	e7e5      	b.n	800cb6a <__lo0bits+0x1e>
 800cb9e:	2200      	movs	r2, #0
 800cba0:	e7e3      	b.n	800cb6a <__lo0bits+0x1e>
 800cba2:	2220      	movs	r2, #32
 800cba4:	e7e1      	b.n	800cb6a <__lo0bits+0x1e>
	...

0800cba8 <__i2b>:
 800cba8:	b510      	push	{r4, lr}
 800cbaa:	460c      	mov	r4, r1
 800cbac:	2101      	movs	r1, #1
 800cbae:	f7ff ff05 	bl	800c9bc <_Balloc>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	b928      	cbnz	r0, 800cbc2 <__i2b+0x1a>
 800cbb6:	4b05      	ldr	r3, [pc, #20]	; (800cbcc <__i2b+0x24>)
 800cbb8:	4805      	ldr	r0, [pc, #20]	; (800cbd0 <__i2b+0x28>)
 800cbba:	f240 1145 	movw	r1, #325	; 0x145
 800cbbe:	f000 fcff 	bl	800d5c0 <__assert_func>
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	6144      	str	r4, [r0, #20]
 800cbc6:	6103      	str	r3, [r0, #16]
 800cbc8:	bd10      	pop	{r4, pc}
 800cbca:	bf00      	nop
 800cbcc:	0800eb39 	.word	0x0800eb39
 800cbd0:	0800eb4a 	.word	0x0800eb4a

0800cbd4 <__multiply>:
 800cbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd8:	4691      	mov	r9, r2
 800cbda:	690a      	ldr	r2, [r1, #16]
 800cbdc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	bfb8      	it	lt
 800cbe4:	460b      	movlt	r3, r1
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	bfbc      	itt	lt
 800cbea:	464c      	movlt	r4, r9
 800cbec:	4699      	movlt	r9, r3
 800cbee:	6927      	ldr	r7, [r4, #16]
 800cbf0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cbf4:	68a3      	ldr	r3, [r4, #8]
 800cbf6:	6861      	ldr	r1, [r4, #4]
 800cbf8:	eb07 060a 	add.w	r6, r7, sl
 800cbfc:	42b3      	cmp	r3, r6
 800cbfe:	b085      	sub	sp, #20
 800cc00:	bfb8      	it	lt
 800cc02:	3101      	addlt	r1, #1
 800cc04:	f7ff feda 	bl	800c9bc <_Balloc>
 800cc08:	b930      	cbnz	r0, 800cc18 <__multiply+0x44>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	4b44      	ldr	r3, [pc, #272]	; (800cd20 <__multiply+0x14c>)
 800cc0e:	4845      	ldr	r0, [pc, #276]	; (800cd24 <__multiply+0x150>)
 800cc10:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cc14:	f000 fcd4 	bl	800d5c0 <__assert_func>
 800cc18:	f100 0514 	add.w	r5, r0, #20
 800cc1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cc20:	462b      	mov	r3, r5
 800cc22:	2200      	movs	r2, #0
 800cc24:	4543      	cmp	r3, r8
 800cc26:	d321      	bcc.n	800cc6c <__multiply+0x98>
 800cc28:	f104 0314 	add.w	r3, r4, #20
 800cc2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cc30:	f109 0314 	add.w	r3, r9, #20
 800cc34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cc38:	9202      	str	r2, [sp, #8]
 800cc3a:	1b3a      	subs	r2, r7, r4
 800cc3c:	3a15      	subs	r2, #21
 800cc3e:	f022 0203 	bic.w	r2, r2, #3
 800cc42:	3204      	adds	r2, #4
 800cc44:	f104 0115 	add.w	r1, r4, #21
 800cc48:	428f      	cmp	r7, r1
 800cc4a:	bf38      	it	cc
 800cc4c:	2204      	movcc	r2, #4
 800cc4e:	9201      	str	r2, [sp, #4]
 800cc50:	9a02      	ldr	r2, [sp, #8]
 800cc52:	9303      	str	r3, [sp, #12]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d80c      	bhi.n	800cc72 <__multiply+0x9e>
 800cc58:	2e00      	cmp	r6, #0
 800cc5a:	dd03      	ble.n	800cc64 <__multiply+0x90>
 800cc5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d05b      	beq.n	800cd1c <__multiply+0x148>
 800cc64:	6106      	str	r6, [r0, #16]
 800cc66:	b005      	add	sp, #20
 800cc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc6c:	f843 2b04 	str.w	r2, [r3], #4
 800cc70:	e7d8      	b.n	800cc24 <__multiply+0x50>
 800cc72:	f8b3 a000 	ldrh.w	sl, [r3]
 800cc76:	f1ba 0f00 	cmp.w	sl, #0
 800cc7a:	d024      	beq.n	800ccc6 <__multiply+0xf2>
 800cc7c:	f104 0e14 	add.w	lr, r4, #20
 800cc80:	46a9      	mov	r9, r5
 800cc82:	f04f 0c00 	mov.w	ip, #0
 800cc86:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cc8a:	f8d9 1000 	ldr.w	r1, [r9]
 800cc8e:	fa1f fb82 	uxth.w	fp, r2
 800cc92:	b289      	uxth	r1, r1
 800cc94:	fb0a 110b 	mla	r1, sl, fp, r1
 800cc98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cc9c:	f8d9 2000 	ldr.w	r2, [r9]
 800cca0:	4461      	add	r1, ip
 800cca2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cca6:	fb0a c20b 	mla	r2, sl, fp, ip
 800ccaa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ccae:	b289      	uxth	r1, r1
 800ccb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ccb4:	4577      	cmp	r7, lr
 800ccb6:	f849 1b04 	str.w	r1, [r9], #4
 800ccba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ccbe:	d8e2      	bhi.n	800cc86 <__multiply+0xb2>
 800ccc0:	9a01      	ldr	r2, [sp, #4]
 800ccc2:	f845 c002 	str.w	ip, [r5, r2]
 800ccc6:	9a03      	ldr	r2, [sp, #12]
 800ccc8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cccc:	3304      	adds	r3, #4
 800ccce:	f1b9 0f00 	cmp.w	r9, #0
 800ccd2:	d021      	beq.n	800cd18 <__multiply+0x144>
 800ccd4:	6829      	ldr	r1, [r5, #0]
 800ccd6:	f104 0c14 	add.w	ip, r4, #20
 800ccda:	46ae      	mov	lr, r5
 800ccdc:	f04f 0a00 	mov.w	sl, #0
 800cce0:	f8bc b000 	ldrh.w	fp, [ip]
 800cce4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cce8:	fb09 220b 	mla	r2, r9, fp, r2
 800ccec:	4452      	add	r2, sl
 800ccee:	b289      	uxth	r1, r1
 800ccf0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ccf4:	f84e 1b04 	str.w	r1, [lr], #4
 800ccf8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ccfc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cd00:	f8be 1000 	ldrh.w	r1, [lr]
 800cd04:	fb09 110a 	mla	r1, r9, sl, r1
 800cd08:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800cd0c:	4567      	cmp	r7, ip
 800cd0e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cd12:	d8e5      	bhi.n	800cce0 <__multiply+0x10c>
 800cd14:	9a01      	ldr	r2, [sp, #4]
 800cd16:	50a9      	str	r1, [r5, r2]
 800cd18:	3504      	adds	r5, #4
 800cd1a:	e799      	b.n	800cc50 <__multiply+0x7c>
 800cd1c:	3e01      	subs	r6, #1
 800cd1e:	e79b      	b.n	800cc58 <__multiply+0x84>
 800cd20:	0800eb39 	.word	0x0800eb39
 800cd24:	0800eb4a 	.word	0x0800eb4a

0800cd28 <__pow5mult>:
 800cd28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd2c:	4615      	mov	r5, r2
 800cd2e:	f012 0203 	ands.w	r2, r2, #3
 800cd32:	4606      	mov	r6, r0
 800cd34:	460f      	mov	r7, r1
 800cd36:	d007      	beq.n	800cd48 <__pow5mult+0x20>
 800cd38:	4c25      	ldr	r4, [pc, #148]	; (800cdd0 <__pow5mult+0xa8>)
 800cd3a:	3a01      	subs	r2, #1
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd42:	f7ff fe9d 	bl	800ca80 <__multadd>
 800cd46:	4607      	mov	r7, r0
 800cd48:	10ad      	asrs	r5, r5, #2
 800cd4a:	d03d      	beq.n	800cdc8 <__pow5mult+0xa0>
 800cd4c:	69f4      	ldr	r4, [r6, #28]
 800cd4e:	b97c      	cbnz	r4, 800cd70 <__pow5mult+0x48>
 800cd50:	2010      	movs	r0, #16
 800cd52:	f7ff fd7f 	bl	800c854 <malloc>
 800cd56:	4602      	mov	r2, r0
 800cd58:	61f0      	str	r0, [r6, #28]
 800cd5a:	b928      	cbnz	r0, 800cd68 <__pow5mult+0x40>
 800cd5c:	4b1d      	ldr	r3, [pc, #116]	; (800cdd4 <__pow5mult+0xac>)
 800cd5e:	481e      	ldr	r0, [pc, #120]	; (800cdd8 <__pow5mult+0xb0>)
 800cd60:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cd64:	f000 fc2c 	bl	800d5c0 <__assert_func>
 800cd68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd6c:	6004      	str	r4, [r0, #0]
 800cd6e:	60c4      	str	r4, [r0, #12]
 800cd70:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cd74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd78:	b94c      	cbnz	r4, 800cd8e <__pow5mult+0x66>
 800cd7a:	f240 2171 	movw	r1, #625	; 0x271
 800cd7e:	4630      	mov	r0, r6
 800cd80:	f7ff ff12 	bl	800cba8 <__i2b>
 800cd84:	2300      	movs	r3, #0
 800cd86:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	6003      	str	r3, [r0, #0]
 800cd8e:	f04f 0900 	mov.w	r9, #0
 800cd92:	07eb      	lsls	r3, r5, #31
 800cd94:	d50a      	bpl.n	800cdac <__pow5mult+0x84>
 800cd96:	4639      	mov	r1, r7
 800cd98:	4622      	mov	r2, r4
 800cd9a:	4630      	mov	r0, r6
 800cd9c:	f7ff ff1a 	bl	800cbd4 <__multiply>
 800cda0:	4639      	mov	r1, r7
 800cda2:	4680      	mov	r8, r0
 800cda4:	4630      	mov	r0, r6
 800cda6:	f7ff fe49 	bl	800ca3c <_Bfree>
 800cdaa:	4647      	mov	r7, r8
 800cdac:	106d      	asrs	r5, r5, #1
 800cdae:	d00b      	beq.n	800cdc8 <__pow5mult+0xa0>
 800cdb0:	6820      	ldr	r0, [r4, #0]
 800cdb2:	b938      	cbnz	r0, 800cdc4 <__pow5mult+0x9c>
 800cdb4:	4622      	mov	r2, r4
 800cdb6:	4621      	mov	r1, r4
 800cdb8:	4630      	mov	r0, r6
 800cdba:	f7ff ff0b 	bl	800cbd4 <__multiply>
 800cdbe:	6020      	str	r0, [r4, #0]
 800cdc0:	f8c0 9000 	str.w	r9, [r0]
 800cdc4:	4604      	mov	r4, r0
 800cdc6:	e7e4      	b.n	800cd92 <__pow5mult+0x6a>
 800cdc8:	4638      	mov	r0, r7
 800cdca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdce:	bf00      	nop
 800cdd0:	0800ec98 	.word	0x0800ec98
 800cdd4:	0800eaca 	.word	0x0800eaca
 800cdd8:	0800eb4a 	.word	0x0800eb4a

0800cddc <__lshift>:
 800cddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cde0:	460c      	mov	r4, r1
 800cde2:	6849      	ldr	r1, [r1, #4]
 800cde4:	6923      	ldr	r3, [r4, #16]
 800cde6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cdea:	68a3      	ldr	r3, [r4, #8]
 800cdec:	4607      	mov	r7, r0
 800cdee:	4691      	mov	r9, r2
 800cdf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cdf4:	f108 0601 	add.w	r6, r8, #1
 800cdf8:	42b3      	cmp	r3, r6
 800cdfa:	db0b      	blt.n	800ce14 <__lshift+0x38>
 800cdfc:	4638      	mov	r0, r7
 800cdfe:	f7ff fddd 	bl	800c9bc <_Balloc>
 800ce02:	4605      	mov	r5, r0
 800ce04:	b948      	cbnz	r0, 800ce1a <__lshift+0x3e>
 800ce06:	4602      	mov	r2, r0
 800ce08:	4b28      	ldr	r3, [pc, #160]	; (800ceac <__lshift+0xd0>)
 800ce0a:	4829      	ldr	r0, [pc, #164]	; (800ceb0 <__lshift+0xd4>)
 800ce0c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ce10:	f000 fbd6 	bl	800d5c0 <__assert_func>
 800ce14:	3101      	adds	r1, #1
 800ce16:	005b      	lsls	r3, r3, #1
 800ce18:	e7ee      	b.n	800cdf8 <__lshift+0x1c>
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	f100 0114 	add.w	r1, r0, #20
 800ce20:	f100 0210 	add.w	r2, r0, #16
 800ce24:	4618      	mov	r0, r3
 800ce26:	4553      	cmp	r3, sl
 800ce28:	db33      	blt.n	800ce92 <__lshift+0xb6>
 800ce2a:	6920      	ldr	r0, [r4, #16]
 800ce2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce30:	f104 0314 	add.w	r3, r4, #20
 800ce34:	f019 091f 	ands.w	r9, r9, #31
 800ce38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce40:	d02b      	beq.n	800ce9a <__lshift+0xbe>
 800ce42:	f1c9 0e20 	rsb	lr, r9, #32
 800ce46:	468a      	mov	sl, r1
 800ce48:	2200      	movs	r2, #0
 800ce4a:	6818      	ldr	r0, [r3, #0]
 800ce4c:	fa00 f009 	lsl.w	r0, r0, r9
 800ce50:	4310      	orrs	r0, r2
 800ce52:	f84a 0b04 	str.w	r0, [sl], #4
 800ce56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce5a:	459c      	cmp	ip, r3
 800ce5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce60:	d8f3      	bhi.n	800ce4a <__lshift+0x6e>
 800ce62:	ebac 0304 	sub.w	r3, ip, r4
 800ce66:	3b15      	subs	r3, #21
 800ce68:	f023 0303 	bic.w	r3, r3, #3
 800ce6c:	3304      	adds	r3, #4
 800ce6e:	f104 0015 	add.w	r0, r4, #21
 800ce72:	4584      	cmp	ip, r0
 800ce74:	bf38      	it	cc
 800ce76:	2304      	movcc	r3, #4
 800ce78:	50ca      	str	r2, [r1, r3]
 800ce7a:	b10a      	cbz	r2, 800ce80 <__lshift+0xa4>
 800ce7c:	f108 0602 	add.w	r6, r8, #2
 800ce80:	3e01      	subs	r6, #1
 800ce82:	4638      	mov	r0, r7
 800ce84:	612e      	str	r6, [r5, #16]
 800ce86:	4621      	mov	r1, r4
 800ce88:	f7ff fdd8 	bl	800ca3c <_Bfree>
 800ce8c:	4628      	mov	r0, r5
 800ce8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce92:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce96:	3301      	adds	r3, #1
 800ce98:	e7c5      	b.n	800ce26 <__lshift+0x4a>
 800ce9a:	3904      	subs	r1, #4
 800ce9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cea0:	f841 2f04 	str.w	r2, [r1, #4]!
 800cea4:	459c      	cmp	ip, r3
 800cea6:	d8f9      	bhi.n	800ce9c <__lshift+0xc0>
 800cea8:	e7ea      	b.n	800ce80 <__lshift+0xa4>
 800ceaa:	bf00      	nop
 800ceac:	0800eb39 	.word	0x0800eb39
 800ceb0:	0800eb4a 	.word	0x0800eb4a

0800ceb4 <__mcmp>:
 800ceb4:	b530      	push	{r4, r5, lr}
 800ceb6:	6902      	ldr	r2, [r0, #16]
 800ceb8:	690c      	ldr	r4, [r1, #16]
 800ceba:	1b12      	subs	r2, r2, r4
 800cebc:	d10e      	bne.n	800cedc <__mcmp+0x28>
 800cebe:	f100 0314 	add.w	r3, r0, #20
 800cec2:	3114      	adds	r1, #20
 800cec4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cec8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cecc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ced0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ced4:	42a5      	cmp	r5, r4
 800ced6:	d003      	beq.n	800cee0 <__mcmp+0x2c>
 800ced8:	d305      	bcc.n	800cee6 <__mcmp+0x32>
 800ceda:	2201      	movs	r2, #1
 800cedc:	4610      	mov	r0, r2
 800cede:	bd30      	pop	{r4, r5, pc}
 800cee0:	4283      	cmp	r3, r0
 800cee2:	d3f3      	bcc.n	800cecc <__mcmp+0x18>
 800cee4:	e7fa      	b.n	800cedc <__mcmp+0x28>
 800cee6:	f04f 32ff 	mov.w	r2, #4294967295
 800ceea:	e7f7      	b.n	800cedc <__mcmp+0x28>

0800ceec <__mdiff>:
 800ceec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef0:	460c      	mov	r4, r1
 800cef2:	4606      	mov	r6, r0
 800cef4:	4611      	mov	r1, r2
 800cef6:	4620      	mov	r0, r4
 800cef8:	4690      	mov	r8, r2
 800cefa:	f7ff ffdb 	bl	800ceb4 <__mcmp>
 800cefe:	1e05      	subs	r5, r0, #0
 800cf00:	d110      	bne.n	800cf24 <__mdiff+0x38>
 800cf02:	4629      	mov	r1, r5
 800cf04:	4630      	mov	r0, r6
 800cf06:	f7ff fd59 	bl	800c9bc <_Balloc>
 800cf0a:	b930      	cbnz	r0, 800cf1a <__mdiff+0x2e>
 800cf0c:	4b3a      	ldr	r3, [pc, #232]	; (800cff8 <__mdiff+0x10c>)
 800cf0e:	4602      	mov	r2, r0
 800cf10:	f240 2137 	movw	r1, #567	; 0x237
 800cf14:	4839      	ldr	r0, [pc, #228]	; (800cffc <__mdiff+0x110>)
 800cf16:	f000 fb53 	bl	800d5c0 <__assert_func>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf24:	bfa4      	itt	ge
 800cf26:	4643      	movge	r3, r8
 800cf28:	46a0      	movge	r8, r4
 800cf2a:	4630      	mov	r0, r6
 800cf2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cf30:	bfa6      	itte	ge
 800cf32:	461c      	movge	r4, r3
 800cf34:	2500      	movge	r5, #0
 800cf36:	2501      	movlt	r5, #1
 800cf38:	f7ff fd40 	bl	800c9bc <_Balloc>
 800cf3c:	b920      	cbnz	r0, 800cf48 <__mdiff+0x5c>
 800cf3e:	4b2e      	ldr	r3, [pc, #184]	; (800cff8 <__mdiff+0x10c>)
 800cf40:	4602      	mov	r2, r0
 800cf42:	f240 2145 	movw	r1, #581	; 0x245
 800cf46:	e7e5      	b.n	800cf14 <__mdiff+0x28>
 800cf48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cf4c:	6926      	ldr	r6, [r4, #16]
 800cf4e:	60c5      	str	r5, [r0, #12]
 800cf50:	f104 0914 	add.w	r9, r4, #20
 800cf54:	f108 0514 	add.w	r5, r8, #20
 800cf58:	f100 0e14 	add.w	lr, r0, #20
 800cf5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cf60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cf64:	f108 0210 	add.w	r2, r8, #16
 800cf68:	46f2      	mov	sl, lr
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cf70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cf74:	fa11 f88b 	uxtah	r8, r1, fp
 800cf78:	b299      	uxth	r1, r3
 800cf7a:	0c1b      	lsrs	r3, r3, #16
 800cf7c:	eba8 0801 	sub.w	r8, r8, r1
 800cf80:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cf84:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cf88:	fa1f f888 	uxth.w	r8, r8
 800cf8c:	1419      	asrs	r1, r3, #16
 800cf8e:	454e      	cmp	r6, r9
 800cf90:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cf94:	f84a 3b04 	str.w	r3, [sl], #4
 800cf98:	d8e8      	bhi.n	800cf6c <__mdiff+0x80>
 800cf9a:	1b33      	subs	r3, r6, r4
 800cf9c:	3b15      	subs	r3, #21
 800cf9e:	f023 0303 	bic.w	r3, r3, #3
 800cfa2:	3304      	adds	r3, #4
 800cfa4:	3415      	adds	r4, #21
 800cfa6:	42a6      	cmp	r6, r4
 800cfa8:	bf38      	it	cc
 800cfaa:	2304      	movcc	r3, #4
 800cfac:	441d      	add	r5, r3
 800cfae:	4473      	add	r3, lr
 800cfb0:	469e      	mov	lr, r3
 800cfb2:	462e      	mov	r6, r5
 800cfb4:	4566      	cmp	r6, ip
 800cfb6:	d30e      	bcc.n	800cfd6 <__mdiff+0xea>
 800cfb8:	f10c 0203 	add.w	r2, ip, #3
 800cfbc:	1b52      	subs	r2, r2, r5
 800cfbe:	f022 0203 	bic.w	r2, r2, #3
 800cfc2:	3d03      	subs	r5, #3
 800cfc4:	45ac      	cmp	ip, r5
 800cfc6:	bf38      	it	cc
 800cfc8:	2200      	movcc	r2, #0
 800cfca:	4413      	add	r3, r2
 800cfcc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cfd0:	b17a      	cbz	r2, 800cff2 <__mdiff+0x106>
 800cfd2:	6107      	str	r7, [r0, #16]
 800cfd4:	e7a4      	b.n	800cf20 <__mdiff+0x34>
 800cfd6:	f856 8b04 	ldr.w	r8, [r6], #4
 800cfda:	fa11 f288 	uxtah	r2, r1, r8
 800cfde:	1414      	asrs	r4, r2, #16
 800cfe0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cfe4:	b292      	uxth	r2, r2
 800cfe6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cfea:	f84e 2b04 	str.w	r2, [lr], #4
 800cfee:	1421      	asrs	r1, r4, #16
 800cff0:	e7e0      	b.n	800cfb4 <__mdiff+0xc8>
 800cff2:	3f01      	subs	r7, #1
 800cff4:	e7ea      	b.n	800cfcc <__mdiff+0xe0>
 800cff6:	bf00      	nop
 800cff8:	0800eb39 	.word	0x0800eb39
 800cffc:	0800eb4a 	.word	0x0800eb4a

0800d000 <__d2b>:
 800d000:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d004:	460f      	mov	r7, r1
 800d006:	2101      	movs	r1, #1
 800d008:	ec59 8b10 	vmov	r8, r9, d0
 800d00c:	4616      	mov	r6, r2
 800d00e:	f7ff fcd5 	bl	800c9bc <_Balloc>
 800d012:	4604      	mov	r4, r0
 800d014:	b930      	cbnz	r0, 800d024 <__d2b+0x24>
 800d016:	4602      	mov	r2, r0
 800d018:	4b24      	ldr	r3, [pc, #144]	; (800d0ac <__d2b+0xac>)
 800d01a:	4825      	ldr	r0, [pc, #148]	; (800d0b0 <__d2b+0xb0>)
 800d01c:	f240 310f 	movw	r1, #783	; 0x30f
 800d020:	f000 face 	bl	800d5c0 <__assert_func>
 800d024:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d028:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d02c:	bb2d      	cbnz	r5, 800d07a <__d2b+0x7a>
 800d02e:	9301      	str	r3, [sp, #4]
 800d030:	f1b8 0300 	subs.w	r3, r8, #0
 800d034:	d026      	beq.n	800d084 <__d2b+0x84>
 800d036:	4668      	mov	r0, sp
 800d038:	9300      	str	r3, [sp, #0]
 800d03a:	f7ff fd87 	bl	800cb4c <__lo0bits>
 800d03e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d042:	b1e8      	cbz	r0, 800d080 <__d2b+0x80>
 800d044:	f1c0 0320 	rsb	r3, r0, #32
 800d048:	fa02 f303 	lsl.w	r3, r2, r3
 800d04c:	430b      	orrs	r3, r1
 800d04e:	40c2      	lsrs	r2, r0
 800d050:	6163      	str	r3, [r4, #20]
 800d052:	9201      	str	r2, [sp, #4]
 800d054:	9b01      	ldr	r3, [sp, #4]
 800d056:	61a3      	str	r3, [r4, #24]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	bf14      	ite	ne
 800d05c:	2202      	movne	r2, #2
 800d05e:	2201      	moveq	r2, #1
 800d060:	6122      	str	r2, [r4, #16]
 800d062:	b1bd      	cbz	r5, 800d094 <__d2b+0x94>
 800d064:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d068:	4405      	add	r5, r0
 800d06a:	603d      	str	r5, [r7, #0]
 800d06c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d070:	6030      	str	r0, [r6, #0]
 800d072:	4620      	mov	r0, r4
 800d074:	b003      	add	sp, #12
 800d076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d07a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d07e:	e7d6      	b.n	800d02e <__d2b+0x2e>
 800d080:	6161      	str	r1, [r4, #20]
 800d082:	e7e7      	b.n	800d054 <__d2b+0x54>
 800d084:	a801      	add	r0, sp, #4
 800d086:	f7ff fd61 	bl	800cb4c <__lo0bits>
 800d08a:	9b01      	ldr	r3, [sp, #4]
 800d08c:	6163      	str	r3, [r4, #20]
 800d08e:	3020      	adds	r0, #32
 800d090:	2201      	movs	r2, #1
 800d092:	e7e5      	b.n	800d060 <__d2b+0x60>
 800d094:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d098:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d09c:	6038      	str	r0, [r7, #0]
 800d09e:	6918      	ldr	r0, [r3, #16]
 800d0a0:	f7ff fd34 	bl	800cb0c <__hi0bits>
 800d0a4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d0a8:	e7e2      	b.n	800d070 <__d2b+0x70>
 800d0aa:	bf00      	nop
 800d0ac:	0800eb39 	.word	0x0800eb39
 800d0b0:	0800eb4a 	.word	0x0800eb4a

0800d0b4 <__sfputc_r>:
 800d0b4:	6893      	ldr	r3, [r2, #8]
 800d0b6:	3b01      	subs	r3, #1
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	b410      	push	{r4}
 800d0bc:	6093      	str	r3, [r2, #8]
 800d0be:	da08      	bge.n	800d0d2 <__sfputc_r+0x1e>
 800d0c0:	6994      	ldr	r4, [r2, #24]
 800d0c2:	42a3      	cmp	r3, r4
 800d0c4:	db01      	blt.n	800d0ca <__sfputc_r+0x16>
 800d0c6:	290a      	cmp	r1, #10
 800d0c8:	d103      	bne.n	800d0d2 <__sfputc_r+0x1e>
 800d0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0ce:	f7fe bb84 	b.w	800b7da <__swbuf_r>
 800d0d2:	6813      	ldr	r3, [r2, #0]
 800d0d4:	1c58      	adds	r0, r3, #1
 800d0d6:	6010      	str	r0, [r2, #0]
 800d0d8:	7019      	strb	r1, [r3, #0]
 800d0da:	4608      	mov	r0, r1
 800d0dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0e0:	4770      	bx	lr

0800d0e2 <__sfputs_r>:
 800d0e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0e4:	4606      	mov	r6, r0
 800d0e6:	460f      	mov	r7, r1
 800d0e8:	4614      	mov	r4, r2
 800d0ea:	18d5      	adds	r5, r2, r3
 800d0ec:	42ac      	cmp	r4, r5
 800d0ee:	d101      	bne.n	800d0f4 <__sfputs_r+0x12>
 800d0f0:	2000      	movs	r0, #0
 800d0f2:	e007      	b.n	800d104 <__sfputs_r+0x22>
 800d0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0f8:	463a      	mov	r2, r7
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	f7ff ffda 	bl	800d0b4 <__sfputc_r>
 800d100:	1c43      	adds	r3, r0, #1
 800d102:	d1f3      	bne.n	800d0ec <__sfputs_r+0xa>
 800d104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d108 <_vfiprintf_r>:
 800d108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d10c:	460d      	mov	r5, r1
 800d10e:	b09d      	sub	sp, #116	; 0x74
 800d110:	4614      	mov	r4, r2
 800d112:	4698      	mov	r8, r3
 800d114:	4606      	mov	r6, r0
 800d116:	b118      	cbz	r0, 800d120 <_vfiprintf_r+0x18>
 800d118:	6a03      	ldr	r3, [r0, #32]
 800d11a:	b90b      	cbnz	r3, 800d120 <_vfiprintf_r+0x18>
 800d11c:	f7fe fa76 	bl	800b60c <__sinit>
 800d120:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d122:	07d9      	lsls	r1, r3, #31
 800d124:	d405      	bmi.n	800d132 <_vfiprintf_r+0x2a>
 800d126:	89ab      	ldrh	r3, [r5, #12]
 800d128:	059a      	lsls	r2, r3, #22
 800d12a:	d402      	bmi.n	800d132 <_vfiprintf_r+0x2a>
 800d12c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d12e:	f7fe fcbb 	bl	800baa8 <__retarget_lock_acquire_recursive>
 800d132:	89ab      	ldrh	r3, [r5, #12]
 800d134:	071b      	lsls	r3, r3, #28
 800d136:	d501      	bpl.n	800d13c <_vfiprintf_r+0x34>
 800d138:	692b      	ldr	r3, [r5, #16]
 800d13a:	b99b      	cbnz	r3, 800d164 <_vfiprintf_r+0x5c>
 800d13c:	4629      	mov	r1, r5
 800d13e:	4630      	mov	r0, r6
 800d140:	f7fe fb88 	bl	800b854 <__swsetup_r>
 800d144:	b170      	cbz	r0, 800d164 <_vfiprintf_r+0x5c>
 800d146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d148:	07dc      	lsls	r4, r3, #31
 800d14a:	d504      	bpl.n	800d156 <_vfiprintf_r+0x4e>
 800d14c:	f04f 30ff 	mov.w	r0, #4294967295
 800d150:	b01d      	add	sp, #116	; 0x74
 800d152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d156:	89ab      	ldrh	r3, [r5, #12]
 800d158:	0598      	lsls	r0, r3, #22
 800d15a:	d4f7      	bmi.n	800d14c <_vfiprintf_r+0x44>
 800d15c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d15e:	f7fe fca4 	bl	800baaa <__retarget_lock_release_recursive>
 800d162:	e7f3      	b.n	800d14c <_vfiprintf_r+0x44>
 800d164:	2300      	movs	r3, #0
 800d166:	9309      	str	r3, [sp, #36]	; 0x24
 800d168:	2320      	movs	r3, #32
 800d16a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d16e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d172:	2330      	movs	r3, #48	; 0x30
 800d174:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d328 <_vfiprintf_r+0x220>
 800d178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d17c:	f04f 0901 	mov.w	r9, #1
 800d180:	4623      	mov	r3, r4
 800d182:	469a      	mov	sl, r3
 800d184:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d188:	b10a      	cbz	r2, 800d18e <_vfiprintf_r+0x86>
 800d18a:	2a25      	cmp	r2, #37	; 0x25
 800d18c:	d1f9      	bne.n	800d182 <_vfiprintf_r+0x7a>
 800d18e:	ebba 0b04 	subs.w	fp, sl, r4
 800d192:	d00b      	beq.n	800d1ac <_vfiprintf_r+0xa4>
 800d194:	465b      	mov	r3, fp
 800d196:	4622      	mov	r2, r4
 800d198:	4629      	mov	r1, r5
 800d19a:	4630      	mov	r0, r6
 800d19c:	f7ff ffa1 	bl	800d0e2 <__sfputs_r>
 800d1a0:	3001      	adds	r0, #1
 800d1a2:	f000 80a9 	beq.w	800d2f8 <_vfiprintf_r+0x1f0>
 800d1a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1a8:	445a      	add	r2, fp
 800d1aa:	9209      	str	r2, [sp, #36]	; 0x24
 800d1ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	f000 80a1 	beq.w	800d2f8 <_vfiprintf_r+0x1f0>
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1c0:	f10a 0a01 	add.w	sl, sl, #1
 800d1c4:	9304      	str	r3, [sp, #16]
 800d1c6:	9307      	str	r3, [sp, #28]
 800d1c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1cc:	931a      	str	r3, [sp, #104]	; 0x68
 800d1ce:	4654      	mov	r4, sl
 800d1d0:	2205      	movs	r2, #5
 800d1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1d6:	4854      	ldr	r0, [pc, #336]	; (800d328 <_vfiprintf_r+0x220>)
 800d1d8:	f7f2 fffa 	bl	80001d0 <memchr>
 800d1dc:	9a04      	ldr	r2, [sp, #16]
 800d1de:	b9d8      	cbnz	r0, 800d218 <_vfiprintf_r+0x110>
 800d1e0:	06d1      	lsls	r1, r2, #27
 800d1e2:	bf44      	itt	mi
 800d1e4:	2320      	movmi	r3, #32
 800d1e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1ea:	0713      	lsls	r3, r2, #28
 800d1ec:	bf44      	itt	mi
 800d1ee:	232b      	movmi	r3, #43	; 0x2b
 800d1f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1f8:	2b2a      	cmp	r3, #42	; 0x2a
 800d1fa:	d015      	beq.n	800d228 <_vfiprintf_r+0x120>
 800d1fc:	9a07      	ldr	r2, [sp, #28]
 800d1fe:	4654      	mov	r4, sl
 800d200:	2000      	movs	r0, #0
 800d202:	f04f 0c0a 	mov.w	ip, #10
 800d206:	4621      	mov	r1, r4
 800d208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d20c:	3b30      	subs	r3, #48	; 0x30
 800d20e:	2b09      	cmp	r3, #9
 800d210:	d94d      	bls.n	800d2ae <_vfiprintf_r+0x1a6>
 800d212:	b1b0      	cbz	r0, 800d242 <_vfiprintf_r+0x13a>
 800d214:	9207      	str	r2, [sp, #28]
 800d216:	e014      	b.n	800d242 <_vfiprintf_r+0x13a>
 800d218:	eba0 0308 	sub.w	r3, r0, r8
 800d21c:	fa09 f303 	lsl.w	r3, r9, r3
 800d220:	4313      	orrs	r3, r2
 800d222:	9304      	str	r3, [sp, #16]
 800d224:	46a2      	mov	sl, r4
 800d226:	e7d2      	b.n	800d1ce <_vfiprintf_r+0xc6>
 800d228:	9b03      	ldr	r3, [sp, #12]
 800d22a:	1d19      	adds	r1, r3, #4
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	9103      	str	r1, [sp, #12]
 800d230:	2b00      	cmp	r3, #0
 800d232:	bfbb      	ittet	lt
 800d234:	425b      	neglt	r3, r3
 800d236:	f042 0202 	orrlt.w	r2, r2, #2
 800d23a:	9307      	strge	r3, [sp, #28]
 800d23c:	9307      	strlt	r3, [sp, #28]
 800d23e:	bfb8      	it	lt
 800d240:	9204      	strlt	r2, [sp, #16]
 800d242:	7823      	ldrb	r3, [r4, #0]
 800d244:	2b2e      	cmp	r3, #46	; 0x2e
 800d246:	d10c      	bne.n	800d262 <_vfiprintf_r+0x15a>
 800d248:	7863      	ldrb	r3, [r4, #1]
 800d24a:	2b2a      	cmp	r3, #42	; 0x2a
 800d24c:	d134      	bne.n	800d2b8 <_vfiprintf_r+0x1b0>
 800d24e:	9b03      	ldr	r3, [sp, #12]
 800d250:	1d1a      	adds	r2, r3, #4
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	9203      	str	r2, [sp, #12]
 800d256:	2b00      	cmp	r3, #0
 800d258:	bfb8      	it	lt
 800d25a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d25e:	3402      	adds	r4, #2
 800d260:	9305      	str	r3, [sp, #20]
 800d262:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d338 <_vfiprintf_r+0x230>
 800d266:	7821      	ldrb	r1, [r4, #0]
 800d268:	2203      	movs	r2, #3
 800d26a:	4650      	mov	r0, sl
 800d26c:	f7f2 ffb0 	bl	80001d0 <memchr>
 800d270:	b138      	cbz	r0, 800d282 <_vfiprintf_r+0x17a>
 800d272:	9b04      	ldr	r3, [sp, #16]
 800d274:	eba0 000a 	sub.w	r0, r0, sl
 800d278:	2240      	movs	r2, #64	; 0x40
 800d27a:	4082      	lsls	r2, r0
 800d27c:	4313      	orrs	r3, r2
 800d27e:	3401      	adds	r4, #1
 800d280:	9304      	str	r3, [sp, #16]
 800d282:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d286:	4829      	ldr	r0, [pc, #164]	; (800d32c <_vfiprintf_r+0x224>)
 800d288:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d28c:	2206      	movs	r2, #6
 800d28e:	f7f2 ff9f 	bl	80001d0 <memchr>
 800d292:	2800      	cmp	r0, #0
 800d294:	d03f      	beq.n	800d316 <_vfiprintf_r+0x20e>
 800d296:	4b26      	ldr	r3, [pc, #152]	; (800d330 <_vfiprintf_r+0x228>)
 800d298:	bb1b      	cbnz	r3, 800d2e2 <_vfiprintf_r+0x1da>
 800d29a:	9b03      	ldr	r3, [sp, #12]
 800d29c:	3307      	adds	r3, #7
 800d29e:	f023 0307 	bic.w	r3, r3, #7
 800d2a2:	3308      	adds	r3, #8
 800d2a4:	9303      	str	r3, [sp, #12]
 800d2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2a8:	443b      	add	r3, r7
 800d2aa:	9309      	str	r3, [sp, #36]	; 0x24
 800d2ac:	e768      	b.n	800d180 <_vfiprintf_r+0x78>
 800d2ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2b2:	460c      	mov	r4, r1
 800d2b4:	2001      	movs	r0, #1
 800d2b6:	e7a6      	b.n	800d206 <_vfiprintf_r+0xfe>
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	3401      	adds	r4, #1
 800d2bc:	9305      	str	r3, [sp, #20]
 800d2be:	4619      	mov	r1, r3
 800d2c0:	f04f 0c0a 	mov.w	ip, #10
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2ca:	3a30      	subs	r2, #48	; 0x30
 800d2cc:	2a09      	cmp	r2, #9
 800d2ce:	d903      	bls.n	800d2d8 <_vfiprintf_r+0x1d0>
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d0c6      	beq.n	800d262 <_vfiprintf_r+0x15a>
 800d2d4:	9105      	str	r1, [sp, #20]
 800d2d6:	e7c4      	b.n	800d262 <_vfiprintf_r+0x15a>
 800d2d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2dc:	4604      	mov	r4, r0
 800d2de:	2301      	movs	r3, #1
 800d2e0:	e7f0      	b.n	800d2c4 <_vfiprintf_r+0x1bc>
 800d2e2:	ab03      	add	r3, sp, #12
 800d2e4:	9300      	str	r3, [sp, #0]
 800d2e6:	462a      	mov	r2, r5
 800d2e8:	4b12      	ldr	r3, [pc, #72]	; (800d334 <_vfiprintf_r+0x22c>)
 800d2ea:	a904      	add	r1, sp, #16
 800d2ec:	4630      	mov	r0, r6
 800d2ee:	f7fd fd4d 	bl	800ad8c <_printf_float>
 800d2f2:	4607      	mov	r7, r0
 800d2f4:	1c78      	adds	r0, r7, #1
 800d2f6:	d1d6      	bne.n	800d2a6 <_vfiprintf_r+0x19e>
 800d2f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2fa:	07d9      	lsls	r1, r3, #31
 800d2fc:	d405      	bmi.n	800d30a <_vfiprintf_r+0x202>
 800d2fe:	89ab      	ldrh	r3, [r5, #12]
 800d300:	059a      	lsls	r2, r3, #22
 800d302:	d402      	bmi.n	800d30a <_vfiprintf_r+0x202>
 800d304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d306:	f7fe fbd0 	bl	800baaa <__retarget_lock_release_recursive>
 800d30a:	89ab      	ldrh	r3, [r5, #12]
 800d30c:	065b      	lsls	r3, r3, #25
 800d30e:	f53f af1d 	bmi.w	800d14c <_vfiprintf_r+0x44>
 800d312:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d314:	e71c      	b.n	800d150 <_vfiprintf_r+0x48>
 800d316:	ab03      	add	r3, sp, #12
 800d318:	9300      	str	r3, [sp, #0]
 800d31a:	462a      	mov	r2, r5
 800d31c:	4b05      	ldr	r3, [pc, #20]	; (800d334 <_vfiprintf_r+0x22c>)
 800d31e:	a904      	add	r1, sp, #16
 800d320:	4630      	mov	r0, r6
 800d322:	f7fd ffd7 	bl	800b2d4 <_printf_i>
 800d326:	e7e4      	b.n	800d2f2 <_vfiprintf_r+0x1ea>
 800d328:	0800eca4 	.word	0x0800eca4
 800d32c:	0800ecae 	.word	0x0800ecae
 800d330:	0800ad8d 	.word	0x0800ad8d
 800d334:	0800d0e3 	.word	0x0800d0e3
 800d338:	0800ecaa 	.word	0x0800ecaa

0800d33c <__sflush_r>:
 800d33c:	898a      	ldrh	r2, [r1, #12]
 800d33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d342:	4605      	mov	r5, r0
 800d344:	0710      	lsls	r0, r2, #28
 800d346:	460c      	mov	r4, r1
 800d348:	d458      	bmi.n	800d3fc <__sflush_r+0xc0>
 800d34a:	684b      	ldr	r3, [r1, #4]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	dc05      	bgt.n	800d35c <__sflush_r+0x20>
 800d350:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d352:	2b00      	cmp	r3, #0
 800d354:	dc02      	bgt.n	800d35c <__sflush_r+0x20>
 800d356:	2000      	movs	r0, #0
 800d358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d35c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d35e:	2e00      	cmp	r6, #0
 800d360:	d0f9      	beq.n	800d356 <__sflush_r+0x1a>
 800d362:	2300      	movs	r3, #0
 800d364:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d368:	682f      	ldr	r7, [r5, #0]
 800d36a:	6a21      	ldr	r1, [r4, #32]
 800d36c:	602b      	str	r3, [r5, #0]
 800d36e:	d032      	beq.n	800d3d6 <__sflush_r+0x9a>
 800d370:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d372:	89a3      	ldrh	r3, [r4, #12]
 800d374:	075a      	lsls	r2, r3, #29
 800d376:	d505      	bpl.n	800d384 <__sflush_r+0x48>
 800d378:	6863      	ldr	r3, [r4, #4]
 800d37a:	1ac0      	subs	r0, r0, r3
 800d37c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d37e:	b10b      	cbz	r3, 800d384 <__sflush_r+0x48>
 800d380:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d382:	1ac0      	subs	r0, r0, r3
 800d384:	2300      	movs	r3, #0
 800d386:	4602      	mov	r2, r0
 800d388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d38a:	6a21      	ldr	r1, [r4, #32]
 800d38c:	4628      	mov	r0, r5
 800d38e:	47b0      	blx	r6
 800d390:	1c43      	adds	r3, r0, #1
 800d392:	89a3      	ldrh	r3, [r4, #12]
 800d394:	d106      	bne.n	800d3a4 <__sflush_r+0x68>
 800d396:	6829      	ldr	r1, [r5, #0]
 800d398:	291d      	cmp	r1, #29
 800d39a:	d82b      	bhi.n	800d3f4 <__sflush_r+0xb8>
 800d39c:	4a29      	ldr	r2, [pc, #164]	; (800d444 <__sflush_r+0x108>)
 800d39e:	410a      	asrs	r2, r1
 800d3a0:	07d6      	lsls	r6, r2, #31
 800d3a2:	d427      	bmi.n	800d3f4 <__sflush_r+0xb8>
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	6062      	str	r2, [r4, #4]
 800d3a8:	04d9      	lsls	r1, r3, #19
 800d3aa:	6922      	ldr	r2, [r4, #16]
 800d3ac:	6022      	str	r2, [r4, #0]
 800d3ae:	d504      	bpl.n	800d3ba <__sflush_r+0x7e>
 800d3b0:	1c42      	adds	r2, r0, #1
 800d3b2:	d101      	bne.n	800d3b8 <__sflush_r+0x7c>
 800d3b4:	682b      	ldr	r3, [r5, #0]
 800d3b6:	b903      	cbnz	r3, 800d3ba <__sflush_r+0x7e>
 800d3b8:	6560      	str	r0, [r4, #84]	; 0x54
 800d3ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3bc:	602f      	str	r7, [r5, #0]
 800d3be:	2900      	cmp	r1, #0
 800d3c0:	d0c9      	beq.n	800d356 <__sflush_r+0x1a>
 800d3c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3c6:	4299      	cmp	r1, r3
 800d3c8:	d002      	beq.n	800d3d0 <__sflush_r+0x94>
 800d3ca:	4628      	mov	r0, r5
 800d3cc:	f7ff f9f6 	bl	800c7bc <_free_r>
 800d3d0:	2000      	movs	r0, #0
 800d3d2:	6360      	str	r0, [r4, #52]	; 0x34
 800d3d4:	e7c0      	b.n	800d358 <__sflush_r+0x1c>
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	4628      	mov	r0, r5
 800d3da:	47b0      	blx	r6
 800d3dc:	1c41      	adds	r1, r0, #1
 800d3de:	d1c8      	bne.n	800d372 <__sflush_r+0x36>
 800d3e0:	682b      	ldr	r3, [r5, #0]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d0c5      	beq.n	800d372 <__sflush_r+0x36>
 800d3e6:	2b1d      	cmp	r3, #29
 800d3e8:	d001      	beq.n	800d3ee <__sflush_r+0xb2>
 800d3ea:	2b16      	cmp	r3, #22
 800d3ec:	d101      	bne.n	800d3f2 <__sflush_r+0xb6>
 800d3ee:	602f      	str	r7, [r5, #0]
 800d3f0:	e7b1      	b.n	800d356 <__sflush_r+0x1a>
 800d3f2:	89a3      	ldrh	r3, [r4, #12]
 800d3f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3f8:	81a3      	strh	r3, [r4, #12]
 800d3fa:	e7ad      	b.n	800d358 <__sflush_r+0x1c>
 800d3fc:	690f      	ldr	r7, [r1, #16]
 800d3fe:	2f00      	cmp	r7, #0
 800d400:	d0a9      	beq.n	800d356 <__sflush_r+0x1a>
 800d402:	0793      	lsls	r3, r2, #30
 800d404:	680e      	ldr	r6, [r1, #0]
 800d406:	bf08      	it	eq
 800d408:	694b      	ldreq	r3, [r1, #20]
 800d40a:	600f      	str	r7, [r1, #0]
 800d40c:	bf18      	it	ne
 800d40e:	2300      	movne	r3, #0
 800d410:	eba6 0807 	sub.w	r8, r6, r7
 800d414:	608b      	str	r3, [r1, #8]
 800d416:	f1b8 0f00 	cmp.w	r8, #0
 800d41a:	dd9c      	ble.n	800d356 <__sflush_r+0x1a>
 800d41c:	6a21      	ldr	r1, [r4, #32]
 800d41e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d420:	4643      	mov	r3, r8
 800d422:	463a      	mov	r2, r7
 800d424:	4628      	mov	r0, r5
 800d426:	47b0      	blx	r6
 800d428:	2800      	cmp	r0, #0
 800d42a:	dc06      	bgt.n	800d43a <__sflush_r+0xfe>
 800d42c:	89a3      	ldrh	r3, [r4, #12]
 800d42e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d432:	81a3      	strh	r3, [r4, #12]
 800d434:	f04f 30ff 	mov.w	r0, #4294967295
 800d438:	e78e      	b.n	800d358 <__sflush_r+0x1c>
 800d43a:	4407      	add	r7, r0
 800d43c:	eba8 0800 	sub.w	r8, r8, r0
 800d440:	e7e9      	b.n	800d416 <__sflush_r+0xda>
 800d442:	bf00      	nop
 800d444:	dfbffffe 	.word	0xdfbffffe

0800d448 <_fflush_r>:
 800d448:	b538      	push	{r3, r4, r5, lr}
 800d44a:	690b      	ldr	r3, [r1, #16]
 800d44c:	4605      	mov	r5, r0
 800d44e:	460c      	mov	r4, r1
 800d450:	b913      	cbnz	r3, 800d458 <_fflush_r+0x10>
 800d452:	2500      	movs	r5, #0
 800d454:	4628      	mov	r0, r5
 800d456:	bd38      	pop	{r3, r4, r5, pc}
 800d458:	b118      	cbz	r0, 800d462 <_fflush_r+0x1a>
 800d45a:	6a03      	ldr	r3, [r0, #32]
 800d45c:	b90b      	cbnz	r3, 800d462 <_fflush_r+0x1a>
 800d45e:	f7fe f8d5 	bl	800b60c <__sinit>
 800d462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d0f3      	beq.n	800d452 <_fflush_r+0xa>
 800d46a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d46c:	07d0      	lsls	r0, r2, #31
 800d46e:	d404      	bmi.n	800d47a <_fflush_r+0x32>
 800d470:	0599      	lsls	r1, r3, #22
 800d472:	d402      	bmi.n	800d47a <_fflush_r+0x32>
 800d474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d476:	f7fe fb17 	bl	800baa8 <__retarget_lock_acquire_recursive>
 800d47a:	4628      	mov	r0, r5
 800d47c:	4621      	mov	r1, r4
 800d47e:	f7ff ff5d 	bl	800d33c <__sflush_r>
 800d482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d484:	07da      	lsls	r2, r3, #31
 800d486:	4605      	mov	r5, r0
 800d488:	d4e4      	bmi.n	800d454 <_fflush_r+0xc>
 800d48a:	89a3      	ldrh	r3, [r4, #12]
 800d48c:	059b      	lsls	r3, r3, #22
 800d48e:	d4e1      	bmi.n	800d454 <_fflush_r+0xc>
 800d490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d492:	f7fe fb0a 	bl	800baaa <__retarget_lock_release_recursive>
 800d496:	e7dd      	b.n	800d454 <_fflush_r+0xc>

0800d498 <__swhatbuf_r>:
 800d498:	b570      	push	{r4, r5, r6, lr}
 800d49a:	460c      	mov	r4, r1
 800d49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4a0:	2900      	cmp	r1, #0
 800d4a2:	b096      	sub	sp, #88	; 0x58
 800d4a4:	4615      	mov	r5, r2
 800d4a6:	461e      	mov	r6, r3
 800d4a8:	da0d      	bge.n	800d4c6 <__swhatbuf_r+0x2e>
 800d4aa:	89a3      	ldrh	r3, [r4, #12]
 800d4ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d4b0:	f04f 0100 	mov.w	r1, #0
 800d4b4:	bf0c      	ite	eq
 800d4b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d4ba:	2340      	movne	r3, #64	; 0x40
 800d4bc:	2000      	movs	r0, #0
 800d4be:	6031      	str	r1, [r6, #0]
 800d4c0:	602b      	str	r3, [r5, #0]
 800d4c2:	b016      	add	sp, #88	; 0x58
 800d4c4:	bd70      	pop	{r4, r5, r6, pc}
 800d4c6:	466a      	mov	r2, sp
 800d4c8:	f000 f848 	bl	800d55c <_fstat_r>
 800d4cc:	2800      	cmp	r0, #0
 800d4ce:	dbec      	blt.n	800d4aa <__swhatbuf_r+0x12>
 800d4d0:	9901      	ldr	r1, [sp, #4]
 800d4d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d4d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d4da:	4259      	negs	r1, r3
 800d4dc:	4159      	adcs	r1, r3
 800d4de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4e2:	e7eb      	b.n	800d4bc <__swhatbuf_r+0x24>

0800d4e4 <__smakebuf_r>:
 800d4e4:	898b      	ldrh	r3, [r1, #12]
 800d4e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d4e8:	079d      	lsls	r5, r3, #30
 800d4ea:	4606      	mov	r6, r0
 800d4ec:	460c      	mov	r4, r1
 800d4ee:	d507      	bpl.n	800d500 <__smakebuf_r+0x1c>
 800d4f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d4f4:	6023      	str	r3, [r4, #0]
 800d4f6:	6123      	str	r3, [r4, #16]
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	6163      	str	r3, [r4, #20]
 800d4fc:	b002      	add	sp, #8
 800d4fe:	bd70      	pop	{r4, r5, r6, pc}
 800d500:	ab01      	add	r3, sp, #4
 800d502:	466a      	mov	r2, sp
 800d504:	f7ff ffc8 	bl	800d498 <__swhatbuf_r>
 800d508:	9900      	ldr	r1, [sp, #0]
 800d50a:	4605      	mov	r5, r0
 800d50c:	4630      	mov	r0, r6
 800d50e:	f7ff f9c9 	bl	800c8a4 <_malloc_r>
 800d512:	b948      	cbnz	r0, 800d528 <__smakebuf_r+0x44>
 800d514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d518:	059a      	lsls	r2, r3, #22
 800d51a:	d4ef      	bmi.n	800d4fc <__smakebuf_r+0x18>
 800d51c:	f023 0303 	bic.w	r3, r3, #3
 800d520:	f043 0302 	orr.w	r3, r3, #2
 800d524:	81a3      	strh	r3, [r4, #12]
 800d526:	e7e3      	b.n	800d4f0 <__smakebuf_r+0xc>
 800d528:	89a3      	ldrh	r3, [r4, #12]
 800d52a:	6020      	str	r0, [r4, #0]
 800d52c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d530:	81a3      	strh	r3, [r4, #12]
 800d532:	9b00      	ldr	r3, [sp, #0]
 800d534:	6163      	str	r3, [r4, #20]
 800d536:	9b01      	ldr	r3, [sp, #4]
 800d538:	6120      	str	r0, [r4, #16]
 800d53a:	b15b      	cbz	r3, 800d554 <__smakebuf_r+0x70>
 800d53c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d540:	4630      	mov	r0, r6
 800d542:	f000 f81d 	bl	800d580 <_isatty_r>
 800d546:	b128      	cbz	r0, 800d554 <__smakebuf_r+0x70>
 800d548:	89a3      	ldrh	r3, [r4, #12]
 800d54a:	f023 0303 	bic.w	r3, r3, #3
 800d54e:	f043 0301 	orr.w	r3, r3, #1
 800d552:	81a3      	strh	r3, [r4, #12]
 800d554:	89a3      	ldrh	r3, [r4, #12]
 800d556:	431d      	orrs	r5, r3
 800d558:	81a5      	strh	r5, [r4, #12]
 800d55a:	e7cf      	b.n	800d4fc <__smakebuf_r+0x18>

0800d55c <_fstat_r>:
 800d55c:	b538      	push	{r3, r4, r5, lr}
 800d55e:	4d07      	ldr	r5, [pc, #28]	; (800d57c <_fstat_r+0x20>)
 800d560:	2300      	movs	r3, #0
 800d562:	4604      	mov	r4, r0
 800d564:	4608      	mov	r0, r1
 800d566:	4611      	mov	r1, r2
 800d568:	602b      	str	r3, [r5, #0]
 800d56a:	f7f5 ff64 	bl	8003436 <_fstat>
 800d56e:	1c43      	adds	r3, r0, #1
 800d570:	d102      	bne.n	800d578 <_fstat_r+0x1c>
 800d572:	682b      	ldr	r3, [r5, #0]
 800d574:	b103      	cbz	r3, 800d578 <_fstat_r+0x1c>
 800d576:	6023      	str	r3, [r4, #0]
 800d578:	bd38      	pop	{r3, r4, r5, pc}
 800d57a:	bf00      	nop
 800d57c:	20004da0 	.word	0x20004da0

0800d580 <_isatty_r>:
 800d580:	b538      	push	{r3, r4, r5, lr}
 800d582:	4d06      	ldr	r5, [pc, #24]	; (800d59c <_isatty_r+0x1c>)
 800d584:	2300      	movs	r3, #0
 800d586:	4604      	mov	r4, r0
 800d588:	4608      	mov	r0, r1
 800d58a:	602b      	str	r3, [r5, #0]
 800d58c:	f7f5 ff63 	bl	8003456 <_isatty>
 800d590:	1c43      	adds	r3, r0, #1
 800d592:	d102      	bne.n	800d59a <_isatty_r+0x1a>
 800d594:	682b      	ldr	r3, [r5, #0]
 800d596:	b103      	cbz	r3, 800d59a <_isatty_r+0x1a>
 800d598:	6023      	str	r3, [r4, #0]
 800d59a:	bd38      	pop	{r3, r4, r5, pc}
 800d59c:	20004da0 	.word	0x20004da0

0800d5a0 <_sbrk_r>:
 800d5a0:	b538      	push	{r3, r4, r5, lr}
 800d5a2:	4d06      	ldr	r5, [pc, #24]	; (800d5bc <_sbrk_r+0x1c>)
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	4604      	mov	r4, r0
 800d5a8:	4608      	mov	r0, r1
 800d5aa:	602b      	str	r3, [r5, #0]
 800d5ac:	f7f5 ff6c 	bl	8003488 <_sbrk>
 800d5b0:	1c43      	adds	r3, r0, #1
 800d5b2:	d102      	bne.n	800d5ba <_sbrk_r+0x1a>
 800d5b4:	682b      	ldr	r3, [r5, #0]
 800d5b6:	b103      	cbz	r3, 800d5ba <_sbrk_r+0x1a>
 800d5b8:	6023      	str	r3, [r4, #0]
 800d5ba:	bd38      	pop	{r3, r4, r5, pc}
 800d5bc:	20004da0 	.word	0x20004da0

0800d5c0 <__assert_func>:
 800d5c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5c2:	4614      	mov	r4, r2
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	4b09      	ldr	r3, [pc, #36]	; (800d5ec <__assert_func+0x2c>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4605      	mov	r5, r0
 800d5cc:	68d8      	ldr	r0, [r3, #12]
 800d5ce:	b14c      	cbz	r4, 800d5e4 <__assert_func+0x24>
 800d5d0:	4b07      	ldr	r3, [pc, #28]	; (800d5f0 <__assert_func+0x30>)
 800d5d2:	9100      	str	r1, [sp, #0]
 800d5d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5d8:	4906      	ldr	r1, [pc, #24]	; (800d5f4 <__assert_func+0x34>)
 800d5da:	462b      	mov	r3, r5
 800d5dc:	f000 f844 	bl	800d668 <fiprintf>
 800d5e0:	f000 f854 	bl	800d68c <abort>
 800d5e4:	4b04      	ldr	r3, [pc, #16]	; (800d5f8 <__assert_func+0x38>)
 800d5e6:	461c      	mov	r4, r3
 800d5e8:	e7f3      	b.n	800d5d2 <__assert_func+0x12>
 800d5ea:	bf00      	nop
 800d5ec:	2000007c 	.word	0x2000007c
 800d5f0:	0800ecbf 	.word	0x0800ecbf
 800d5f4:	0800eccc 	.word	0x0800eccc
 800d5f8:	0800ecfa 	.word	0x0800ecfa

0800d5fc <_calloc_r>:
 800d5fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5fe:	fba1 2402 	umull	r2, r4, r1, r2
 800d602:	b94c      	cbnz	r4, 800d618 <_calloc_r+0x1c>
 800d604:	4611      	mov	r1, r2
 800d606:	9201      	str	r2, [sp, #4]
 800d608:	f7ff f94c 	bl	800c8a4 <_malloc_r>
 800d60c:	9a01      	ldr	r2, [sp, #4]
 800d60e:	4605      	mov	r5, r0
 800d610:	b930      	cbnz	r0, 800d620 <_calloc_r+0x24>
 800d612:	4628      	mov	r0, r5
 800d614:	b003      	add	sp, #12
 800d616:	bd30      	pop	{r4, r5, pc}
 800d618:	220c      	movs	r2, #12
 800d61a:	6002      	str	r2, [r0, #0]
 800d61c:	2500      	movs	r5, #0
 800d61e:	e7f8      	b.n	800d612 <_calloc_r+0x16>
 800d620:	4621      	mov	r1, r4
 800d622:	f7fe f96f 	bl	800b904 <memset>
 800d626:	e7f4      	b.n	800d612 <_calloc_r+0x16>

0800d628 <__ascii_mbtowc>:
 800d628:	b082      	sub	sp, #8
 800d62a:	b901      	cbnz	r1, 800d62e <__ascii_mbtowc+0x6>
 800d62c:	a901      	add	r1, sp, #4
 800d62e:	b142      	cbz	r2, 800d642 <__ascii_mbtowc+0x1a>
 800d630:	b14b      	cbz	r3, 800d646 <__ascii_mbtowc+0x1e>
 800d632:	7813      	ldrb	r3, [r2, #0]
 800d634:	600b      	str	r3, [r1, #0]
 800d636:	7812      	ldrb	r2, [r2, #0]
 800d638:	1e10      	subs	r0, r2, #0
 800d63a:	bf18      	it	ne
 800d63c:	2001      	movne	r0, #1
 800d63e:	b002      	add	sp, #8
 800d640:	4770      	bx	lr
 800d642:	4610      	mov	r0, r2
 800d644:	e7fb      	b.n	800d63e <__ascii_mbtowc+0x16>
 800d646:	f06f 0001 	mvn.w	r0, #1
 800d64a:	e7f8      	b.n	800d63e <__ascii_mbtowc+0x16>

0800d64c <__ascii_wctomb>:
 800d64c:	b149      	cbz	r1, 800d662 <__ascii_wctomb+0x16>
 800d64e:	2aff      	cmp	r2, #255	; 0xff
 800d650:	bf85      	ittet	hi
 800d652:	238a      	movhi	r3, #138	; 0x8a
 800d654:	6003      	strhi	r3, [r0, #0]
 800d656:	700a      	strbls	r2, [r1, #0]
 800d658:	f04f 30ff 	movhi.w	r0, #4294967295
 800d65c:	bf98      	it	ls
 800d65e:	2001      	movls	r0, #1
 800d660:	4770      	bx	lr
 800d662:	4608      	mov	r0, r1
 800d664:	4770      	bx	lr
	...

0800d668 <fiprintf>:
 800d668:	b40e      	push	{r1, r2, r3}
 800d66a:	b503      	push	{r0, r1, lr}
 800d66c:	4601      	mov	r1, r0
 800d66e:	ab03      	add	r3, sp, #12
 800d670:	4805      	ldr	r0, [pc, #20]	; (800d688 <fiprintf+0x20>)
 800d672:	f853 2b04 	ldr.w	r2, [r3], #4
 800d676:	6800      	ldr	r0, [r0, #0]
 800d678:	9301      	str	r3, [sp, #4]
 800d67a:	f7ff fd45 	bl	800d108 <_vfiprintf_r>
 800d67e:	b002      	add	sp, #8
 800d680:	f85d eb04 	ldr.w	lr, [sp], #4
 800d684:	b003      	add	sp, #12
 800d686:	4770      	bx	lr
 800d688:	2000007c 	.word	0x2000007c

0800d68c <abort>:
 800d68c:	b508      	push	{r3, lr}
 800d68e:	2006      	movs	r0, #6
 800d690:	f000 f82c 	bl	800d6ec <raise>
 800d694:	2001      	movs	r0, #1
 800d696:	f7f5 fe9b 	bl	80033d0 <_exit>

0800d69a <_raise_r>:
 800d69a:	291f      	cmp	r1, #31
 800d69c:	b538      	push	{r3, r4, r5, lr}
 800d69e:	4604      	mov	r4, r0
 800d6a0:	460d      	mov	r5, r1
 800d6a2:	d904      	bls.n	800d6ae <_raise_r+0x14>
 800d6a4:	2316      	movs	r3, #22
 800d6a6:	6003      	str	r3, [r0, #0]
 800d6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ac:	bd38      	pop	{r3, r4, r5, pc}
 800d6ae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d6b0:	b112      	cbz	r2, 800d6b8 <_raise_r+0x1e>
 800d6b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d6b6:	b94b      	cbnz	r3, 800d6cc <_raise_r+0x32>
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	f000 f831 	bl	800d720 <_getpid_r>
 800d6be:	462a      	mov	r2, r5
 800d6c0:	4601      	mov	r1, r0
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6c8:	f000 b818 	b.w	800d6fc <_kill_r>
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d00a      	beq.n	800d6e6 <_raise_r+0x4c>
 800d6d0:	1c59      	adds	r1, r3, #1
 800d6d2:	d103      	bne.n	800d6dc <_raise_r+0x42>
 800d6d4:	2316      	movs	r3, #22
 800d6d6:	6003      	str	r3, [r0, #0]
 800d6d8:	2001      	movs	r0, #1
 800d6da:	e7e7      	b.n	800d6ac <_raise_r+0x12>
 800d6dc:	2400      	movs	r4, #0
 800d6de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d6e2:	4628      	mov	r0, r5
 800d6e4:	4798      	blx	r3
 800d6e6:	2000      	movs	r0, #0
 800d6e8:	e7e0      	b.n	800d6ac <_raise_r+0x12>
	...

0800d6ec <raise>:
 800d6ec:	4b02      	ldr	r3, [pc, #8]	; (800d6f8 <raise+0xc>)
 800d6ee:	4601      	mov	r1, r0
 800d6f0:	6818      	ldr	r0, [r3, #0]
 800d6f2:	f7ff bfd2 	b.w	800d69a <_raise_r>
 800d6f6:	bf00      	nop
 800d6f8:	2000007c 	.word	0x2000007c

0800d6fc <_kill_r>:
 800d6fc:	b538      	push	{r3, r4, r5, lr}
 800d6fe:	4d07      	ldr	r5, [pc, #28]	; (800d71c <_kill_r+0x20>)
 800d700:	2300      	movs	r3, #0
 800d702:	4604      	mov	r4, r0
 800d704:	4608      	mov	r0, r1
 800d706:	4611      	mov	r1, r2
 800d708:	602b      	str	r3, [r5, #0]
 800d70a:	f7f5 fe51 	bl	80033b0 <_kill>
 800d70e:	1c43      	adds	r3, r0, #1
 800d710:	d102      	bne.n	800d718 <_kill_r+0x1c>
 800d712:	682b      	ldr	r3, [r5, #0]
 800d714:	b103      	cbz	r3, 800d718 <_kill_r+0x1c>
 800d716:	6023      	str	r3, [r4, #0]
 800d718:	bd38      	pop	{r3, r4, r5, pc}
 800d71a:	bf00      	nop
 800d71c:	20004da0 	.word	0x20004da0

0800d720 <_getpid_r>:
 800d720:	f7f5 be3e 	b.w	80033a0 <_getpid>

0800d724 <pow>:
 800d724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d726:	ed2d 8b02 	vpush	{d8}
 800d72a:	eeb0 8a40 	vmov.f32	s16, s0
 800d72e:	eef0 8a60 	vmov.f32	s17, s1
 800d732:	ec55 4b11 	vmov	r4, r5, d1
 800d736:	f000 f873 	bl	800d820 <__ieee754_pow>
 800d73a:	4622      	mov	r2, r4
 800d73c:	462b      	mov	r3, r5
 800d73e:	4620      	mov	r0, r4
 800d740:	4629      	mov	r1, r5
 800d742:	ec57 6b10 	vmov	r6, r7, d0
 800d746:	f7f3 f9f1 	bl	8000b2c <__aeabi_dcmpun>
 800d74a:	2800      	cmp	r0, #0
 800d74c:	d13b      	bne.n	800d7c6 <pow+0xa2>
 800d74e:	ec51 0b18 	vmov	r0, r1, d8
 800d752:	2200      	movs	r2, #0
 800d754:	2300      	movs	r3, #0
 800d756:	f7f3 f9b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d75a:	b1b8      	cbz	r0, 800d78c <pow+0x68>
 800d75c:	2200      	movs	r2, #0
 800d75e:	2300      	movs	r3, #0
 800d760:	4620      	mov	r0, r4
 800d762:	4629      	mov	r1, r5
 800d764:	f7f3 f9b0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d768:	2800      	cmp	r0, #0
 800d76a:	d146      	bne.n	800d7fa <pow+0xd6>
 800d76c:	ec45 4b10 	vmov	d0, r4, r5
 800d770:	f000 f848 	bl	800d804 <finite>
 800d774:	b338      	cbz	r0, 800d7c6 <pow+0xa2>
 800d776:	2200      	movs	r2, #0
 800d778:	2300      	movs	r3, #0
 800d77a:	4620      	mov	r0, r4
 800d77c:	4629      	mov	r1, r5
 800d77e:	f7f3 f9ad 	bl	8000adc <__aeabi_dcmplt>
 800d782:	b300      	cbz	r0, 800d7c6 <pow+0xa2>
 800d784:	f7fe f966 	bl	800ba54 <__errno>
 800d788:	2322      	movs	r3, #34	; 0x22
 800d78a:	e01b      	b.n	800d7c4 <pow+0xa0>
 800d78c:	ec47 6b10 	vmov	d0, r6, r7
 800d790:	f000 f838 	bl	800d804 <finite>
 800d794:	b9e0      	cbnz	r0, 800d7d0 <pow+0xac>
 800d796:	eeb0 0a48 	vmov.f32	s0, s16
 800d79a:	eef0 0a68 	vmov.f32	s1, s17
 800d79e:	f000 f831 	bl	800d804 <finite>
 800d7a2:	b1a8      	cbz	r0, 800d7d0 <pow+0xac>
 800d7a4:	ec45 4b10 	vmov	d0, r4, r5
 800d7a8:	f000 f82c 	bl	800d804 <finite>
 800d7ac:	b180      	cbz	r0, 800d7d0 <pow+0xac>
 800d7ae:	4632      	mov	r2, r6
 800d7b0:	463b      	mov	r3, r7
 800d7b2:	4630      	mov	r0, r6
 800d7b4:	4639      	mov	r1, r7
 800d7b6:	f7f3 f9b9 	bl	8000b2c <__aeabi_dcmpun>
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	d0e2      	beq.n	800d784 <pow+0x60>
 800d7be:	f7fe f949 	bl	800ba54 <__errno>
 800d7c2:	2321      	movs	r3, #33	; 0x21
 800d7c4:	6003      	str	r3, [r0, #0]
 800d7c6:	ecbd 8b02 	vpop	{d8}
 800d7ca:	ec47 6b10 	vmov	d0, r6, r7
 800d7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	4630      	mov	r0, r6
 800d7d6:	4639      	mov	r1, r7
 800d7d8:	f7f3 f976 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	d0f2      	beq.n	800d7c6 <pow+0xa2>
 800d7e0:	eeb0 0a48 	vmov.f32	s0, s16
 800d7e4:	eef0 0a68 	vmov.f32	s1, s17
 800d7e8:	f000 f80c 	bl	800d804 <finite>
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	d0ea      	beq.n	800d7c6 <pow+0xa2>
 800d7f0:	ec45 4b10 	vmov	d0, r4, r5
 800d7f4:	f000 f806 	bl	800d804 <finite>
 800d7f8:	e7c3      	b.n	800d782 <pow+0x5e>
 800d7fa:	4f01      	ldr	r7, [pc, #4]	; (800d800 <pow+0xdc>)
 800d7fc:	2600      	movs	r6, #0
 800d7fe:	e7e2      	b.n	800d7c6 <pow+0xa2>
 800d800:	3ff00000 	.word	0x3ff00000

0800d804 <finite>:
 800d804:	b082      	sub	sp, #8
 800d806:	ed8d 0b00 	vstr	d0, [sp]
 800d80a:	9801      	ldr	r0, [sp, #4]
 800d80c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d810:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d814:	0fc0      	lsrs	r0, r0, #31
 800d816:	b002      	add	sp, #8
 800d818:	4770      	bx	lr
 800d81a:	0000      	movs	r0, r0
 800d81c:	0000      	movs	r0, r0
	...

0800d820 <__ieee754_pow>:
 800d820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d824:	ed2d 8b06 	vpush	{d8-d10}
 800d828:	b089      	sub	sp, #36	; 0x24
 800d82a:	ed8d 1b00 	vstr	d1, [sp]
 800d82e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d832:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d836:	ea58 0102 	orrs.w	r1, r8, r2
 800d83a:	ec57 6b10 	vmov	r6, r7, d0
 800d83e:	d115      	bne.n	800d86c <__ieee754_pow+0x4c>
 800d840:	19b3      	adds	r3, r6, r6
 800d842:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d846:	4152      	adcs	r2, r2
 800d848:	4299      	cmp	r1, r3
 800d84a:	4b89      	ldr	r3, [pc, #548]	; (800da70 <__ieee754_pow+0x250>)
 800d84c:	4193      	sbcs	r3, r2
 800d84e:	f080 84d1 	bcs.w	800e1f4 <__ieee754_pow+0x9d4>
 800d852:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d856:	4630      	mov	r0, r6
 800d858:	4639      	mov	r1, r7
 800d85a:	f7f2 fd17 	bl	800028c <__adddf3>
 800d85e:	ec41 0b10 	vmov	d0, r0, r1
 800d862:	b009      	add	sp, #36	; 0x24
 800d864:	ecbd 8b06 	vpop	{d8-d10}
 800d868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d86c:	4b81      	ldr	r3, [pc, #516]	; (800da74 <__ieee754_pow+0x254>)
 800d86e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d872:	429c      	cmp	r4, r3
 800d874:	ee10 aa10 	vmov	sl, s0
 800d878:	463d      	mov	r5, r7
 800d87a:	dc06      	bgt.n	800d88a <__ieee754_pow+0x6a>
 800d87c:	d101      	bne.n	800d882 <__ieee754_pow+0x62>
 800d87e:	2e00      	cmp	r6, #0
 800d880:	d1e7      	bne.n	800d852 <__ieee754_pow+0x32>
 800d882:	4598      	cmp	r8, r3
 800d884:	dc01      	bgt.n	800d88a <__ieee754_pow+0x6a>
 800d886:	d10f      	bne.n	800d8a8 <__ieee754_pow+0x88>
 800d888:	b172      	cbz	r2, 800d8a8 <__ieee754_pow+0x88>
 800d88a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d88e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d892:	ea55 050a 	orrs.w	r5, r5, sl
 800d896:	d1dc      	bne.n	800d852 <__ieee754_pow+0x32>
 800d898:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d89c:	18db      	adds	r3, r3, r3
 800d89e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d8a2:	4152      	adcs	r2, r2
 800d8a4:	429d      	cmp	r5, r3
 800d8a6:	e7d0      	b.n	800d84a <__ieee754_pow+0x2a>
 800d8a8:	2d00      	cmp	r5, #0
 800d8aa:	da3b      	bge.n	800d924 <__ieee754_pow+0x104>
 800d8ac:	4b72      	ldr	r3, [pc, #456]	; (800da78 <__ieee754_pow+0x258>)
 800d8ae:	4598      	cmp	r8, r3
 800d8b0:	dc51      	bgt.n	800d956 <__ieee754_pow+0x136>
 800d8b2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d8b6:	4598      	cmp	r8, r3
 800d8b8:	f340 84ab 	ble.w	800e212 <__ieee754_pow+0x9f2>
 800d8bc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d8c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d8c4:	2b14      	cmp	r3, #20
 800d8c6:	dd0f      	ble.n	800d8e8 <__ieee754_pow+0xc8>
 800d8c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d8cc:	fa22 f103 	lsr.w	r1, r2, r3
 800d8d0:	fa01 f303 	lsl.w	r3, r1, r3
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	f040 849c 	bne.w	800e212 <__ieee754_pow+0x9f2>
 800d8da:	f001 0101 	and.w	r1, r1, #1
 800d8de:	f1c1 0302 	rsb	r3, r1, #2
 800d8e2:	9304      	str	r3, [sp, #16]
 800d8e4:	b182      	cbz	r2, 800d908 <__ieee754_pow+0xe8>
 800d8e6:	e05f      	b.n	800d9a8 <__ieee754_pow+0x188>
 800d8e8:	2a00      	cmp	r2, #0
 800d8ea:	d15b      	bne.n	800d9a4 <__ieee754_pow+0x184>
 800d8ec:	f1c3 0314 	rsb	r3, r3, #20
 800d8f0:	fa48 f103 	asr.w	r1, r8, r3
 800d8f4:	fa01 f303 	lsl.w	r3, r1, r3
 800d8f8:	4543      	cmp	r3, r8
 800d8fa:	f040 8487 	bne.w	800e20c <__ieee754_pow+0x9ec>
 800d8fe:	f001 0101 	and.w	r1, r1, #1
 800d902:	f1c1 0302 	rsb	r3, r1, #2
 800d906:	9304      	str	r3, [sp, #16]
 800d908:	4b5c      	ldr	r3, [pc, #368]	; (800da7c <__ieee754_pow+0x25c>)
 800d90a:	4598      	cmp	r8, r3
 800d90c:	d132      	bne.n	800d974 <__ieee754_pow+0x154>
 800d90e:	f1b9 0f00 	cmp.w	r9, #0
 800d912:	f280 8477 	bge.w	800e204 <__ieee754_pow+0x9e4>
 800d916:	4959      	ldr	r1, [pc, #356]	; (800da7c <__ieee754_pow+0x25c>)
 800d918:	4632      	mov	r2, r6
 800d91a:	463b      	mov	r3, r7
 800d91c:	2000      	movs	r0, #0
 800d91e:	f7f2 ff95 	bl	800084c <__aeabi_ddiv>
 800d922:	e79c      	b.n	800d85e <__ieee754_pow+0x3e>
 800d924:	2300      	movs	r3, #0
 800d926:	9304      	str	r3, [sp, #16]
 800d928:	2a00      	cmp	r2, #0
 800d92a:	d13d      	bne.n	800d9a8 <__ieee754_pow+0x188>
 800d92c:	4b51      	ldr	r3, [pc, #324]	; (800da74 <__ieee754_pow+0x254>)
 800d92e:	4598      	cmp	r8, r3
 800d930:	d1ea      	bne.n	800d908 <__ieee754_pow+0xe8>
 800d932:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d936:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d93a:	ea53 030a 	orrs.w	r3, r3, sl
 800d93e:	f000 8459 	beq.w	800e1f4 <__ieee754_pow+0x9d4>
 800d942:	4b4f      	ldr	r3, [pc, #316]	; (800da80 <__ieee754_pow+0x260>)
 800d944:	429c      	cmp	r4, r3
 800d946:	dd08      	ble.n	800d95a <__ieee754_pow+0x13a>
 800d948:	f1b9 0f00 	cmp.w	r9, #0
 800d94c:	f2c0 8456 	blt.w	800e1fc <__ieee754_pow+0x9dc>
 800d950:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d954:	e783      	b.n	800d85e <__ieee754_pow+0x3e>
 800d956:	2302      	movs	r3, #2
 800d958:	e7e5      	b.n	800d926 <__ieee754_pow+0x106>
 800d95a:	f1b9 0f00 	cmp.w	r9, #0
 800d95e:	f04f 0000 	mov.w	r0, #0
 800d962:	f04f 0100 	mov.w	r1, #0
 800d966:	f6bf af7a 	bge.w	800d85e <__ieee754_pow+0x3e>
 800d96a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d96e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d972:	e774      	b.n	800d85e <__ieee754_pow+0x3e>
 800d974:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d978:	d106      	bne.n	800d988 <__ieee754_pow+0x168>
 800d97a:	4632      	mov	r2, r6
 800d97c:	463b      	mov	r3, r7
 800d97e:	4630      	mov	r0, r6
 800d980:	4639      	mov	r1, r7
 800d982:	f7f2 fe39 	bl	80005f8 <__aeabi_dmul>
 800d986:	e76a      	b.n	800d85e <__ieee754_pow+0x3e>
 800d988:	4b3e      	ldr	r3, [pc, #248]	; (800da84 <__ieee754_pow+0x264>)
 800d98a:	4599      	cmp	r9, r3
 800d98c:	d10c      	bne.n	800d9a8 <__ieee754_pow+0x188>
 800d98e:	2d00      	cmp	r5, #0
 800d990:	db0a      	blt.n	800d9a8 <__ieee754_pow+0x188>
 800d992:	ec47 6b10 	vmov	d0, r6, r7
 800d996:	b009      	add	sp, #36	; 0x24
 800d998:	ecbd 8b06 	vpop	{d8-d10}
 800d99c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a0:	f000 bd20 	b.w	800e3e4 <__ieee754_sqrt>
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	9304      	str	r3, [sp, #16]
 800d9a8:	ec47 6b10 	vmov	d0, r6, r7
 800d9ac:	f000 fc62 	bl	800e274 <fabs>
 800d9b0:	ec51 0b10 	vmov	r0, r1, d0
 800d9b4:	f1ba 0f00 	cmp.w	sl, #0
 800d9b8:	d129      	bne.n	800da0e <__ieee754_pow+0x1ee>
 800d9ba:	b124      	cbz	r4, 800d9c6 <__ieee754_pow+0x1a6>
 800d9bc:	4b2f      	ldr	r3, [pc, #188]	; (800da7c <__ieee754_pow+0x25c>)
 800d9be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d123      	bne.n	800da0e <__ieee754_pow+0x1ee>
 800d9c6:	f1b9 0f00 	cmp.w	r9, #0
 800d9ca:	da05      	bge.n	800d9d8 <__ieee754_pow+0x1b8>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	2000      	movs	r0, #0
 800d9d2:	492a      	ldr	r1, [pc, #168]	; (800da7c <__ieee754_pow+0x25c>)
 800d9d4:	f7f2 ff3a 	bl	800084c <__aeabi_ddiv>
 800d9d8:	2d00      	cmp	r5, #0
 800d9da:	f6bf af40 	bge.w	800d85e <__ieee754_pow+0x3e>
 800d9de:	9b04      	ldr	r3, [sp, #16]
 800d9e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d9e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d9e8:	431c      	orrs	r4, r3
 800d9ea:	d108      	bne.n	800d9fe <__ieee754_pow+0x1de>
 800d9ec:	4602      	mov	r2, r0
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	4610      	mov	r0, r2
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	f7f2 fc48 	bl	8000288 <__aeabi_dsub>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	e78f      	b.n	800d91e <__ieee754_pow+0xfe>
 800d9fe:	9b04      	ldr	r3, [sp, #16]
 800da00:	2b01      	cmp	r3, #1
 800da02:	f47f af2c 	bne.w	800d85e <__ieee754_pow+0x3e>
 800da06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da0a:	4619      	mov	r1, r3
 800da0c:	e727      	b.n	800d85e <__ieee754_pow+0x3e>
 800da0e:	0feb      	lsrs	r3, r5, #31
 800da10:	3b01      	subs	r3, #1
 800da12:	9306      	str	r3, [sp, #24]
 800da14:	9a06      	ldr	r2, [sp, #24]
 800da16:	9b04      	ldr	r3, [sp, #16]
 800da18:	4313      	orrs	r3, r2
 800da1a:	d102      	bne.n	800da22 <__ieee754_pow+0x202>
 800da1c:	4632      	mov	r2, r6
 800da1e:	463b      	mov	r3, r7
 800da20:	e7e6      	b.n	800d9f0 <__ieee754_pow+0x1d0>
 800da22:	4b19      	ldr	r3, [pc, #100]	; (800da88 <__ieee754_pow+0x268>)
 800da24:	4598      	cmp	r8, r3
 800da26:	f340 80fb 	ble.w	800dc20 <__ieee754_pow+0x400>
 800da2a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800da2e:	4598      	cmp	r8, r3
 800da30:	4b13      	ldr	r3, [pc, #76]	; (800da80 <__ieee754_pow+0x260>)
 800da32:	dd0c      	ble.n	800da4e <__ieee754_pow+0x22e>
 800da34:	429c      	cmp	r4, r3
 800da36:	dc0f      	bgt.n	800da58 <__ieee754_pow+0x238>
 800da38:	f1b9 0f00 	cmp.w	r9, #0
 800da3c:	da0f      	bge.n	800da5e <__ieee754_pow+0x23e>
 800da3e:	2000      	movs	r0, #0
 800da40:	b009      	add	sp, #36	; 0x24
 800da42:	ecbd 8b06 	vpop	{d8-d10}
 800da46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da4a:	f000 bcc2 	b.w	800e3d2 <__math_oflow>
 800da4e:	429c      	cmp	r4, r3
 800da50:	dbf2      	blt.n	800da38 <__ieee754_pow+0x218>
 800da52:	4b0a      	ldr	r3, [pc, #40]	; (800da7c <__ieee754_pow+0x25c>)
 800da54:	429c      	cmp	r4, r3
 800da56:	dd19      	ble.n	800da8c <__ieee754_pow+0x26c>
 800da58:	f1b9 0f00 	cmp.w	r9, #0
 800da5c:	dcef      	bgt.n	800da3e <__ieee754_pow+0x21e>
 800da5e:	2000      	movs	r0, #0
 800da60:	b009      	add	sp, #36	; 0x24
 800da62:	ecbd 8b06 	vpop	{d8-d10}
 800da66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da6a:	f000 bca9 	b.w	800e3c0 <__math_uflow>
 800da6e:	bf00      	nop
 800da70:	fff00000 	.word	0xfff00000
 800da74:	7ff00000 	.word	0x7ff00000
 800da78:	433fffff 	.word	0x433fffff
 800da7c:	3ff00000 	.word	0x3ff00000
 800da80:	3fefffff 	.word	0x3fefffff
 800da84:	3fe00000 	.word	0x3fe00000
 800da88:	41e00000 	.word	0x41e00000
 800da8c:	4b60      	ldr	r3, [pc, #384]	; (800dc10 <__ieee754_pow+0x3f0>)
 800da8e:	2200      	movs	r2, #0
 800da90:	f7f2 fbfa 	bl	8000288 <__aeabi_dsub>
 800da94:	a354      	add	r3, pc, #336	; (adr r3, 800dbe8 <__ieee754_pow+0x3c8>)
 800da96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9a:	4604      	mov	r4, r0
 800da9c:	460d      	mov	r5, r1
 800da9e:	f7f2 fdab 	bl	80005f8 <__aeabi_dmul>
 800daa2:	a353      	add	r3, pc, #332	; (adr r3, 800dbf0 <__ieee754_pow+0x3d0>)
 800daa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa8:	4606      	mov	r6, r0
 800daaa:	460f      	mov	r7, r1
 800daac:	4620      	mov	r0, r4
 800daae:	4629      	mov	r1, r5
 800dab0:	f7f2 fda2 	bl	80005f8 <__aeabi_dmul>
 800dab4:	4b57      	ldr	r3, [pc, #348]	; (800dc14 <__ieee754_pow+0x3f4>)
 800dab6:	4682      	mov	sl, r0
 800dab8:	468b      	mov	fp, r1
 800daba:	2200      	movs	r2, #0
 800dabc:	4620      	mov	r0, r4
 800dabe:	4629      	mov	r1, r5
 800dac0:	f7f2 fd9a 	bl	80005f8 <__aeabi_dmul>
 800dac4:	4602      	mov	r2, r0
 800dac6:	460b      	mov	r3, r1
 800dac8:	a14b      	add	r1, pc, #300	; (adr r1, 800dbf8 <__ieee754_pow+0x3d8>)
 800daca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dace:	f7f2 fbdb 	bl	8000288 <__aeabi_dsub>
 800dad2:	4622      	mov	r2, r4
 800dad4:	462b      	mov	r3, r5
 800dad6:	f7f2 fd8f 	bl	80005f8 <__aeabi_dmul>
 800dada:	4602      	mov	r2, r0
 800dadc:	460b      	mov	r3, r1
 800dade:	2000      	movs	r0, #0
 800dae0:	494d      	ldr	r1, [pc, #308]	; (800dc18 <__ieee754_pow+0x3f8>)
 800dae2:	f7f2 fbd1 	bl	8000288 <__aeabi_dsub>
 800dae6:	4622      	mov	r2, r4
 800dae8:	4680      	mov	r8, r0
 800daea:	4689      	mov	r9, r1
 800daec:	462b      	mov	r3, r5
 800daee:	4620      	mov	r0, r4
 800daf0:	4629      	mov	r1, r5
 800daf2:	f7f2 fd81 	bl	80005f8 <__aeabi_dmul>
 800daf6:	4602      	mov	r2, r0
 800daf8:	460b      	mov	r3, r1
 800dafa:	4640      	mov	r0, r8
 800dafc:	4649      	mov	r1, r9
 800dafe:	f7f2 fd7b 	bl	80005f8 <__aeabi_dmul>
 800db02:	a33f      	add	r3, pc, #252	; (adr r3, 800dc00 <__ieee754_pow+0x3e0>)
 800db04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db08:	f7f2 fd76 	bl	80005f8 <__aeabi_dmul>
 800db0c:	4602      	mov	r2, r0
 800db0e:	460b      	mov	r3, r1
 800db10:	4650      	mov	r0, sl
 800db12:	4659      	mov	r1, fp
 800db14:	f7f2 fbb8 	bl	8000288 <__aeabi_dsub>
 800db18:	4602      	mov	r2, r0
 800db1a:	460b      	mov	r3, r1
 800db1c:	4680      	mov	r8, r0
 800db1e:	4689      	mov	r9, r1
 800db20:	4630      	mov	r0, r6
 800db22:	4639      	mov	r1, r7
 800db24:	f7f2 fbb2 	bl	800028c <__adddf3>
 800db28:	2000      	movs	r0, #0
 800db2a:	4632      	mov	r2, r6
 800db2c:	463b      	mov	r3, r7
 800db2e:	4604      	mov	r4, r0
 800db30:	460d      	mov	r5, r1
 800db32:	f7f2 fba9 	bl	8000288 <__aeabi_dsub>
 800db36:	4602      	mov	r2, r0
 800db38:	460b      	mov	r3, r1
 800db3a:	4640      	mov	r0, r8
 800db3c:	4649      	mov	r1, r9
 800db3e:	f7f2 fba3 	bl	8000288 <__aeabi_dsub>
 800db42:	9b04      	ldr	r3, [sp, #16]
 800db44:	9a06      	ldr	r2, [sp, #24]
 800db46:	3b01      	subs	r3, #1
 800db48:	4313      	orrs	r3, r2
 800db4a:	4682      	mov	sl, r0
 800db4c:	468b      	mov	fp, r1
 800db4e:	f040 81e7 	bne.w	800df20 <__ieee754_pow+0x700>
 800db52:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800dc08 <__ieee754_pow+0x3e8>
 800db56:	eeb0 8a47 	vmov.f32	s16, s14
 800db5a:	eef0 8a67 	vmov.f32	s17, s15
 800db5e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800db62:	2600      	movs	r6, #0
 800db64:	4632      	mov	r2, r6
 800db66:	463b      	mov	r3, r7
 800db68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db6c:	f7f2 fb8c 	bl	8000288 <__aeabi_dsub>
 800db70:	4622      	mov	r2, r4
 800db72:	462b      	mov	r3, r5
 800db74:	f7f2 fd40 	bl	80005f8 <__aeabi_dmul>
 800db78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db7c:	4680      	mov	r8, r0
 800db7e:	4689      	mov	r9, r1
 800db80:	4650      	mov	r0, sl
 800db82:	4659      	mov	r1, fp
 800db84:	f7f2 fd38 	bl	80005f8 <__aeabi_dmul>
 800db88:	4602      	mov	r2, r0
 800db8a:	460b      	mov	r3, r1
 800db8c:	4640      	mov	r0, r8
 800db8e:	4649      	mov	r1, r9
 800db90:	f7f2 fb7c 	bl	800028c <__adddf3>
 800db94:	4632      	mov	r2, r6
 800db96:	463b      	mov	r3, r7
 800db98:	4680      	mov	r8, r0
 800db9a:	4689      	mov	r9, r1
 800db9c:	4620      	mov	r0, r4
 800db9e:	4629      	mov	r1, r5
 800dba0:	f7f2 fd2a 	bl	80005f8 <__aeabi_dmul>
 800dba4:	460b      	mov	r3, r1
 800dba6:	4604      	mov	r4, r0
 800dba8:	460d      	mov	r5, r1
 800dbaa:	4602      	mov	r2, r0
 800dbac:	4649      	mov	r1, r9
 800dbae:	4640      	mov	r0, r8
 800dbb0:	f7f2 fb6c 	bl	800028c <__adddf3>
 800dbb4:	4b19      	ldr	r3, [pc, #100]	; (800dc1c <__ieee754_pow+0x3fc>)
 800dbb6:	4299      	cmp	r1, r3
 800dbb8:	ec45 4b19 	vmov	d9, r4, r5
 800dbbc:	4606      	mov	r6, r0
 800dbbe:	460f      	mov	r7, r1
 800dbc0:	468b      	mov	fp, r1
 800dbc2:	f340 82f0 	ble.w	800e1a6 <__ieee754_pow+0x986>
 800dbc6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dbca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dbce:	4303      	orrs	r3, r0
 800dbd0:	f000 81e4 	beq.w	800df9c <__ieee754_pow+0x77c>
 800dbd4:	ec51 0b18 	vmov	r0, r1, d8
 800dbd8:	2200      	movs	r2, #0
 800dbda:	2300      	movs	r3, #0
 800dbdc:	f7f2 ff7e 	bl	8000adc <__aeabi_dcmplt>
 800dbe0:	3800      	subs	r0, #0
 800dbe2:	bf18      	it	ne
 800dbe4:	2001      	movne	r0, #1
 800dbe6:	e72b      	b.n	800da40 <__ieee754_pow+0x220>
 800dbe8:	60000000 	.word	0x60000000
 800dbec:	3ff71547 	.word	0x3ff71547
 800dbf0:	f85ddf44 	.word	0xf85ddf44
 800dbf4:	3e54ae0b 	.word	0x3e54ae0b
 800dbf8:	55555555 	.word	0x55555555
 800dbfc:	3fd55555 	.word	0x3fd55555
 800dc00:	652b82fe 	.word	0x652b82fe
 800dc04:	3ff71547 	.word	0x3ff71547
 800dc08:	00000000 	.word	0x00000000
 800dc0c:	bff00000 	.word	0xbff00000
 800dc10:	3ff00000 	.word	0x3ff00000
 800dc14:	3fd00000 	.word	0x3fd00000
 800dc18:	3fe00000 	.word	0x3fe00000
 800dc1c:	408fffff 	.word	0x408fffff
 800dc20:	4bd5      	ldr	r3, [pc, #852]	; (800df78 <__ieee754_pow+0x758>)
 800dc22:	402b      	ands	r3, r5
 800dc24:	2200      	movs	r2, #0
 800dc26:	b92b      	cbnz	r3, 800dc34 <__ieee754_pow+0x414>
 800dc28:	4bd4      	ldr	r3, [pc, #848]	; (800df7c <__ieee754_pow+0x75c>)
 800dc2a:	f7f2 fce5 	bl	80005f8 <__aeabi_dmul>
 800dc2e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800dc32:	460c      	mov	r4, r1
 800dc34:	1523      	asrs	r3, r4, #20
 800dc36:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dc3a:	4413      	add	r3, r2
 800dc3c:	9305      	str	r3, [sp, #20]
 800dc3e:	4bd0      	ldr	r3, [pc, #832]	; (800df80 <__ieee754_pow+0x760>)
 800dc40:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dc44:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800dc48:	429c      	cmp	r4, r3
 800dc4a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dc4e:	dd08      	ble.n	800dc62 <__ieee754_pow+0x442>
 800dc50:	4bcc      	ldr	r3, [pc, #816]	; (800df84 <__ieee754_pow+0x764>)
 800dc52:	429c      	cmp	r4, r3
 800dc54:	f340 8162 	ble.w	800df1c <__ieee754_pow+0x6fc>
 800dc58:	9b05      	ldr	r3, [sp, #20]
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	9305      	str	r3, [sp, #20]
 800dc5e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800dc62:	2400      	movs	r4, #0
 800dc64:	00e3      	lsls	r3, r4, #3
 800dc66:	9307      	str	r3, [sp, #28]
 800dc68:	4bc7      	ldr	r3, [pc, #796]	; (800df88 <__ieee754_pow+0x768>)
 800dc6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc6e:	ed93 7b00 	vldr	d7, [r3]
 800dc72:	4629      	mov	r1, r5
 800dc74:	ec53 2b17 	vmov	r2, r3, d7
 800dc78:	eeb0 9a47 	vmov.f32	s18, s14
 800dc7c:	eef0 9a67 	vmov.f32	s19, s15
 800dc80:	4682      	mov	sl, r0
 800dc82:	f7f2 fb01 	bl	8000288 <__aeabi_dsub>
 800dc86:	4652      	mov	r2, sl
 800dc88:	4606      	mov	r6, r0
 800dc8a:	460f      	mov	r7, r1
 800dc8c:	462b      	mov	r3, r5
 800dc8e:	ec51 0b19 	vmov	r0, r1, d9
 800dc92:	f7f2 fafb 	bl	800028c <__adddf3>
 800dc96:	4602      	mov	r2, r0
 800dc98:	460b      	mov	r3, r1
 800dc9a:	2000      	movs	r0, #0
 800dc9c:	49bb      	ldr	r1, [pc, #748]	; (800df8c <__ieee754_pow+0x76c>)
 800dc9e:	f7f2 fdd5 	bl	800084c <__aeabi_ddiv>
 800dca2:	ec41 0b1a 	vmov	d10, r0, r1
 800dca6:	4602      	mov	r2, r0
 800dca8:	460b      	mov	r3, r1
 800dcaa:	4630      	mov	r0, r6
 800dcac:	4639      	mov	r1, r7
 800dcae:	f7f2 fca3 	bl	80005f8 <__aeabi_dmul>
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcb8:	9302      	str	r3, [sp, #8]
 800dcba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dcbe:	46ab      	mov	fp, r5
 800dcc0:	106d      	asrs	r5, r5, #1
 800dcc2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800dcc6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800dcca:	ec41 0b18 	vmov	d8, r0, r1
 800dcce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	4640      	mov	r0, r8
 800dcd6:	4649      	mov	r1, r9
 800dcd8:	4614      	mov	r4, r2
 800dcda:	461d      	mov	r5, r3
 800dcdc:	f7f2 fc8c 	bl	80005f8 <__aeabi_dmul>
 800dce0:	4602      	mov	r2, r0
 800dce2:	460b      	mov	r3, r1
 800dce4:	4630      	mov	r0, r6
 800dce6:	4639      	mov	r1, r7
 800dce8:	f7f2 face 	bl	8000288 <__aeabi_dsub>
 800dcec:	ec53 2b19 	vmov	r2, r3, d9
 800dcf0:	4606      	mov	r6, r0
 800dcf2:	460f      	mov	r7, r1
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	4629      	mov	r1, r5
 800dcf8:	f7f2 fac6 	bl	8000288 <__aeabi_dsub>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	460b      	mov	r3, r1
 800dd00:	4650      	mov	r0, sl
 800dd02:	4659      	mov	r1, fp
 800dd04:	f7f2 fac0 	bl	8000288 <__aeabi_dsub>
 800dd08:	4642      	mov	r2, r8
 800dd0a:	464b      	mov	r3, r9
 800dd0c:	f7f2 fc74 	bl	80005f8 <__aeabi_dmul>
 800dd10:	4602      	mov	r2, r0
 800dd12:	460b      	mov	r3, r1
 800dd14:	4630      	mov	r0, r6
 800dd16:	4639      	mov	r1, r7
 800dd18:	f7f2 fab6 	bl	8000288 <__aeabi_dsub>
 800dd1c:	ec53 2b1a 	vmov	r2, r3, d10
 800dd20:	f7f2 fc6a 	bl	80005f8 <__aeabi_dmul>
 800dd24:	ec53 2b18 	vmov	r2, r3, d8
 800dd28:	ec41 0b19 	vmov	d9, r0, r1
 800dd2c:	ec51 0b18 	vmov	r0, r1, d8
 800dd30:	f7f2 fc62 	bl	80005f8 <__aeabi_dmul>
 800dd34:	a37c      	add	r3, pc, #496	; (adr r3, 800df28 <__ieee754_pow+0x708>)
 800dd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3a:	4604      	mov	r4, r0
 800dd3c:	460d      	mov	r5, r1
 800dd3e:	f7f2 fc5b 	bl	80005f8 <__aeabi_dmul>
 800dd42:	a37b      	add	r3, pc, #492	; (adr r3, 800df30 <__ieee754_pow+0x710>)
 800dd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd48:	f7f2 faa0 	bl	800028c <__adddf3>
 800dd4c:	4622      	mov	r2, r4
 800dd4e:	462b      	mov	r3, r5
 800dd50:	f7f2 fc52 	bl	80005f8 <__aeabi_dmul>
 800dd54:	a378      	add	r3, pc, #480	; (adr r3, 800df38 <__ieee754_pow+0x718>)
 800dd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5a:	f7f2 fa97 	bl	800028c <__adddf3>
 800dd5e:	4622      	mov	r2, r4
 800dd60:	462b      	mov	r3, r5
 800dd62:	f7f2 fc49 	bl	80005f8 <__aeabi_dmul>
 800dd66:	a376      	add	r3, pc, #472	; (adr r3, 800df40 <__ieee754_pow+0x720>)
 800dd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6c:	f7f2 fa8e 	bl	800028c <__adddf3>
 800dd70:	4622      	mov	r2, r4
 800dd72:	462b      	mov	r3, r5
 800dd74:	f7f2 fc40 	bl	80005f8 <__aeabi_dmul>
 800dd78:	a373      	add	r3, pc, #460	; (adr r3, 800df48 <__ieee754_pow+0x728>)
 800dd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7e:	f7f2 fa85 	bl	800028c <__adddf3>
 800dd82:	4622      	mov	r2, r4
 800dd84:	462b      	mov	r3, r5
 800dd86:	f7f2 fc37 	bl	80005f8 <__aeabi_dmul>
 800dd8a:	a371      	add	r3, pc, #452	; (adr r3, 800df50 <__ieee754_pow+0x730>)
 800dd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd90:	f7f2 fa7c 	bl	800028c <__adddf3>
 800dd94:	4622      	mov	r2, r4
 800dd96:	4606      	mov	r6, r0
 800dd98:	460f      	mov	r7, r1
 800dd9a:	462b      	mov	r3, r5
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	4629      	mov	r1, r5
 800dda0:	f7f2 fc2a 	bl	80005f8 <__aeabi_dmul>
 800dda4:	4602      	mov	r2, r0
 800dda6:	460b      	mov	r3, r1
 800dda8:	4630      	mov	r0, r6
 800ddaa:	4639      	mov	r1, r7
 800ddac:	f7f2 fc24 	bl	80005f8 <__aeabi_dmul>
 800ddb0:	4642      	mov	r2, r8
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	460d      	mov	r5, r1
 800ddb6:	464b      	mov	r3, r9
 800ddb8:	ec51 0b18 	vmov	r0, r1, d8
 800ddbc:	f7f2 fa66 	bl	800028c <__adddf3>
 800ddc0:	ec53 2b19 	vmov	r2, r3, d9
 800ddc4:	f7f2 fc18 	bl	80005f8 <__aeabi_dmul>
 800ddc8:	4622      	mov	r2, r4
 800ddca:	462b      	mov	r3, r5
 800ddcc:	f7f2 fa5e 	bl	800028c <__adddf3>
 800ddd0:	4642      	mov	r2, r8
 800ddd2:	4682      	mov	sl, r0
 800ddd4:	468b      	mov	fp, r1
 800ddd6:	464b      	mov	r3, r9
 800ddd8:	4640      	mov	r0, r8
 800ddda:	4649      	mov	r1, r9
 800dddc:	f7f2 fc0c 	bl	80005f8 <__aeabi_dmul>
 800dde0:	4b6b      	ldr	r3, [pc, #428]	; (800df90 <__ieee754_pow+0x770>)
 800dde2:	2200      	movs	r2, #0
 800dde4:	4606      	mov	r6, r0
 800dde6:	460f      	mov	r7, r1
 800dde8:	f7f2 fa50 	bl	800028c <__adddf3>
 800ddec:	4652      	mov	r2, sl
 800ddee:	465b      	mov	r3, fp
 800ddf0:	f7f2 fa4c 	bl	800028c <__adddf3>
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	460d      	mov	r5, r1
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	4640      	mov	r0, r8
 800de00:	4649      	mov	r1, r9
 800de02:	f7f2 fbf9 	bl	80005f8 <__aeabi_dmul>
 800de06:	4b62      	ldr	r3, [pc, #392]	; (800df90 <__ieee754_pow+0x770>)
 800de08:	4680      	mov	r8, r0
 800de0a:	4689      	mov	r9, r1
 800de0c:	2200      	movs	r2, #0
 800de0e:	4620      	mov	r0, r4
 800de10:	4629      	mov	r1, r5
 800de12:	f7f2 fa39 	bl	8000288 <__aeabi_dsub>
 800de16:	4632      	mov	r2, r6
 800de18:	463b      	mov	r3, r7
 800de1a:	f7f2 fa35 	bl	8000288 <__aeabi_dsub>
 800de1e:	4602      	mov	r2, r0
 800de20:	460b      	mov	r3, r1
 800de22:	4650      	mov	r0, sl
 800de24:	4659      	mov	r1, fp
 800de26:	f7f2 fa2f 	bl	8000288 <__aeabi_dsub>
 800de2a:	ec53 2b18 	vmov	r2, r3, d8
 800de2e:	f7f2 fbe3 	bl	80005f8 <__aeabi_dmul>
 800de32:	4622      	mov	r2, r4
 800de34:	4606      	mov	r6, r0
 800de36:	460f      	mov	r7, r1
 800de38:	462b      	mov	r3, r5
 800de3a:	ec51 0b19 	vmov	r0, r1, d9
 800de3e:	f7f2 fbdb 	bl	80005f8 <__aeabi_dmul>
 800de42:	4602      	mov	r2, r0
 800de44:	460b      	mov	r3, r1
 800de46:	4630      	mov	r0, r6
 800de48:	4639      	mov	r1, r7
 800de4a:	f7f2 fa1f 	bl	800028c <__adddf3>
 800de4e:	4606      	mov	r6, r0
 800de50:	460f      	mov	r7, r1
 800de52:	4602      	mov	r2, r0
 800de54:	460b      	mov	r3, r1
 800de56:	4640      	mov	r0, r8
 800de58:	4649      	mov	r1, r9
 800de5a:	f7f2 fa17 	bl	800028c <__adddf3>
 800de5e:	a33e      	add	r3, pc, #248	; (adr r3, 800df58 <__ieee754_pow+0x738>)
 800de60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de64:	2000      	movs	r0, #0
 800de66:	4604      	mov	r4, r0
 800de68:	460d      	mov	r5, r1
 800de6a:	f7f2 fbc5 	bl	80005f8 <__aeabi_dmul>
 800de6e:	4642      	mov	r2, r8
 800de70:	ec41 0b18 	vmov	d8, r0, r1
 800de74:	464b      	mov	r3, r9
 800de76:	4620      	mov	r0, r4
 800de78:	4629      	mov	r1, r5
 800de7a:	f7f2 fa05 	bl	8000288 <__aeabi_dsub>
 800de7e:	4602      	mov	r2, r0
 800de80:	460b      	mov	r3, r1
 800de82:	4630      	mov	r0, r6
 800de84:	4639      	mov	r1, r7
 800de86:	f7f2 f9ff 	bl	8000288 <__aeabi_dsub>
 800de8a:	a335      	add	r3, pc, #212	; (adr r3, 800df60 <__ieee754_pow+0x740>)
 800de8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de90:	f7f2 fbb2 	bl	80005f8 <__aeabi_dmul>
 800de94:	a334      	add	r3, pc, #208	; (adr r3, 800df68 <__ieee754_pow+0x748>)
 800de96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9a:	4606      	mov	r6, r0
 800de9c:	460f      	mov	r7, r1
 800de9e:	4620      	mov	r0, r4
 800dea0:	4629      	mov	r1, r5
 800dea2:	f7f2 fba9 	bl	80005f8 <__aeabi_dmul>
 800dea6:	4602      	mov	r2, r0
 800dea8:	460b      	mov	r3, r1
 800deaa:	4630      	mov	r0, r6
 800deac:	4639      	mov	r1, r7
 800deae:	f7f2 f9ed 	bl	800028c <__adddf3>
 800deb2:	9a07      	ldr	r2, [sp, #28]
 800deb4:	4b37      	ldr	r3, [pc, #220]	; (800df94 <__ieee754_pow+0x774>)
 800deb6:	4413      	add	r3, r2
 800deb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debc:	f7f2 f9e6 	bl	800028c <__adddf3>
 800dec0:	4682      	mov	sl, r0
 800dec2:	9805      	ldr	r0, [sp, #20]
 800dec4:	468b      	mov	fp, r1
 800dec6:	f7f2 fb2d 	bl	8000524 <__aeabi_i2d>
 800deca:	9a07      	ldr	r2, [sp, #28]
 800decc:	4b32      	ldr	r3, [pc, #200]	; (800df98 <__ieee754_pow+0x778>)
 800dece:	4413      	add	r3, r2
 800ded0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ded4:	4606      	mov	r6, r0
 800ded6:	460f      	mov	r7, r1
 800ded8:	4652      	mov	r2, sl
 800deda:	465b      	mov	r3, fp
 800dedc:	ec51 0b18 	vmov	r0, r1, d8
 800dee0:	f7f2 f9d4 	bl	800028c <__adddf3>
 800dee4:	4642      	mov	r2, r8
 800dee6:	464b      	mov	r3, r9
 800dee8:	f7f2 f9d0 	bl	800028c <__adddf3>
 800deec:	4632      	mov	r2, r6
 800deee:	463b      	mov	r3, r7
 800def0:	f7f2 f9cc 	bl	800028c <__adddf3>
 800def4:	2000      	movs	r0, #0
 800def6:	4632      	mov	r2, r6
 800def8:	463b      	mov	r3, r7
 800defa:	4604      	mov	r4, r0
 800defc:	460d      	mov	r5, r1
 800defe:	f7f2 f9c3 	bl	8000288 <__aeabi_dsub>
 800df02:	4642      	mov	r2, r8
 800df04:	464b      	mov	r3, r9
 800df06:	f7f2 f9bf 	bl	8000288 <__aeabi_dsub>
 800df0a:	ec53 2b18 	vmov	r2, r3, d8
 800df0e:	f7f2 f9bb 	bl	8000288 <__aeabi_dsub>
 800df12:	4602      	mov	r2, r0
 800df14:	460b      	mov	r3, r1
 800df16:	4650      	mov	r0, sl
 800df18:	4659      	mov	r1, fp
 800df1a:	e610      	b.n	800db3e <__ieee754_pow+0x31e>
 800df1c:	2401      	movs	r4, #1
 800df1e:	e6a1      	b.n	800dc64 <__ieee754_pow+0x444>
 800df20:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800df70 <__ieee754_pow+0x750>
 800df24:	e617      	b.n	800db56 <__ieee754_pow+0x336>
 800df26:	bf00      	nop
 800df28:	4a454eef 	.word	0x4a454eef
 800df2c:	3fca7e28 	.word	0x3fca7e28
 800df30:	93c9db65 	.word	0x93c9db65
 800df34:	3fcd864a 	.word	0x3fcd864a
 800df38:	a91d4101 	.word	0xa91d4101
 800df3c:	3fd17460 	.word	0x3fd17460
 800df40:	518f264d 	.word	0x518f264d
 800df44:	3fd55555 	.word	0x3fd55555
 800df48:	db6fabff 	.word	0xdb6fabff
 800df4c:	3fdb6db6 	.word	0x3fdb6db6
 800df50:	33333303 	.word	0x33333303
 800df54:	3fe33333 	.word	0x3fe33333
 800df58:	e0000000 	.word	0xe0000000
 800df5c:	3feec709 	.word	0x3feec709
 800df60:	dc3a03fd 	.word	0xdc3a03fd
 800df64:	3feec709 	.word	0x3feec709
 800df68:	145b01f5 	.word	0x145b01f5
 800df6c:	be3e2fe0 	.word	0xbe3e2fe0
 800df70:	00000000 	.word	0x00000000
 800df74:	3ff00000 	.word	0x3ff00000
 800df78:	7ff00000 	.word	0x7ff00000
 800df7c:	43400000 	.word	0x43400000
 800df80:	0003988e 	.word	0x0003988e
 800df84:	000bb679 	.word	0x000bb679
 800df88:	0800ed00 	.word	0x0800ed00
 800df8c:	3ff00000 	.word	0x3ff00000
 800df90:	40080000 	.word	0x40080000
 800df94:	0800ed20 	.word	0x0800ed20
 800df98:	0800ed10 	.word	0x0800ed10
 800df9c:	a3b3      	add	r3, pc, #716	; (adr r3, 800e26c <__ieee754_pow+0xa4c>)
 800df9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa2:	4640      	mov	r0, r8
 800dfa4:	4649      	mov	r1, r9
 800dfa6:	f7f2 f971 	bl	800028c <__adddf3>
 800dfaa:	4622      	mov	r2, r4
 800dfac:	ec41 0b1a 	vmov	d10, r0, r1
 800dfb0:	462b      	mov	r3, r5
 800dfb2:	4630      	mov	r0, r6
 800dfb4:	4639      	mov	r1, r7
 800dfb6:	f7f2 f967 	bl	8000288 <__aeabi_dsub>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	ec51 0b1a 	vmov	r0, r1, d10
 800dfc2:	f7f2 fda9 	bl	8000b18 <__aeabi_dcmpgt>
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	f47f ae04 	bne.w	800dbd4 <__ieee754_pow+0x3b4>
 800dfcc:	4aa2      	ldr	r2, [pc, #648]	; (800e258 <__ieee754_pow+0xa38>)
 800dfce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	f340 8107 	ble.w	800e1e6 <__ieee754_pow+0x9c6>
 800dfd8:	151b      	asrs	r3, r3, #20
 800dfda:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dfde:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800dfe2:	fa4a fa03 	asr.w	sl, sl, r3
 800dfe6:	44da      	add	sl, fp
 800dfe8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800dfec:	489b      	ldr	r0, [pc, #620]	; (800e25c <__ieee754_pow+0xa3c>)
 800dfee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800dff2:	4108      	asrs	r0, r1
 800dff4:	ea00 030a 	and.w	r3, r0, sl
 800dff8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800dffc:	f1c1 0114 	rsb	r1, r1, #20
 800e000:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e004:	fa4a fa01 	asr.w	sl, sl, r1
 800e008:	f1bb 0f00 	cmp.w	fp, #0
 800e00c:	f04f 0200 	mov.w	r2, #0
 800e010:	4620      	mov	r0, r4
 800e012:	4629      	mov	r1, r5
 800e014:	bfb8      	it	lt
 800e016:	f1ca 0a00 	rsblt	sl, sl, #0
 800e01a:	f7f2 f935 	bl	8000288 <__aeabi_dsub>
 800e01e:	ec41 0b19 	vmov	d9, r0, r1
 800e022:	4642      	mov	r2, r8
 800e024:	464b      	mov	r3, r9
 800e026:	ec51 0b19 	vmov	r0, r1, d9
 800e02a:	f7f2 f92f 	bl	800028c <__adddf3>
 800e02e:	a37a      	add	r3, pc, #488	; (adr r3, 800e218 <__ieee754_pow+0x9f8>)
 800e030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e034:	2000      	movs	r0, #0
 800e036:	4604      	mov	r4, r0
 800e038:	460d      	mov	r5, r1
 800e03a:	f7f2 fadd 	bl	80005f8 <__aeabi_dmul>
 800e03e:	ec53 2b19 	vmov	r2, r3, d9
 800e042:	4606      	mov	r6, r0
 800e044:	460f      	mov	r7, r1
 800e046:	4620      	mov	r0, r4
 800e048:	4629      	mov	r1, r5
 800e04a:	f7f2 f91d 	bl	8000288 <__aeabi_dsub>
 800e04e:	4602      	mov	r2, r0
 800e050:	460b      	mov	r3, r1
 800e052:	4640      	mov	r0, r8
 800e054:	4649      	mov	r1, r9
 800e056:	f7f2 f917 	bl	8000288 <__aeabi_dsub>
 800e05a:	a371      	add	r3, pc, #452	; (adr r3, 800e220 <__ieee754_pow+0xa00>)
 800e05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e060:	f7f2 faca 	bl	80005f8 <__aeabi_dmul>
 800e064:	a370      	add	r3, pc, #448	; (adr r3, 800e228 <__ieee754_pow+0xa08>)
 800e066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e06a:	4680      	mov	r8, r0
 800e06c:	4689      	mov	r9, r1
 800e06e:	4620      	mov	r0, r4
 800e070:	4629      	mov	r1, r5
 800e072:	f7f2 fac1 	bl	80005f8 <__aeabi_dmul>
 800e076:	4602      	mov	r2, r0
 800e078:	460b      	mov	r3, r1
 800e07a:	4640      	mov	r0, r8
 800e07c:	4649      	mov	r1, r9
 800e07e:	f7f2 f905 	bl	800028c <__adddf3>
 800e082:	4604      	mov	r4, r0
 800e084:	460d      	mov	r5, r1
 800e086:	4602      	mov	r2, r0
 800e088:	460b      	mov	r3, r1
 800e08a:	4630      	mov	r0, r6
 800e08c:	4639      	mov	r1, r7
 800e08e:	f7f2 f8fd 	bl	800028c <__adddf3>
 800e092:	4632      	mov	r2, r6
 800e094:	463b      	mov	r3, r7
 800e096:	4680      	mov	r8, r0
 800e098:	4689      	mov	r9, r1
 800e09a:	f7f2 f8f5 	bl	8000288 <__aeabi_dsub>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	4629      	mov	r1, r5
 800e0a6:	f7f2 f8ef 	bl	8000288 <__aeabi_dsub>
 800e0aa:	4642      	mov	r2, r8
 800e0ac:	4606      	mov	r6, r0
 800e0ae:	460f      	mov	r7, r1
 800e0b0:	464b      	mov	r3, r9
 800e0b2:	4640      	mov	r0, r8
 800e0b4:	4649      	mov	r1, r9
 800e0b6:	f7f2 fa9f 	bl	80005f8 <__aeabi_dmul>
 800e0ba:	a35d      	add	r3, pc, #372	; (adr r3, 800e230 <__ieee754_pow+0xa10>)
 800e0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c0:	4604      	mov	r4, r0
 800e0c2:	460d      	mov	r5, r1
 800e0c4:	f7f2 fa98 	bl	80005f8 <__aeabi_dmul>
 800e0c8:	a35b      	add	r3, pc, #364	; (adr r3, 800e238 <__ieee754_pow+0xa18>)
 800e0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ce:	f7f2 f8db 	bl	8000288 <__aeabi_dsub>
 800e0d2:	4622      	mov	r2, r4
 800e0d4:	462b      	mov	r3, r5
 800e0d6:	f7f2 fa8f 	bl	80005f8 <__aeabi_dmul>
 800e0da:	a359      	add	r3, pc, #356	; (adr r3, 800e240 <__ieee754_pow+0xa20>)
 800e0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e0:	f7f2 f8d4 	bl	800028c <__adddf3>
 800e0e4:	4622      	mov	r2, r4
 800e0e6:	462b      	mov	r3, r5
 800e0e8:	f7f2 fa86 	bl	80005f8 <__aeabi_dmul>
 800e0ec:	a356      	add	r3, pc, #344	; (adr r3, 800e248 <__ieee754_pow+0xa28>)
 800e0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f2:	f7f2 f8c9 	bl	8000288 <__aeabi_dsub>
 800e0f6:	4622      	mov	r2, r4
 800e0f8:	462b      	mov	r3, r5
 800e0fa:	f7f2 fa7d 	bl	80005f8 <__aeabi_dmul>
 800e0fe:	a354      	add	r3, pc, #336	; (adr r3, 800e250 <__ieee754_pow+0xa30>)
 800e100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e104:	f7f2 f8c2 	bl	800028c <__adddf3>
 800e108:	4622      	mov	r2, r4
 800e10a:	462b      	mov	r3, r5
 800e10c:	f7f2 fa74 	bl	80005f8 <__aeabi_dmul>
 800e110:	4602      	mov	r2, r0
 800e112:	460b      	mov	r3, r1
 800e114:	4640      	mov	r0, r8
 800e116:	4649      	mov	r1, r9
 800e118:	f7f2 f8b6 	bl	8000288 <__aeabi_dsub>
 800e11c:	4604      	mov	r4, r0
 800e11e:	460d      	mov	r5, r1
 800e120:	4602      	mov	r2, r0
 800e122:	460b      	mov	r3, r1
 800e124:	4640      	mov	r0, r8
 800e126:	4649      	mov	r1, r9
 800e128:	f7f2 fa66 	bl	80005f8 <__aeabi_dmul>
 800e12c:	2200      	movs	r2, #0
 800e12e:	ec41 0b19 	vmov	d9, r0, r1
 800e132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e136:	4620      	mov	r0, r4
 800e138:	4629      	mov	r1, r5
 800e13a:	f7f2 f8a5 	bl	8000288 <__aeabi_dsub>
 800e13e:	4602      	mov	r2, r0
 800e140:	460b      	mov	r3, r1
 800e142:	ec51 0b19 	vmov	r0, r1, d9
 800e146:	f7f2 fb81 	bl	800084c <__aeabi_ddiv>
 800e14a:	4632      	mov	r2, r6
 800e14c:	4604      	mov	r4, r0
 800e14e:	460d      	mov	r5, r1
 800e150:	463b      	mov	r3, r7
 800e152:	4640      	mov	r0, r8
 800e154:	4649      	mov	r1, r9
 800e156:	f7f2 fa4f 	bl	80005f8 <__aeabi_dmul>
 800e15a:	4632      	mov	r2, r6
 800e15c:	463b      	mov	r3, r7
 800e15e:	f7f2 f895 	bl	800028c <__adddf3>
 800e162:	4602      	mov	r2, r0
 800e164:	460b      	mov	r3, r1
 800e166:	4620      	mov	r0, r4
 800e168:	4629      	mov	r1, r5
 800e16a:	f7f2 f88d 	bl	8000288 <__aeabi_dsub>
 800e16e:	4642      	mov	r2, r8
 800e170:	464b      	mov	r3, r9
 800e172:	f7f2 f889 	bl	8000288 <__aeabi_dsub>
 800e176:	460b      	mov	r3, r1
 800e178:	4602      	mov	r2, r0
 800e17a:	4939      	ldr	r1, [pc, #228]	; (800e260 <__ieee754_pow+0xa40>)
 800e17c:	2000      	movs	r0, #0
 800e17e:	f7f2 f883 	bl	8000288 <__aeabi_dsub>
 800e182:	ec41 0b10 	vmov	d0, r0, r1
 800e186:	ee10 3a90 	vmov	r3, s1
 800e18a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e18e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e192:	da2b      	bge.n	800e1ec <__ieee754_pow+0x9cc>
 800e194:	4650      	mov	r0, sl
 800e196:	f000 f877 	bl	800e288 <scalbn>
 800e19a:	ec51 0b10 	vmov	r0, r1, d0
 800e19e:	ec53 2b18 	vmov	r2, r3, d8
 800e1a2:	f7ff bbee 	b.w	800d982 <__ieee754_pow+0x162>
 800e1a6:	4b2f      	ldr	r3, [pc, #188]	; (800e264 <__ieee754_pow+0xa44>)
 800e1a8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e1ac:	429e      	cmp	r6, r3
 800e1ae:	f77f af0d 	ble.w	800dfcc <__ieee754_pow+0x7ac>
 800e1b2:	4b2d      	ldr	r3, [pc, #180]	; (800e268 <__ieee754_pow+0xa48>)
 800e1b4:	440b      	add	r3, r1
 800e1b6:	4303      	orrs	r3, r0
 800e1b8:	d009      	beq.n	800e1ce <__ieee754_pow+0x9ae>
 800e1ba:	ec51 0b18 	vmov	r0, r1, d8
 800e1be:	2200      	movs	r2, #0
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	f7f2 fc8b 	bl	8000adc <__aeabi_dcmplt>
 800e1c6:	3800      	subs	r0, #0
 800e1c8:	bf18      	it	ne
 800e1ca:	2001      	movne	r0, #1
 800e1cc:	e448      	b.n	800da60 <__ieee754_pow+0x240>
 800e1ce:	4622      	mov	r2, r4
 800e1d0:	462b      	mov	r3, r5
 800e1d2:	f7f2 f859 	bl	8000288 <__aeabi_dsub>
 800e1d6:	4642      	mov	r2, r8
 800e1d8:	464b      	mov	r3, r9
 800e1da:	f7f2 fc93 	bl	8000b04 <__aeabi_dcmpge>
 800e1de:	2800      	cmp	r0, #0
 800e1e0:	f43f aef4 	beq.w	800dfcc <__ieee754_pow+0x7ac>
 800e1e4:	e7e9      	b.n	800e1ba <__ieee754_pow+0x99a>
 800e1e6:	f04f 0a00 	mov.w	sl, #0
 800e1ea:	e71a      	b.n	800e022 <__ieee754_pow+0x802>
 800e1ec:	ec51 0b10 	vmov	r0, r1, d0
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	e7d4      	b.n	800e19e <__ieee754_pow+0x97e>
 800e1f4:	491a      	ldr	r1, [pc, #104]	; (800e260 <__ieee754_pow+0xa40>)
 800e1f6:	2000      	movs	r0, #0
 800e1f8:	f7ff bb31 	b.w	800d85e <__ieee754_pow+0x3e>
 800e1fc:	2000      	movs	r0, #0
 800e1fe:	2100      	movs	r1, #0
 800e200:	f7ff bb2d 	b.w	800d85e <__ieee754_pow+0x3e>
 800e204:	4630      	mov	r0, r6
 800e206:	4639      	mov	r1, r7
 800e208:	f7ff bb29 	b.w	800d85e <__ieee754_pow+0x3e>
 800e20c:	9204      	str	r2, [sp, #16]
 800e20e:	f7ff bb7b 	b.w	800d908 <__ieee754_pow+0xe8>
 800e212:	2300      	movs	r3, #0
 800e214:	f7ff bb65 	b.w	800d8e2 <__ieee754_pow+0xc2>
 800e218:	00000000 	.word	0x00000000
 800e21c:	3fe62e43 	.word	0x3fe62e43
 800e220:	fefa39ef 	.word	0xfefa39ef
 800e224:	3fe62e42 	.word	0x3fe62e42
 800e228:	0ca86c39 	.word	0x0ca86c39
 800e22c:	be205c61 	.word	0xbe205c61
 800e230:	72bea4d0 	.word	0x72bea4d0
 800e234:	3e663769 	.word	0x3e663769
 800e238:	c5d26bf1 	.word	0xc5d26bf1
 800e23c:	3ebbbd41 	.word	0x3ebbbd41
 800e240:	af25de2c 	.word	0xaf25de2c
 800e244:	3f11566a 	.word	0x3f11566a
 800e248:	16bebd93 	.word	0x16bebd93
 800e24c:	3f66c16c 	.word	0x3f66c16c
 800e250:	5555553e 	.word	0x5555553e
 800e254:	3fc55555 	.word	0x3fc55555
 800e258:	3fe00000 	.word	0x3fe00000
 800e25c:	fff00000 	.word	0xfff00000
 800e260:	3ff00000 	.word	0x3ff00000
 800e264:	4090cbff 	.word	0x4090cbff
 800e268:	3f6f3400 	.word	0x3f6f3400
 800e26c:	652b82fe 	.word	0x652b82fe
 800e270:	3c971547 	.word	0x3c971547

0800e274 <fabs>:
 800e274:	ec51 0b10 	vmov	r0, r1, d0
 800e278:	ee10 2a10 	vmov	r2, s0
 800e27c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e280:	ec43 2b10 	vmov	d0, r2, r3
 800e284:	4770      	bx	lr
	...

0800e288 <scalbn>:
 800e288:	b570      	push	{r4, r5, r6, lr}
 800e28a:	ec55 4b10 	vmov	r4, r5, d0
 800e28e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e292:	4606      	mov	r6, r0
 800e294:	462b      	mov	r3, r5
 800e296:	b999      	cbnz	r1, 800e2c0 <scalbn+0x38>
 800e298:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e29c:	4323      	orrs	r3, r4
 800e29e:	d03f      	beq.n	800e320 <scalbn+0x98>
 800e2a0:	4b35      	ldr	r3, [pc, #212]	; (800e378 <scalbn+0xf0>)
 800e2a2:	4629      	mov	r1, r5
 800e2a4:	ee10 0a10 	vmov	r0, s0
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	f7f2 f9a5 	bl	80005f8 <__aeabi_dmul>
 800e2ae:	4b33      	ldr	r3, [pc, #204]	; (800e37c <scalbn+0xf4>)
 800e2b0:	429e      	cmp	r6, r3
 800e2b2:	4604      	mov	r4, r0
 800e2b4:	460d      	mov	r5, r1
 800e2b6:	da10      	bge.n	800e2da <scalbn+0x52>
 800e2b8:	a327      	add	r3, pc, #156	; (adr r3, 800e358 <scalbn+0xd0>)
 800e2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2be:	e01f      	b.n	800e300 <scalbn+0x78>
 800e2c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e2c4:	4291      	cmp	r1, r2
 800e2c6:	d10c      	bne.n	800e2e2 <scalbn+0x5a>
 800e2c8:	ee10 2a10 	vmov	r2, s0
 800e2cc:	4620      	mov	r0, r4
 800e2ce:	4629      	mov	r1, r5
 800e2d0:	f7f1 ffdc 	bl	800028c <__adddf3>
 800e2d4:	4604      	mov	r4, r0
 800e2d6:	460d      	mov	r5, r1
 800e2d8:	e022      	b.n	800e320 <scalbn+0x98>
 800e2da:	460b      	mov	r3, r1
 800e2dc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e2e0:	3936      	subs	r1, #54	; 0x36
 800e2e2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e2e6:	4296      	cmp	r6, r2
 800e2e8:	dd0d      	ble.n	800e306 <scalbn+0x7e>
 800e2ea:	2d00      	cmp	r5, #0
 800e2ec:	a11c      	add	r1, pc, #112	; (adr r1, 800e360 <scalbn+0xd8>)
 800e2ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2f2:	da02      	bge.n	800e2fa <scalbn+0x72>
 800e2f4:	a11c      	add	r1, pc, #112	; (adr r1, 800e368 <scalbn+0xe0>)
 800e2f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2fa:	a319      	add	r3, pc, #100	; (adr r3, 800e360 <scalbn+0xd8>)
 800e2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e300:	f7f2 f97a 	bl	80005f8 <__aeabi_dmul>
 800e304:	e7e6      	b.n	800e2d4 <scalbn+0x4c>
 800e306:	1872      	adds	r2, r6, r1
 800e308:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e30c:	428a      	cmp	r2, r1
 800e30e:	dcec      	bgt.n	800e2ea <scalbn+0x62>
 800e310:	2a00      	cmp	r2, #0
 800e312:	dd08      	ble.n	800e326 <scalbn+0x9e>
 800e314:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e318:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e31c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e320:	ec45 4b10 	vmov	d0, r4, r5
 800e324:	bd70      	pop	{r4, r5, r6, pc}
 800e326:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e32a:	da08      	bge.n	800e33e <scalbn+0xb6>
 800e32c:	2d00      	cmp	r5, #0
 800e32e:	a10a      	add	r1, pc, #40	; (adr r1, 800e358 <scalbn+0xd0>)
 800e330:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e334:	dac0      	bge.n	800e2b8 <scalbn+0x30>
 800e336:	a10e      	add	r1, pc, #56	; (adr r1, 800e370 <scalbn+0xe8>)
 800e338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e33c:	e7bc      	b.n	800e2b8 <scalbn+0x30>
 800e33e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e342:	3236      	adds	r2, #54	; 0x36
 800e344:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e348:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e34c:	4620      	mov	r0, r4
 800e34e:	4b0c      	ldr	r3, [pc, #48]	; (800e380 <scalbn+0xf8>)
 800e350:	2200      	movs	r2, #0
 800e352:	e7d5      	b.n	800e300 <scalbn+0x78>
 800e354:	f3af 8000 	nop.w
 800e358:	c2f8f359 	.word	0xc2f8f359
 800e35c:	01a56e1f 	.word	0x01a56e1f
 800e360:	8800759c 	.word	0x8800759c
 800e364:	7e37e43c 	.word	0x7e37e43c
 800e368:	8800759c 	.word	0x8800759c
 800e36c:	fe37e43c 	.word	0xfe37e43c
 800e370:	c2f8f359 	.word	0xc2f8f359
 800e374:	81a56e1f 	.word	0x81a56e1f
 800e378:	43500000 	.word	0x43500000
 800e37c:	ffff3cb0 	.word	0xffff3cb0
 800e380:	3c900000 	.word	0x3c900000

0800e384 <with_errno>:
 800e384:	b570      	push	{r4, r5, r6, lr}
 800e386:	4604      	mov	r4, r0
 800e388:	460d      	mov	r5, r1
 800e38a:	4616      	mov	r6, r2
 800e38c:	f7fd fb62 	bl	800ba54 <__errno>
 800e390:	4629      	mov	r1, r5
 800e392:	6006      	str	r6, [r0, #0]
 800e394:	4620      	mov	r0, r4
 800e396:	bd70      	pop	{r4, r5, r6, pc}

0800e398 <xflow>:
 800e398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e39a:	4614      	mov	r4, r2
 800e39c:	461d      	mov	r5, r3
 800e39e:	b108      	cbz	r0, 800e3a4 <xflow+0xc>
 800e3a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e3a4:	e9cd 2300 	strd	r2, r3, [sp]
 800e3a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	4629      	mov	r1, r5
 800e3b0:	f7f2 f922 	bl	80005f8 <__aeabi_dmul>
 800e3b4:	2222      	movs	r2, #34	; 0x22
 800e3b6:	b003      	add	sp, #12
 800e3b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3bc:	f7ff bfe2 	b.w	800e384 <with_errno>

0800e3c0 <__math_uflow>:
 800e3c0:	b508      	push	{r3, lr}
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e3c8:	f7ff ffe6 	bl	800e398 <xflow>
 800e3cc:	ec41 0b10 	vmov	d0, r0, r1
 800e3d0:	bd08      	pop	{r3, pc}

0800e3d2 <__math_oflow>:
 800e3d2:	b508      	push	{r3, lr}
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e3da:	f7ff ffdd 	bl	800e398 <xflow>
 800e3de:	ec41 0b10 	vmov	d0, r0, r1
 800e3e2:	bd08      	pop	{r3, pc}

0800e3e4 <__ieee754_sqrt>:
 800e3e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e8:	ec55 4b10 	vmov	r4, r5, d0
 800e3ec:	4e67      	ldr	r6, [pc, #412]	; (800e58c <__ieee754_sqrt+0x1a8>)
 800e3ee:	43ae      	bics	r6, r5
 800e3f0:	ee10 0a10 	vmov	r0, s0
 800e3f4:	ee10 2a10 	vmov	r2, s0
 800e3f8:	4629      	mov	r1, r5
 800e3fa:	462b      	mov	r3, r5
 800e3fc:	d10d      	bne.n	800e41a <__ieee754_sqrt+0x36>
 800e3fe:	f7f2 f8fb 	bl	80005f8 <__aeabi_dmul>
 800e402:	4602      	mov	r2, r0
 800e404:	460b      	mov	r3, r1
 800e406:	4620      	mov	r0, r4
 800e408:	4629      	mov	r1, r5
 800e40a:	f7f1 ff3f 	bl	800028c <__adddf3>
 800e40e:	4604      	mov	r4, r0
 800e410:	460d      	mov	r5, r1
 800e412:	ec45 4b10 	vmov	d0, r4, r5
 800e416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e41a:	2d00      	cmp	r5, #0
 800e41c:	dc0b      	bgt.n	800e436 <__ieee754_sqrt+0x52>
 800e41e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e422:	4326      	orrs	r6, r4
 800e424:	d0f5      	beq.n	800e412 <__ieee754_sqrt+0x2e>
 800e426:	b135      	cbz	r5, 800e436 <__ieee754_sqrt+0x52>
 800e428:	f7f1 ff2e 	bl	8000288 <__aeabi_dsub>
 800e42c:	4602      	mov	r2, r0
 800e42e:	460b      	mov	r3, r1
 800e430:	f7f2 fa0c 	bl	800084c <__aeabi_ddiv>
 800e434:	e7eb      	b.n	800e40e <__ieee754_sqrt+0x2a>
 800e436:	1509      	asrs	r1, r1, #20
 800e438:	f000 808d 	beq.w	800e556 <__ieee754_sqrt+0x172>
 800e43c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e440:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800e444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e448:	07c9      	lsls	r1, r1, #31
 800e44a:	bf5c      	itt	pl
 800e44c:	005b      	lslpl	r3, r3, #1
 800e44e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800e452:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e456:	bf58      	it	pl
 800e458:	0052      	lslpl	r2, r2, #1
 800e45a:	2500      	movs	r5, #0
 800e45c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e460:	1076      	asrs	r6, r6, #1
 800e462:	0052      	lsls	r2, r2, #1
 800e464:	f04f 0e16 	mov.w	lr, #22
 800e468:	46ac      	mov	ip, r5
 800e46a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e46e:	eb0c 0001 	add.w	r0, ip, r1
 800e472:	4298      	cmp	r0, r3
 800e474:	bfde      	ittt	le
 800e476:	1a1b      	suble	r3, r3, r0
 800e478:	eb00 0c01 	addle.w	ip, r0, r1
 800e47c:	186d      	addle	r5, r5, r1
 800e47e:	005b      	lsls	r3, r3, #1
 800e480:	f1be 0e01 	subs.w	lr, lr, #1
 800e484:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e488:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e48c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e490:	d1ed      	bne.n	800e46e <__ieee754_sqrt+0x8a>
 800e492:	4674      	mov	r4, lr
 800e494:	2720      	movs	r7, #32
 800e496:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e49a:	4563      	cmp	r3, ip
 800e49c:	eb01 000e 	add.w	r0, r1, lr
 800e4a0:	dc02      	bgt.n	800e4a8 <__ieee754_sqrt+0xc4>
 800e4a2:	d113      	bne.n	800e4cc <__ieee754_sqrt+0xe8>
 800e4a4:	4290      	cmp	r0, r2
 800e4a6:	d811      	bhi.n	800e4cc <__ieee754_sqrt+0xe8>
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	eb00 0e01 	add.w	lr, r0, r1
 800e4ae:	da57      	bge.n	800e560 <__ieee754_sqrt+0x17c>
 800e4b0:	f1be 0f00 	cmp.w	lr, #0
 800e4b4:	db54      	blt.n	800e560 <__ieee754_sqrt+0x17c>
 800e4b6:	f10c 0801 	add.w	r8, ip, #1
 800e4ba:	eba3 030c 	sub.w	r3, r3, ip
 800e4be:	4290      	cmp	r0, r2
 800e4c0:	bf88      	it	hi
 800e4c2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e4c6:	1a12      	subs	r2, r2, r0
 800e4c8:	440c      	add	r4, r1
 800e4ca:	46c4      	mov	ip, r8
 800e4cc:	005b      	lsls	r3, r3, #1
 800e4ce:	3f01      	subs	r7, #1
 800e4d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e4d4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e4d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e4dc:	d1dd      	bne.n	800e49a <__ieee754_sqrt+0xb6>
 800e4de:	4313      	orrs	r3, r2
 800e4e0:	d01b      	beq.n	800e51a <__ieee754_sqrt+0x136>
 800e4e2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800e590 <__ieee754_sqrt+0x1ac>
 800e4e6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800e594 <__ieee754_sqrt+0x1b0>
 800e4ea:	e9da 0100 	ldrd	r0, r1, [sl]
 800e4ee:	e9db 2300 	ldrd	r2, r3, [fp]
 800e4f2:	f7f1 fec9 	bl	8000288 <__aeabi_dsub>
 800e4f6:	e9da 8900 	ldrd	r8, r9, [sl]
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	4640      	mov	r0, r8
 800e500:	4649      	mov	r1, r9
 800e502:	f7f2 faf5 	bl	8000af0 <__aeabi_dcmple>
 800e506:	b140      	cbz	r0, 800e51a <__ieee754_sqrt+0x136>
 800e508:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e50c:	e9da 0100 	ldrd	r0, r1, [sl]
 800e510:	e9db 2300 	ldrd	r2, r3, [fp]
 800e514:	d126      	bne.n	800e564 <__ieee754_sqrt+0x180>
 800e516:	3501      	adds	r5, #1
 800e518:	463c      	mov	r4, r7
 800e51a:	106a      	asrs	r2, r5, #1
 800e51c:	0863      	lsrs	r3, r4, #1
 800e51e:	07e9      	lsls	r1, r5, #31
 800e520:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e524:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e528:	bf48      	it	mi
 800e52a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e52e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800e532:	461c      	mov	r4, r3
 800e534:	e76d      	b.n	800e412 <__ieee754_sqrt+0x2e>
 800e536:	0ad3      	lsrs	r3, r2, #11
 800e538:	3815      	subs	r0, #21
 800e53a:	0552      	lsls	r2, r2, #21
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d0fa      	beq.n	800e536 <__ieee754_sqrt+0x152>
 800e540:	02dc      	lsls	r4, r3, #11
 800e542:	d50a      	bpl.n	800e55a <__ieee754_sqrt+0x176>
 800e544:	f1c1 0420 	rsb	r4, r1, #32
 800e548:	fa22 f404 	lsr.w	r4, r2, r4
 800e54c:	1e4d      	subs	r5, r1, #1
 800e54e:	408a      	lsls	r2, r1
 800e550:	4323      	orrs	r3, r4
 800e552:	1b41      	subs	r1, r0, r5
 800e554:	e772      	b.n	800e43c <__ieee754_sqrt+0x58>
 800e556:	4608      	mov	r0, r1
 800e558:	e7f0      	b.n	800e53c <__ieee754_sqrt+0x158>
 800e55a:	005b      	lsls	r3, r3, #1
 800e55c:	3101      	adds	r1, #1
 800e55e:	e7ef      	b.n	800e540 <__ieee754_sqrt+0x15c>
 800e560:	46e0      	mov	r8, ip
 800e562:	e7aa      	b.n	800e4ba <__ieee754_sqrt+0xd6>
 800e564:	f7f1 fe92 	bl	800028c <__adddf3>
 800e568:	e9da 8900 	ldrd	r8, r9, [sl]
 800e56c:	4602      	mov	r2, r0
 800e56e:	460b      	mov	r3, r1
 800e570:	4640      	mov	r0, r8
 800e572:	4649      	mov	r1, r9
 800e574:	f7f2 fab2 	bl	8000adc <__aeabi_dcmplt>
 800e578:	b120      	cbz	r0, 800e584 <__ieee754_sqrt+0x1a0>
 800e57a:	1ca0      	adds	r0, r4, #2
 800e57c:	bf08      	it	eq
 800e57e:	3501      	addeq	r5, #1
 800e580:	3402      	adds	r4, #2
 800e582:	e7ca      	b.n	800e51a <__ieee754_sqrt+0x136>
 800e584:	3401      	adds	r4, #1
 800e586:	f024 0401 	bic.w	r4, r4, #1
 800e58a:	e7c6      	b.n	800e51a <__ieee754_sqrt+0x136>
 800e58c:	7ff00000 	.word	0x7ff00000
 800e590:	200001f0 	.word	0x200001f0
 800e594:	200001f8 	.word	0x200001f8

0800e598 <_init>:
 800e598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e59a:	bf00      	nop
 800e59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e59e:	bc08      	pop	{r3}
 800e5a0:	469e      	mov	lr, r3
 800e5a2:	4770      	bx	lr

0800e5a4 <_fini>:
 800e5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5a6:	bf00      	nop
 800e5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5aa:	bc08      	pop	{r3}
 800e5ac:	469e      	mov	lr, r3
 800e5ae:	4770      	bx	lr
