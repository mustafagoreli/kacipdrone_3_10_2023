
KACIPDRONE_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000110e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  08011278  08011278  00021278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a20  08011a20  00030260  2**0
                  CONTENTS
  4 .ARM          00000008  08011a20  08011a20  00021a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a28  08011a28  00030260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a28  08011a28  00021a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011a2c  08011a2c  00021a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  08011a30  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030260  2**0
                  CONTENTS
 10 .bss          00004ce8  20000260  20000260  00030260  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004f48  20004f48  00030260  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030290  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ed6e  00000000  00000000  000302d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004ec2  00000000  00000000  0004f041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019b0  00000000  00000000  00053f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013ee  00000000  00000000  000558b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000284c2  00000000  00000000  00056ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022193  00000000  00000000  0007f168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e775b  00000000  00000000  000a12fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007f40  00000000  00000000  00188a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00190998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000260 	.word	0x20000260
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011260 	.word	0x08011260

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000264 	.word	0x20000264
 80001cc:	08011260 	.word	0x08011260

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9bb 	b.w	8000fe0 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b970 	b.w	8000fe0 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9e08      	ldr	r6, [sp, #32]
 8000d1e:	460d      	mov	r5, r1
 8000d20:	4604      	mov	r4, r0
 8000d22:	460f      	mov	r7, r1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d14a      	bne.n	8000dbe <__udivmoddi4+0xa6>
 8000d28:	428a      	cmp	r2, r1
 8000d2a:	4694      	mov	ip, r2
 8000d2c:	d965      	bls.n	8000dfa <__udivmoddi4+0xe2>
 8000d2e:	fab2 f382 	clz	r3, r2
 8000d32:	b143      	cbz	r3, 8000d46 <__udivmoddi4+0x2e>
 8000d34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d38:	f1c3 0220 	rsb	r2, r3, #32
 8000d3c:	409f      	lsls	r7, r3
 8000d3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d42:	4317      	orrs	r7, r2
 8000d44:	409c      	lsls	r4, r3
 8000d46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d4a:	fa1f f58c 	uxth.w	r5, ip
 8000d4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d52:	0c22      	lsrs	r2, r4, #16
 8000d54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d5c:	fb01 f005 	mul.w	r0, r1, r5
 8000d60:	4290      	cmp	r0, r2
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x62>
 8000d64:	eb1c 0202 	adds.w	r2, ip, r2
 8000d68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d6c:	f080 811c 	bcs.w	8000fa8 <__udivmoddi4+0x290>
 8000d70:	4290      	cmp	r0, r2
 8000d72:	f240 8119 	bls.w	8000fa8 <__udivmoddi4+0x290>
 8000d76:	3902      	subs	r1, #2
 8000d78:	4462      	add	r2, ip
 8000d7a:	1a12      	subs	r2, r2, r0
 8000d7c:	b2a4      	uxth	r4, r4
 8000d7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8a:	fb00 f505 	mul.w	r5, r0, r5
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x90>
 8000d92:	eb1c 0404 	adds.w	r4, ip, r4
 8000d96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d9a:	f080 8107 	bcs.w	8000fac <__udivmoddi4+0x294>
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	f240 8104 	bls.w	8000fac <__udivmoddi4+0x294>
 8000da4:	4464      	add	r4, ip
 8000da6:	3802      	subs	r0, #2
 8000da8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dac:	1b64      	subs	r4, r4, r5
 8000dae:	2100      	movs	r1, #0
 8000db0:	b11e      	cbz	r6, 8000dba <__udivmoddi4+0xa2>
 8000db2:	40dc      	lsrs	r4, r3
 8000db4:	2300      	movs	r3, #0
 8000db6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0xbc>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	f000 80ed 	beq.w	8000fa2 <__udivmoddi4+0x28a>
 8000dc8:	2100      	movs	r1, #0
 8000dca:	e9c6 0500 	strd	r0, r5, [r6]
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd4:	fab3 f183 	clz	r1, r3
 8000dd8:	2900      	cmp	r1, #0
 8000dda:	d149      	bne.n	8000e70 <__udivmoddi4+0x158>
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	d302      	bcc.n	8000de6 <__udivmoddi4+0xce>
 8000de0:	4282      	cmp	r2, r0
 8000de2:	f200 80f8 	bhi.w	8000fd6 <__udivmoddi4+0x2be>
 8000de6:	1a84      	subs	r4, r0, r2
 8000de8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dec:	2001      	movs	r0, #1
 8000dee:	4617      	mov	r7, r2
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d0e2      	beq.n	8000dba <__udivmoddi4+0xa2>
 8000df4:	e9c6 4700 	strd	r4, r7, [r6]
 8000df8:	e7df      	b.n	8000dba <__udivmoddi4+0xa2>
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xe6>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f382 	clz	r3, r2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x210>
 8000e08:	1a8a      	subs	r2, r1, r2
 8000e0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0e:	fa1f fe8c 	uxth.w	lr, ip
 8000e12:	2101      	movs	r1, #1
 8000e14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e18:	fb07 2015 	mls	r0, r7, r5, r2
 8000e1c:	0c22      	lsrs	r2, r4, #16
 8000e1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e22:	fb0e f005 	mul.w	r0, lr, r5
 8000e26:	4290      	cmp	r0, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x124>
 8000e2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x122>
 8000e34:	4290      	cmp	r0, r2
 8000e36:	f200 80cb 	bhi.w	8000fd0 <__udivmoddi4+0x2b8>
 8000e3a:	4645      	mov	r5, r8
 8000e3c:	1a12      	subs	r2, r2, r0
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e44:	fb07 2210 	mls	r2, r7, r0, r2
 8000e48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x14e>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e5c:	d202      	bcs.n	8000e64 <__udivmoddi4+0x14c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f200 80bb 	bhi.w	8000fda <__udivmoddi4+0x2c2>
 8000e64:	4610      	mov	r0, r2
 8000e66:	eba4 040e 	sub.w	r4, r4, lr
 8000e6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e6e:	e79f      	b.n	8000db0 <__udivmoddi4+0x98>
 8000e70:	f1c1 0720 	rsb	r7, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e82:	fa20 f307 	lsr.w	r3, r0, r7
 8000e86:	40fd      	lsrs	r5, r7
 8000e88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	fb09 5518 	mls	r5, r9, r8, r5
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ea0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ea4:	42a5      	cmp	r5, r4
 8000ea6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eaa:	fa00 f001 	lsl.w	r0, r0, r1
 8000eae:	d90b      	bls.n	8000ec8 <__udivmoddi4+0x1b0>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb8:	f080 8088 	bcs.w	8000fcc <__udivmoddi4+0x2b4>
 8000ebc:	42a5      	cmp	r5, r4
 8000ebe:	f240 8085 	bls.w	8000fcc <__udivmoddi4+0x2b4>
 8000ec2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec6:	4464      	add	r4, ip
 8000ec8:	1b64      	subs	r4, r4, r5
 8000eca:	b29d      	uxth	r5, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ed8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000edc:	45a6      	cmp	lr, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1da>
 8000ee0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ee8:	d26c      	bcs.n	8000fc4 <__udivmoddi4+0x2ac>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	d96a      	bls.n	8000fc4 <__udivmoddi4+0x2ac>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	4464      	add	r4, ip
 8000ef2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ef6:	fba3 9502 	umull	r9, r5, r3, r2
 8000efa:	eba4 040e 	sub.w	r4, r4, lr
 8000efe:	42ac      	cmp	r4, r5
 8000f00:	46c8      	mov	r8, r9
 8000f02:	46ae      	mov	lr, r5
 8000f04:	d356      	bcc.n	8000fb4 <__udivmoddi4+0x29c>
 8000f06:	d053      	beq.n	8000fb0 <__udivmoddi4+0x298>
 8000f08:	b156      	cbz	r6, 8000f20 <__udivmoddi4+0x208>
 8000f0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f12:	fa04 f707 	lsl.w	r7, r4, r7
 8000f16:	40ca      	lsrs	r2, r1
 8000f18:	40cc      	lsrs	r4, r1
 8000f1a:	4317      	orrs	r7, r2
 8000f1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f20:	4618      	mov	r0, r3
 8000f22:	2100      	movs	r1, #0
 8000f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f28:	f1c3 0120 	rsb	r1, r3, #32
 8000f2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f30:	fa20 f201 	lsr.w	r2, r0, r1
 8000f34:	fa25 f101 	lsr.w	r1, r5, r1
 8000f38:	409d      	lsls	r5, r3
 8000f3a:	432a      	orrs	r2, r5
 8000f3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f40:	fa1f fe8c 	uxth.w	lr, ip
 8000f44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f48:	fb07 1510 	mls	r5, r7, r0, r1
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f52:	fb00 f50e 	mul.w	r5, r0, lr
 8000f56:	428d      	cmp	r5, r1
 8000f58:	fa04 f403 	lsl.w	r4, r4, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x258>
 8000f5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f66:	d22f      	bcs.n	8000fc8 <__udivmoddi4+0x2b0>
 8000f68:	428d      	cmp	r5, r1
 8000f6a:	d92d      	bls.n	8000fc8 <__udivmoddi4+0x2b0>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4461      	add	r1, ip
 8000f70:	1b49      	subs	r1, r1, r5
 8000f72:	b292      	uxth	r2, r2
 8000f74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f78:	fb07 1115 	mls	r1, r7, r5, r1
 8000f7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f80:	fb05 f10e 	mul.w	r1, r5, lr
 8000f84:	4291      	cmp	r1, r2
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x282>
 8000f88:	eb1c 0202 	adds.w	r2, ip, r2
 8000f8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f90:	d216      	bcs.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f92:	4291      	cmp	r1, r2
 8000f94:	d914      	bls.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f96:	3d02      	subs	r5, #2
 8000f98:	4462      	add	r2, ip
 8000f9a:	1a52      	subs	r2, r2, r1
 8000f9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fa0:	e738      	b.n	8000e14 <__udivmoddi4+0xfc>
 8000fa2:	4631      	mov	r1, r6
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	e708      	b.n	8000dba <__udivmoddi4+0xa2>
 8000fa8:	4639      	mov	r1, r7
 8000faa:	e6e6      	b.n	8000d7a <__udivmoddi4+0x62>
 8000fac:	4610      	mov	r0, r2
 8000fae:	e6fb      	b.n	8000da8 <__udivmoddi4+0x90>
 8000fb0:	4548      	cmp	r0, r9
 8000fb2:	d2a9      	bcs.n	8000f08 <__udivmoddi4+0x1f0>
 8000fb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	e7a3      	b.n	8000f08 <__udivmoddi4+0x1f0>
 8000fc0:	4645      	mov	r5, r8
 8000fc2:	e7ea      	b.n	8000f9a <__udivmoddi4+0x282>
 8000fc4:	462b      	mov	r3, r5
 8000fc6:	e794      	b.n	8000ef2 <__udivmoddi4+0x1da>
 8000fc8:	4640      	mov	r0, r8
 8000fca:	e7d1      	b.n	8000f70 <__udivmoddi4+0x258>
 8000fcc:	46d0      	mov	r8, sl
 8000fce:	e77b      	b.n	8000ec8 <__udivmoddi4+0x1b0>
 8000fd0:	3d02      	subs	r5, #2
 8000fd2:	4462      	add	r2, ip
 8000fd4:	e732      	b.n	8000e3c <__udivmoddi4+0x124>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e70a      	b.n	8000df0 <__udivmoddi4+0xd8>
 8000fda:	4464      	add	r4, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e742      	b.n	8000e66 <__udivmoddi4+0x14e>

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	; 0x30
 8000fe8:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	2319      	movs	r3, #25
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2288      	movs	r2, #136	; 0x88
 8000ffc:	21ec      	movs	r1, #236	; 0xec
 8000ffe:	4857      	ldr	r0, [pc, #348]	; (800115c <TrimRead+0x178>)
 8001000:	f006 fd66 	bl	8007ad0 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8001004:	463b      	mov	r3, r7
 8001006:	3319      	adds	r3, #25
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	9202      	str	r2, [sp, #8]
 800100e:	2207      	movs	r2, #7
 8001010:	9201      	str	r2, [sp, #4]
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2301      	movs	r3, #1
 8001016:	22e1      	movs	r2, #225	; 0xe1
 8001018:	21ec      	movs	r1, #236	; 0xec
 800101a:	4850      	ldr	r0, [pc, #320]	; (800115c <TrimRead+0x178>)
 800101c:	f006 fd58 	bl	8007ad0 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001020:	787b      	ldrb	r3, [r7, #1]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b21a      	sxth	r2, r3
 8001026:	783b      	ldrb	r3, [r7, #0]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21b      	sxth	r3, r3
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b4b      	ldr	r3, [pc, #300]	; (8001160 <TrimRead+0x17c>)
 8001032:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001034:	78fb      	ldrb	r3, [r7, #3]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	78bb      	ldrb	r3, [r7, #2]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21a      	sxth	r2, r3
 8001042:	4b48      	ldr	r3, [pc, #288]	; (8001164 <TrimRead+0x180>)
 8001044:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001046:	797b      	ldrb	r3, [r7, #5]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b21a      	sxth	r2, r3
 800104c:	793b      	ldrb	r3, [r7, #4]
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21a      	sxth	r2, r3
 8001054:	4b44      	ldr	r3, [pc, #272]	; (8001168 <TrimRead+0x184>)
 8001056:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	797b      	ldrb	r3, [r7, #5]
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21b      	sxth	r3, r3
 8001066:	b29a      	uxth	r2, r3
 8001068:	4b40      	ldr	r3, [pc, #256]	; (800116c <TrimRead+0x188>)
 800106a:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 800106c:	7a7b      	ldrb	r3, [r7, #9]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21a      	sxth	r2, r3
 8001072:	79bb      	ldrb	r3, [r7, #6]
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21a      	sxth	r2, r3
 800107a:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <TrimRead+0x18c>)
 800107c:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800107e:	7afb      	ldrb	r3, [r7, #11]
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	b21a      	sxth	r2, r3
 8001084:	7abb      	ldrb	r3, [r7, #10]
 8001086:	b21b      	sxth	r3, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	b21a      	sxth	r2, r3
 800108c:	4b39      	ldr	r3, [pc, #228]	; (8001174 <TrimRead+0x190>)
 800108e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001090:	7b7b      	ldrb	r3, [r7, #13]
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	b21a      	sxth	r2, r3
 8001096:	7b3b      	ldrb	r3, [r7, #12]
 8001098:	b21b      	sxth	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	b21a      	sxth	r2, r3
 800109e:	4b36      	ldr	r3, [pc, #216]	; (8001178 <TrimRead+0x194>)
 80010a0:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	7bbb      	ldrb	r3, [r7, #14]
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	4b32      	ldr	r3, [pc, #200]	; (800117c <TrimRead+0x198>)
 80010b2:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80010b4:	7c7b      	ldrb	r3, [r7, #17]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	7c3b      	ldrb	r3, [r7, #16]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <TrimRead+0x19c>)
 80010c4:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80010c6:	7cfb      	ldrb	r3, [r7, #19]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	7cbb      	ldrb	r3, [r7, #18]
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <TrimRead+0x1a0>)
 80010d6:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80010d8:	7d7b      	ldrb	r3, [r7, #21]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	7d3b      	ldrb	r3, [r7, #20]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <TrimRead+0x1a4>)
 80010e8:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	7dbb      	ldrb	r3, [r7, #22]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <TrimRead+0x1a8>)
 80010fa:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80010fc:	7e3b      	ldrb	r3, [r7, #24]
 80010fe:	b29a      	uxth	r2, r3
 8001100:	4b23      	ldr	r3, [pc, #140]	; (8001190 <TrimRead+0x1ac>)
 8001102:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001104:	7ebb      	ldrb	r3, [r7, #26]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b21a      	sxth	r2, r3
 800110a:	7e7b      	ldrb	r3, [r7, #25]
 800110c:	b21b      	sxth	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b21a      	sxth	r2, r3
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <TrimRead+0x1b0>)
 8001114:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8001116:	7efb      	ldrb	r3, [r7, #27]
 8001118:	b29a      	uxth	r2, r3
 800111a:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <TrimRead+0x1b4>)
 800111c:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 800111e:	7f3b      	ldrb	r3, [r7, #28]
 8001120:	011b      	lsls	r3, r3, #4
 8001122:	b21a      	sxth	r2, r3
 8001124:	7f7b      	ldrb	r3, [r7, #29]
 8001126:	b21b      	sxth	r3, r3
 8001128:	f003 030f 	and.w	r3, r3, #15
 800112c:	b21b      	sxth	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b21a      	sxth	r2, r3
 8001132:	4b1a      	ldr	r3, [pc, #104]	; (800119c <TrimRead+0x1b8>)
 8001134:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8001136:	7fbb      	ldrb	r3, [r7, #30]
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	b21a      	sxth	r2, r3
 800113c:	7f7b      	ldrb	r3, [r7, #29]
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	b2db      	uxtb	r3, r3
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <TrimRead+0x1bc>)
 800114a:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 800114c:	7ffb      	ldrb	r3, [r7, #31]
 800114e:	b21a      	sxth	r2, r3
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <TrimRead+0x1c0>)
 8001152:	801a      	strh	r2, [r3, #0]
}
 8001154:	bf00      	nop
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000082c 	.word	0x2000082c
 8001160:	2000028c 	.word	0x2000028c
 8001164:	20000294 	.word	0x20000294
 8001168:	20000296 	.word	0x20000296
 800116c:	2000028e 	.word	0x2000028e
 8001170:	20000298 	.word	0x20000298
 8001174:	2000029a 	.word	0x2000029a
 8001178:	2000029c 	.word	0x2000029c
 800117c:	2000029e 	.word	0x2000029e
 8001180:	200002a0 	.word	0x200002a0
 8001184:	200002a2 	.word	0x200002a2
 8001188:	200002a4 	.word	0x200002a4
 800118c:	200002a6 	.word	0x200002a6
 8001190:	20000290 	.word	0x20000290
 8001194:	200002a8 	.word	0x200002a8
 8001198:	20000292 	.word	0x20000292
 800119c:	200002aa 	.word	0x200002aa
 80011a0:	200002ac 	.word	0x200002ac
 80011a4:	200002ae 	.word	0x200002ae

080011a8 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af04      	add	r7, sp, #16
 80011ae:	4604      	mov	r4, r0
 80011b0:	4608      	mov	r0, r1
 80011b2:	4611      	mov	r1, r2
 80011b4:	461a      	mov	r2, r3
 80011b6:	4623      	mov	r3, r4
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	4603      	mov	r3, r0
 80011bc:	71bb      	strb	r3, [r7, #6]
 80011be:	460b      	mov	r3, r1
 80011c0:	717b      	strb	r3, [r7, #5]
 80011c2:	4613      	mov	r3, r2
 80011c4:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80011c6:	f7ff ff0d 	bl	8000fe4 <TrimRead>


	uint8_t datatowrite = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80011d2:	23b6      	movs	r3, #182	; 0xb6
 80011d4:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2301      	movs	r3, #1
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	f107 030f 	add.w	r3, r7, #15
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2301      	movs	r3, #1
 80011e8:	22e0      	movs	r2, #224	; 0xe0
 80011ea:	21ec      	movs	r1, #236	; 0xec
 80011ec:	4858      	ldr	r0, [pc, #352]	; (8001350 <BME280_Config+0x1a8>)
 80011ee:	f006 fb75 	bl	80078dc <HAL_I2C_Mem_Write>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <BME280_Config+0x56>
	{
		return -1;
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	e0a3      	b.n	8001346 <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80011fe:	2064      	movs	r0, #100	; 0x64
 8001200:	f004 ffb6 	bl	8006170 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001204:	797b      	ldrb	r3, [r7, #5]
 8001206:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120c:	9302      	str	r3, [sp, #8]
 800120e:	2301      	movs	r3, #1
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	f107 030f 	add.w	r3, r7, #15
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	22f2      	movs	r2, #242	; 0xf2
 800121c:	21ec      	movs	r1, #236	; 0xec
 800121e:	484c      	ldr	r0, [pc, #304]	; (8001350 <BME280_Config+0x1a8>)
 8001220:	f006 fb5c 	bl	80078dc <HAL_I2C_Mem_Write>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <BME280_Config+0x88>
	{
		return -1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	e08a      	b.n	8001346 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001230:	2064      	movs	r0, #100	; 0x64
 8001232:	f004 ff9d 	bl	8006170 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	2301      	movs	r3, #1
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	f107 030e 	add.w	r3, r7, #14
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2301      	movs	r3, #1
 8001248:	22f2      	movs	r2, #242	; 0xf2
 800124a:	21ec      	movs	r1, #236	; 0xec
 800124c:	4840      	ldr	r0, [pc, #256]	; (8001350 <BME280_Config+0x1a8>)
 800124e:	f006 fc3f 	bl	8007ad0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001252:	7bba      	ldrb	r2, [r7, #14]
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	429a      	cmp	r2, r3
 8001258:	d002      	beq.n	8001260 <BME280_Config+0xb8>
	{
		return -1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e072      	b.n	8001346 <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001260:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001264:	015b      	lsls	r3, r3, #5
 8001266:	b25a      	sxtb	r2, r3
 8001268:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	b25b      	sxtb	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	b25b      	sxtb	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001278:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	2301      	movs	r3, #1
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	f107 030f 	add.w	r3, r7, #15
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	22f5      	movs	r2, #245	; 0xf5
 800128c:	21ec      	movs	r1, #236	; 0xec
 800128e:	4830      	ldr	r0, [pc, #192]	; (8001350 <BME280_Config+0x1a8>)
 8001290:	f006 fb24 	bl	80078dc <HAL_I2C_Mem_Write>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <BME280_Config+0xf8>
	{
		return -1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	e052      	b.n	8001346 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012a0:	2064      	movs	r0, #100	; 0x64
 80012a2:	f004 ff65 	bl	8006170 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	9302      	str	r3, [sp, #8]
 80012ac:	2301      	movs	r3, #1
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	f107 030e 	add.w	r3, r7, #14
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2301      	movs	r3, #1
 80012b8:	22f5      	movs	r2, #245	; 0xf5
 80012ba:	21ec      	movs	r1, #236	; 0xec
 80012bc:	4824      	ldr	r0, [pc, #144]	; (8001350 <BME280_Config+0x1a8>)
 80012be:	f006 fc07 	bl	8007ad0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012c2:	7bba      	ldrb	r2, [r7, #14]
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d002      	beq.n	80012d0 <BME280_Config+0x128>
	{
		return -1;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	e03a      	b.n	8001346 <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	015b      	lsls	r3, r3, #5
 80012d4:	b25a      	sxtb	r2, r3
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b25a      	sxtb	r2, r3
 80012e0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f0:	9302      	str	r3, [sp, #8]
 80012f2:	2301      	movs	r3, #1
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	f107 030f 	add.w	r3, r7, #15
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2301      	movs	r3, #1
 80012fe:	22f4      	movs	r2, #244	; 0xf4
 8001300:	21ec      	movs	r1, #236	; 0xec
 8001302:	4813      	ldr	r0, [pc, #76]	; (8001350 <BME280_Config+0x1a8>)
 8001304:	f006 faea 	bl	80078dc <HAL_I2C_Mem_Write>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <BME280_Config+0x16c>
	{
		return -1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	e018      	b.n	8001346 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001314:	2064      	movs	r0, #100	; 0x64
 8001316:	f004 ff2b 	bl	8006170 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800131a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131e:	9302      	str	r3, [sp, #8]
 8001320:	2301      	movs	r3, #1
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	f107 030e 	add.w	r3, r7, #14
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2301      	movs	r3, #1
 800132c:	22f4      	movs	r2, #244	; 0xf4
 800132e:	21ec      	movs	r1, #236	; 0xec
 8001330:	4807      	ldr	r0, [pc, #28]	; (8001350 <BME280_Config+0x1a8>)
 8001332:	f006 fbcd 	bl	8007ad0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001336:	7bba      	ldrb	r2, [r7, #14]
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	429a      	cmp	r2, r3
 800133c:	d002      	beq.n	8001344 <BME280_Config+0x19c>
	{
		return -1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	e000      	b.n	8001346 <BME280_Config+0x19e>
	}

	return 0;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	bd90      	pop	{r4, r7, pc}
 800134e:	bf00      	nop
 8001350:	2000082c 	.word	0x2000082c

08001354 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	2301      	movs	r3, #1
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <BMEReadRaw+0x8c>)
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2301      	movs	r3, #1
 800136a:	22d0      	movs	r2, #208	; 0xd0
 800136c:	21ec      	movs	r1, #236	; 0xec
 800136e:	481d      	ldr	r0, [pc, #116]	; (80013e4 <BMEReadRaw+0x90>)
 8001370:	f006 fbae 	bl	8007ad0 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <BMEReadRaw+0x8c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b60      	cmp	r3, #96	; 0x60
 800137a:	d12a      	bne.n	80013d2 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	2308      	movs	r3, #8
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	463b      	mov	r3, r7
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2301      	movs	r3, #1
 800138c:	22f7      	movs	r2, #247	; 0xf7
 800138e:	21ec      	movs	r1, #236	; 0xec
 8001390:	4814      	ldr	r0, [pc, #80]	; (80013e4 <BMEReadRaw+0x90>)
 8001392:	f006 fb9d 	bl	8007ad0 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001396:	783b      	ldrb	r3, [r7, #0]
 8001398:	031a      	lsls	r2, r3, #12
 800139a:	787b      	ldrb	r3, [r7, #1]
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	4313      	orrs	r3, r2
 80013a0:	78ba      	ldrb	r2, [r7, #2]
 80013a2:	0912      	lsrs	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	4313      	orrs	r3, r2
 80013a8:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <BMEReadRaw+0x94>)
 80013aa:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80013ac:	78fb      	ldrb	r3, [r7, #3]
 80013ae:	031a      	lsls	r2, r3, #12
 80013b0:	793b      	ldrb	r3, [r7, #4]
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	4313      	orrs	r3, r2
 80013b6:	797a      	ldrb	r2, [r7, #5]
 80013b8:	0912      	lsrs	r2, r2, #4
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	4313      	orrs	r3, r2
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <BMEReadRaw+0x98>)
 80013c0:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	79fa      	ldrb	r2, [r7, #7]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <BMEReadRaw+0x9c>)
 80013cc:	6013      	str	r3, [r2, #0]

		return 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e001      	b.n	80013d6 <BMEReadRaw+0x82>
	}

	else return -1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000027c 	.word	0x2000027c
 80013e4:	2000082c 	.word	0x2000082c
 80013e8:	20000284 	.word	0x20000284
 80013ec:	20000280 	.word	0x20000280
 80013f0:	20000288 	.word	0x20000288

080013f4 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	10da      	asrs	r2, r3, #3
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <BME280_compensate_T_int32+0x74>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	4a18      	ldr	r2, [pc, #96]	; (800146c <BME280_compensate_T_int32+0x78>)
 800140a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800140e:	fb02 f303 	mul.w	r3, r2, r3
 8001412:	12db      	asrs	r3, r3, #11
 8001414:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	111b      	asrs	r3, r3, #4
 800141a:	4a13      	ldr	r2, [pc, #76]	; (8001468 <BME280_compensate_T_int32+0x74>)
 800141c:	8812      	ldrh	r2, [r2, #0]
 800141e:	1a9b      	subs	r3, r3, r2
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	1112      	asrs	r2, r2, #4
 8001424:	4910      	ldr	r1, [pc, #64]	; (8001468 <BME280_compensate_T_int32+0x74>)
 8001426:	8809      	ldrh	r1, [r1, #0]
 8001428:	1a52      	subs	r2, r2, r1
 800142a:	fb02 f303 	mul.w	r3, r2, r3
 800142e:	131b      	asrs	r3, r3, #12
 8001430:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <BME280_compensate_T_int32+0x7c>)
 8001432:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001436:	fb02 f303 	mul.w	r3, r2, r3
 800143a:	139b      	asrs	r3, r3, #14
 800143c:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4413      	add	r3, r2
 8001444:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <BME280_compensate_T_int32+0x80>)
 8001446:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <BME280_compensate_T_int32+0x80>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	3380      	adds	r3, #128	; 0x80
 8001454:	121b      	asrs	r3, r3, #8
 8001456:	60fb      	str	r3, [r7, #12]
	return T;
 8001458:	68fb      	ldr	r3, [r7, #12]
}
 800145a:	4618      	mov	r0, r3
 800145c:	371c      	adds	r7, #28
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	2000028c 	.word	0x2000028c
 800146c:	20000294 	.word	0x20000294
 8001470:	20000296 	.word	0x20000296
 8001474:	200002b0 	.word	0x200002b0

08001478 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800147c:	b0ca      	sub	sp, #296	; 0x128
 800147e:	af00      	add	r7, sp, #0
 8001480:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001484:	4baf      	ldr	r3, [pc, #700]	; (8001744 <BME280_compensate_P_int64+0x2cc>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	17da      	asrs	r2, r3, #31
 800148a:	461c      	mov	r4, r3
 800148c:	4615      	mov	r5, r2
 800148e:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001492:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001496:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800149a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800149e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014a2:	fb03 f102 	mul.w	r1, r3, r2
 80014a6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014ae:	fb02 f303 	mul.w	r3, r2, r3
 80014b2:	18ca      	adds	r2, r1, r3
 80014b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014b8:	fba3 8903 	umull	r8, r9, r3, r3
 80014bc:	eb02 0309 	add.w	r3, r2, r9
 80014c0:	4699      	mov	r9, r3
 80014c2:	4ba1      	ldr	r3, [pc, #644]	; (8001748 <BME280_compensate_P_int64+0x2d0>)
 80014c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	17da      	asrs	r2, r3, #31
 80014cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80014d4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80014d8:	4603      	mov	r3, r0
 80014da:	fb03 f209 	mul.w	r2, r3, r9
 80014de:	460b      	mov	r3, r1
 80014e0:	fb08 f303 	mul.w	r3, r8, r3
 80014e4:	4413      	add	r3, r2
 80014e6:	4602      	mov	r2, r0
 80014e8:	fba8 1202 	umull	r1, r2, r8, r2
 80014ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80014f0:	460a      	mov	r2, r1
 80014f2:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80014f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80014fa:	4413      	add	r3, r2
 80014fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001500:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001504:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001508:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 800150c:	4b8f      	ldr	r3, [pc, #572]	; (800174c <BME280_compensate_P_int64+0x2d4>)
 800150e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001512:	b21b      	sxth	r3, r3
 8001514:	17da      	asrs	r2, r3, #31
 8001516:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800151a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800151e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001522:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001526:	462a      	mov	r2, r5
 8001528:	fb02 f203 	mul.w	r2, r2, r3
 800152c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001530:	4621      	mov	r1, r4
 8001532:	fb01 f303 	mul.w	r3, r1, r3
 8001536:	441a      	add	r2, r3
 8001538:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800153c:	4621      	mov	r1, r4
 800153e:	fba3 1301 	umull	r1, r3, r3, r1
 8001542:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001546:	460b      	mov	r3, r1
 8001548:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800154c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001550:	18d3      	adds	r3, r2, r3
 8001552:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001556:	f04f 0000 	mov.w	r0, #0
 800155a:	f04f 0100 	mov.w	r1, #0
 800155e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001562:	462b      	mov	r3, r5
 8001564:	0459      	lsls	r1, r3, #17
 8001566:	4623      	mov	r3, r4
 8001568:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800156c:	4623      	mov	r3, r4
 800156e:	0458      	lsls	r0, r3, #17
 8001570:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001574:	1814      	adds	r4, r2, r0
 8001576:	643c      	str	r4, [r7, #64]	; 0x40
 8001578:	414b      	adcs	r3, r1
 800157a:	647b      	str	r3, [r7, #68]	; 0x44
 800157c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001580:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001584:	4b72      	ldr	r3, [pc, #456]	; (8001750 <BME280_compensate_P_int64+0x2d8>)
 8001586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158a:	b21b      	sxth	r3, r3
 800158c:	17da      	asrs	r2, r3, #31
 800158e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001592:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001596:	f04f 0000 	mov.w	r0, #0
 800159a:	f04f 0100 	mov.w	r1, #0
 800159e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015a2:	00d9      	lsls	r1, r3, #3
 80015a4:	2000      	movs	r0, #0
 80015a6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80015aa:	1814      	adds	r4, r2, r0
 80015ac:	63bc      	str	r4, [r7, #56]	; 0x38
 80015ae:	414b      	adcs	r3, r1
 80015b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015b2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80015b6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80015ba:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015c2:	fb03 f102 	mul.w	r1, r3, r2
 80015c6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	18ca      	adds	r2, r1, r3
 80015d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015d8:	fba3 1303 	umull	r1, r3, r3, r3
 80015dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015e0:	460b      	mov	r3, r1
 80015e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80015e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015ea:	18d3      	adds	r3, r2, r3
 80015ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015f0:	4b58      	ldr	r3, [pc, #352]	; (8001754 <BME280_compensate_P_int64+0x2dc>)
 80015f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	17da      	asrs	r2, r3, #31
 80015fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80015fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001602:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001606:	462b      	mov	r3, r5
 8001608:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800160c:	4642      	mov	r2, r8
 800160e:	fb02 f203 	mul.w	r2, r2, r3
 8001612:	464b      	mov	r3, r9
 8001614:	4621      	mov	r1, r4
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	4413      	add	r3, r2
 800161c:	4622      	mov	r2, r4
 800161e:	4641      	mov	r1, r8
 8001620:	fba2 1201 	umull	r1, r2, r2, r1
 8001624:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001628:	460a      	mov	r2, r1
 800162a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800162e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001632:	4413      	add	r3, r2
 8001634:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001638:	f04f 0000 	mov.w	r0, #0
 800163c:	f04f 0100 	mov.w	r1, #0
 8001640:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001644:	4623      	mov	r3, r4
 8001646:	0a18      	lsrs	r0, r3, #8
 8001648:	462b      	mov	r3, r5
 800164a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800164e:	462b      	mov	r3, r5
 8001650:	1219      	asrs	r1, r3, #8
 8001652:	4b41      	ldr	r3, [pc, #260]	; (8001758 <BME280_compensate_P_int64+0x2e0>)
 8001654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001658:	b21b      	sxth	r3, r3
 800165a:	17da      	asrs	r2, r3, #31
 800165c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001660:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001664:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001668:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 800166c:	464a      	mov	r2, r9
 800166e:	fb02 f203 	mul.w	r2, r2, r3
 8001672:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001676:	4644      	mov	r4, r8
 8001678:	fb04 f303 	mul.w	r3, r4, r3
 800167c:	441a      	add	r2, r3
 800167e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001682:	4644      	mov	r4, r8
 8001684:	fba3 4304 	umull	r4, r3, r3, r4
 8001688:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800168c:	4623      	mov	r3, r4
 800168e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001692:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001696:	18d3      	adds	r3, r2, r3
 8001698:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80016a8:	464c      	mov	r4, r9
 80016aa:	0323      	lsls	r3, r4, #12
 80016ac:	4644      	mov	r4, r8
 80016ae:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80016b2:	4644      	mov	r4, r8
 80016b4:	0322      	lsls	r2, r4, #12
 80016b6:	1884      	adds	r4, r0, r2
 80016b8:	633c      	str	r4, [r7, #48]	; 0x30
 80016ba:	eb41 0303 	adc.w	r3, r1, r3
 80016be:	637b      	str	r3, [r7, #52]	; 0x34
 80016c0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80016c4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80016c8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016cc:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80016d0:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80016d4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <BME280_compensate_P_int64+0x2e4>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	2200      	movs	r2, #0
 80016e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80016e8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80016ec:	462b      	mov	r3, r5
 80016ee:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80016f2:	4642      	mov	r2, r8
 80016f4:	fb02 f203 	mul.w	r2, r2, r3
 80016f8:	464b      	mov	r3, r9
 80016fa:	4621      	mov	r1, r4
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	4622      	mov	r2, r4
 8001704:	4641      	mov	r1, r8
 8001706:	fba2 1201 	umull	r1, r2, r2, r1
 800170a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800170e:	460a      	mov	r2, r1
 8001710:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001714:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001718:	4413      	add	r3, r2
 800171a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800172a:	4629      	mov	r1, r5
 800172c:	104a      	asrs	r2, r1, #1
 800172e:	4629      	mov	r1, r5
 8001730:	17cb      	asrs	r3, r1, #31
 8001732:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 8001736:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800173a:	4313      	orrs	r3, r2
 800173c:	d110      	bne.n	8001760 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 800173e:	2300      	movs	r3, #0
 8001740:	e154      	b.n	80019ec <BME280_compensate_P_int64+0x574>
 8001742:	bf00      	nop
 8001744:	200002b0 	.word	0x200002b0
 8001748:	200002a0 	.word	0x200002a0
 800174c:	2000029e 	.word	0x2000029e
 8001750:	2000029c 	.word	0x2000029c
 8001754:	2000029a 	.word	0x2000029a
 8001758:	20000298 	.word	0x20000298
 800175c:	2000028e 	.word	0x2000028e
	}
	p = 1048576-adc_P;
 8001760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001764:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001768:	17da      	asrs	r2, r3, #31
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
 800176c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800176e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001772:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001776:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800177a:	105b      	asrs	r3, r3, #1
 800177c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001780:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001784:	07db      	lsls	r3, r3, #31
 8001786:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800178a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800178e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001792:	4621      	mov	r1, r4
 8001794:	1a89      	subs	r1, r1, r2
 8001796:	67b9      	str	r1, [r7, #120]	; 0x78
 8001798:	4629      	mov	r1, r5
 800179a:	eb61 0303 	sbc.w	r3, r1, r3
 800179e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017a0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017a4:	4622      	mov	r2, r4
 80017a6:	462b      	mov	r3, r5
 80017a8:	1891      	adds	r1, r2, r2
 80017aa:	6239      	str	r1, [r7, #32]
 80017ac:	415b      	adcs	r3, r3
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
 80017b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017b4:	4621      	mov	r1, r4
 80017b6:	1851      	adds	r1, r2, r1
 80017b8:	61b9      	str	r1, [r7, #24]
 80017ba:	4629      	mov	r1, r5
 80017bc:	414b      	adcs	r3, r1
 80017be:	61fb      	str	r3, [r7, #28]
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80017cc:	4649      	mov	r1, r9
 80017ce:	018b      	lsls	r3, r1, #6
 80017d0:	4641      	mov	r1, r8
 80017d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017d6:	4641      	mov	r1, r8
 80017d8:	018a      	lsls	r2, r1, #6
 80017da:	4641      	mov	r1, r8
 80017dc:	1889      	adds	r1, r1, r2
 80017de:	6139      	str	r1, [r7, #16]
 80017e0:	4649      	mov	r1, r9
 80017e2:	eb43 0101 	adc.w	r1, r3, r1
 80017e6:	6179      	str	r1, [r7, #20]
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017f4:	4649      	mov	r1, r9
 80017f6:	008b      	lsls	r3, r1, #2
 80017f8:	4641      	mov	r1, r8
 80017fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017fe:	4641      	mov	r1, r8
 8001800:	008a      	lsls	r2, r1, #2
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	4603      	mov	r3, r0
 8001808:	4622      	mov	r2, r4
 800180a:	189b      	adds	r3, r3, r2
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	460b      	mov	r3, r1
 8001810:	462a      	mov	r2, r5
 8001812:	eb42 0303 	adc.w	r3, r2, r3
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001824:	4649      	mov	r1, r9
 8001826:	008b      	lsls	r3, r1, #2
 8001828:	4641      	mov	r1, r8
 800182a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800182e:	4641      	mov	r1, r8
 8001830:	008a      	lsls	r2, r1, #2
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	4603      	mov	r3, r0
 8001838:	4622      	mov	r2, r4
 800183a:	189b      	adds	r3, r3, r2
 800183c:	673b      	str	r3, [r7, #112]	; 0x70
 800183e:	462b      	mov	r3, r5
 8001840:	460a      	mov	r2, r1
 8001842:	eb42 0303 	adc.w	r3, r2, r3
 8001846:	677b      	str	r3, [r7, #116]	; 0x74
 8001848:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800184c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001850:	f7ff f9fa 	bl	8000c48 <__aeabi_ldivmod>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 800185c:	4b66      	ldr	r3, [pc, #408]	; (80019f8 <BME280_compensate_P_int64+0x580>)
 800185e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001862:	b21b      	sxth	r3, r3
 8001864:	17da      	asrs	r2, r3, #31
 8001866:	66bb      	str	r3, [r7, #104]	; 0x68
 8001868:	66fa      	str	r2, [r7, #108]	; 0x6c
 800186a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800186e:	f04f 0000 	mov.w	r0, #0
 8001872:	f04f 0100 	mov.w	r1, #0
 8001876:	0b50      	lsrs	r0, r2, #13
 8001878:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800187c:	1359      	asrs	r1, r3, #13
 800187e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001882:	462b      	mov	r3, r5
 8001884:	fb00 f203 	mul.w	r2, r0, r3
 8001888:	4623      	mov	r3, r4
 800188a:	fb03 f301 	mul.w	r3, r3, r1
 800188e:	4413      	add	r3, r2
 8001890:	4622      	mov	r2, r4
 8001892:	fba2 1200 	umull	r1, r2, r2, r0
 8001896:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800189a:	460a      	mov	r2, r1
 800189c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80018a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80018a4:	4413      	add	r3, r2
 80018a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80018aa:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80018ae:	f04f 0000 	mov.w	r0, #0
 80018b2:	f04f 0100 	mov.w	r1, #0
 80018b6:	0b50      	lsrs	r0, r2, #13
 80018b8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018bc:	1359      	asrs	r1, r3, #13
 80018be:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80018c2:	462b      	mov	r3, r5
 80018c4:	fb00 f203 	mul.w	r2, r0, r3
 80018c8:	4623      	mov	r3, r4
 80018ca:	fb03 f301 	mul.w	r3, r3, r1
 80018ce:	4413      	add	r3, r2
 80018d0:	4622      	mov	r2, r4
 80018d2:	fba2 1200 	umull	r1, r2, r2, r0
 80018d6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80018da:	460a      	mov	r2, r1
 80018dc:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80018e0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80018e4:	4413      	add	r3, r2
 80018e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80018f6:	4621      	mov	r1, r4
 80018f8:	0e4a      	lsrs	r2, r1, #25
 80018fa:	4629      	mov	r1, r5
 80018fc:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001900:	4629      	mov	r1, r5
 8001902:	164b      	asrs	r3, r1, #25
 8001904:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <BME280_compensate_P_int64+0x584>)
 800190a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190e:	b21b      	sxth	r3, r3
 8001910:	17da      	asrs	r2, r3, #31
 8001912:	663b      	str	r3, [r7, #96]	; 0x60
 8001914:	667a      	str	r2, [r7, #100]	; 0x64
 8001916:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800191a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800191e:	462a      	mov	r2, r5
 8001920:	fb02 f203 	mul.w	r2, r2, r3
 8001924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001928:	4621      	mov	r1, r4
 800192a:	fb01 f303 	mul.w	r3, r1, r3
 800192e:	4413      	add	r3, r2
 8001930:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001934:	4621      	mov	r1, r4
 8001936:	fba2 1201 	umull	r1, r2, r2, r1
 800193a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800193e:	460a      	mov	r2, r1
 8001940:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001944:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001948:	4413      	add	r3, r2
 800194a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800195a:	4621      	mov	r1, r4
 800195c:	0cca      	lsrs	r2, r1, #19
 800195e:	4629      	mov	r1, r5
 8001960:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001964:	4629      	mov	r1, r5
 8001966:	14cb      	asrs	r3, r1, #19
 8001968:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 800196c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001970:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001974:	1884      	adds	r4, r0, r2
 8001976:	65bc      	str	r4, [r7, #88]	; 0x58
 8001978:	eb41 0303 	adc.w	r3, r1, r3
 800197c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800197e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001982:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001986:	4621      	mov	r1, r4
 8001988:	1889      	adds	r1, r1, r2
 800198a:	6539      	str	r1, [r7, #80]	; 0x50
 800198c:	4629      	mov	r1, r5
 800198e:	eb43 0101 	adc.w	r1, r3, r1
 8001992:	6579      	str	r1, [r7, #84]	; 0x54
 8001994:	f04f 0000 	mov.w	r0, #0
 8001998:	f04f 0100 	mov.w	r1, #0
 800199c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80019a0:	4623      	mov	r3, r4
 80019a2:	0a18      	lsrs	r0, r3, #8
 80019a4:	462b      	mov	r3, r5
 80019a6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80019aa:	462b      	mov	r3, r5
 80019ac:	1219      	asrs	r1, r3, #8
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <BME280_compensate_P_int64+0x588>)
 80019b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b4:	b21b      	sxth	r3, r3
 80019b6:	17da      	asrs	r2, r3, #31
 80019b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80019ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80019c8:	464c      	mov	r4, r9
 80019ca:	0123      	lsls	r3, r4, #4
 80019cc:	4644      	mov	r4, r8
 80019ce:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80019d2:	4644      	mov	r4, r8
 80019d4:	0122      	lsls	r2, r4, #4
 80019d6:	1884      	adds	r4, r0, r2
 80019d8:	603c      	str	r4, [r7, #0]
 80019da:	eb41 0303 	adc.w	r3, r1, r3
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019e4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 80019e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80019f2:	46bd      	mov	sp, r7
 80019f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019f8:	200002a6 	.word	0x200002a6
 80019fc:	200002a4 	.word	0x200002a4
 8001a00:	200002a2 	.word	0x200002a2

08001a04 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <bme280_compensate_H_int32+0xbc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001a14:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	039a      	lsls	r2, r3, #14
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <bme280_compensate_H_int32+0xc0>)
 8001a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a20:	051b      	lsls	r3, r3, #20
 8001a22:	1ad2      	subs	r2, r2, r3
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <bme280_compensate_H_int32+0xc4>)
 8001a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a34:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001a38:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a3a:	4a24      	ldr	r2, [pc, #144]	; (8001acc <bme280_compensate_H_int32+0xc8>)
 8001a3c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a40:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a48:	1292      	asrs	r2, r2, #10
 8001a4a:	4921      	ldr	r1, [pc, #132]	; (8001ad0 <bme280_compensate_H_int32+0xcc>)
 8001a4c:	8809      	ldrh	r1, [r1, #0]
 8001a4e:	4608      	mov	r0, r1
 8001a50:	68f9      	ldr	r1, [r7, #12]
 8001a52:	fb00 f101 	mul.w	r1, r0, r1
 8001a56:	12c9      	asrs	r1, r1, #11
 8001a58:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001a5c:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001a60:	1292      	asrs	r2, r2, #10
 8001a62:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001a66:	491b      	ldr	r1, [pc, #108]	; (8001ad4 <bme280_compensate_H_int32+0xd0>)
 8001a68:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001a6c:	fb01 f202 	mul.w	r2, r1, r2
 8001a70:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001a74:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a76:	fb02 f303 	mul.w	r3, r2, r3
 8001a7a:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	13db      	asrs	r3, r3, #15
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	13d2      	asrs	r2, r2, #15
 8001a84:	fb02 f303 	mul.w	r3, r2, r3
 8001a88:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001a8a:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <bme280_compensate_H_int32+0xd4>)
 8001a8c:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001a92:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001aa0:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001aa8:	bfa8      	it	ge
 8001aaa:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001aae:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	131b      	asrs	r3, r3, #12
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	200002b0 	.word	0x200002b0
 8001ac4:	200002aa 	.word	0x200002aa
 8001ac8:	200002ac 	.word	0x200002ac
 8001acc:	200002ae 	.word	0x200002ae
 8001ad0:	20000292 	.word	0x20000292
 8001ad4:	200002a8 	.word	0x200002a8
 8001ad8:	20000290 	.word	0x20000290

08001adc <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001ae0:	f7ff fc38 	bl	8001354 <BMEReadRaw>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d163      	bne.n	8001bb2 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) bme280.temperature = 0; // value in case temp measurement was disabled
 8001aea:	4b39      	ldr	r3, [pc, #228]	; (8001bd0 <BME280_Measure+0xf4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001af2:	d104      	bne.n	8001afe <BME280_Measure+0x22>
 8001af4:	4b37      	ldr	r3, [pc, #220]	; (8001bd4 <BME280_Measure+0xf8>)
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e016      	b.n	8001b2c <BME280_Measure+0x50>
		  else
		  {
			  bme280.temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001afe:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <BME280_Measure+0xf4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fc76 	bl	80013f4 <BME280_compensate_T_int32>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd0a 	bl	8000524 <__aeabi_i2d>
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <BME280_Measure+0xfc>)
 8001b16:	f7fe fe99 	bl	800084c <__aeabi_ddiv>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7ff f841 	bl	8000ba8 <__aeabi_d2f>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4a2a      	ldr	r2, [pc, #168]	; (8001bd4 <BME280_Measure+0xf8>)
 8001b2a:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) bme280.pressure = 0; // value in case temp measurement was disabled
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <BME280_Measure+0x100>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b34:	d104      	bne.n	8001b40 <BME280_Measure+0x64>
 8001b36:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <BME280_Measure+0xf8>)
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	e016      	b.n	8001b6e <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  bme280.pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001b40:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <BME280_Measure+0x100>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fc97 	bl	8001478 <BME280_compensate_P_int64>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fcd9 	bl	8000504 <__aeabi_ui2d>
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <BME280_Measure+0x104>)
 8001b58:	f7fe fe78 	bl	800084c <__aeabi_ddiv>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7ff f820 	bl	8000ba8 <__aeabi_d2f>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <BME280_Measure+0xf8>)
 8001b6c:	6053      	str	r3, [r2, #4]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) bme280.humidity = 0; // value in case temp measurement was disabled
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <BME280_Measure+0x108>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b76:	d104      	bne.n	8001b82 <BME280_Measure+0xa6>
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <BME280_Measure+0xf8>)
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
	// if the device is detached
	else
	{
		bme280.temperature = bme280.pressure = bme280.humidity = 0;
	}
}
 8001b80:	e023      	b.n	8001bca <BME280_Measure+0xee>
			  bme280.humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <BME280_Measure+0x108>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff3c 	bl	8001a04 <bme280_compensate_H_int32>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fcb8 	bl	8000504 <__aeabi_ui2d>
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <BME280_Measure+0x10c>)
 8001b9a:	f7fe fe57 	bl	800084c <__aeabi_ddiv>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f7fe ffff 	bl	8000ba8 <__aeabi_d2f>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <BME280_Measure+0xf8>)
 8001bae:	6093      	str	r3, [r2, #8]
}
 8001bb0:	e00b      	b.n	8001bca <BME280_Measure+0xee>
		bme280.temperature = bme280.pressure = bme280.humidity = 0;
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <BME280_Measure+0xf8>)
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <BME280_Measure+0xf8>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <BME280_Measure+0xf8>)
 8001bc0:	6053      	str	r3, [r2, #4]
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <BME280_Measure+0xf8>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4a03      	ldr	r2, [pc, #12]	; (8001bd4 <BME280_Measure+0xf8>)
 8001bc8:	6013      	str	r3, [r2, #0]
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000280 	.word	0x20000280
 8001bd4:	20000494 	.word	0x20000494
 8001bd8:	40590000 	.word	0x40590000
 8001bdc:	20000284 	.word	0x20000284
 8001be0:	40700000 	.word	0x40700000
 8001be4:	20000288 	.word	0x20000288
 8001be8:	40900000 	.word	0x40900000
 8001bec:	00000000 	.word	0x00000000

08001bf0 <decodeGGA>:
 @GGASTRUCT is the pointer to the GGA Structure (in the GPS Structure)
 @Returns 0 on success
 @ returns 1, 2 depending on where the return statement is excuted, check function for more details
 */

int decodeGGA(char *GGAbuffer, GGASTRUCT *gga) {
 8001bf0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bf4:	b08e      	sub	sp, #56	; 0x38
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
	inx = 0;
 8001bfc:	4b5b      	ldr	r3, [pc, #364]	; (8001d6c <decodeGGA+0x17c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')
 8001c06:	e004      	b.n	8001c12 <decodeGGA+0x22>
		inx++;  // 1st ','
 8001c08:	4b58      	ldr	r3, [pc, #352]	; (8001d6c <decodeGGA+0x17c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	4a57      	ldr	r2, [pc, #348]	; (8001d6c <decodeGGA+0x17c>)
 8001c10:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001c12:	4b56      	ldr	r3, [pc, #344]	; (8001d6c <decodeGGA+0x17c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b2c      	cmp	r3, #44	; 0x2c
 8001c20:	d1f2      	bne.n	8001c08 <decodeGGA+0x18>
	inx++;
 8001c22:	4b52      	ldr	r3, [pc, #328]	; (8001d6c <decodeGGA+0x17c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	4a50      	ldr	r2, [pc, #320]	; (8001d6c <decodeGGA+0x17c>)
 8001c2a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001c2c:	e004      	b.n	8001c38 <decodeGGA+0x48>
		inx++;  // After time ','
 8001c2e:	4b4f      	ldr	r3, [pc, #316]	; (8001d6c <decodeGGA+0x17c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3301      	adds	r3, #1
 8001c34:	4a4d      	ldr	r2, [pc, #308]	; (8001d6c <decodeGGA+0x17c>)
 8001c36:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001c38:	4b4c      	ldr	r3, [pc, #304]	; (8001d6c <decodeGGA+0x17c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4413      	add	r3, r2
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b2c      	cmp	r3, #44	; 0x2c
 8001c46:	d1f2      	bne.n	8001c2e <decodeGGA+0x3e>
	inx++;
 8001c48:	4b48      	ldr	r3, [pc, #288]	; (8001d6c <decodeGGA+0x17c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	4a47      	ldr	r2, [pc, #284]	; (8001d6c <decodeGGA+0x17c>)
 8001c50:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001c52:	e004      	b.n	8001c5e <decodeGGA+0x6e>
		inx++;  // after latitude ','
 8001c54:	4b45      	ldr	r3, [pc, #276]	; (8001d6c <decodeGGA+0x17c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	4a44      	ldr	r2, [pc, #272]	; (8001d6c <decodeGGA+0x17c>)
 8001c5c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001c5e:	4b43      	ldr	r3, [pc, #268]	; (8001d6c <decodeGGA+0x17c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b2c      	cmp	r3, #44	; 0x2c
 8001c6c:	d1f2      	bne.n	8001c54 <decodeGGA+0x64>
	inx++;
 8001c6e:	4b3f      	ldr	r3, [pc, #252]	; (8001d6c <decodeGGA+0x17c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	3301      	adds	r3, #1
 8001c74:	4a3d      	ldr	r2, [pc, #244]	; (8001d6c <decodeGGA+0x17c>)
 8001c76:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001c78:	e004      	b.n	8001c84 <decodeGGA+0x94>
		inx++;  // after NS ','
 8001c7a:	4b3c      	ldr	r3, [pc, #240]	; (8001d6c <decodeGGA+0x17c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	4a3a      	ldr	r2, [pc, #232]	; (8001d6c <decodeGGA+0x17c>)
 8001c82:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001c84:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <decodeGGA+0x17c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b2c      	cmp	r3, #44	; 0x2c
 8001c92:	d1f2      	bne.n	8001c7a <decodeGGA+0x8a>
	inx++;
 8001c94:	4b35      	ldr	r3, [pc, #212]	; (8001d6c <decodeGGA+0x17c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	4a34      	ldr	r2, [pc, #208]	; (8001d6c <decodeGGA+0x17c>)
 8001c9c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001c9e:	e004      	b.n	8001caa <decodeGGA+0xba>
		inx++;  // after longitude ','
 8001ca0:	4b32      	ldr	r3, [pc, #200]	; (8001d6c <decodeGGA+0x17c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	4a31      	ldr	r2, [pc, #196]	; (8001d6c <decodeGGA+0x17c>)
 8001ca8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001caa:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <decodeGGA+0x17c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b2c      	cmp	r3, #44	; 0x2c
 8001cb8:	d1f2      	bne.n	8001ca0 <decodeGGA+0xb0>
	inx++;
 8001cba:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <decodeGGA+0x17c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	4a2a      	ldr	r2, [pc, #168]	; (8001d6c <decodeGGA+0x17c>)
 8001cc2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001cc4:	e004      	b.n	8001cd0 <decodeGGA+0xe0>
		inx++;  // after EW ','
 8001cc6:	4b29      	ldr	r3, [pc, #164]	; (8001d6c <decodeGGA+0x17c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	4a27      	ldr	r2, [pc, #156]	; (8001d6c <decodeGGA+0x17c>)
 8001cce:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001cd0:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <decodeGGA+0x17c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4413      	add	r3, r2
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b2c      	cmp	r3, #44	; 0x2c
 8001cde:	d1f2      	bne.n	8001cc6 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001ce0:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <decodeGGA+0x17c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	4a21      	ldr	r2, [pc, #132]	; (8001d6c <decodeGGA+0x17c>)
 8001ce8:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2')
 8001cea:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <decodeGGA+0x17c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b31      	cmp	r3, #49	; 0x31
 8001cf8:	d00f      	beq.n	8001d1a <decodeGGA+0x12a>
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <decodeGGA+0x17c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b32      	cmp	r3, #50	; 0x32
 8001d08:	d007      	beq.n	8001d1a <decodeGGA+0x12a>
			|| (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <decodeGGA+0x17c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b36      	cmp	r3, #54	; 0x36
 8001d18:	d106      	bne.n	8001d28 <decodeGGA+0x138>
			{
		gga->isfixValid = 1;   // fix available
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	635a      	str	r2, [r3, #52]	; 0x34
		inx = 0; // reset the index. We will start from the inx=0 and extract information now
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <decodeGGA+0x17c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
	} else {
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',')
 8001d26:	e009      	b.n	8001d3c <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	635a      	str	r2, [r3, #52]	; 0x34
		return 1;  // return error
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e36d      	b.n	800240e <decodeGGA+0x81e>
		inx++;  // 1st ','
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <decodeGGA+0x17c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	3301      	adds	r3, #1
 8001d38:	4a0c      	ldr	r2, [pc, #48]	; (8001d6c <decodeGGA+0x17c>)
 8001d3a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <decodeGGA+0x17c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4413      	add	r3, r2
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b2c      	cmp	r3, #44	; 0x2c
 8001d4a:	d1f2      	bne.n	8001d32 <decodeGGA+0x142>

	/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)
	inx++;   // reach the first number in time
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <decodeGGA+0x17c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	3301      	adds	r3, #1
 8001d52:	4a06      	ldr	r2, [pc, #24]	; (8001d6c <decodeGGA+0x17c>)
 8001d54:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f00c faa4 	bl	800e2ac <memset>
	i = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001d68:	e016      	b.n	8001d98 <decodeGGA+0x1a8>
 8001d6a:	bf00      	nop
 8001d6c:	200002b4 	.word	0x200002b4
	{
		buffer[i] = GGAbuffer[inx];
 8001d70:	4b6d      	ldr	r3, [pc, #436]	; (8001f28 <decodeGGA+0x338>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4413      	add	r3, r2
 8001d7a:	7819      	ldrb	r1, [r3, #0]
 8001d7c:	f107 0214 	add.w	r2, r7, #20
 8001d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d82:	4413      	add	r3, r2
 8001d84:	460a      	mov	r2, r1
 8001d86:	701a      	strb	r2, [r3, #0]
		i++;
 8001d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 8001d8e:	4b66      	ldr	r3, [pc, #408]	; (8001f28 <decodeGGA+0x338>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	3301      	adds	r3, #1
 8001d94:	4a64      	ldr	r2, [pc, #400]	; (8001f28 <decodeGGA+0x338>)
 8001d96:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001d98:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <decodeGGA+0x338>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4413      	add	r3, r2
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b2c      	cmp	r3, #44	; 0x2c
 8001da6:	d1e3      	bne.n	8001d70 <decodeGGA+0x180>
	}

	hr = (atoi(buffer) / 10000) + GMT / 100; // get the hours from the 6 digit number
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4618      	mov	r0, r3
 8001dae:	f00b fb65 	bl	800d47c <atoi>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4a5d      	ldr	r2, [pc, #372]	; (8001f2c <decodeGGA+0x33c>)
 8001db6:	fb82 1203 	smull	r1, r2, r2, r3
 8001dba:	1312      	asrs	r2, r2, #12
 8001dbc:	17db      	asrs	r3, r3, #31
 8001dbe:	1ad2      	subs	r2, r2, r3
 8001dc0:	4b5b      	ldr	r3, [pc, #364]	; (8001f30 <decodeGGA+0x340>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	495b      	ldr	r1, [pc, #364]	; (8001f34 <decodeGGA+0x344>)
 8001dc6:	fb81 0103 	smull	r0, r1, r1, r3
 8001dca:	1149      	asrs	r1, r1, #5
 8001dcc:	17db      	asrs	r3, r3, #31
 8001dce:	1acb      	subs	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a59      	ldr	r2, [pc, #356]	; (8001f38 <decodeGGA+0x348>)
 8001dd4:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer) / 100) % 100) + GMT % 100; // get the minutes from the 6 digit number
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f00b fb4e 	bl	800d47c <atoi>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4a54      	ldr	r2, [pc, #336]	; (8001f34 <decodeGGA+0x344>)
 8001de4:	fb82 1203 	smull	r1, r2, r2, r3
 8001de8:	1152      	asrs	r2, r2, #5
 8001dea:	17db      	asrs	r3, r3, #31
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	4a51      	ldr	r2, [pc, #324]	; (8001f34 <decodeGGA+0x344>)
 8001df0:	fb82 1203 	smull	r1, r2, r2, r3
 8001df4:	1151      	asrs	r1, r2, #5
 8001df6:	17da      	asrs	r2, r3, #31
 8001df8:	1a8a      	subs	r2, r1, r2
 8001dfa:	2164      	movs	r1, #100	; 0x64
 8001dfc:	fb01 f202 	mul.w	r2, r1, r2
 8001e00:	1a9a      	subs	r2, r3, r2
 8001e02:	4b4b      	ldr	r3, [pc, #300]	; (8001f30 <decodeGGA+0x340>)
 8001e04:	6819      	ldr	r1, [r3, #0]
 8001e06:	4b4b      	ldr	r3, [pc, #300]	; (8001f34 <decodeGGA+0x344>)
 8001e08:	fb83 0301 	smull	r0, r3, r3, r1
 8001e0c:	1158      	asrs	r0, r3, #5
 8001e0e:	17cb      	asrs	r3, r1, #31
 8001e10:	1ac3      	subs	r3, r0, r3
 8001e12:	2064      	movs	r0, #100	; 0x64
 8001e14:	fb00 f303 	mul.w	r3, r0, r3
 8001e18:	1acb      	subs	r3, r1, r3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4a47      	ldr	r2, [pc, #284]	; (8001f3c <decodeGGA+0x34c>)
 8001e1e:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) {
 8001e20:	4b46      	ldr	r3, [pc, #280]	; (8001f3c <decodeGGA+0x34c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b3b      	cmp	r3, #59	; 0x3b
 8001e26:	dd09      	ble.n	8001e3c <decodeGGA+0x24c>
		min = min - 60;
 8001e28:	4b44      	ldr	r3, [pc, #272]	; (8001f3c <decodeGGA+0x34c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	3b3c      	subs	r3, #60	; 0x3c
 8001e2e:	4a43      	ldr	r2, [pc, #268]	; (8001f3c <decodeGGA+0x34c>)
 8001e30:	6013      	str	r3, [r2, #0]
		hr++;
 8001e32:	4b41      	ldr	r3, [pc, #260]	; (8001f38 <decodeGGA+0x348>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	4a3f      	ldr	r2, [pc, #252]	; (8001f38 <decodeGGA+0x348>)
 8001e3a:	6013      	str	r3, [r2, #0]
	}
	if (hr < 0) {
 8001e3c:	4b3e      	ldr	r3, [pc, #248]	; (8001f38 <decodeGGA+0x348>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	da09      	bge.n	8001e58 <decodeGGA+0x268>
		hr = 24 + hr;
 8001e44:	4b3c      	ldr	r3, [pc, #240]	; (8001f38 <decodeGGA+0x348>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3318      	adds	r3, #24
 8001e4a:	4a3b      	ldr	r2, [pc, #236]	; (8001f38 <decodeGGA+0x348>)
 8001e4c:	6013      	str	r3, [r2, #0]
		daychange--;
 8001e4e:	4b3c      	ldr	r3, [pc, #240]	; (8001f40 <decodeGGA+0x350>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	4a3a      	ldr	r2, [pc, #232]	; (8001f40 <decodeGGA+0x350>)
 8001e56:	6013      	str	r3, [r2, #0]
	}
	if (hr >= 24) {
 8001e58:	4b37      	ldr	r3, [pc, #220]	; (8001f38 <decodeGGA+0x348>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b17      	cmp	r3, #23
 8001e5e:	dd09      	ble.n	8001e74 <decodeGGA+0x284>
		hr = hr - 24;
 8001e60:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <decodeGGA+0x348>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	3b18      	subs	r3, #24
 8001e66:	4a34      	ldr	r2, [pc, #208]	; (8001f38 <decodeGGA+0x348>)
 8001e68:	6013      	str	r3, [r2, #0]
		daychange++;
 8001e6a:	4b35      	ldr	r3, [pc, #212]	; (8001f40 <decodeGGA+0x350>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	4a33      	ldr	r2, [pc, #204]	; (8001f40 <decodeGGA+0x350>)
 8001e72:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001e74:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <decodeGGA+0x348>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	629a      	str	r2, [r3, #40]	; 0x28
	gga->tim.min = min;
 8001e7c:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <decodeGGA+0x34c>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	62da      	str	r2, [r3, #44]	; 0x2c
	gga->tim.sec = atoi(buffer) % 100;
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f00b faf7 	bl	800d47c <atoi>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <decodeGGA+0x344>)
 8001e92:	fb83 1302 	smull	r1, r3, r3, r2
 8001e96:	1159      	asrs	r1, r3, #5
 8001e98:	17d3      	asrs	r3, r2, #31
 8001e9a:	1acb      	subs	r3, r1, r3
 8001e9c:	2164      	movs	r1, #100	; 0x64
 8001e9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	6313      	str	r3, [r2, #48]	; 0x30

	/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <decodeGGA+0x338>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	3301      	adds	r3, #1
 8001eae:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <decodeGGA+0x338>)
 8001eb0:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f00c f9f6 	bl	800e2ac <memset>
	i = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 8001ec4:	e013      	b.n	8001eee <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8001ec6:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <decodeGGA+0x338>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4413      	add	r3, r2
 8001ed0:	7819      	ldrb	r1, [r3, #0]
 8001ed2:	f107 0214 	add.w	r2, r7, #20
 8001ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed8:	4413      	add	r3, r2
 8001eda:	460a      	mov	r2, r1
 8001edc:	701a      	strb	r2, [r3, #0]
		i++;
 8001ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <decodeGGA+0x338>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <decodeGGA+0x338>)
 8001eec:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 8001eee:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <decodeGGA+0x338>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b2c      	cmp	r3, #44	; 0x2c
 8001efc:	d1e3      	bne.n	8001ec6 <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6)
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe f9b4 	bl	8000270 <strlen>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	d801      	bhi.n	8001f12 <decodeGGA+0x322>
		return 2;  // If the buffer length is not appropriate, return error
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e27d      	b.n	800240e <decodeGGA+0x81e>
	int16_t num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	4618      	mov	r0, r3
 8001f18:	f00b fab0 	bl	800d47c <atoi>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int j = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8001f24:	e011      	b.n	8001f4a <decodeGGA+0x35a>
 8001f26:	bf00      	nop
 8001f28:	200002b4 	.word	0x200002b4
 8001f2c:	68db8bad 	.word	0x68db8bad
 8001f30:	20000000 	.word	0x20000000
 8001f34:	51eb851f 	.word	0x51eb851f
 8001f38:	200002b8 	.word	0x200002b8
 8001f3c:	200002bc 	.word	0x200002bc
 8001f40:	200002cc 	.word	0x200002cc
		j++;   // Figure out how many digits before the decimal
 8001f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f46:	3301      	adds	r3, #1
 8001f48:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8001f4a:	f107 0214 	add.w	r2, r7, #20
 8001f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f50:	4413      	add	r3, r2
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b2e      	cmp	r3, #46	; 0x2e
 8001f56:	d1f5      	bne.n	8001f44 <decodeGGA+0x354>
	j++;
 8001f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	633b      	str	r3, [r7, #48]	; 0x30
	int declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe f984 	bl	8000270 <strlen>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
	int dec = atoi((char*) buffer + j); // conver the decimal part a a separate number
 8001f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f72:	f107 0214 	add.w	r2, r7, #20
 8001f76:	4413      	add	r3, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f00b fa7f 	bl	800d47c <atoi>
 8001f7e:	6278      	str	r0, [r7, #36]	; 0x24
	float lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 8001f80:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe facd 	bl	8000524 <__aeabi_i2d>
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	4bb8      	ldr	r3, [pc, #736]	; (8002270 <decodeGGA+0x680>)
 8001f90:	f7fe fc5c 	bl	800084c <__aeabi_ddiv>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4690      	mov	r8, r2
 8001f9a:	4699      	mov	r9, r3
 8001f9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f9e:	f7fe fac1 	bl	8000524 <__aeabi_i2d>
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	460d      	mov	r5, r1
 8001fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa8:	3302      	adds	r3, #2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe faba 	bl	8000524 <__aeabi_i2d>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	ec43 2b11 	vmov	d1, r2, r3
 8001fb8:	ed9f 0bab 	vldr	d0, [pc, #684]	; 8002268 <decodeGGA+0x678>
 8001fbc:	f00e fa18 	bl	80103f0 <pow>
 8001fc0:	ec53 2b10 	vmov	r2, r3, d0
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	4629      	mov	r1, r5
 8001fc8:	f7fe fc40 	bl	800084c <__aeabi_ddiv>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4640      	mov	r0, r8
 8001fd2:	4649      	mov	r1, r9
 8001fd4:	f7fe f95a 	bl	800028c <__adddf3>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f7fe fde2 	bl	8000ba8 <__aeabi_d2f>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	623b      	str	r3, [r7, #32]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	6a3a      	ldr	r2, [r7, #32]
 8001fec:	601a      	str	r2, [r3, #0]
	gga->lcation.latF = (float) gga->lcation.latitude / 100;
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	ed93 7a00 	vldr	s14, [r3]
 8001ff4:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8002274 <decodeGGA+0x684>
 8001ff8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	edc3 7a01 	vstr	s15, [r3, #4]
	gga->lcation.latDeg = (uint8_t) gga->lcation.latitude;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800200c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002010:	793b      	ldrb	r3, [r7, #4]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	721a      	strb	r2, [r3, #8]
	gga->lcation.latMin = ((gga->lcation.latitude - gga->lcation.latDeg) / 60)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	ed93 7a00 	vldr	s14, [r3]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	7a1b      	ldrb	r3, [r3, #8]
 8002022:	ee07 3a90 	vmov	s15, r3
 8002026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800202a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800202e:	eddf 6a92 	vldr	s13, [pc, #584]	; 8002278 <decodeGGA+0x688>
 8002032:	eec7 7a26 	vdiv.f32	s15, s14, s13
			* 100;
 8002036:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8002274 <decodeGGA+0x684>
 800203a:	ee67 7a87 	vmul.f32	s15, s15, s14
	gga->lcation.latMin = ((gga->lcation.latitude - gga->lcation.latDeg) / 60)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	edc3 7a03 	vstr	s15, [r3, #12]
	gga->lcation.latitude = gga->lcation.latDeg + gga->lcation.latMin;
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	7a1b      	ldrb	r3, [r3, #8]
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	edd3 7a03 	vldr	s15, [r3, #12]
 8002056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	edc3 7a00 	vstr	s15, [r3]
	inx++;
 8002060:	4b86      	ldr	r3, [pc, #536]	; (800227c <decodeGGA+0x68c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	4a85      	ldr	r2, [pc, #532]	; (800227c <decodeGGA+0x68c>)
 8002068:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 800206a:	4b84      	ldr	r3, [pc, #528]	; (800227c <decodeGGA+0x68c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	781a      	ldrb	r2, [r3, #0]
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	741a      	strb	r2, [r3, #16]

	/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 800207a:	4b80      	ldr	r3, [pc, #512]	; (800227c <decodeGGA+0x68c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	4a7e      	ldr	r2, [pc, #504]	; (800227c <decodeGGA+0x68c>)
 8002082:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8002084:	4b7d      	ldr	r3, [pc, #500]	; (800227c <decodeGGA+0x68c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	3301      	adds	r3, #1
 800208a:	4a7c      	ldr	r2, [pc, #496]	; (800227c <decodeGGA+0x68c>)
 800208c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	220c      	movs	r2, #12
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f00c f908 	bl	800e2ac <memset>
	i = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 80020a0:	e013      	b.n	80020ca <decodeGGA+0x4da>
	{
		buffer[i] = GGAbuffer[inx];
 80020a2:	4b76      	ldr	r3, [pc, #472]	; (800227c <decodeGGA+0x68c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	7819      	ldrb	r1, [r3, #0]
 80020ae:	f107 0214 	add.w	r2, r7, #20
 80020b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b4:	4413      	add	r3, r2
 80020b6:	460a      	mov	r2, r1
 80020b8:	701a      	strb	r2, [r3, #0]
		i++;
 80020ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020bc:	3301      	adds	r3, #1
 80020be:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 80020c0:	4b6e      	ldr	r3, [pc, #440]	; (800227c <decodeGGA+0x68c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	3301      	adds	r3, #1
 80020c6:	4a6d      	ldr	r2, [pc, #436]	; (800227c <decodeGGA+0x68c>)
 80020c8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 80020ca:	4b6c      	ldr	r3, [pc, #432]	; (800227c <decodeGGA+0x68c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4413      	add	r3, r2
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b2c      	cmp	r3, #44	; 0x2c
 80020d8:	d1e3      	bne.n	80020a2 <decodeGGA+0x4b2>
	}
	num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 80020da:	f107 0314 	add.w	r3, r7, #20
 80020de:	4618      	mov	r0, r3
 80020e0:	f00b f9cc 	bl	800d47c <atoi>
 80020e4:	4603      	mov	r3, r0
 80020e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	j = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 80020ec:	e002      	b.n	80020f4 <decodeGGA+0x504>
		j++;  // Figure out how many digits before the decimal
 80020ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f0:	3301      	adds	r3, #1
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 80020f4:	f107 0214 	add.w	r2, r7, #20
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	4413      	add	r3, r2
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b2e      	cmp	r3, #46	; 0x2e
 8002100:	d1f5      	bne.n	80020ee <decodeGGA+0x4fe>
	j++;
 8002102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002104:	3301      	adds	r3, #1
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
	declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe f8af 	bl	8000270 <strlen>
 8002112:	4602      	mov	r2, r0
 8002114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
	dec = atoi((char*) buffer + j); // conver the decimal part a a separate number
 800211a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211c:	f107 0214 	add.w	r2, r7, #20
 8002120:	4413      	add	r3, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f00b f9aa 	bl	800d47c <atoi>
 8002128:	6278      	str	r0, [r7, #36]	; 0x24
	lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 800212a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe f9f8 	bl	8000524 <__aeabi_i2d>
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	4b4d      	ldr	r3, [pc, #308]	; (8002270 <decodeGGA+0x680>)
 800213a:	f7fe fb87 	bl	800084c <__aeabi_ddiv>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4690      	mov	r8, r2
 8002144:	4699      	mov	r9, r3
 8002146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002148:	f7fe f9ec 	bl	8000524 <__aeabi_i2d>
 800214c:	4604      	mov	r4, r0
 800214e:	460d      	mov	r5, r1
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	3302      	adds	r3, #2
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f9e5 	bl	8000524 <__aeabi_i2d>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	ec43 2b11 	vmov	d1, r2, r3
 8002162:	ed9f 0b41 	vldr	d0, [pc, #260]	; 8002268 <decodeGGA+0x678>
 8002166:	f00e f943 	bl	80103f0 <pow>
 800216a:	ec53 2b10 	vmov	r2, r3, d0
 800216e:	4620      	mov	r0, r4
 8002170:	4629      	mov	r1, r5
 8002172:	f7fe fb6b 	bl	800084c <__aeabi_ddiv>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4640      	mov	r0, r8
 800217c:	4649      	mov	r1, r9
 800217e:	f7fe f885 	bl	800028c <__adddf3>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	f7fe fd0d 	bl	8000ba8 <__aeabi_d2f>
 800218e:	4603      	mov	r3, r0
 8002190:	623b      	str	r3, [r7, #32]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	6a3a      	ldr	r2, [r7, #32]
 8002196:	615a      	str	r2, [r3, #20]
	gga->lcation.longF = (float) gga->lcation.longitude / 100;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	ed93 7a05 	vldr	s14, [r3, #20]
 800219e:	eddf 6a35 	vldr	s13, [pc, #212]	; 8002274 <decodeGGA+0x684>
 80021a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	edc3 7a06 	vstr	s15, [r3, #24]
	gga->lcation.longDeg = (uint8_t) gga->lcation.longitude;
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80021b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021b6:	edc7 7a01 	vstr	s15, [r7, #4]
 80021ba:	793b      	ldrb	r3, [r7, #4]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	771a      	strb	r2, [r3, #28]
	gga->lcation.longMin = ((gga->lcation.longitude - gga->lcation.longDeg) / 60)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	ed93 7a05 	vldr	s14, [r3, #20]
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	7f1b      	ldrb	r3, [r3, #28]
 80021cc:	ee07 3a90 	vmov	s15, r3
 80021d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021d8:	eddf 6a27 	vldr	s13, [pc, #156]	; 8002278 <decodeGGA+0x688>
 80021dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
			* 100;
 80021e0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002274 <decodeGGA+0x684>
 80021e4:	ee67 7a87 	vmul.f32	s15, s15, s14
	gga->lcation.longMin = ((gga->lcation.longitude - gga->lcation.longDeg) / 60)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	edc3 7a08 	vstr	s15, [r3, #32]
	gga->lcation.longitude = gga->lcation.longDeg + gga->lcation.longMin;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	7f1b      	ldrb	r3, [r3, #28]
 80021f2:	ee07 3a90 	vmov	s15, r3
 80021f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	edd3 7a08 	vldr	s15, [r3, #32]
 8002200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	edc3 7a05 	vstr	s15, [r3, #20]
	inx++;
 800220a:	4b1c      	ldr	r3, [pc, #112]	; (800227c <decodeGGA+0x68c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	3301      	adds	r3, #1
 8002210:	4a1a      	ldr	r2, [pc, #104]	; (800227c <decodeGGA+0x68c>)
 8002212:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <decodeGGA+0x68c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4413      	add	r3, r2
 800221e:	781a      	ldrb	r2, [r3, #0]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <decodeGGA+0x68c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	3301      	adds	r3, #1
 800222c:	4a13      	ldr	r2, [pc, #76]	; (800227c <decodeGGA+0x68c>)
 800222e:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <decodeGGA+0x68c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	3301      	adds	r3, #1
 8002236:	4a11      	ldr	r2, [pc, #68]	; (800227c <decodeGGA+0x68c>)
 8002238:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <decodeGGA+0x68c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	3301      	adds	r3, #1
 8002240:	4a0e      	ldr	r2, [pc, #56]	; (800227c <decodeGGA+0x68c>)
 8002242:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8002244:	4b0d      	ldr	r3, [pc, #52]	; (800227c <decodeGGA+0x68c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	4a0c      	ldr	r2, [pc, #48]	; (800227c <decodeGGA+0x68c>)
 800224c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800224e:	f107 0314 	add.w	r3, r7, #20
 8002252:	220c      	movs	r2, #12
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f00c f828 	bl	800e2ac <memset>
	i = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 8002260:	e022      	b.n	80022a8 <decodeGGA+0x6b8>
 8002262:	bf00      	nop
 8002264:	f3af 8000 	nop.w
 8002268:	00000000 	.word	0x00000000
 800226c:	40240000 	.word	0x40240000
 8002270:	40590000 	.word	0x40590000
 8002274:	42c80000 	.word	0x42c80000
 8002278:	42700000 	.word	0x42700000
 800227c:	200002b4 	.word	0x200002b4
	{
		buffer[i] = GGAbuffer[inx];
 8002280:	4b67      	ldr	r3, [pc, #412]	; (8002420 <decodeGGA+0x830>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4413      	add	r3, r2
 800228a:	7819      	ldrb	r1, [r3, #0]
 800228c:	f107 0214 	add.w	r2, r7, #20
 8002290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002292:	4413      	add	r3, r2
 8002294:	460a      	mov	r2, r1
 8002296:	701a      	strb	r2, [r3, #0]
		i++;
 8002298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229a:	3301      	adds	r3, #1
 800229c:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 800229e:	4b60      	ldr	r3, [pc, #384]	; (8002420 <decodeGGA+0x830>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	4a5e      	ldr	r2, [pc, #376]	; (8002420 <decodeGGA+0x830>)
 80022a6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 80022a8:	4b5d      	ldr	r3, [pc, #372]	; (8002420 <decodeGGA+0x830>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4413      	add	r3, r2
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b2c      	cmp	r3, #44	; 0x2c
 80022b6:	d1e3      	bne.n	8002280 <decodeGGA+0x690>
	}
	gga->numofsat = atoi(buffer); // convert the buffer to number and save into the structure
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	4618      	mov	r0, r3
 80022be:	f00b f8dd 	bl	800d47c <atoi>
 80022c2:	4602      	mov	r2, r0
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40

	/***************** skip HDOP  *********************/
	inx++;
 80022c8:	4b55      	ldr	r3, [pc, #340]	; (8002420 <decodeGGA+0x830>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3301      	adds	r3, #1
 80022ce:	4a54      	ldr	r2, [pc, #336]	; (8002420 <decodeGGA+0x830>)
 80022d0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80022d2:	e004      	b.n	80022de <decodeGGA+0x6ee>
		inx++;
 80022d4:	4b52      	ldr	r3, [pc, #328]	; (8002420 <decodeGGA+0x830>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	4a51      	ldr	r2, [pc, #324]	; (8002420 <decodeGGA+0x830>)
 80022dc:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <decodeGGA+0x830>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4413      	add	r3, r2
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b2c      	cmp	r3, #44	; 0x2c
 80022ec:	d1f2      	bne.n	80022d4 <decodeGGA+0x6e4>

	/*************** Altitude calculation ********************/
	inx++;
 80022ee:	4b4c      	ldr	r3, [pc, #304]	; (8002420 <decodeGGA+0x830>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	4a4a      	ldr	r2, [pc, #296]	; (8002420 <decodeGGA+0x830>)
 80022f6:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	220c      	movs	r2, #12
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f00b ffd3 	bl	800e2ac <memset>
	i = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') {
 800230a:	e013      	b.n	8002334 <decodeGGA+0x744>
		buffer[i] = GGAbuffer[inx];
 800230c:	4b44      	ldr	r3, [pc, #272]	; (8002420 <decodeGGA+0x830>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4413      	add	r3, r2
 8002316:	7819      	ldrb	r1, [r3, #0]
 8002318:	f107 0214 	add.w	r2, r7, #20
 800231c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231e:	4413      	add	r3, r2
 8002320:	460a      	mov	r2, r1
 8002322:	701a      	strb	r2, [r3, #0]
		i++;
 8002324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002326:	3301      	adds	r3, #1
 8002328:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 800232a:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <decodeGGA+0x830>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3301      	adds	r3, #1
 8002330:	4a3b      	ldr	r2, [pc, #236]	; (8002420 <decodeGGA+0x830>)
 8002332:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') {
 8002334:	4b3a      	ldr	r3, [pc, #232]	; (8002420 <decodeGGA+0x830>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4413      	add	r3, r2
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b2c      	cmp	r3, #44	; 0x2c
 8002342:	d1e3      	bne.n	800230c <decodeGGA+0x71c>
	}
	num = (atoi(buffer));
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	4618      	mov	r0, r3
 800234a:	f00b f897 	bl	800d47c <atoi>
 800234e:	4603      	mov	r3, r0
 8002350:	85fb      	strh	r3, [r7, #46]	; 0x2e
	j = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8002356:	e002      	b.n	800235e <decodeGGA+0x76e>
		j++;
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235a:	3301      	adds	r3, #1
 800235c:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 800235e:	f107 0214 	add.w	r2, r7, #20
 8002362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002364:	4413      	add	r3, r2
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b2e      	cmp	r3, #46	; 0x2e
 800236a:	d1f5      	bne.n	8002358 <decodeGGA+0x768>
	j++;
 800236c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236e:	3301      	adds	r3, #1
 8002370:	633b      	str	r3, [r7, #48]	; 0x30
	declen = (strlen(buffer)) - j;
 8002372:	f107 0314 	add.w	r3, r7, #20
 8002376:	4618      	mov	r0, r3
 8002378:	f7fd ff7a 	bl	8000270 <strlen>
 800237c:	4602      	mov	r2, r0
 800237e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	62bb      	str	r3, [r7, #40]	; 0x28
	dec = atoi((char*) buffer + j);
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	f107 0214 	add.w	r2, r7, #20
 800238a:	4413      	add	r3, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f00b f875 	bl	800d47c <atoi>
 8002392:	6278      	str	r0, [r7, #36]	; 0x24
	lat = (num) + (dec / pow(10, (declen)));
 8002394:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f8c3 	bl	8000524 <__aeabi_i2d>
 800239e:	4604      	mov	r4, r0
 80023a0:	460d      	mov	r5, r1
 80023a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023a4:	f7fe f8be 	bl	8000524 <__aeabi_i2d>
 80023a8:	4680      	mov	r8, r0
 80023aa:	4689      	mov	r9, r1
 80023ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023ae:	f7fe f8b9 	bl	8000524 <__aeabi_i2d>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	ec43 2b11 	vmov	d1, r2, r3
 80023ba:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002418 <decodeGGA+0x828>
 80023be:	f00e f817 	bl	80103f0 <pow>
 80023c2:	ec53 2b10 	vmov	r2, r3, d0
 80023c6:	4640      	mov	r0, r8
 80023c8:	4649      	mov	r1, r9
 80023ca:	f7fe fa3f 	bl	800084c <__aeabi_ddiv>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4620      	mov	r0, r4
 80023d4:	4629      	mov	r1, r5
 80023d6:	f7fd ff59 	bl	800028c <__adddf3>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4610      	mov	r0, r2
 80023e0:	4619      	mov	r1, r3
 80023e2:	f7fe fbe1 	bl	8000ba8 <__aeabi_d2f>
 80023e6:	4603      	mov	r3, r0
 80023e8:	623b      	str	r3, [r7, #32]
	gga->alt.altitude = lat;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	6a3a      	ldr	r2, [r7, #32]
 80023ee:	639a      	str	r2, [r3, #56]	; 0x38

	inx++;
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <decodeGGA+0x830>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <decodeGGA+0x830>)
 80023f8:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <decodeGGA+0x830>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4413      	add	r3, r2
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return 0;
 800240c:	2300      	movs	r3, #0

}
 800240e:	4618      	mov	r0, r3
 8002410:	3738      	adds	r7, #56	; 0x38
 8002412:	46bd      	mov	sp, r7
 8002414:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002418:	00000000 	.word	0x00000000
 800241c:	40240000 	.word	0x40240000
 8002420:	200002b4 	.word	0x200002b4
 8002424:	00000000 	.word	0x00000000

08002428 <decodeRMC>:

int decodeRMC(char *RMCbuffer, RMCSTRUCT *rmc) {
 8002428:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800242c:	b090      	sub	sp, #64	; 0x40
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]
	inx = 0;
 8002434:	4b94      	ldr	r3, [pc, #592]	; (8002688 <decodeRMC+0x260>)
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',')
 800243e:	e004      	b.n	800244a <decodeRMC+0x22>
		inx++;  // 1st ,
 8002440:	4b91      	ldr	r3, [pc, #580]	; (8002688 <decodeRMC+0x260>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	4a90      	ldr	r2, [pc, #576]	; (8002688 <decodeRMC+0x260>)
 8002448:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800244a:	4b8f      	ldr	r3, [pc, #572]	; (8002688 <decodeRMC+0x260>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4413      	add	r3, r2
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b2c      	cmp	r3, #44	; 0x2c
 8002458:	d1f2      	bne.n	8002440 <decodeRMC+0x18>
	inx++;
 800245a:	4b8b      	ldr	r3, [pc, #556]	; (8002688 <decodeRMC+0x260>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	4a89      	ldr	r2, [pc, #548]	; (8002688 <decodeRMC+0x260>)
 8002462:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8002464:	e004      	b.n	8002470 <decodeRMC+0x48>
		inx++;  // After time ,
 8002466:	4b88      	ldr	r3, [pc, #544]	; (8002688 <decodeRMC+0x260>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	3301      	adds	r3, #1
 800246c:	4a86      	ldr	r2, [pc, #536]	; (8002688 <decodeRMC+0x260>)
 800246e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8002470:	4b85      	ldr	r3, [pc, #532]	; (8002688 <decodeRMC+0x260>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b2c      	cmp	r3, #44	; 0x2c
 800247e:	d1f2      	bne.n	8002466 <decodeRMC+0x3e>
	inx++;
 8002480:	4b81      	ldr	r3, [pc, #516]	; (8002688 <decodeRMC+0x260>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	3301      	adds	r3, #1
 8002486:	4a80      	ldr	r2, [pc, #512]	; (8002688 <decodeRMC+0x260>)
 8002488:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A') // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 800248a:	4b7f      	ldr	r3, [pc, #508]	; (8002688 <decodeRMC+0x260>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4413      	add	r3, r2
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b41      	cmp	r3, #65	; 0x41
 8002498:	d10d      	bne.n	80024b6 <decodeRMC+0x8e>
			{
		rmc->isValid = 1;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2201      	movs	r2, #1
 800249e:	615a      	str	r2, [r3, #20]
	} else {
		rmc->isValid = 0;
		return 1;
	}
	inx++;
 80024a0:	4b79      	ldr	r3, [pc, #484]	; (8002688 <decodeRMC+0x260>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3301      	adds	r3, #1
 80024a6:	4a78      	ldr	r2, [pc, #480]	; (8002688 <decodeRMC+0x260>)
 80024a8:	6013      	str	r3, [r2, #0]
	inx++;
 80024aa:	4b77      	ldr	r3, [pc, #476]	; (8002688 <decodeRMC+0x260>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	4a75      	ldr	r2, [pc, #468]	; (8002688 <decodeRMC+0x260>)
 80024b2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80024b4:	e009      	b.n	80024ca <decodeRMC+0xa2>
		rmc->isValid = 0;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2200      	movs	r2, #0
 80024ba:	615a      	str	r2, [r3, #20]
		return 1;
 80024bc:	2301      	movs	r3, #1
 80024be:	e1d8      	b.n	8002872 <decodeRMC+0x44a>
		inx++;  // after latitude,
 80024c0:	4b71      	ldr	r3, [pc, #452]	; (8002688 <decodeRMC+0x260>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	4a70      	ldr	r2, [pc, #448]	; (8002688 <decodeRMC+0x260>)
 80024c8:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80024ca:	4b6f      	ldr	r3, [pc, #444]	; (8002688 <decodeRMC+0x260>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4413      	add	r3, r2
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b2c      	cmp	r3, #44	; 0x2c
 80024d8:	d1f2      	bne.n	80024c0 <decodeRMC+0x98>
	inx++;
 80024da:	4b6b      	ldr	r3, [pc, #428]	; (8002688 <decodeRMC+0x260>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	3301      	adds	r3, #1
 80024e0:	4a69      	ldr	r2, [pc, #420]	; (8002688 <decodeRMC+0x260>)
 80024e2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80024e4:	e004      	b.n	80024f0 <decodeRMC+0xc8>
		inx++;  // after NS ,
 80024e6:	4b68      	ldr	r3, [pc, #416]	; (8002688 <decodeRMC+0x260>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3301      	adds	r3, #1
 80024ec:	4a66      	ldr	r2, [pc, #408]	; (8002688 <decodeRMC+0x260>)
 80024ee:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80024f0:	4b65      	ldr	r3, [pc, #404]	; (8002688 <decodeRMC+0x260>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b2c      	cmp	r3, #44	; 0x2c
 80024fe:	d1f2      	bne.n	80024e6 <decodeRMC+0xbe>
	inx++;
 8002500:	4b61      	ldr	r3, [pc, #388]	; (8002688 <decodeRMC+0x260>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3301      	adds	r3, #1
 8002506:	4a60      	ldr	r2, [pc, #384]	; (8002688 <decodeRMC+0x260>)
 8002508:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800250a:	e004      	b.n	8002516 <decodeRMC+0xee>
		inx++;  // after longitude ,
 800250c:	4b5e      	ldr	r3, [pc, #376]	; (8002688 <decodeRMC+0x260>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	4a5d      	ldr	r2, [pc, #372]	; (8002688 <decodeRMC+0x260>)
 8002514:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8002516:	4b5c      	ldr	r3, [pc, #368]	; (8002688 <decodeRMC+0x260>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4413      	add	r3, r2
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b2c      	cmp	r3, #44	; 0x2c
 8002524:	d1f2      	bne.n	800250c <decodeRMC+0xe4>
	inx++;
 8002526:	4b58      	ldr	r3, [pc, #352]	; (8002688 <decodeRMC+0x260>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	3301      	adds	r3, #1
 800252c:	4a56      	ldr	r2, [pc, #344]	; (8002688 <decodeRMC+0x260>)
 800252e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8002530:	e004      	b.n	800253c <decodeRMC+0x114>
		inx++;  // after EW ,
 8002532:	4b55      	ldr	r3, [pc, #340]	; (8002688 <decodeRMC+0x260>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	3301      	adds	r3, #1
 8002538:	4a53      	ldr	r2, [pc, #332]	; (8002688 <decodeRMC+0x260>)
 800253a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800253c:	4b52      	ldr	r3, [pc, #328]	; (8002688 <decodeRMC+0x260>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b2c      	cmp	r3, #44	; 0x2c
 800254a:	d1f2      	bne.n	8002532 <decodeRMC+0x10a>

	// Get Speed
	inx++;
 800254c:	4b4e      	ldr	r3, [pc, #312]	; (8002688 <decodeRMC+0x260>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3301      	adds	r3, #1
 8002552:	4a4d      	ldr	r2, [pc, #308]	; (8002688 <decodeRMC+0x260>)
 8002554:	6013      	str	r3, [r2, #0]
	i = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800255a:	f107 0308 	add.w	r3, r7, #8
 800255e:	220c      	movs	r2, #12
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f00b fea2 	bl	800e2ac <memset>
	while (RMCbuffer[inx] != ',') {
 8002568:	e013      	b.n	8002592 <decodeRMC+0x16a>
		buffer[i] = RMCbuffer[inx];
 800256a:	4b47      	ldr	r3, [pc, #284]	; (8002688 <decodeRMC+0x260>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4413      	add	r3, r2
 8002574:	7819      	ldrb	r1, [r3, #0]
 8002576:	f107 0208 	add.w	r2, r7, #8
 800257a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800257c:	4413      	add	r3, r2
 800257e:	460a      	mov	r2, r1
 8002580:	701a      	strb	r2, [r3, #0]
		i++;
 8002582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002584:	3301      	adds	r3, #1
 8002586:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8002588:	4b3f      	ldr	r3, [pc, #252]	; (8002688 <decodeRMC+0x260>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	3301      	adds	r3, #1
 800258e:	4a3e      	ldr	r2, [pc, #248]	; (8002688 <decodeRMC+0x260>)
 8002590:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') {
 8002592:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <decodeRMC+0x260>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4413      	add	r3, r2
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b2c      	cmp	r3, #44	; 0x2c
 80025a0:	d1e3      	bne.n	800256a <decodeRMC+0x142>
	}

	if (strlen(buffer) > 0) {          // if the speed have some data
 80025a2:	f107 0308 	add.w	r3, r7, #8
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d056      	beq.n	800265a <decodeRMC+0x232>
		int16_t num = (atoi(buffer));  // convert the data into the number
 80025ac:	f107 0308 	add.w	r3, r7, #8
 80025b0:	4618      	mov	r0, r3
 80025b2:	f00a ff63 	bl	800d47c <atoi>
 80025b6:	4603      	mov	r3, r0
 80025b8:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.')
 80025be:	e002      	b.n	80025c6 <decodeRMC+0x19e>
			j++;   // same as above
 80025c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c2:	3301      	adds	r3, #1
 80025c4:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.')
 80025c6:	f107 0208 	add.w	r2, r7, #8
 80025ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025cc:	4413      	add	r3, r2
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b2e      	cmp	r3, #46	; 0x2e
 80025d2:	d1f5      	bne.n	80025c0 <decodeRMC+0x198>
		j++;
 80025d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d6:	3301      	adds	r3, #1
 80025d8:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer)) - j;
 80025da:	f107 0308 	add.w	r3, r7, #8
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fd fe46 	bl	8000270 <strlen>
 80025e4:	4602      	mov	r2, r0
 80025e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi((char*) buffer + j);
 80025ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ee:	f107 0208 	add.w	r2, r7, #8
 80025f2:	4413      	add	r3, r2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f00a ff41 	bl	800d47c <atoi>
 80025fa:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec / pow(10, (declen)));
 80025fc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002600:	4618      	mov	r0, r3
 8002602:	f7fd ff8f 	bl	8000524 <__aeabi_i2d>
 8002606:	4604      	mov	r4, r0
 8002608:	460d      	mov	r5, r1
 800260a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800260c:	f7fd ff8a 	bl	8000524 <__aeabi_i2d>
 8002610:	4680      	mov	r8, r0
 8002612:	4689      	mov	r9, r1
 8002614:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002616:	f7fd ff85 	bl	8000524 <__aeabi_i2d>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	ec43 2b11 	vmov	d1, r2, r3
 8002622:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002680 <decodeRMC+0x258>
 8002626:	f00d fee3 	bl	80103f0 <pow>
 800262a:	ec53 2b10 	vmov	r2, r3, d0
 800262e:	4640      	mov	r0, r8
 8002630:	4649      	mov	r1, r9
 8002632:	f7fe f90b 	bl	800084c <__aeabi_ddiv>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4620      	mov	r0, r4
 800263c:	4629      	mov	r1, r5
 800263e:	f7fd fe25 	bl	800028c <__adddf3>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4610      	mov	r0, r2
 8002648:	4619      	mov	r1, r3
 800264a:	f7fe faad 	bl	8000ba8 <__aeabi_d2f>
 800264e:	4603      	mov	r3, r0
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002656:	60da      	str	r2, [r3, #12]
 8002658:	e003      	b.n	8002662 <decodeRMC+0x23a>
	} else
		rmc->speed = 0;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <decodeRMC+0x260>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3301      	adds	r3, #1
 8002668:	4a07      	ldr	r2, [pc, #28]	; (8002688 <decodeRMC+0x260>)
 800266a:	6013      	str	r3, [r2, #0]
	i = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8002670:	f107 0308 	add.w	r3, r7, #8
 8002674:	220c      	movs	r2, #12
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f00b fe17 	bl	800e2ac <memset>
	while (RMCbuffer[inx] != ',') {
 800267e:	e019      	b.n	80026b4 <decodeRMC+0x28c>
 8002680:	00000000 	.word	0x00000000
 8002684:	40240000 	.word	0x40240000
 8002688:	200002b4 	.word	0x200002b4
		buffer[i] = RMCbuffer[inx];
 800268c:	4b7e      	ldr	r3, [pc, #504]	; (8002888 <decodeRMC+0x460>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	7819      	ldrb	r1, [r3, #0]
 8002698:	f107 0208 	add.w	r2, r7, #8
 800269c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800269e:	4413      	add	r3, r2
 80026a0:	460a      	mov	r2, r1
 80026a2:	701a      	strb	r2, [r3, #0]
		i++;
 80026a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a6:	3301      	adds	r3, #1
 80026a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80026aa:	4b77      	ldr	r3, [pc, #476]	; (8002888 <decodeRMC+0x460>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3301      	adds	r3, #1
 80026b0:	4a75      	ldr	r2, [pc, #468]	; (8002888 <decodeRMC+0x460>)
 80026b2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') {
 80026b4:	4b74      	ldr	r3, [pc, #464]	; (8002888 <decodeRMC+0x460>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b2c      	cmp	r3, #44	; 0x2c
 80026c2:	d1e3      	bne.n	800268c <decodeRMC+0x264>
	}

	if (strlen(buffer) > 0) {  // if the course have some data
 80026c4:	f107 0308 	add.w	r3, r7, #8
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d056      	beq.n	800277c <decodeRMC+0x354>
		int16_t num = (atoi(buffer)); // convert the course data into the number
 80026ce:	f107 0308 	add.w	r3, r7, #8
 80026d2:	4618      	mov	r0, r3
 80026d4:	f00a fed2 	bl	800d47c <atoi>
 80026d8:	4603      	mov	r3, r0
 80026da:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.')
 80026e0:	e002      	b.n	80026e8 <decodeRMC+0x2c0>
			j++;   // same as above
 80026e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e4:	3301      	adds	r3, #1
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.')
 80026e8:	f107 0208 	add.w	r2, r7, #8
 80026ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ee:	4413      	add	r3, r2
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b2e      	cmp	r3, #46	; 0x2e
 80026f4:	d1f5      	bne.n	80026e2 <decodeRMC+0x2ba>
		j++;
 80026f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f8:	3301      	adds	r3, #1
 80026fa:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer)) - j;
 80026fc:	f107 0308 	add.w	r3, r7, #8
 8002700:	4618      	mov	r0, r3
 8002702:	f7fd fdb5 	bl	8000270 <strlen>
 8002706:	4602      	mov	r2, r0
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	61fb      	str	r3, [r7, #28]
		int dec = atoi((char*) buffer + j);
 800270e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002710:	f107 0208 	add.w	r2, r7, #8
 8002714:	4413      	add	r3, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f00a feb0 	bl	800d47c <atoi>
 800271c:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec / pow(10, (declen)));
 800271e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002722:	4618      	mov	r0, r3
 8002724:	f7fd fefe 	bl	8000524 <__aeabi_i2d>
 8002728:	4604      	mov	r4, r0
 800272a:	460d      	mov	r5, r1
 800272c:	69b8      	ldr	r0, [r7, #24]
 800272e:	f7fd fef9 	bl	8000524 <__aeabi_i2d>
 8002732:	4680      	mov	r8, r0
 8002734:	4689      	mov	r9, r1
 8002736:	69f8      	ldr	r0, [r7, #28]
 8002738:	f7fd fef4 	bl	8000524 <__aeabi_i2d>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	ec43 2b11 	vmov	d1, r2, r3
 8002744:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 8002880 <decodeRMC+0x458>
 8002748:	f00d fe52 	bl	80103f0 <pow>
 800274c:	ec53 2b10 	vmov	r2, r3, d0
 8002750:	4640      	mov	r0, r8
 8002752:	4649      	mov	r1, r9
 8002754:	f7fe f87a 	bl	800084c <__aeabi_ddiv>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4620      	mov	r0, r4
 800275e:	4629      	mov	r1, r5
 8002760:	f7fd fd94 	bl	800028c <__adddf3>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	f7fe fa1c 	bl	8000ba8 <__aeabi_d2f>
 8002770:	4603      	mov	r3, r0
 8002772:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	611a      	str	r2, [r3, #16]
 800277a:	e003      	b.n	8002784 <decodeRMC+0x35c>
	} else {
		rmc->course = 0;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
	}

	// Get Date
	inx++;
 8002784:	4b40      	ldr	r3, [pc, #256]	; (8002888 <decodeRMC+0x460>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3301      	adds	r3, #1
 800278a:	4a3f      	ldr	r2, [pc, #252]	; (8002888 <decodeRMC+0x460>)
 800278c:	6013      	str	r3, [r2, #0]
	i = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8002792:	f107 0308 	add.w	r3, r7, #8
 8002796:	220c      	movs	r2, #12
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f00b fd86 	bl	800e2ac <memset>
	while (RMCbuffer[inx] != ',') {
 80027a0:	e013      	b.n	80027ca <decodeRMC+0x3a2>
		buffer[i] = RMCbuffer[inx];
 80027a2:	4b39      	ldr	r3, [pc, #228]	; (8002888 <decodeRMC+0x460>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4413      	add	r3, r2
 80027ac:	7819      	ldrb	r1, [r3, #0]
 80027ae:	f107 0208 	add.w	r2, r7, #8
 80027b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b4:	4413      	add	r3, r2
 80027b6:	460a      	mov	r2, r1
 80027b8:	701a      	strb	r2, [r3, #0]
		i++;
 80027ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027bc:	3301      	adds	r3, #1
 80027be:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80027c0:	4b31      	ldr	r3, [pc, #196]	; (8002888 <decodeRMC+0x460>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3301      	adds	r3, #1
 80027c6:	4a30      	ldr	r2, [pc, #192]	; (8002888 <decodeRMC+0x460>)
 80027c8:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') {
 80027ca:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <decodeRMC+0x460>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4413      	add	r3, r2
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b2c      	cmp	r3, #44	; 0x2c
 80027d8:	d1e3      	bne.n	80027a2 <decodeRMC+0x37a>
	}

	// Date in the format 280222
	day = atoi(buffer) / 10000;  // extract 28
 80027da:	f107 0308 	add.w	r3, r7, #8
 80027de:	4618      	mov	r0, r3
 80027e0:	f00a fe4c 	bl	800d47c <atoi>
 80027e4:	4603      	mov	r3, r0
 80027e6:	4a29      	ldr	r2, [pc, #164]	; (800288c <decodeRMC+0x464>)
 80027e8:	fb82 1203 	smull	r1, r2, r2, r3
 80027ec:	1312      	asrs	r2, r2, #12
 80027ee:	17db      	asrs	r3, r3, #31
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	4a27      	ldr	r2, [pc, #156]	; (8002890 <decodeRMC+0x468>)
 80027f4:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer) / 100) % 100;  // extract 02
 80027f6:	f107 0308 	add.w	r3, r7, #8
 80027fa:	4618      	mov	r0, r3
 80027fc:	f00a fe3e 	bl	800d47c <atoi>
 8002800:	4603      	mov	r3, r0
 8002802:	4a24      	ldr	r2, [pc, #144]	; (8002894 <decodeRMC+0x46c>)
 8002804:	fb82 1203 	smull	r1, r2, r2, r3
 8002808:	1152      	asrs	r2, r2, #5
 800280a:	17db      	asrs	r3, r3, #31
 800280c:	1ad2      	subs	r2, r2, r3
 800280e:	4b21      	ldr	r3, [pc, #132]	; (8002894 <decodeRMC+0x46c>)
 8002810:	fb83 1302 	smull	r1, r3, r3, r2
 8002814:	1159      	asrs	r1, r3, #5
 8002816:	17d3      	asrs	r3, r2, #31
 8002818:	1acb      	subs	r3, r1, r3
 800281a:	2164      	movs	r1, #100	; 0x64
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	4a1d      	ldr	r2, [pc, #116]	; (8002898 <decodeRMC+0x470>)
 8002824:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer) % 100;  // extract 22
 8002826:	f107 0308 	add.w	r3, r7, #8
 800282a:	4618      	mov	r0, r3
 800282c:	f00a fe26 	bl	800d47c <atoi>
 8002830:	4602      	mov	r2, r0
 8002832:	4b18      	ldr	r3, [pc, #96]	; (8002894 <decodeRMC+0x46c>)
 8002834:	fb83 1302 	smull	r1, r3, r3, r2
 8002838:	1159      	asrs	r1, r3, #5
 800283a:	17d3      	asrs	r3, r2, #31
 800283c:	1acb      	subs	r3, r1, r3
 800283e:	2164      	movs	r1, #100	; 0x64
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	4a15      	ldr	r2, [pc, #84]	; (800289c <decodeRMC+0x474>)
 8002848:	6013      	str	r3, [r2, #0]

	day = day + daychange;   // correction due to GMT shift
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <decodeRMC+0x468>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <decodeRMC+0x478>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4413      	add	r3, r2
 8002854:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <decodeRMC+0x468>)
 8002856:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8002858:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <decodeRMC+0x468>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8002860:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <decodeRMC+0x470>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <decodeRMC+0x474>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	609a      	str	r2, [r3, #8]

	return 0;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3740      	adds	r7, #64	; 0x40
 8002876:	46bd      	mov	sp, r7
 8002878:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800287c:	f3af 8000 	nop.w
 8002880:	00000000 	.word	0x00000000
 8002884:	40240000 	.word	0x40240000
 8002888:	200002b4 	.word	0x200002b4
 800288c:	68db8bad 	.word	0x68db8bad
 8002890:	200002c0 	.word	0x200002c0
 8002894:	51eb851f 	.word	0x51eb851f
 8002898:	200002c4 	.word	0x200002c4
 800289c:	200002c8 	.word	0x200002c8
 80028a0:	200002cc 	.word	0x200002cc

080028a4 <PIDController_Init>:
//burada pid limmax ve lim min silinmeli çünkü biz throttle-pitch+yaw-roll vs gibi formüller kullanıyoruz..
//..bunların tamamının limiti konulmalı(pwm max ve pwm min olmalı bu da)

//sadece roll ve pitch için pid yapıyoruz. yaw ve yükseklik işini sonraya bırakacağız.

void PIDController_Init(PIDController *pid) {
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError = 0.0f;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator = 0.0f;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
	pid->T = 3.0f;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2203      	movs	r2, #3
 80028d0:	61da      	str	r2, [r3, #28]

	pid->out = 0.0f;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	635a      	str	r2, [r3, #52]	; 0x34
	pid_debug_counter = 0;
 80028da:	4b04      	ldr	r3, [pc, #16]	; (80028ec <PIDController_Init+0x48>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	20000334 	.word	0x20000334

080028f0 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint,
		float measurement) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08c      	sub	sp, #48	; 0x30
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80028fc:	edc7 0a01 	vstr	s1, [r7, #4]
	/*
	 * Error signal
	 */

	if (pid->T == 0)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d102      	bne.n	800290e <PIDController_Update+0x1e>
		pid->T = 3;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2203      	movs	r2, #3
 800290c:	61da      	str	r2, [r3, #28]

	float error = setpoint - measurement; //setpoint 1k-2k arası, measurement min-180max180=>error 920-2080 arası
 800290e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002912:	edd7 7a01 	vldr	s15, [r7, #4]
 8002916:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	/*
	 * Proportional
	 */
	float proportional = pid->Kp * error;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	edd3 7a00 	vldr	s15, [r3]
 8002924:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800292c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	pid->proportional = proportional; //sadece debug için
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002934:	621a      	str	r2, [r3, #32]
	/*
	 * Integral
	 */
	pid->integrator = pid->integrator
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
			+ 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002942:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002946:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	ee07 3a90 	vmov	s15, r3
 8002952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002956:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 8002960:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002964:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800296c:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid->integrator = pid->integrator
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/* Anti-wind-up via integrator clamping */
	if (pid->integrator > pid->limMaxInt) {
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002982:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298a:	dd04      	ble.n	8002996 <PIDController_Update+0xa6>

		pid->integrator = pid->limMaxInt;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	699a      	ldr	r2, [r3, #24]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	625a      	str	r2, [r3, #36]	; 0x24
 8002994:	e00e      	b.n	80029b4 <PIDController_Update+0xc4>

	} else if (pid->integrator < pid->limMinInt) {
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	edd3 7a05 	vldr	s15, [r3, #20]
 80029a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029aa:	d503      	bpl.n	80029b4 <PIDController_Update+0xc4>

		pid->integrator = pid->limMinInt;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	625a      	str	r2, [r3, #36]	; 0x24
	 pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)
	 + (2.0f * pid->tau - pid->T) * pid->differentiator)
	 / (2.0f * pid->tau + pid->T);
	 */
	//https://www.robotsforroboticists.com/pid-control/ //derivative = (error – error_prior) / iteration_time
	pid->differentiator = pid->Kd * ((error - pid->prevError) / pid->T);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80029c0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80029c4:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	ee07 3a90 	vmov	s15, r3
 80029d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029d4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80029d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	/*
	 * Compute output and apply limits
	 */
	pid->out = proportional + pid->integrator + pid->differentiator;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80029e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80029ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80029f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	if (pid->out > pid->limMax) {
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a14:	dd04      	ble.n	8002a20 <PIDController_Update+0x130>

		pid->out = pid->limMax;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a1e:	e00e      	b.n	8002a3e <PIDController_Update+0x14e>

	} else if (pid->out < pid->limMin) {
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a34:	d503      	bpl.n	8002a3e <PIDController_Update+0x14e>

		pid->out = pid->limMin;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	635a      	str	r2, [r3, #52]	; 0x34

	}

	/* Store error and measurement for later use */
	pid->prevError = error;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28
	pid->prevMeasurement = measurement;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30

	float d_pid_out = pid->out;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
	float d_pid_proportional = proportional;
 8002a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a52:	623b      	str	r3, [r7, #32]
	float d_pid_integrator = pid->integrator;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	61fb      	str	r3, [r7, #28]
	float d_pid_diff = pid->differentiator;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	61bb      	str	r3, [r7, #24]
	float d_delta_t = (float) pid->T;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	ee07 3a90 	vmov	s15, r3
 8002a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a6c:	edc7 7a05 	vstr	s15, [r7, #20]

	pid_debug_counter++;
 8002a70:	4b3d      	ldr	r3, [pc, #244]	; (8002b68 <PIDController_Update+0x278>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3301      	adds	r3, #1
 8002a76:	4a3c      	ldr	r2, [pc, #240]	; (8002b68 <PIDController_Update+0x278>)
 8002a78:	6013      	str	r3, [r2, #0]
	if (pid_debug_counter == 25) {
 8002a7a:	4b3b      	ldr	r3, [pc, #236]	; (8002b68 <PIDController_Update+0x278>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b19      	cmp	r3, #25
 8002a80:	d169      	bne.n	8002b56 <PIDController_Update+0x266>

		//debug
		printf("\n");
 8002a82:	200a      	movs	r0, #10
 8002a84:	f00b fad6 	bl	800e034 <putchar>
		gcvt(d_pid_out, 8, ptr3);
 8002a88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a8a:	f7fd fd5d 	bl	8000548 <__aeabi_f2d>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4936      	ldr	r1, [pc, #216]	; (8002b6c <PIDController_Update+0x27c>)
 8002a94:	2008      	movs	r0, #8
 8002a96:	ec43 2b10 	vmov	d0, r2, r3
 8002a9a:	f00a fd7f 	bl	800d59c <gcvt>
		printf("pid_out = ");
 8002a9e:	4834      	ldr	r0, [pc, #208]	; (8002b70 <PIDController_Update+0x280>)
 8002aa0:	f00b fab6 	bl	800e010 <iprintf>
		printf(ptr3);
 8002aa4:	4831      	ldr	r0, [pc, #196]	; (8002b6c <PIDController_Update+0x27c>)
 8002aa6:	f00b fab3 	bl	800e010 <iprintf>
		printf("\n");
 8002aaa:	200a      	movs	r0, #10
 8002aac:	f00b fac2 	bl	800e034 <putchar>

		gcvt(d_pid_proportional, 8, ptr3);
 8002ab0:	6a38      	ldr	r0, [r7, #32]
 8002ab2:	f7fd fd49 	bl	8000548 <__aeabi_f2d>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	492c      	ldr	r1, [pc, #176]	; (8002b6c <PIDController_Update+0x27c>)
 8002abc:	2008      	movs	r0, #8
 8002abe:	ec43 2b10 	vmov	d0, r2, r3
 8002ac2:	f00a fd6b 	bl	800d59c <gcvt>
		printf("d_pid_proportional = ");
 8002ac6:	482b      	ldr	r0, [pc, #172]	; (8002b74 <PIDController_Update+0x284>)
 8002ac8:	f00b faa2 	bl	800e010 <iprintf>
		printf(ptr3);
 8002acc:	4827      	ldr	r0, [pc, #156]	; (8002b6c <PIDController_Update+0x27c>)
 8002ace:	f00b fa9f 	bl	800e010 <iprintf>
		printf("\n");
 8002ad2:	200a      	movs	r0, #10
 8002ad4:	f00b faae 	bl	800e034 <putchar>

		gcvt(d_pid_integrator, 8, ptr3);
 8002ad8:	69f8      	ldr	r0, [r7, #28]
 8002ada:	f7fd fd35 	bl	8000548 <__aeabi_f2d>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4922      	ldr	r1, [pc, #136]	; (8002b6c <PIDController_Update+0x27c>)
 8002ae4:	2008      	movs	r0, #8
 8002ae6:	ec43 2b10 	vmov	d0, r2, r3
 8002aea:	f00a fd57 	bl	800d59c <gcvt>
		printf("d_pid_integrator = ");
 8002aee:	4822      	ldr	r0, [pc, #136]	; (8002b78 <PIDController_Update+0x288>)
 8002af0:	f00b fa8e 	bl	800e010 <iprintf>
		printf(ptr3);
 8002af4:	481d      	ldr	r0, [pc, #116]	; (8002b6c <PIDController_Update+0x27c>)
 8002af6:	f00b fa8b 	bl	800e010 <iprintf>
		printf("\n");
 8002afa:	200a      	movs	r0, #10
 8002afc:	f00b fa9a 	bl	800e034 <putchar>

		gcvt(d_pid_diff, 8, ptr3);
 8002b00:	69b8      	ldr	r0, [r7, #24]
 8002b02:	f7fd fd21 	bl	8000548 <__aeabi_f2d>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4918      	ldr	r1, [pc, #96]	; (8002b6c <PIDController_Update+0x27c>)
 8002b0c:	2008      	movs	r0, #8
 8002b0e:	ec43 2b10 	vmov	d0, r2, r3
 8002b12:	f00a fd43 	bl	800d59c <gcvt>
		printf("d_pid_diff = ");
 8002b16:	4819      	ldr	r0, [pc, #100]	; (8002b7c <PIDController_Update+0x28c>)
 8002b18:	f00b fa7a 	bl	800e010 <iprintf>
		printf(ptr3);
 8002b1c:	4813      	ldr	r0, [pc, #76]	; (8002b6c <PIDController_Update+0x27c>)
 8002b1e:	f00b fa77 	bl	800e010 <iprintf>
		printf("\n");
 8002b22:	200a      	movs	r0, #10
 8002b24:	f00b fa86 	bl	800e034 <putchar>

		gcvt(d_delta_t, 8, ptr3);
 8002b28:	6978      	ldr	r0, [r7, #20]
 8002b2a:	f7fd fd0d 	bl	8000548 <__aeabi_f2d>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	490e      	ldr	r1, [pc, #56]	; (8002b6c <PIDController_Update+0x27c>)
 8002b34:	2008      	movs	r0, #8
 8002b36:	ec43 2b10 	vmov	d0, r2, r3
 8002b3a:	f00a fd2f 	bl	800d59c <gcvt>
		printf("d_delta_t = ");
 8002b3e:	4810      	ldr	r0, [pc, #64]	; (8002b80 <PIDController_Update+0x290>)
 8002b40:	f00b fa66 	bl	800e010 <iprintf>
		printf(ptr3);
 8002b44:	4809      	ldr	r0, [pc, #36]	; (8002b6c <PIDController_Update+0x27c>)
 8002b46:	f00b fa63 	bl	800e010 <iprintf>
		printf("\n");
 8002b4a:	200a      	movs	r0, #10
 8002b4c:	f00b fa72 	bl	800e034 <putchar>

		pid_debug_counter = 0;
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <PIDController_Update+0x278>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]

	}

	/* Return controller output */
	return pid->out;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5a:	ee07 3a90 	vmov	s15, r3

}
 8002b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b62:	3730      	adds	r7, #48	; 0x30
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20000334 	.word	0x20000334
 8002b6c:	200002d0 	.word	0x200002d0
 8002b70:	08011278 	.word	0x08011278
 8002b74:	08011284 	.word	0x08011284
 8002b78:	0801129c 	.word	0x0801129c
 8002b7c:	080112b0 	.word	0x080112b0
 8002b80:	080112c0 	.word	0x080112c0

08002b84 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b8a:	463b      	mov	r3, r7
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002b96:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <MX_ADC1_Init+0x98>)
 8002b98:	4a21      	ldr	r2, [pc, #132]	; (8002c20 <MX_ADC1_Init+0x9c>)
 8002b9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b9c:	4b1f      	ldr	r3, [pc, #124]	; (8002c1c <MX_ADC1_Init+0x98>)
 8002b9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ba2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <MX_ADC1_Init+0x98>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002baa:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <MX_ADC1_Init+0x98>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <MX_ADC1_Init+0x98>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bb6:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <MX_ADC1_Init+0x98>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bbe:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <MX_ADC1_Init+0x98>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bc4:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <MX_ADC1_Init+0x98>)
 8002bc6:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <MX_ADC1_Init+0xa0>)
 8002bc8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bca:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <MX_ADC1_Init+0x98>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002bd0:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <MX_ADC1_Init+0x98>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002bd6:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <MX_ADC1_Init+0x98>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bde:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <MX_ADC1_Init+0x98>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002be4:	480d      	ldr	r0, [pc, #52]	; (8002c1c <MX_ADC1_Init+0x98>)
 8002be6:	f003 fae7 	bl	80061b8 <HAL_ADC_Init>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002bf0:	f001 fd4c 	bl	800468c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c00:	463b      	mov	r3, r7
 8002c02:	4619      	mov	r1, r3
 8002c04:	4805      	ldr	r0, [pc, #20]	; (8002c1c <MX_ADC1_Init+0x98>)
 8002c06:	f003 fcb9 	bl	800657c <HAL_ADC_ConfigChannel>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002c10:	f001 fd3c 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20000338 	.word	0x20000338
 8002c20:	40012000 	.word	0x40012000
 8002c24:	0f000001 	.word	0x0f000001

08002c28 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08a      	sub	sp, #40	; 0x28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a17      	ldr	r2, [pc, #92]	; (8002ca4 <HAL_ADC_MspInit+0x7c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d127      	bne.n	8002c9a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <HAL_ADC_MspInit+0x80>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	4a15      	ldr	r2, [pc, #84]	; (8002ca8 <HAL_ADC_MspInit+0x80>)
 8002c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c58:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5a:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <HAL_ADC_MspInit+0x80>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <HAL_ADC_MspInit+0x80>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ca8 <HAL_ADC_MspInit+0x80>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	6313      	str	r3, [r2, #48]	; 0x30
 8002c76:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <HAL_ADC_MspInit+0x80>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = power_module_adc_Pin;
 8002c82:	2302      	movs	r3, #2
 8002c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c86:	2303      	movs	r3, #3
 8002c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(power_module_adc_GPIO_Port, &GPIO_InitStruct);
 8002c8e:	f107 0314 	add.w	r3, r7, #20
 8002c92:	4619      	mov	r1, r3
 8002c94:	4805      	ldr	r0, [pc, #20]	; (8002cac <HAL_ADC_MspInit+0x84>)
 8002c96:	f004 f803 	bl	8006ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002c9a:	bf00      	nop
 8002c9c:	3728      	adds	r7, #40	; 0x28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40012000 	.word	0x40012000
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40020000 	.word	0x40020000

08002cb0 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	71fb      	strb	r3, [r7, #7]
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	2007      	movs	r0, #7
 8002cc0:	f000 fba4 	bl	800340c <bno055_writeData>
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	203d      	movs	r0, #61	; 0x3d
 8002cdc:	f000 fb96 	bl	800340c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d103      	bne.n	8002cee <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8002ce6:	2013      	movs	r0, #19
 8002ce8:	f000 fb84 	bl	80033f4 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8002cec:	e002      	b.n	8002cf4 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8002cee:	2007      	movs	r0, #7
 8002cf0:	f000 fb80 	bl	80033f4 <bno055_delay>
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8002d00:	2000      	movs	r0, #0
 8002d02:	f7ff ffe3 	bl	8002ccc <bno055_setOperationMode>
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8002d0e:	200c      	movs	r0, #12
 8002d10:	f7ff ffdc 	bl	8002ccc <bno055_setOperationMode>
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8002d1c:	2120      	movs	r1, #32
 8002d1e:	203f      	movs	r0, #63	; 0x3f
 8002d20:	f000 fb74 	bl	800340c <bno055_writeData>
  bno055_delay(700);
 8002d24:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002d28:	f000 fb64 	bl	80033f4 <bno055_delay>
}
 8002d2c:	bf00      	nop
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
  bno055_reset();
 8002d36:	f7ff ffef 	bl	8002d18 <bno055_reset>

  uint8_t id = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8002d3e:	1dfb      	adds	r3, r7, #7
 8002d40:	2201      	movs	r2, #1
 8002d42:	4619      	mov	r1, r3
 8002d44:	2000      	movs	r0, #0
 8002d46:	f000 fc4d 	bl	80035e4 <bno055_readData>
  if (id != BNO055_ID) {
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	2ba0      	cmp	r3, #160	; 0xa0
 8002d4e:	d004      	beq.n	8002d5a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	4619      	mov	r1, r3
 8002d54:	4809      	ldr	r0, [pc, #36]	; (8002d7c <bno055_setup+0x4c>)
 8002d56:	f00b f95b 	bl	800e010 <iprintf>
  }
  bno055_setPage(0);
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f7ff ffa8 	bl	8002cb0 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8002d60:	2100      	movs	r1, #0
 8002d62:	203f      	movs	r0, #63	; 0x3f
 8002d64:	f000 fb52 	bl	800340c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8002d68:	f7ff ffc8 	bl	8002cfc <bno055_setOperationModeConfig>
  bno055_delay(10);
 8002d6c:	200a      	movs	r0, #10
 8002d6e:	f000 fb41 	bl	80033f4 <bno055_delay>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	080112d0 	.word	0x080112d0

08002d80 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b093      	sub	sp, #76	; 0x4c
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	75fb      	strb	r3, [r7, #23]
  bno055_setPage(0);
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7ff ff90 	bl	8002cb0 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d107      	bne.n	8002da6 <bno055_getVector+0x26>
    bno055_readData(vec, buffer, 8);
 8002d96:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002d9a:	7dfb      	ldrb	r3, [r7, #23]
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fc20 	bl	80035e4 <bno055_readData>
 8002da4:	e006      	b.n	8002db4 <bno055_getVector+0x34>
  else
    bno055_readData(vec, buffer, 6);
 8002da6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002daa:	7dfb      	ldrb	r3, [r7, #23]
 8002dac:	2206      	movs	r2, #6
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fc18 	bl	80035e4 <bno055_readData>

  double scale = 1;
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	4b8c      	ldr	r3, [pc, #560]	; (8002fec <bno055_getVector+0x26c>)
 8002dba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
 8002dc0:	2b0e      	cmp	r3, #14
 8002dc2:	d109      	bne.n	8002dd8 <bno055_getVector+0x58>
    scale = magScale;
 8002dc4:	4b8a      	ldr	r3, [pc, #552]	; (8002ff0 <bno055_getVector+0x270>)
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fb9b 	bl	8000504 <__aeabi_ui2d>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8002dd6:	e038      	b.n	8002e4a <bno055_getVector+0xca>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d005      	beq.n	8002dea <bno055_getVector+0x6a>
 8002dde:	7dfb      	ldrb	r3, [r7, #23]
 8002de0:	2b28      	cmp	r3, #40	; 0x28
 8002de2:	d002      	beq.n	8002dea <bno055_getVector+0x6a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8002de4:	7dfb      	ldrb	r3, [r7, #23]
 8002de6:	2b2e      	cmp	r3, #46	; 0x2e
 8002de8:	d109      	bne.n	8002dfe <bno055_getVector+0x7e>
    scale = accelScale;
 8002dea:	4b82      	ldr	r3, [pc, #520]	; (8002ff4 <bno055_getVector+0x274>)
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fb88 	bl	8000504 <__aeabi_ui2d>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8002dfc:	e025      	b.n	8002e4a <bno055_getVector+0xca>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
 8002e00:	2b14      	cmp	r3, #20
 8002e02:	d109      	bne.n	8002e18 <bno055_getVector+0x98>
    scale = angularRateScale;
 8002e04:	4b7c      	ldr	r3, [pc, #496]	; (8002ff8 <bno055_getVector+0x278>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd fb7b 	bl	8000504 <__aeabi_ui2d>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8002e16:	e018      	b.n	8002e4a <bno055_getVector+0xca>
  } else if (vec == BNO055_VECTOR_EULER) {
 8002e18:	7dfb      	ldrb	r3, [r7, #23]
 8002e1a:	2b1a      	cmp	r3, #26
 8002e1c:	d109      	bne.n	8002e32 <bno055_getVector+0xb2>
    scale = eulerScale;
 8002e1e:	4b77      	ldr	r3, [pc, #476]	; (8002ffc <bno055_getVector+0x27c>)
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fd fb6e 	bl	8000504 <__aeabi_ui2d>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8002e30:	e00b      	b.n	8002e4a <bno055_getVector+0xca>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d108      	bne.n	8002e4a <bno055_getVector+0xca>
    scale = quaScale;
 8002e38:	4b71      	ldr	r3, [pc, #452]	; (8003000 <bno055_getVector+0x280>)
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fd fb61 	bl	8000504 <__aeabi_ui2d>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8002e4a:	f107 0318 	add.w	r3, r7, #24
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	605a      	str	r2, [r3, #4]
 8002e54:	609a      	str	r2, [r3, #8]
 8002e56:	60da      	str	r2, [r3, #12]
  if (vec == BNO055_VECTOR_QUATERNION) {
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d160      	bne.n	8002f20 <bno055_getVector+0x1a0>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8002e5e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	b21a      	sxth	r2, r3
 8002e66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e6a:	b21b      	sxth	r3, r3
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd fb57 	bl	8000524 <__aeabi_i2d>
 8002e76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e7a:	f7fd fce7 	bl	800084c <__aeabi_ddiv>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	f7fd fe8f 	bl	8000ba8 <__aeabi_d2f>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	61bb      	str	r3, [r7, #24]
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8002e8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	b21a      	sxth	r2, r3
 8002e96:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002e9a:	b21b      	sxth	r3, r3
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	b21b      	sxth	r3, r3
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fd fb3f 	bl	8000524 <__aeabi_i2d>
 8002ea6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002eaa:	f7fd fccf 	bl	800084c <__aeabi_ddiv>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f7fd fe77 	bl	8000ba8 <__aeabi_d2f>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	61fb      	str	r3, [r7, #28]
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8002ebe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	b21a      	sxth	r2, r3
 8002ec6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002eca:	b21b      	sxth	r3, r3
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd fb27 	bl	8000524 <__aeabi_i2d>
 8002ed6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002eda:	f7fd fcb7 	bl	800084c <__aeabi_ddiv>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f7fd fe5f 	bl	8000ba8 <__aeabi_d2f>
 8002eea:	4603      	mov	r3, r0
 8002eec:	623b      	str	r3, [r7, #32]
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8002eee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	b21a      	sxth	r2, r3
 8002ef6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002efa:	b21b      	sxth	r3, r3
 8002efc:	4313      	orrs	r3, r2
 8002efe:	b21b      	sxth	r3, r3
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fd fb0f 	bl	8000524 <__aeabi_i2d>
 8002f06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f0a:	f7fd fc9f 	bl	800084c <__aeabi_ddiv>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	f7fd fe47 	bl	8000ba8 <__aeabi_d2f>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1e:	e047      	b.n	8002fb0 <bno055_getVector+0x230>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8002f20:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002f24:	021b      	lsls	r3, r3, #8
 8002f26:	b21a      	sxth	r2, r3
 8002f28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f2c:	b21b      	sxth	r3, r3
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	b21b      	sxth	r3, r3
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd faf6 	bl	8000524 <__aeabi_i2d>
 8002f38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f3c:	f7fd fc86 	bl	800084c <__aeabi_ddiv>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4610      	mov	r0, r2
 8002f46:	4619      	mov	r1, r3
 8002f48:	f7fd fe2e 	bl	8000ba8 <__aeabi_d2f>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	61fb      	str	r3, [r7, #28]
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8002f50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f54:	021b      	lsls	r3, r3, #8
 8002f56:	b21a      	sxth	r2, r3
 8002f58:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002f5c:	b21b      	sxth	r3, r3
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	b21b      	sxth	r3, r3
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd fade 	bl	8000524 <__aeabi_i2d>
 8002f68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f6c:	f7fd fc6e 	bl	800084c <__aeabi_ddiv>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	f7fd fe16 	bl	8000ba8 <__aeabi_d2f>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	623b      	str	r3, [r7, #32]
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8002f80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f84:	021b      	lsls	r3, r3, #8
 8002f86:	b21a      	sxth	r2, r3
 8002f88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002f8c:	b21b      	sxth	r3, r3
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	b21b      	sxth	r3, r3
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd fac6 	bl	8000524 <__aeabi_i2d>
 8002f98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f9c:	f7fd fc56 	bl	800084c <__aeabi_ddiv>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	f7fd fdfe 	bl	8000ba8 <__aeabi_d2f>
 8002fac:	4603      	mov	r3, r0
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return xyz;
 8002fb0:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8002fb4:	f107 0318 	add.w	r3, r7, #24
 8002fb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002fbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fc0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc6:	ee06 0a10 	vmov	s12, r0
 8002fca:	ee06 1a90 	vmov	s13, r1
 8002fce:	ee07 2a10 	vmov	s14, r2
 8002fd2:	ee07 3a90 	vmov	s15, r3
}
 8002fd6:	eeb0 0a46 	vmov.f32	s0, s12
 8002fda:	eef0 0a66 	vmov.f32	s1, s13
 8002fde:	eeb0 1a47 	vmov.f32	s2, s14
 8002fe2:	eef0 1a67 	vmov.f32	s3, s15
 8002fe6:	374c      	adds	r7, #76	; 0x4c
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd90      	pop	{r4, r7, pc}
 8002fec:	3ff00000 	.word	0x3ff00000
 8002ff0:	2000000a 	.word	0x2000000a
 8002ff4:	20000004 	.word	0x20000004
 8002ff8:	20000006 	.word	0x20000006
 8002ffc:	20000008 	.word	0x20000008
 8003000:	2000000c 	.word	0x2000000c

08003004 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 800300a:	201a      	movs	r0, #26
 800300c:	f7ff feb8 	bl	8002d80 <bno055_getVector>
 8003010:	eeb0 6a40 	vmov.f32	s12, s0
 8003014:	eef0 6a60 	vmov.f32	s13, s1
 8003018:	eeb0 7a41 	vmov.f32	s14, s2
 800301c:	eef0 7a61 	vmov.f32	s15, s3
 8003020:	ed87 6a04 	vstr	s12, [r7, #16]
 8003024:	edc7 6a05 	vstr	s13, [r7, #20]
 8003028:	ed87 7a06 	vstr	s14, [r7, #24]
 800302c:	edc7 7a07 	vstr	s15, [r7, #28]
 8003030:	6938      	ldr	r0, [r7, #16]
 8003032:	6979      	ldr	r1, [r7, #20]
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	ee06 0a10 	vmov	s12, r0
 800303c:	ee06 1a90 	vmov	s13, r1
 8003040:	ee07 2a10 	vmov	s14, r2
 8003044:	ee07 3a90 	vmov	s15, r3
}
 8003048:	eeb0 0a46 	vmov.f32	s0, s12
 800304c:	eef0 0a66 	vmov.f32	s1, s13
 8003050:	eeb0 1a47 	vmov.f32	s2, s14
 8003054:	eef0 1a67 	vmov.f32	s3, s15
 8003058:	3720      	adds	r7, #32
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <init_esc>:
//ŞU AN 50-100 ARASI DEĞER VERİYORUZ, MAP EDEBİLİRSİN VEYA ARALIĞI TİMER HESABINI 3360 YERİNE YARISINI,
//1000 YERİNE 2 KATINI VEREREK 2 KATINA ÇIKARTIRSIN

//config(pwm başlat) ve kalibrasyon(mainde whileın öncesinde çağır)

void init_esc() {
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003064:	2100      	movs	r1, #0
 8003066:	4808      	ldr	r0, [pc, #32]	; (8003088 <init_esc+0x28>)
 8003068:	f006 fa6a 	bl	8009540 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800306c:	2104      	movs	r1, #4
 800306e:	4806      	ldr	r0, [pc, #24]	; (8003088 <init_esc+0x28>)
 8003070:	f006 fa66 	bl	8009540 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003074:	2108      	movs	r1, #8
 8003076:	4804      	ldr	r0, [pc, #16]	; (8003088 <init_esc+0x28>)
 8003078:	f006 fa62 	bl	8009540 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800307c:	210c      	movs	r1, #12
 800307e:	4802      	ldr	r0, [pc, #8]	; (8003088 <init_esc+0x28>)
 8003080:	f006 fa5e 	bl	8009540 <HAL_TIM_PWM_Start>

}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}
 8003088:	2000097c 	.word	0x2000097c

0800308c <drive_motor_1>:

void drive_motor_1(int pwm1Val) {
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

	TIM1->CCR3 = pwm1Val;
 8003094:	4a04      	ldr	r2, [pc, #16]	; (80030a8 <drive_motor_1+0x1c>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40010000 	.word	0x40010000

080030ac <drive_motor_2>:

void drive_motor_2(int pwm2Val) {
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]

	TIM1->CCR1 = pwm2Val;
 80030b4:	4a04      	ldr	r2, [pc, #16]	; (80030c8 <drive_motor_2+0x1c>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6353      	str	r3, [r2, #52]	; 0x34
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40010000 	.word	0x40010000

080030cc <drive_motor_3>:

void drive_motor_3(int pwm3Val) {
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

	TIM1->CCR4 = pwm3Val;
 80030d4:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <drive_motor_3+0x1c>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40010000 	.word	0x40010000

080030ec <drive_motor_4>:

void drive_motor_4(int pwm4Val) {
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

	TIM1->CCR2 = pwm4Val;
 80030f4:	4a04      	ldr	r2, [pc, #16]	; (8003108 <drive_motor_4+0x1c>)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40010000 	.word	0x40010000

0800310c <set_pwm>:

void set_pwm(float roll_pid, float pitch_pid, float yaw_pid, uint16_t throttle,
		battery_t battery, esc_t esc) {
 800310c:	b580      	push	{r7, lr}
 800310e:	b08e      	sub	sp, #56	; 0x38
 8003110:	af00      	add	r7, sp, #0
 8003112:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8003116:	edc7 0a08 	vstr	s1, [r7, #32]
 800311a:	ed87 1a07 	vstr	s2, [r7, #28]
 800311e:	f107 0310 	add.w	r3, r7, #16
 8003122:	e883 0006 	stmia.w	r3, {r1, r2}
 8003126:	eeb0 6a61 	vmov.f32	s12, s3
 800312a:	eef0 6a42 	vmov.f32	s13, s4
 800312e:	eeb0 7a62 	vmov.f32	s14, s5
 8003132:	eef0 7a43 	vmov.f32	s15, s6
 8003136:	4603      	mov	r3, r0
 8003138:	837b      	strh	r3, [r7, #26]
 800313a:	ed87 6a00 	vstr	s12, [r7]
 800313e:	edc7 6a01 	vstr	s13, [r7, #4]
 8003142:	ed87 7a02 	vstr	s14, [r7, #8]
 8003146:	edc7 7a03 	vstr	s15, [r7, #12]

	float pulse_length_esc1 = 0, pulse_length_esc2 = 0, pulse_length_esc3 = 0,
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	637b      	str	r3, [r7, #52]	; 0x34
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	633b      	str	r3, [r7, #48]	; 0x30
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	62fb      	str	r3, [r7, #44]	; 0x2c
			pulse_length_esc4 = 0;
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	62bb      	str	r3, [r7, #40]	; 0x28

	pulse_length_esc1 = throttle - roll_pid - pitch_pid + yaw_pid;
 8003162:	8b7b      	ldrh	r3, [r7, #26]
 8003164:	ee07 3a90 	vmov	s15, r3
 8003168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800316c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003170:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003174:	edd7 7a08 	vldr	s15, [r7, #32]
 8003178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800317c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003184:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	pulse_length_esc2 = throttle + roll_pid - pitch_pid - yaw_pid;
 8003188:	8b7b      	ldrh	r3, [r7, #26]
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003192:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003196:	ee37 7a27 	vadd.f32	s14, s14, s15
 800319a:	edd7 7a08 	vldr	s15, [r7, #32]
 800319e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80031a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031aa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	pulse_length_esc3 = throttle - roll_pid + pitch_pid - yaw_pid;
 80031ae:	8b7b      	ldrh	r3, [r7, #26]
 80031b0:	ee07 3a90 	vmov	s15, r3
 80031b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031b8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80031c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80031cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	pulse_length_esc4 = throttle + roll_pid + pitch_pid + yaw_pid;
 80031d4:	8b7b      	ldrh	r3, [r7, #26]
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031de:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80031ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80031f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	 pulse_length_esc4 += pulse_length_esc4
	 * ((BATTERY_START_VOLTAGE - battery.voltage)
	 / (float) BATTERY_COMPENSATION_COEFFICIENT);
	 */
	//************************************ESC MAX OUTPUT LIMITING*********************************//
	if (pulse_length_esc1 > MAX_PWM_OUTPUT)
 80031fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80031fe:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80033b0 <set_pwm+0x2a4>
 8003202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800320a:	dd01      	ble.n	8003210 <set_pwm+0x104>
		pulse_length_esc1 = MAX_PWM_OUTPUT;
 800320c:	4b69      	ldr	r3, [pc, #420]	; (80033b4 <set_pwm+0x2a8>)
 800320e:	637b      	str	r3, [r7, #52]	; 0x34

	if (pulse_length_esc2 > MAX_PWM_OUTPUT)
 8003210:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003214:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80033b0 <set_pwm+0x2a4>
 8003218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003220:	dd01      	ble.n	8003226 <set_pwm+0x11a>
		pulse_length_esc2 = MAX_PWM_OUTPUT;
 8003222:	4b64      	ldr	r3, [pc, #400]	; (80033b4 <set_pwm+0x2a8>)
 8003224:	633b      	str	r3, [r7, #48]	; 0x30

	if (pulse_length_esc3 > MAX_PWM_OUTPUT)
 8003226:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800322a:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80033b0 <set_pwm+0x2a4>
 800322e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003236:	dd01      	ble.n	800323c <set_pwm+0x130>
		pulse_length_esc3 = MAX_PWM_OUTPUT;
 8003238:	4b5e      	ldr	r3, [pc, #376]	; (80033b4 <set_pwm+0x2a8>)
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (pulse_length_esc4 > MAX_PWM_OUTPUT)
 800323c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003240:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80033b0 <set_pwm+0x2a4>
 8003244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324c:	dd01      	ble.n	8003252 <set_pwm+0x146>
		pulse_length_esc4 = MAX_PWM_OUTPUT;
 800324e:	4b59      	ldr	r3, [pc, #356]	; (80033b4 <set_pwm+0x2a8>)
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
	//************************************ESC MIN OUTPUT LIMITING*********************************//

	if (pulse_length_esc1 < MIN_PWM_OUTPUT)
 8003252:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003256:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80033b8 <set_pwm+0x2ac>
 800325a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800325e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003262:	d501      	bpl.n	8003268 <set_pwm+0x15c>
		pulse_length_esc1 = MIN_PWM_OUTPUT;
 8003264:	4b55      	ldr	r3, [pc, #340]	; (80033bc <set_pwm+0x2b0>)
 8003266:	637b      	str	r3, [r7, #52]	; 0x34

	if (pulse_length_esc2 < MIN_PWM_OUTPUT)
 8003268:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800326c:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80033b8 <set_pwm+0x2ac>
 8003270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003278:	d501      	bpl.n	800327e <set_pwm+0x172>
		pulse_length_esc2 = MIN_PWM_OUTPUT;
 800327a:	4b50      	ldr	r3, [pc, #320]	; (80033bc <set_pwm+0x2b0>)
 800327c:	633b      	str	r3, [r7, #48]	; 0x30

	if (pulse_length_esc3 < MIN_PWM_OUTPUT)
 800327e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003282:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80033b8 <set_pwm+0x2ac>
 8003286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800328a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328e:	d501      	bpl.n	8003294 <set_pwm+0x188>
		pulse_length_esc3 = MIN_PWM_OUTPUT;
 8003290:	4b4a      	ldr	r3, [pc, #296]	; (80033bc <set_pwm+0x2b0>)
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (pulse_length_esc4 < MIN_PWM_OUTPUT)
 8003294:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003298:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80033b8 <set_pwm+0x2ac>
 800329c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a4:	d501      	bpl.n	80032aa <set_pwm+0x19e>
		pulse_length_esc4 = MIN_PWM_OUTPUT;
 80032a6:	4b45      	ldr	r3, [pc, #276]	; (80033bc <set_pwm+0x2b0>)
 80032a8:	62bb      	str	r3, [r7, #40]	; 0x28

	//*********************************************************************************************//
	if (throttle < 1200) { //throttle minimum'a indirilince tüm motorları durdur
 80032aa:	8b7b      	ldrh	r3, [r7, #26]
 80032ac:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80032b0:	d207      	bcs.n	80032c2 <set_pwm+0x1b6>
		pulse_length_esc4 = MIN_PWM_OUTPUT;
 80032b2:	4b42      	ldr	r3, [pc, #264]	; (80033bc <set_pwm+0x2b0>)
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
		pulse_length_esc3 = MIN_PWM_OUTPUT;
 80032b6:	4b41      	ldr	r3, [pc, #260]	; (80033bc <set_pwm+0x2b0>)
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		pulse_length_esc2 = MIN_PWM_OUTPUT;
 80032ba:	4b40      	ldr	r3, [pc, #256]	; (80033bc <set_pwm+0x2b0>)
 80032bc:	633b      	str	r3, [r7, #48]	; 0x30
		pulse_length_esc1 = MIN_PWM_OUTPUT;
 80032be:	4b3f      	ldr	r3, [pc, #252]	; (80033bc <set_pwm+0x2b0>)
 80032c0:	637b      	str	r3, [r7, #52]	; 0x34
	}

	drive_motor_1(pulse_length_esc1); // motor sürme fonksiyonları		motor3ü çalıştırıyor1
 80032c2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80032c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032ca:	ee17 0a90 	vmov	r0, s15
 80032ce:	f7ff fedd 	bl	800308c <drive_motor_1>
	drive_motor_2(pulse_length_esc2);	//motor2
 80032d2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80032d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032da:	ee17 0a90 	vmov	r0, s15
 80032de:	f7ff fee5 	bl	80030ac <drive_motor_2>
	drive_motor_3(pulse_length_esc3);	//motor1
 80032e2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80032e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032ea:	ee17 0a90 	vmov	r0, s15
 80032ee:	f7ff feed 	bl	80030cc <drive_motor_3>
	drive_motor_4(pulse_length_esc4);	//motor4
 80032f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80032f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032fa:	ee17 0a90 	vmov	r0, s15
 80032fe:	f7ff fef5 	bl	80030ec <drive_motor_4>

	printf("\n");
 8003302:	200a      	movs	r0, #10
 8003304:	f00a fe96 	bl	800e034 <putchar>
	gcvt(pulse_length_esc1, 8, ptr2);
 8003308:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800330a:	f7fd f91d 	bl	8000548 <__aeabi_f2d>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	492b      	ldr	r1, [pc, #172]	; (80033c0 <set_pwm+0x2b4>)
 8003314:	2008      	movs	r0, #8
 8003316:	ec43 2b10 	vmov	d0, r2, r3
 800331a:	f00a f93f 	bl	800d59c <gcvt>
	printf("esc1 = ");
 800331e:	4829      	ldr	r0, [pc, #164]	; (80033c4 <set_pwm+0x2b8>)
 8003320:	f00a fe76 	bl	800e010 <iprintf>
	printf(ptr2);
 8003324:	4826      	ldr	r0, [pc, #152]	; (80033c0 <set_pwm+0x2b4>)
 8003326:	f00a fe73 	bl	800e010 <iprintf>
	printf("\n");
 800332a:	200a      	movs	r0, #10
 800332c:	f00a fe82 	bl	800e034 <putchar>

	gcvt(pulse_length_esc2, 8, ptr2);
 8003330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003332:	f7fd f909 	bl	8000548 <__aeabi_f2d>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4921      	ldr	r1, [pc, #132]	; (80033c0 <set_pwm+0x2b4>)
 800333c:	2008      	movs	r0, #8
 800333e:	ec43 2b10 	vmov	d0, r2, r3
 8003342:	f00a f92b 	bl	800d59c <gcvt>
	printf("esc2 = ");
 8003346:	4820      	ldr	r0, [pc, #128]	; (80033c8 <set_pwm+0x2bc>)
 8003348:	f00a fe62 	bl	800e010 <iprintf>
	printf(ptr2);
 800334c:	481c      	ldr	r0, [pc, #112]	; (80033c0 <set_pwm+0x2b4>)
 800334e:	f00a fe5f 	bl	800e010 <iprintf>
	printf("\n");
 8003352:	200a      	movs	r0, #10
 8003354:	f00a fe6e 	bl	800e034 <putchar>

	gcvt(pulse_length_esc3, 8, ptr2);
 8003358:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800335a:	f7fd f8f5 	bl	8000548 <__aeabi_f2d>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4917      	ldr	r1, [pc, #92]	; (80033c0 <set_pwm+0x2b4>)
 8003364:	2008      	movs	r0, #8
 8003366:	ec43 2b10 	vmov	d0, r2, r3
 800336a:	f00a f917 	bl	800d59c <gcvt>
	printf("esc3 = ");
 800336e:	4817      	ldr	r0, [pc, #92]	; (80033cc <set_pwm+0x2c0>)
 8003370:	f00a fe4e 	bl	800e010 <iprintf>
	printf(ptr2);
 8003374:	4812      	ldr	r0, [pc, #72]	; (80033c0 <set_pwm+0x2b4>)
 8003376:	f00a fe4b 	bl	800e010 <iprintf>
	printf("\n");
 800337a:	200a      	movs	r0, #10
 800337c:	f00a fe5a 	bl	800e034 <putchar>

	gcvt(pulse_length_esc4, 8, ptr2);
 8003380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003382:	f7fd f8e1 	bl	8000548 <__aeabi_f2d>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	490d      	ldr	r1, [pc, #52]	; (80033c0 <set_pwm+0x2b4>)
 800338c:	2008      	movs	r0, #8
 800338e:	ec43 2b10 	vmov	d0, r2, r3
 8003392:	f00a f903 	bl	800d59c <gcvt>
	printf("esc4 = ");
 8003396:	480e      	ldr	r0, [pc, #56]	; (80033d0 <set_pwm+0x2c4>)
 8003398:	f00a fe3a 	bl	800e010 <iprintf>
	printf(ptr2);
 800339c:	4808      	ldr	r0, [pc, #32]	; (80033c0 <set_pwm+0x2b4>)
 800339e:	f00a fe37 	bl	800e010 <iprintf>
	printf("\n");
 80033a2:	200a      	movs	r0, #10
 80033a4:	f00a fe46 	bl	800e034 <putchar>

}
 80033a8:	bf00      	nop
 80033aa:	3738      	adds	r7, #56	; 0x38
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	44f3c000 	.word	0x44f3c000
 80033b4:	44f3c000 	.word	0x44f3c000
 80033b8:	44898000 	.word	0x44898000
 80033bc:	44898000 	.word	0x44898000
 80033c0:	20000380 	.word	0x20000380
 80033c4:	0801130c 	.word	0x0801130c
 80033c8:	08011314 	.word	0x08011314
 80033cc:	0801131c 	.word	0x0801131c
 80033d0:	08011324 	.word	0x08011324

080033d4 <bno055_assignI2C>:
#include "bno055.h"
#include "main.h"
extern I2C_HandleTypeDef hi2c3;
I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	_bno055_i2c_port = hi2c_device;
 80033dc:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <bno055_assignI2C+0x1c>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6013      	str	r3, [r2, #0]
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	200003e4 	.word	0x200003e4

080033f4 <bno055_delay>:

void bno055_delay(int time) {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4618      	mov	r0, r3
 8003400:	f008 fe31 	bl	800c066 <osDelay>
#else
	HAL_Delay(time);
#endif
}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af02      	add	r7, sp, #8
 8003412:	4603      	mov	r3, r0
 8003414:	460a      	mov	r2, r1
 8003416:	71fb      	strb	r3, [r7, #7]
 8003418:	4613      	mov	r3, r2
 800341a:	71bb      	strb	r3, [r7, #6]
	uint8_t txdata[2] = { reg, data };
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	733b      	strb	r3, [r7, #12]
 8003420:	79bb      	ldrb	r3, [r7, #6]
 8003422:	737b      	strb	r3, [r7, #13]
	uint8_t status;
	status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8003424:	4b5a      	ldr	r3, [pc, #360]	; (8003590 <bno055_writeData+0x184>)
 8003426:	6818      	ldr	r0, [r3, #0]
 8003428:	f107 020c 	add.w	r2, r7, #12
 800342c:	230a      	movs	r3, #10
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	2302      	movs	r3, #2
 8003432:	2150      	movs	r1, #80	; 0x50
 8003434:	f003 ff2e 	bl	8007294 <HAL_I2C_Master_Transmit>
 8003438:	4603      	mov	r3, r0
 800343a:	75fb      	strb	r3, [r7, #23]
			txdata, sizeof(txdata), 10);
	if (status == HAL_OK) {
 800343c:	7dfb      	ldrb	r3, [r7, #23]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 80a0 	beq.w	8003584 <bno055_writeData+0x178>
		return;
	}

	if (status == HAL_ERROR) {
 8003444:	7dfb      	ldrb	r3, [r7, #23]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d103      	bne.n	8003452 <bno055_writeData+0x46>
		printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800344a:	4852      	ldr	r0, [pc, #328]	; (8003594 <bno055_writeData+0x188>)
 800344c:	f00a fe4e 	bl	800e0ec <puts>
 8003450:	e012      	b.n	8003478 <bno055_writeData+0x6c>
	} else if (status == HAL_TIMEOUT) {
 8003452:	7dfb      	ldrb	r3, [r7, #23]
 8003454:	2b03      	cmp	r3, #3
 8003456:	d103      	bne.n	8003460 <bno055_writeData+0x54>
		printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8003458:	484f      	ldr	r0, [pc, #316]	; (8003598 <bno055_writeData+0x18c>)
 800345a:	f00a fe47 	bl	800e0ec <puts>
 800345e:	e00b      	b.n	8003478 <bno055_writeData+0x6c>
	} else if (status == HAL_BUSY) {
 8003460:	7dfb      	ldrb	r3, [r7, #23]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d103      	bne.n	800346e <bno055_writeData+0x62>
		printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8003466:	484d      	ldr	r0, [pc, #308]	; (800359c <bno055_writeData+0x190>)
 8003468:	f00a fe40 	bl	800e0ec <puts>
 800346c:	e004      	b.n	8003478 <bno055_writeData+0x6c>
	} else {
		printf("Unknown status data %d", status);
 800346e:	7dfb      	ldrb	r3, [r7, #23]
 8003470:	4619      	mov	r1, r3
 8003472:	484b      	ldr	r0, [pc, #300]	; (80035a0 <bno055_writeData+0x194>)
 8003474:	f00a fdcc 	bl	800e010 <iprintf>
	}

	uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8003478:	4b45      	ldr	r3, [pc, #276]	; (8003590 <bno055_writeData+0x184>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f004 fd5b 	bl	8007f38 <HAL_I2C_GetError>
 8003482:	6138      	str	r0, [r7, #16]
	if (error == HAL_I2C_ERROR_NONE) {
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d07e      	beq.n	8003588 <bno055_writeData+0x17c>
		return;
	} else if (error == HAL_I2C_ERROR_BERR) {
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d103      	bne.n	8003498 <bno055_writeData+0x8c>
		printf("HAL_I2C_ERROR_BERR\r\n");
 8003490:	4844      	ldr	r0, [pc, #272]	; (80035a4 <bno055_writeData+0x198>)
 8003492:	f00a fe2b 	bl	800e0ec <puts>
 8003496:	e021      	b.n	80034dc <bno055_writeData+0xd0>
	} else if (error == HAL_I2C_ERROR_ARLO) {
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d103      	bne.n	80034a6 <bno055_writeData+0x9a>
		printf("HAL_I2C_ERROR_ARLO\r\n");
 800349e:	4842      	ldr	r0, [pc, #264]	; (80035a8 <bno055_writeData+0x19c>)
 80034a0:	f00a fe24 	bl	800e0ec <puts>
 80034a4:	e01a      	b.n	80034dc <bno055_writeData+0xd0>
	} else if (error == HAL_I2C_ERROR_AF) {
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d103      	bne.n	80034b4 <bno055_writeData+0xa8>
		printf("HAL_I2C_ERROR_AF\r\n");
 80034ac:	483f      	ldr	r0, [pc, #252]	; (80035ac <bno055_writeData+0x1a0>)
 80034ae:	f00a fe1d 	bl	800e0ec <puts>
 80034b2:	e013      	b.n	80034dc <bno055_writeData+0xd0>
	} else if (error == HAL_I2C_ERROR_OVR) {
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d103      	bne.n	80034c2 <bno055_writeData+0xb6>
		printf("HAL_I2C_ERROR_OVR\r\n");
 80034ba:	483d      	ldr	r0, [pc, #244]	; (80035b0 <bno055_writeData+0x1a4>)
 80034bc:	f00a fe16 	bl	800e0ec <puts>
 80034c0:	e00c      	b.n	80034dc <bno055_writeData+0xd0>
	} else if (error == HAL_I2C_ERROR_DMA) {
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b10      	cmp	r3, #16
 80034c6:	d103      	bne.n	80034d0 <bno055_writeData+0xc4>
		printf("HAL_I2C_ERROR_DMA\r\n");
 80034c8:	483a      	ldr	r0, [pc, #232]	; (80035b4 <bno055_writeData+0x1a8>)
 80034ca:	f00a fe0f 	bl	800e0ec <puts>
 80034ce:	e005      	b.n	80034dc <bno055_writeData+0xd0>
	} else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d102      	bne.n	80034dc <bno055_writeData+0xd0>
		printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80034d6:	4838      	ldr	r0, [pc, #224]	; (80035b8 <bno055_writeData+0x1ac>)
 80034d8:	f00a fe08 	bl	800e0ec <puts>
	}

	HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80034dc:	4b2c      	ldr	r3, [pc, #176]	; (8003590 <bno055_writeData+0x184>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f004 fd1b 	bl	8007f1c <HAL_I2C_GetState>
 80034e6:	4603      	mov	r3, r0
 80034e8:	73fb      	strb	r3, [r7, #15]
	if (state == HAL_I2C_STATE_RESET) {
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d103      	bne.n	80034f8 <bno055_writeData+0xec>
		printf("HAL_I2C_STATE_RESET\r\n");
 80034f0:	4832      	ldr	r0, [pc, #200]	; (80035bc <bno055_writeData+0x1b0>)
 80034f2:	f00a fdfb 	bl	800e0ec <puts>
 80034f6:	e048      	b.n	800358a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_READY) {
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d103      	bne.n	8003506 <bno055_writeData+0xfa>
		printf("HAL_I2C_STATE_RESET\r\n");
 80034fe:	482f      	ldr	r0, [pc, #188]	; (80035bc <bno055_writeData+0x1b0>)
 8003500:	f00a fdf4 	bl	800e0ec <puts>
 8003504:	e041      	b.n	800358a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_BUSY) {
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	2b24      	cmp	r3, #36	; 0x24
 800350a:	d103      	bne.n	8003514 <bno055_writeData+0x108>
		printf("HAL_I2C_STATE_BUSY\r\n");
 800350c:	482c      	ldr	r0, [pc, #176]	; (80035c0 <bno055_writeData+0x1b4>)
 800350e:	f00a fded 	bl	800e0ec <puts>
 8003512:	e03a      	b.n	800358a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_BUSY_TX) {
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	2b21      	cmp	r3, #33	; 0x21
 8003518:	d103      	bne.n	8003522 <bno055_writeData+0x116>
		printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800351a:	482a      	ldr	r0, [pc, #168]	; (80035c4 <bno055_writeData+0x1b8>)
 800351c:	f00a fde6 	bl	800e0ec <puts>
 8003520:	e033      	b.n	800358a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_BUSY_RX) {
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	2b22      	cmp	r3, #34	; 0x22
 8003526:	d103      	bne.n	8003530 <bno055_writeData+0x124>
		printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8003528:	4827      	ldr	r0, [pc, #156]	; (80035c8 <bno055_writeData+0x1bc>)
 800352a:	f00a fddf 	bl	800e0ec <puts>
 800352e:	e02c      	b.n	800358a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_LISTEN) {
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	2b28      	cmp	r3, #40	; 0x28
 8003534:	d103      	bne.n	800353e <bno055_writeData+0x132>
		printf("HAL_I2C_STATE_LISTEN\r\n");
 8003536:	4825      	ldr	r0, [pc, #148]	; (80035cc <bno055_writeData+0x1c0>)
 8003538:	f00a fdd8 	bl	800e0ec <puts>
 800353c:	e025      	b.n	800358a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	2b29      	cmp	r3, #41	; 0x29
 8003542:	d103      	bne.n	800354c <bno055_writeData+0x140>
		printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8003544:	4822      	ldr	r0, [pc, #136]	; (80035d0 <bno055_writeData+0x1c4>)
 8003546:	f00a fdd1 	bl	800e0ec <puts>
 800354a:	e01e      	b.n	800358a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b2a      	cmp	r3, #42	; 0x2a
 8003550:	d103      	bne.n	800355a <bno055_writeData+0x14e>
		printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8003552:	4820      	ldr	r0, [pc, #128]	; (80035d4 <bno055_writeData+0x1c8>)
 8003554:	f00a fdca 	bl	800e0ec <puts>
 8003558:	e017      	b.n	800358a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_ABORT) {
 800355a:	7bfb      	ldrb	r3, [r7, #15]
 800355c:	2b60      	cmp	r3, #96	; 0x60
 800355e:	d103      	bne.n	8003568 <bno055_writeData+0x15c>
		printf("HAL_I2C_STATE_ABORT\r\n");
 8003560:	481d      	ldr	r0, [pc, #116]	; (80035d8 <bno055_writeData+0x1cc>)
 8003562:	f00a fdc3 	bl	800e0ec <puts>
 8003566:	e010      	b.n	800358a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_TIMEOUT) {
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	2ba0      	cmp	r3, #160	; 0xa0
 800356c:	d103      	bne.n	8003576 <bno055_writeData+0x16a>
		printf("HAL_I2C_STATE_TIMEOUT\r\n");
 800356e:	481b      	ldr	r0, [pc, #108]	; (80035dc <bno055_writeData+0x1d0>)
 8003570:	f00a fdbc 	bl	800e0ec <puts>
 8003574:	e009      	b.n	800358a <bno055_writeData+0x17e>
	} else if (state == HAL_I2C_STATE_ERROR) {
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	2be0      	cmp	r3, #224	; 0xe0
 800357a:	d106      	bne.n	800358a <bno055_writeData+0x17e>
		printf("HAL_I2C_STATE_ERROR\r\n");
 800357c:	4818      	ldr	r0, [pc, #96]	; (80035e0 <bno055_writeData+0x1d4>)
 800357e:	f00a fdb5 	bl	800e0ec <puts>
 8003582:	e002      	b.n	800358a <bno055_writeData+0x17e>
		return;
 8003584:	bf00      	nop
 8003586:	e000      	b.n	800358a <bno055_writeData+0x17e>
		return;
 8003588:	bf00      	nop
	}
	// while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
	// return;
}
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	200003e4 	.word	0x200003e4
 8003594:	0801132c 	.word	0x0801132c
 8003598:	08011350 	.word	0x08011350
 800359c:	08011378 	.word	0x08011378
 80035a0:	0801139c 	.word	0x0801139c
 80035a4:	080113b4 	.word	0x080113b4
 80035a8:	080113c8 	.word	0x080113c8
 80035ac:	080113dc 	.word	0x080113dc
 80035b0:	080113f0 	.word	0x080113f0
 80035b4:	08011404 	.word	0x08011404
 80035b8:	08011418 	.word	0x08011418
 80035bc:	08011430 	.word	0x08011430
 80035c0:	08011448 	.word	0x08011448
 80035c4:	0801145c 	.word	0x0801145c
 80035c8:	08011474 	.word	0x08011474
 80035cc:	0801148c 	.word	0x0801148c
 80035d0:	080114a4 	.word	0x080114a4
 80035d4:	080114c4 	.word	0x080114c4
 80035d8:	080114e4 	.word	0x080114e4
 80035dc:	080114fc 	.word	0x080114fc
 80035e0:	08011514 	.word	0x08011514

080035e4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	4603      	mov	r3, r0
 80035ec:	6039      	str	r1, [r7, #0]
 80035ee:	71fb      	strb	r3, [r7, #7]
 80035f0:	4613      	mov	r3, r2
 80035f2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <bno055_readData+0x40>)
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	1dfa      	adds	r2, r7, #7
 80035fa:	2364      	movs	r3, #100	; 0x64
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	2301      	movs	r3, #1
 8003600:	2150      	movs	r1, #80	; 0x50
 8003602:	f003 fe47 	bl	8007294 <HAL_I2C_Master_Transmit>
			100);
	HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8003606:	4b07      	ldr	r3, [pc, #28]	; (8003624 <bno055_readData+0x40>)
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	79bb      	ldrb	r3, [r7, #6]
 800360c:	b29b      	uxth	r3, r3
 800360e:	2264      	movs	r2, #100	; 0x64
 8003610:	9200      	str	r2, [sp, #0]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	2150      	movs	r1, #80	; 0x50
 8003616:	f003 ff3b 	bl	8007490 <HAL_I2C_Master_Receive>
			100);
	// HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
	// I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	200003e4 	.word	0x200003e4

08003628 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4a07      	ldr	r2, [pc, #28]	; (8003654 <vApplicationGetIdleTaskMemory+0x2c>)
 8003638:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	4a06      	ldr	r2, [pc, #24]	; (8003658 <vApplicationGetIdleTaskMemory+0x30>)
 800363e:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2280      	movs	r2, #128	; 0x80
 8003644:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8003646:	bf00      	nop
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	2000058c 	.word	0x2000058c
 8003658:	2000062c 	.word	0x2000062c

0800365c <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 800365c:	b5b0      	push	{r4, r5, r7, lr}
 800365e:	b0aa      	sub	sp, #168	; 0xa8
 8003660:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of sendDataTask */
	osThreadDef(sendDataTask, StartSendDataTask, osPriorityNormal, 0, 128);
 8003662:	4b3a      	ldr	r3, [pc, #232]	; (800374c <MX_FREERTOS_Init+0xf0>)
 8003664:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8003668:	461d      	mov	r5, r3
 800366a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800366c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800366e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003672:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	sendDataTaskHandle = osThreadCreate(osThread(sendDataTask), NULL);
 8003676:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800367a:	2100      	movs	r1, #0
 800367c:	4618      	mov	r0, r3
 800367e:	f008 fca6 	bl	800bfce <osThreadCreate>
 8003682:	4603      	mov	r3, r0
 8003684:	4a32      	ldr	r2, [pc, #200]	; (8003750 <MX_FREERTOS_Init+0xf4>)
 8003686:	6013      	str	r3, [r2, #0]

	/* definition and creation of barometerTask */
	osThreadDef(barometerTask, startBarometerTask, osPriorityIdle, 0, 128);
 8003688:	4b32      	ldr	r3, [pc, #200]	; (8003754 <MX_FREERTOS_Init+0xf8>)
 800368a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800368e:	461d      	mov	r5, r3
 8003690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003694:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003698:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	barometerTaskHandle = osThreadCreate(osThread(barometerTask), NULL);
 800369c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036a0:	2100      	movs	r1, #0
 80036a2:	4618      	mov	r0, r3
 80036a4:	f008 fc93 	bl	800bfce <osThreadCreate>
 80036a8:	4603      	mov	r3, r0
 80036aa:	4a2b      	ldr	r2, [pc, #172]	; (8003758 <MX_FREERTOS_Init+0xfc>)
 80036ac:	6013      	str	r3, [r2, #0]

	/* definition and creation of escTask */
	osThreadDef(escTask, startEscTask, osPriorityIdle, 0, 128);
 80036ae:	4b2b      	ldr	r3, [pc, #172]	; (800375c <MX_FREERTOS_Init+0x100>)
 80036b0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80036b4:	461d      	mov	r5, r3
 80036b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80036be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	escTaskHandle = osThreadCreate(osThread(escTask), NULL);
 80036c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f008 fc80 	bl	800bfce <osThreadCreate>
 80036ce:	4603      	mov	r3, r0
 80036d0:	4a23      	ldr	r2, [pc, #140]	; (8003760 <MX_FREERTOS_Init+0x104>)
 80036d2:	6013      	str	r3, [r2, #0]

	/* definition and creation of imuTask */
	osThreadDef(imuTask, StartImuTask, osPriorityIdle, 0, 128);
 80036d4:	4b23      	ldr	r3, [pc, #140]	; (8003764 <MX_FREERTOS_Init+0x108>)
 80036d6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80036da:	461d      	mov	r5, r3
 80036dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80036e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	imuTaskHandle = osThreadCreate(osThread(imuTask), NULL);
 80036e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80036ec:	2100      	movs	r1, #0
 80036ee:	4618      	mov	r0, r3
 80036f0:	f008 fc6d 	bl	800bfce <osThreadCreate>
 80036f4:	4603      	mov	r3, r0
 80036f6:	4a1c      	ldr	r2, [pc, #112]	; (8003768 <MX_FREERTOS_Init+0x10c>)
 80036f8:	6013      	str	r3, [r2, #0]

	/* definition and creation of batteryTask */
	osThreadDef(batteryTask, StartBatteryTask, osPriorityIdle, 0, 128);
 80036fa:	4b1c      	ldr	r3, [pc, #112]	; (800376c <MX_FREERTOS_Init+0x110>)
 80036fc:	f107 041c 	add.w	r4, r7, #28
 8003700:	461d      	mov	r5, r3
 8003702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003706:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800370a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	batteryTaskHandle = osThreadCreate(osThread(batteryTask), NULL);
 800370e:	f107 031c 	add.w	r3, r7, #28
 8003712:	2100      	movs	r1, #0
 8003714:	4618      	mov	r0, r3
 8003716:	f008 fc5a 	bl	800bfce <osThreadCreate>
 800371a:	4603      	mov	r3, r0
 800371c:	4a14      	ldr	r2, [pc, #80]	; (8003770 <MX_FREERTOS_Init+0x114>)
 800371e:	6013      	str	r3, [r2, #0]

	/* definition and creation of gpsTask */
	osThreadDef(gpsTask, StartGPSTask, osPriorityIdle, 0, 128);
 8003720:	4b14      	ldr	r3, [pc, #80]	; (8003774 <MX_FREERTOS_Init+0x118>)
 8003722:	463c      	mov	r4, r7
 8003724:	461d      	mov	r5, r3
 8003726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800372a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800372e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	gpsTaskHandle = osThreadCreate(osThread(gpsTask), NULL);
 8003732:	463b      	mov	r3, r7
 8003734:	2100      	movs	r1, #0
 8003736:	4618      	mov	r0, r3
 8003738:	f008 fc49 	bl	800bfce <osThreadCreate>
 800373c:	4603      	mov	r3, r0
 800373e:	4a0e      	ldr	r2, [pc, #56]	; (8003778 <MX_FREERTOS_Init+0x11c>)
 8003740:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 8003742:	bf00      	nop
 8003744:	37a8      	adds	r7, #168	; 0xa8
 8003746:	46bd      	mov	sp, r7
 8003748:	bdb0      	pop	{r4, r5, r7, pc}
 800374a:	bf00      	nop
 800374c:	0801153c 	.word	0x0801153c
 8003750:	20000574 	.word	0x20000574
 8003754:	08011568 	.word	0x08011568
 8003758:	20000578 	.word	0x20000578
 800375c:	0801158c 	.word	0x0801158c
 8003760:	2000057c 	.word	0x2000057c
 8003764:	080115b0 	.word	0x080115b0
 8003768:	20000580 	.word	0x20000580
 800376c:	080115d8 	.word	0x080115d8
 8003770:	20000584 	.word	0x20000584
 8003774:	080115fc 	.word	0x080115fc
 8003778:	20000588 	.word	0x20000588

0800377c <StartSendDataTask>:
 * @brief Function implementing the sendDataTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSendDataTask */
void StartSendDataTask(void const *argument) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
		 printf("\n\n");
		 if(failsafe.flag == true){
		 printf("FAILSAFE IS ACTIVATED!\n");
		 }*/

		osDelay(SAMPLE_TIME_TX);
 8003784:	20c8      	movs	r0, #200	; 0xc8
 8003786:	f008 fc6e 	bl	800c066 <osDelay>
 800378a:	e7fb      	b.n	8003784 <StartSendDataTask+0x8>
 800378c:	0000      	movs	r0, r0
	...

08003790 <startBarometerTask>:
 * @brief Function implementing the barometerTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startBarometerTask */
void startBarometerTask(void const *argument) {
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af02      	add	r7, sp, #8
 8003796:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startBarometerTask */
	BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8003798:	2304      	movs	r3, #4
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	2300      	movs	r3, #0
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	2303      	movs	r3, #3
 80037a2:	2201      	movs	r2, #1
 80037a4:	2105      	movs	r1, #5
 80037a6:	2002      	movs	r0, #2
 80037a8:	f7fd fcfe 	bl	80011a8 <BME280_Config>
	BME280_Measure();
 80037ac:	f7fe f996 	bl	8001adc <BME280_Measure>
	bme280.initialAltitude = 44330
			* (1
					- (pow(((float) bme280.pressure / (float) atmPress),
 80037b0:	4b39      	ldr	r3, [pc, #228]	; (8003898 <startBarometerTask+0x108>)
 80037b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80037b6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800389c <startBarometerTask+0x10c>
 80037ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80037be:	ee16 0a90 	vmov	r0, s13
 80037c2:	f7fc fec1 	bl	8000548 <__aeabi_f2d>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8003888 <startBarometerTask+0xf8>
 80037ce:	ec43 2b10 	vmov	d0, r2, r3
 80037d2:	f00c fe0d 	bl	80103f0 <pow>
 80037d6:	ec53 2b10 	vmov	r2, r3, d0
 80037da:	f04f 0000 	mov.w	r0, #0
 80037de:	4930      	ldr	r1, [pc, #192]	; (80038a0 <startBarometerTask+0x110>)
 80037e0:	f7fc fd52 	bl	8000288 <__aeabi_dsub>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
			* (1
 80037ec:	a328      	add	r3, pc, #160	; (adr r3, 8003890 <startBarometerTask+0x100>)
 80037ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f2:	f7fc ff01 	bl	80005f8 <__aeabi_dmul>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4610      	mov	r0, r2
 80037fc:	4619      	mov	r1, r3
 80037fe:	f7fd f9d3 	bl	8000ba8 <__aeabi_d2f>
 8003802:	4603      	mov	r3, r0
	bme280.initialAltitude = 44330
 8003804:	4a24      	ldr	r2, [pc, #144]	; (8003898 <startBarometerTask+0x108>)
 8003806:	6113      	str	r3, [r2, #16]
							0.19029495718)));
	/* Infinite loop */
	for (;;) {
		BME280_Measure();
 8003808:	f7fe f968 	bl	8001adc <BME280_Measure>
		bme280.altitude = 44330
				* (1
						- (pow(((float) bme280.pressure / (float) atmPress),
 800380c:	4b22      	ldr	r3, [pc, #136]	; (8003898 <startBarometerTask+0x108>)
 800380e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003812:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800389c <startBarometerTask+0x10c>
 8003816:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800381a:	ee16 0a90 	vmov	r0, s13
 800381e:	f7fc fe93 	bl	8000548 <__aeabi_f2d>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8003888 <startBarometerTask+0xf8>
 800382a:	ec43 2b10 	vmov	d0, r2, r3
 800382e:	f00c fddf 	bl	80103f0 <pow>
 8003832:	ec53 2b10 	vmov	r2, r3, d0
 8003836:	f04f 0000 	mov.w	r0, #0
 800383a:	4919      	ldr	r1, [pc, #100]	; (80038a0 <startBarometerTask+0x110>)
 800383c:	f7fc fd24 	bl	8000288 <__aeabi_dsub>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4610      	mov	r0, r2
 8003846:	4619      	mov	r1, r3
				* (1
 8003848:	a311      	add	r3, pc, #68	; (adr r3, 8003890 <startBarometerTask+0x100>)
 800384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384e:	f7fc fed3 	bl	80005f8 <__aeabi_dmul>
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	4610      	mov	r0, r2
 8003858:	4619      	mov	r1, r3
 800385a:	f7fd f9a5 	bl	8000ba8 <__aeabi_d2f>
 800385e:	4603      	mov	r3, r0
		bme280.altitude = 44330
 8003860:	4a0d      	ldr	r2, [pc, #52]	; (8003898 <startBarometerTask+0x108>)
 8003862:	60d3      	str	r3, [r2, #12]
								0.19029495718)));
		bme280.finalAltitude = bme280.altitude - bme280.initialAltitude;
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <startBarometerTask+0x108>)
 8003866:	ed93 7a03 	vldr	s14, [r3, #12]
 800386a:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <startBarometerTask+0x108>)
 800386c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003874:	4b08      	ldr	r3, [pc, #32]	; (8003898 <startBarometerTask+0x108>)
 8003876:	edc3 7a05 	vstr	s15, [r3, #20]
		osDelay(SAMPLE_TIME_BAROMETER);
 800387a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800387e:	f008 fbf2 	bl	800c066 <osDelay>
		BME280_Measure();
 8003882:	e7c1      	b.n	8003808 <startBarometerTask+0x78>
 8003884:	f3af 8000 	nop.w
 8003888:	ccd745e4 	.word	0xccd745e4
 800388c:	3fc85b95 	.word	0x3fc85b95
 8003890:	00000000 	.word	0x00000000
 8003894:	40e5a540 	.word	0x40e5a540
 8003898:	20000494 	.word	0x20000494
 800389c:	47c5e680 	.word	0x47c5e680
 80038a0:	3ff00000 	.word	0x3ff00000

080038a4 <startEscTask>:
 * @brief Function implementing the escTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startEscTask */
void startEscTask(void const *argument) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startEscTask */
	//init_esc();
	/* Infinite loop */
	for (;;) {
		if (AUTONOMOUS_MODE == drive_mode) {
 80038ac:	4b71      	ldr	r3, [pc, #452]	; (8003a74 <startEscTask+0x1d0>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	f040 81f4 	bne.w	8003c9e <startEscTask+0x3fa>

			if (uartBuffer.movementData.takeoff == TRUE) { //OTONOM TAKE OFF
 80038b6:	4b70      	ldr	r3, [pc, #448]	; (8003a78 <startEscTask+0x1d4>)
 80038b8:	789b      	ldrb	r3, [r3, #2]
 80038ba:	2b31      	cmp	r3, #49	; 0x31
 80038bc:	f040 80e8 	bne.w	8003a90 <startEscTask+0x1ec>
				osDelay(TAKEOFF_STEP_TIME);
 80038c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038c4:	f008 fbcf 	bl	800c066 <osDelay>
				osDelay(TAKEOFF_STEP_TIME);
 80038c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038cc:	f008 fbcb 	bl	800c066 <osDelay>

				set_pwm(PID_ROLL, PID_PITCH, PID_YAW, 1300, battery, esc);
 80038d0:	4b6a      	ldr	r3, [pc, #424]	; (8003a7c <startEscTask+0x1d8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	ee07 3a90 	vmov	s15, r3
 80038d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038dc:	4b68      	ldr	r3, [pc, #416]	; (8003a80 <startEscTask+0x1dc>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	ee07 3a10 	vmov	s14, r3
 80038e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80038e8:	4b66      	ldr	r3, [pc, #408]	; (8003a84 <startEscTask+0x1e0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	ee06 3a90 	vmov	s13, r3
 80038f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80038f4:	4b64      	ldr	r3, [pc, #400]	; (8003a88 <startEscTask+0x1e4>)
 80038f6:	edd3 4a00 	vldr	s9, [r3]
 80038fa:	ed93 5a01 	vldr	s10, [r3, #4]
 80038fe:	edd3 5a02 	vldr	s11, [r3, #8]
 8003902:	ed93 6a03 	vldr	s12, [r3, #12]
 8003906:	4b61      	ldr	r3, [pc, #388]	; (8003a8c <startEscTask+0x1e8>)
 8003908:	eef0 1a64 	vmov.f32	s3, s9
 800390c:	eeb0 2a45 	vmov.f32	s4, s10
 8003910:	eef0 2a65 	vmov.f32	s5, s11
 8003914:	eeb0 3a46 	vmov.f32	s6, s12
 8003918:	e893 0006 	ldmia.w	r3, {r1, r2}
 800391c:	f240 5014 	movw	r0, #1300	; 0x514
 8003920:	eeb0 1a66 	vmov.f32	s2, s13
 8003924:	eef0 0a47 	vmov.f32	s1, s14
 8003928:	eeb0 0a67 	vmov.f32	s0, s15
 800392c:	f7ff fbee 	bl	800310c <set_pwm>
				osDelay(TAKEOFF_STEP_TIME);
 8003930:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003934:	f008 fb97 	bl	800c066 <osDelay>

				set_pwm(PID_ROLL, PID_PITCH, PID_YAW, 1500, battery, esc);
 8003938:	4b50      	ldr	r3, [pc, #320]	; (8003a7c <startEscTask+0x1d8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	ee07 3a90 	vmov	s15, r3
 8003940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003944:	4b4e      	ldr	r3, [pc, #312]	; (8003a80 <startEscTask+0x1dc>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	ee07 3a10 	vmov	s14, r3
 800394c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003950:	4b4c      	ldr	r3, [pc, #304]	; (8003a84 <startEscTask+0x1e0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	ee06 3a90 	vmov	s13, r3
 8003958:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800395c:	4b4a      	ldr	r3, [pc, #296]	; (8003a88 <startEscTask+0x1e4>)
 800395e:	edd3 4a00 	vldr	s9, [r3]
 8003962:	ed93 5a01 	vldr	s10, [r3, #4]
 8003966:	edd3 5a02 	vldr	s11, [r3, #8]
 800396a:	ed93 6a03 	vldr	s12, [r3, #12]
 800396e:	4b47      	ldr	r3, [pc, #284]	; (8003a8c <startEscTask+0x1e8>)
 8003970:	eef0 1a64 	vmov.f32	s3, s9
 8003974:	eeb0 2a45 	vmov.f32	s4, s10
 8003978:	eef0 2a65 	vmov.f32	s5, s11
 800397c:	eeb0 3a46 	vmov.f32	s6, s12
 8003980:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003984:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003988:	eeb0 1a66 	vmov.f32	s2, s13
 800398c:	eef0 0a47 	vmov.f32	s1, s14
 8003990:	eeb0 0a67 	vmov.f32	s0, s15
 8003994:	f7ff fbba 	bl	800310c <set_pwm>
				osDelay(TAKEOFF_STEP_TIME);
 8003998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800399c:	f008 fb63 	bl	800c066 <osDelay>

				set_pwm(PID_ROLL, PID_PITCH, PID_YAW, 1700, battery, esc);
 80039a0:	4b36      	ldr	r3, [pc, #216]	; (8003a7c <startEscTask+0x1d8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	ee07 3a90 	vmov	s15, r3
 80039a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ac:	4b34      	ldr	r3, [pc, #208]	; (8003a80 <startEscTask+0x1dc>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	ee07 3a10 	vmov	s14, r3
 80039b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80039b8:	4b32      	ldr	r3, [pc, #200]	; (8003a84 <startEscTask+0x1e0>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	ee06 3a90 	vmov	s13, r3
 80039c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80039c4:	4b30      	ldr	r3, [pc, #192]	; (8003a88 <startEscTask+0x1e4>)
 80039c6:	edd3 4a00 	vldr	s9, [r3]
 80039ca:	ed93 5a01 	vldr	s10, [r3, #4]
 80039ce:	edd3 5a02 	vldr	s11, [r3, #8]
 80039d2:	ed93 6a03 	vldr	s12, [r3, #12]
 80039d6:	4b2d      	ldr	r3, [pc, #180]	; (8003a8c <startEscTask+0x1e8>)
 80039d8:	eef0 1a64 	vmov.f32	s3, s9
 80039dc:	eeb0 2a45 	vmov.f32	s4, s10
 80039e0:	eef0 2a65 	vmov.f32	s5, s11
 80039e4:	eeb0 3a46 	vmov.f32	s6, s12
 80039e8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80039ec:	f240 60a4 	movw	r0, #1700	; 0x6a4
 80039f0:	eeb0 1a66 	vmov.f32	s2, s13
 80039f4:	eef0 0a47 	vmov.f32	s1, s14
 80039f8:	eeb0 0a67 	vmov.f32	s0, s15
 80039fc:	f7ff fb86 	bl	800310c <set_pwm>
				osDelay(TAKEOFF_STEP_TIME);
 8003a00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a04:	f008 fb2f 	bl	800c066 <osDelay>

				set_pwm(PID_ROLL, PID_PITCH, PID_YAW, 1800, battery, esc);
 8003a08:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <startEscTask+0x1d8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	ee07 3a90 	vmov	s15, r3
 8003a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a14:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <startEscTask+0x1dc>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	ee07 3a10 	vmov	s14, r3
 8003a1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003a20:	4b18      	ldr	r3, [pc, #96]	; (8003a84 <startEscTask+0x1e0>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	ee06 3a90 	vmov	s13, r3
 8003a28:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003a2c:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <startEscTask+0x1e4>)
 8003a2e:	edd3 4a00 	vldr	s9, [r3]
 8003a32:	ed93 5a01 	vldr	s10, [r3, #4]
 8003a36:	edd3 5a02 	vldr	s11, [r3, #8]
 8003a3a:	ed93 6a03 	vldr	s12, [r3, #12]
 8003a3e:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <startEscTask+0x1e8>)
 8003a40:	eef0 1a64 	vmov.f32	s3, s9
 8003a44:	eeb0 2a45 	vmov.f32	s4, s10
 8003a48:	eef0 2a65 	vmov.f32	s5, s11
 8003a4c:	eeb0 3a46 	vmov.f32	s6, s12
 8003a50:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003a54:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8003a58:	eeb0 1a66 	vmov.f32	s2, s13
 8003a5c:	eef0 0a47 	vmov.f32	s1, s14
 8003a60:	eeb0 0a67 	vmov.f32	s0, s15
 8003a64:	f7ff fb52 	bl	800310c <set_pwm>
				osDelay(TAKEOFF_STEP_TIME);
 8003a68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a6c:	f008 fafb 	bl	800c066 <osDelay>
 8003a70:	e160      	b.n	8003d34 <startEscTask+0x490>
 8003a72:	bf00      	nop
 8003a74:	20000478 	.word	0x20000478
 8003a78:	200008d4 	.word	0x200008d4
 8003a7c:	2000046c 	.word	0x2000046c
 8003a80:	20000470 	.word	0x20000470
 8003a84:	20000474 	.word	0x20000474
 8003a88:	2000047c 	.word	0x2000047c
 8003a8c:	2000048c 	.word	0x2000048c

			} else if (uartBuffer.movementData.landing == TRUE) { //OTONOM LANDING
 8003a90:	4bab      	ldr	r3, [pc, #684]	; (8003d40 <startEscTask+0x49c>)
 8003a92:	785b      	ldrb	r3, [r3, #1]
 8003a94:	2b31      	cmp	r3, #49	; 0x31
 8003a96:	f040 80d1 	bne.w	8003c3c <startEscTask+0x398>

				set_pwm(PID_ROLL, PID_PITCH, PID_YAW, 1300, battery, esc);
 8003a9a:	4baa      	ldr	r3, [pc, #680]	; (8003d44 <startEscTask+0x4a0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aa6:	4ba8      	ldr	r3, [pc, #672]	; (8003d48 <startEscTask+0x4a4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	ee07 3a10 	vmov	s14, r3
 8003aae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003ab2:	4ba6      	ldr	r3, [pc, #664]	; (8003d4c <startEscTask+0x4a8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	ee06 3a90 	vmov	s13, r3
 8003aba:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003abe:	4ba4      	ldr	r3, [pc, #656]	; (8003d50 <startEscTask+0x4ac>)
 8003ac0:	edd3 4a00 	vldr	s9, [r3]
 8003ac4:	ed93 5a01 	vldr	s10, [r3, #4]
 8003ac8:	edd3 5a02 	vldr	s11, [r3, #8]
 8003acc:	ed93 6a03 	vldr	s12, [r3, #12]
 8003ad0:	4ba0      	ldr	r3, [pc, #640]	; (8003d54 <startEscTask+0x4b0>)
 8003ad2:	eef0 1a64 	vmov.f32	s3, s9
 8003ad6:	eeb0 2a45 	vmov.f32	s4, s10
 8003ada:	eef0 2a65 	vmov.f32	s5, s11
 8003ade:	eeb0 3a46 	vmov.f32	s6, s12
 8003ae2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003ae6:	f240 5014 	movw	r0, #1300	; 0x514
 8003aea:	eeb0 1a66 	vmov.f32	s2, s13
 8003aee:	eef0 0a47 	vmov.f32	s1, s14
 8003af2:	eeb0 0a67 	vmov.f32	s0, s15
 8003af6:	f7ff fb09 	bl	800310c <set_pwm>
				osDelay(TAKEOFF_STEP_TIME);
 8003afa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003afe:	f008 fab2 	bl	800c066 <osDelay>

				set_pwm(PID_ROLL, PID_PITCH, PID_YAW, 1500, battery, esc);
 8003b02:	4b90      	ldr	r3, [pc, #576]	; (8003d44 <startEscTask+0x4a0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b0e:	4b8e      	ldr	r3, [pc, #568]	; (8003d48 <startEscTask+0x4a4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	ee07 3a10 	vmov	s14, r3
 8003b16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003b1a:	4b8c      	ldr	r3, [pc, #560]	; (8003d4c <startEscTask+0x4a8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	ee06 3a90 	vmov	s13, r3
 8003b22:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003b26:	4b8a      	ldr	r3, [pc, #552]	; (8003d50 <startEscTask+0x4ac>)
 8003b28:	edd3 4a00 	vldr	s9, [r3]
 8003b2c:	ed93 5a01 	vldr	s10, [r3, #4]
 8003b30:	edd3 5a02 	vldr	s11, [r3, #8]
 8003b34:	ed93 6a03 	vldr	s12, [r3, #12]
 8003b38:	4b86      	ldr	r3, [pc, #536]	; (8003d54 <startEscTask+0x4b0>)
 8003b3a:	eef0 1a64 	vmov.f32	s3, s9
 8003b3e:	eeb0 2a45 	vmov.f32	s4, s10
 8003b42:	eef0 2a65 	vmov.f32	s5, s11
 8003b46:	eeb0 3a46 	vmov.f32	s6, s12
 8003b4a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003b4e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003b52:	eeb0 1a66 	vmov.f32	s2, s13
 8003b56:	eef0 0a47 	vmov.f32	s1, s14
 8003b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b5e:	f7ff fad5 	bl	800310c <set_pwm>
				osDelay(TAKEOFF_STEP_TIME);
 8003b62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b66:	f008 fa7e 	bl	800c066 <osDelay>

				set_pwm(PID_ROLL, PID_PITCH, PID_YAW, 1700, battery, esc);
 8003b6a:	4b76      	ldr	r3, [pc, #472]	; (8003d44 <startEscTask+0x4a0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	ee07 3a90 	vmov	s15, r3
 8003b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b76:	4b74      	ldr	r3, [pc, #464]	; (8003d48 <startEscTask+0x4a4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	ee07 3a10 	vmov	s14, r3
 8003b7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003b82:	4b72      	ldr	r3, [pc, #456]	; (8003d4c <startEscTask+0x4a8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	ee06 3a90 	vmov	s13, r3
 8003b8a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003b8e:	4b70      	ldr	r3, [pc, #448]	; (8003d50 <startEscTask+0x4ac>)
 8003b90:	edd3 4a00 	vldr	s9, [r3]
 8003b94:	ed93 5a01 	vldr	s10, [r3, #4]
 8003b98:	edd3 5a02 	vldr	s11, [r3, #8]
 8003b9c:	ed93 6a03 	vldr	s12, [r3, #12]
 8003ba0:	4b6c      	ldr	r3, [pc, #432]	; (8003d54 <startEscTask+0x4b0>)
 8003ba2:	eef0 1a64 	vmov.f32	s3, s9
 8003ba6:	eeb0 2a45 	vmov.f32	s4, s10
 8003baa:	eef0 2a65 	vmov.f32	s5, s11
 8003bae:	eeb0 3a46 	vmov.f32	s6, s12
 8003bb2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003bb6:	f240 60a4 	movw	r0, #1700	; 0x6a4
 8003bba:	eeb0 1a66 	vmov.f32	s2, s13
 8003bbe:	eef0 0a47 	vmov.f32	s1, s14
 8003bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc6:	f7ff faa1 	bl	800310c <set_pwm>
				osDelay(TAKEOFF_STEP_TIME);
 8003bca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bce:	f008 fa4a 	bl	800c066 <osDelay>

				set_pwm(PID_ROLL, PID_PITCH, PID_YAW, 1800, battery, esc);
 8003bd2:	4b5c      	ldr	r3, [pc, #368]	; (8003d44 <startEscTask+0x4a0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bde:	4b5a      	ldr	r3, [pc, #360]	; (8003d48 <startEscTask+0x4a4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	ee07 3a10 	vmov	s14, r3
 8003be6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003bea:	4b58      	ldr	r3, [pc, #352]	; (8003d4c <startEscTask+0x4a8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	ee06 3a90 	vmov	s13, r3
 8003bf2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003bf6:	4b56      	ldr	r3, [pc, #344]	; (8003d50 <startEscTask+0x4ac>)
 8003bf8:	edd3 4a00 	vldr	s9, [r3]
 8003bfc:	ed93 5a01 	vldr	s10, [r3, #4]
 8003c00:	edd3 5a02 	vldr	s11, [r3, #8]
 8003c04:	ed93 6a03 	vldr	s12, [r3, #12]
 8003c08:	4b52      	ldr	r3, [pc, #328]	; (8003d54 <startEscTask+0x4b0>)
 8003c0a:	eef0 1a64 	vmov.f32	s3, s9
 8003c0e:	eeb0 2a45 	vmov.f32	s4, s10
 8003c12:	eef0 2a65 	vmov.f32	s5, s11
 8003c16:	eeb0 3a46 	vmov.f32	s6, s12
 8003c1a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003c1e:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8003c22:	eeb0 1a66 	vmov.f32	s2, s13
 8003c26:	eef0 0a47 	vmov.f32	s1, s14
 8003c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c2e:	f7ff fa6d 	bl	800310c <set_pwm>
				osDelay(TAKEOFF_STEP_TIME);
 8003c32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c36:	f008 fa16 	bl	800c066 <osDelay>
 8003c3a:	e07b      	b.n	8003d34 <startEscTask+0x490>

			} else {
				set_pwm(PID_ROLL, PID_PITCH, PID_YAW, PWM_CRUISE, battery, esc);
 8003c3c:	4b41      	ldr	r3, [pc, #260]	; (8003d44 <startEscTask+0x4a0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	ee07 3a90 	vmov	s15, r3
 8003c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c48:	4b3f      	ldr	r3, [pc, #252]	; (8003d48 <startEscTask+0x4a4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	ee07 3a10 	vmov	s14, r3
 8003c50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003c54:	4b3d      	ldr	r3, [pc, #244]	; (8003d4c <startEscTask+0x4a8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	ee06 3a90 	vmov	s13, r3
 8003c5c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003c60:	4b3b      	ldr	r3, [pc, #236]	; (8003d50 <startEscTask+0x4ac>)
 8003c62:	edd3 4a00 	vldr	s9, [r3]
 8003c66:	ed93 5a01 	vldr	s10, [r3, #4]
 8003c6a:	edd3 5a02 	vldr	s11, [r3, #8]
 8003c6e:	ed93 6a03 	vldr	s12, [r3, #12]
 8003c72:	4b38      	ldr	r3, [pc, #224]	; (8003d54 <startEscTask+0x4b0>)
 8003c74:	eef0 1a64 	vmov.f32	s3, s9
 8003c78:	eeb0 2a45 	vmov.f32	s4, s10
 8003c7c:	eef0 2a65 	vmov.f32	s5, s11
 8003c80:	eeb0 3a46 	vmov.f32	s6, s12
 8003c84:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003c88:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8003c8c:	eeb0 1a66 	vmov.f32	s2, s13
 8003c90:	eef0 0a47 	vmov.f32	s1, s14
 8003c94:	eeb0 0a67 	vmov.f32	s0, s15
 8003c98:	f7ff fa38 	bl	800310c <set_pwm>
 8003c9c:	e04a      	b.n	8003d34 <startEscTask+0x490>
			}
		}

		else if (SAFETY_MODE == drive_mode) { //safe modda tüm motorları durdur
 8003c9e:	4b2e      	ldr	r3, [pc, #184]	; (8003d58 <startEscTask+0x4b4>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d110      	bne.n	8003cc8 <startEscTask+0x424>
			drive_motor_1(MIN_PWM_OUTPUT);
 8003ca6:	f240 404c 	movw	r0, #1100	; 0x44c
 8003caa:	f7ff f9ef 	bl	800308c <drive_motor_1>
			drive_motor_2(MIN_PWM_OUTPUT);
 8003cae:	f240 404c 	movw	r0, #1100	; 0x44c
 8003cb2:	f7ff f9fb 	bl	80030ac <drive_motor_2>
			drive_motor_3(MIN_PWM_OUTPUT);
 8003cb6:	f240 404c 	movw	r0, #1100	; 0x44c
 8003cba:	f7ff fa07 	bl	80030cc <drive_motor_3>
			drive_motor_4(MIN_PWM_OUTPUT);
 8003cbe:	f240 404c 	movw	r0, #1100	; 0x44c
 8003cc2:	f7ff fa13 	bl	80030ec <drive_motor_4>
 8003cc6:	e035      	b.n	8003d34 <startEscTask+0x490>

		}

		else { 	//aksi halde manuel sürüş
			set_pwm(PID_ROLL, PID_PITCH, PID_YAW, rc_throttle.dutyCycle,
 8003cc8:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <startEscTask+0x4a0>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	ee07 3a90 	vmov	s15, r3
 8003cd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cd4:	4b1c      	ldr	r3, [pc, #112]	; (8003d48 <startEscTask+0x4a4>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	ee07 3a90 	vmov	s15, r3
 8003cdc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <startEscTask+0x4a8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	ee07 3a90 	vmov	s15, r3
 8003ce8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003cec:	4b1b      	ldr	r3, [pc, #108]	; (8003d5c <startEscTask+0x4b8>)
 8003cee:	edd3 7a02 	vldr	s15, [r3, #8]
 8003cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cf6:	ee17 3a90 	vmov	r3, s15
 8003cfa:	b298      	uxth	r0, r3
 8003cfc:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <startEscTask+0x4ac>)
 8003cfe:	edd3 4a00 	vldr	s9, [r3]
 8003d02:	ed93 5a01 	vldr	s10, [r3, #4]
 8003d06:	edd3 5a02 	vldr	s11, [r3, #8]
 8003d0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d0e:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <startEscTask+0x4b0>)
 8003d10:	eef0 1a64 	vmov.f32	s3, s9
 8003d14:	eeb0 2a45 	vmov.f32	s4, s10
 8003d18:	eef0 2a65 	vmov.f32	s5, s11
 8003d1c:	eeb0 3a67 	vmov.f32	s6, s15
 8003d20:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003d24:	eeb0 1a46 	vmov.f32	s2, s12
 8003d28:	eef0 0a66 	vmov.f32	s1, s13
 8003d2c:	eeb0 0a47 	vmov.f32	s0, s14
 8003d30:	f7ff f9ec 	bl	800310c <set_pwm>
					battery, esc); //ch3 throttle
		}

		osDelay(SAMPLE_TIME_ESC);
 8003d34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d38:	f008 f995 	bl	800c066 <osDelay>
		if (AUTONOMOUS_MODE == drive_mode) {
 8003d3c:	e5b6      	b.n	80038ac <startEscTask+0x8>
 8003d3e:	bf00      	nop
 8003d40:	200008d4 	.word	0x200008d4
 8003d44:	2000046c 	.word	0x2000046c
 8003d48:	20000470 	.word	0x20000470
 8003d4c:	20000474 	.word	0x20000474
 8003d50:	2000047c 	.word	0x2000047c
 8003d54:	2000048c 	.word	0x2000048c
 8003d58:	20000478 	.word	0x20000478
 8003d5c:	2000090c 	.word	0x2000090c

08003d60 <StartImuTask>:
 * @brief Function implementing the imuTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartImuTask */
void StartImuTask(void const *argument) {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartImuTask */
	bno055_assignI2C(&hi2c3);
 8003d68:	4890      	ldr	r0, [pc, #576]	; (8003fac <StartImuTask+0x24c>)
 8003d6a:	f7ff fb33 	bl	80033d4 <bno055_assignI2C>
	bno055_setup();
 8003d6e:	f7fe ffdf 	bl	8002d30 <bno055_setup>
	bno055_setOperationModeNDOF();
 8003d72:	f7fe ffca 	bl	8002d0a <bno055_setOperationModeNDOF>

	PIDController_Init(&pitch_pid_t); //pid sıfırlama
 8003d76:	488e      	ldr	r0, [pc, #568]	; (8003fb0 <StartImuTask+0x250>)
 8003d78:	f7fe fd94 	bl	80028a4 <PIDController_Init>
	PIDController_Init(&roll_pid_t);
 8003d7c:	488d      	ldr	r0, [pc, #564]	; (8003fb4 <StartImuTask+0x254>)
 8003d7e:	f7fe fd91 	bl	80028a4 <PIDController_Init>

//pitch ve roll pid parametreleri x konfigurasyonunda aynı olabilir
	pitch_pid_t.Kp = PITCH_ROLL_KP;
 8003d82:	4b8b      	ldr	r3, [pc, #556]	; (8003fb0 <StartImuTask+0x250>)
 8003d84:	4a8c      	ldr	r2, [pc, #560]	; (8003fb8 <StartImuTask+0x258>)
 8003d86:	601a      	str	r2, [r3, #0]
	pitch_pid_t.Ki = PITCH_ROLL_KI;
 8003d88:	4b89      	ldr	r3, [pc, #548]	; (8003fb0 <StartImuTask+0x250>)
 8003d8a:	4a8c      	ldr	r2, [pc, #560]	; (8003fbc <StartImuTask+0x25c>)
 8003d8c:	605a      	str	r2, [r3, #4]
	pitch_pid_t.Kd = PITCH_ROLL_KD;
 8003d8e:	4b88      	ldr	r3, [pc, #544]	; (8003fb0 <StartImuTask+0x250>)
 8003d90:	4a8b      	ldr	r2, [pc, #556]	; (8003fc0 <StartImuTask+0x260>)
 8003d92:	609a      	str	r2, [r3, #8]

	pitch_pid_t.limMax = 450; //450;		//elde çalıştırınca buraları 0la
 8003d94:	4b86      	ldr	r3, [pc, #536]	; (8003fb0 <StartImuTask+0x250>)
 8003d96:	4a8b      	ldr	r2, [pc, #556]	; (8003fc4 <StartImuTask+0x264>)
 8003d98:	611a      	str	r2, [r3, #16]
	pitch_pid_t.limMin = -450; //-450;
 8003d9a:	4b85      	ldr	r3, [pc, #532]	; (8003fb0 <StartImuTask+0x250>)
 8003d9c:	4a8a      	ldr	r2, [pc, #552]	; (8003fc8 <StartImuTask+0x268>)
 8003d9e:	60da      	str	r2, [r3, #12]

	pitch_pid_t.limMaxInt = 10000;
 8003da0:	4b83      	ldr	r3, [pc, #524]	; (8003fb0 <StartImuTask+0x250>)
 8003da2:	4a8a      	ldr	r2, [pc, #552]	; (8003fcc <StartImuTask+0x26c>)
 8003da4:	619a      	str	r2, [r3, #24]
	pitch_pid_t.limMinInt = 0;
 8003da6:	4b82      	ldr	r3, [pc, #520]	; (8003fb0 <StartImuTask+0x250>)
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	615a      	str	r2, [r3, #20]

	roll_pid_t.limMax = 450; //450;
 8003dae:	4b81      	ldr	r3, [pc, #516]	; (8003fb4 <StartImuTask+0x254>)
 8003db0:	4a84      	ldr	r2, [pc, #528]	; (8003fc4 <StartImuTask+0x264>)
 8003db2:	611a      	str	r2, [r3, #16]
	roll_pid_t.limMin = -450; //-450;
 8003db4:	4b7f      	ldr	r3, [pc, #508]	; (8003fb4 <StartImuTask+0x254>)
 8003db6:	4a84      	ldr	r2, [pc, #528]	; (8003fc8 <StartImuTask+0x268>)
 8003db8:	60da      	str	r2, [r3, #12]

	roll_pid_t.limMaxInt = 10000;
 8003dba:	4b7e      	ldr	r3, [pc, #504]	; (8003fb4 <StartImuTask+0x254>)
 8003dbc:	4a83      	ldr	r2, [pc, #524]	; (8003fcc <StartImuTask+0x26c>)
 8003dbe:	619a      	str	r2, [r3, #24]
	roll_pid_t.limMinInt = 0;
 8003dc0:	4b7c      	ldr	r3, [pc, #496]	; (8003fb4 <StartImuTask+0x254>)
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	615a      	str	r2, [r3, #20]

	roll_pid_t.Kp = PITCH_ROLL_KP;
 8003dc8:	4b7a      	ldr	r3, [pc, #488]	; (8003fb4 <StartImuTask+0x254>)
 8003dca:	4a7b      	ldr	r2, [pc, #492]	; (8003fb8 <StartImuTask+0x258>)
 8003dcc:	601a      	str	r2, [r3, #0]
	roll_pid_t.Ki = PITCH_ROLL_KI;
 8003dce:	4b79      	ldr	r3, [pc, #484]	; (8003fb4 <StartImuTask+0x254>)
 8003dd0:	4a7a      	ldr	r2, [pc, #488]	; (8003fbc <StartImuTask+0x25c>)
 8003dd2:	605a      	str	r2, [r3, #4]
	roll_pid_t.Kd = PITCH_ROLL_KD;
 8003dd4:	4b77      	ldr	r3, [pc, #476]	; (8003fb4 <StartImuTask+0x254>)
 8003dd6:	4a7a      	ldr	r2, [pc, #488]	; (8003fc0 <StartImuTask+0x260>)
 8003dd8:	609a      	str	r2, [r3, #8]

	for (;;) {
		imu = bno055_getVectorEuler();
 8003dda:	f7ff f913 	bl	8003004 <bno055_getVectorEuler>
 8003dde:	eeb0 6a40 	vmov.f32	s12, s0
 8003de2:	eef0 6a60 	vmov.f32	s13, s1
 8003de6:	eeb0 7a41 	vmov.f32	s14, s2
 8003dea:	eef0 7a61 	vmov.f32	s15, s3
 8003dee:	4b78      	ldr	r3, [pc, #480]	; (8003fd0 <StartImuTask+0x270>)
 8003df0:	ed83 6a00 	vstr	s12, [r3]
 8003df4:	edc3 6a01 	vstr	s13, [r3, #4]
 8003df8:	ed83 7a02 	vstr	s14, [r3, #8]
 8003dfc:	edc3 7a03 	vstr	s15, [r3, #12]

		roll_pid_t.T = deltaT;
 8003e00:	4b74      	ldr	r3, [pc, #464]	; (8003fd4 <StartImuTask+0x274>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a6b      	ldr	r2, [pc, #428]	; (8003fb4 <StartImuTask+0x254>)
 8003e06:	61d3      	str	r3, [r2, #28]
		pitch_pid_t.T = deltaT;
 8003e08:	4b72      	ldr	r3, [pc, #456]	; (8003fd4 <StartImuTask+0x274>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a68      	ldr	r2, [pc, #416]	; (8003fb0 <StartImuTask+0x250>)
 8003e0e:	61d3      	str	r3, [r2, #28]

		__HAL_TIM_SET_COUNTER(&htim5, 0);
 8003e10:	4b71      	ldr	r3, [pc, #452]	; (8003fd8 <StartImuTask+0x278>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2200      	movs	r2, #0
 8003e16:	625a      	str	r2, [r3, #36]	; 0x24

		if (AUTONOMOUS_MODE == drive_mode) { //roll ve pitch pozitif veya negatif olmayabilir iflere girmez
 8003e18:	4b70      	ldr	r3, [pc, #448]	; (8003fdc <StartImuTask+0x27c>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	f040 8091 	bne.w	8003f44 <StartImuTask+0x1e4>

			//jetsondan gelen veriye göre wanted setpoint değerini burada güncelleyeceğiz
			//imuda x yaw y pitch z roll
			if (uartBuffer.movementData.pitchPositive == TRUE) {
 8003e22:	4b6f      	ldr	r3, [pc, #444]	; (8003fe0 <StartImuTask+0x280>)
 8003e24:	78db      	ldrb	r3, [r3, #3]
 8003e26:	2b31      	cmp	r3, #49	; 0x31
 8003e28:	d112      	bne.n	8003e50 <StartImuTask+0xf0>
				PID_PITCH = PIDController_Update(&pitch_pid_t, PWM_POS_PITCH,
 8003e2a:	4b69      	ldr	r3, [pc, #420]	; (8003fd0 <StartImuTask+0x270>)
 8003e2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e30:	eef0 0a67 	vmov.f32	s1, s15
 8003e34:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8003fe4 <StartImuTask+0x284>
 8003e38:	485d      	ldr	r0, [pc, #372]	; (8003fb0 <StartImuTask+0x250>)
 8003e3a:	f7fe fd59 	bl	80028f0 <PIDController_Update>
 8003e3e:	eef0 7a40 	vmov.f32	s15, s0
 8003e42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e46:	ee17 2a90 	vmov	r2, s15
 8003e4a:	4b67      	ldr	r3, [pc, #412]	; (8003fe8 <StartImuTask+0x288>)
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	e030      	b.n	8003eb2 <StartImuTask+0x152>
						imu.y);	//pitch +180 -180 aralığında

			} else if (uartBuffer.movementData.pitchNegative == TRUE) {
 8003e50:	4b63      	ldr	r3, [pc, #396]	; (8003fe0 <StartImuTask+0x280>)
 8003e52:	791b      	ldrb	r3, [r3, #4]
 8003e54:	2b31      	cmp	r3, #49	; 0x31
 8003e56:	d112      	bne.n	8003e7e <StartImuTask+0x11e>
				PID_PITCH = PIDController_Update(&pitch_pid_t, PWM_NEG_PITCH,
 8003e58:	4b5d      	ldr	r3, [pc, #372]	; (8003fd0 <StartImuTask+0x270>)
 8003e5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e5e:	eef0 0a67 	vmov.f32	s1, s15
 8003e62:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8003fec <StartImuTask+0x28c>
 8003e66:	4852      	ldr	r0, [pc, #328]	; (8003fb0 <StartImuTask+0x250>)
 8003e68:	f7fe fd42 	bl	80028f0 <PIDController_Update>
 8003e6c:	eef0 7a40 	vmov.f32	s15, s0
 8003e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e74:	ee17 2a90 	vmov	r2, s15
 8003e78:	4b5b      	ldr	r3, [pc, #364]	; (8003fe8 <StartImuTask+0x288>)
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	e019      	b.n	8003eb2 <StartImuTask+0x152>
						imu.y);	//pitch +180 -180 aralığında

			} else if (uartBuffer.movementData.pitchNegative == FALSE
 8003e7e:	4b58      	ldr	r3, [pc, #352]	; (8003fe0 <StartImuTask+0x280>)
 8003e80:	791b      	ldrb	r3, [r3, #4]
 8003e82:	2b30      	cmp	r3, #48	; 0x30
 8003e84:	d115      	bne.n	8003eb2 <StartImuTask+0x152>
					&& uartBuffer.movementData.pitchPositive == FALSE) {
 8003e86:	4b56      	ldr	r3, [pc, #344]	; (8003fe0 <StartImuTask+0x280>)
 8003e88:	78db      	ldrb	r3, [r3, #3]
 8003e8a:	2b30      	cmp	r3, #48	; 0x30
 8003e8c:	d111      	bne.n	8003eb2 <StartImuTask+0x152>
				PID_PITCH = PIDController_Update(&pitch_pid_t, PWM_NOTR_PITCH,
 8003e8e:	4b50      	ldr	r3, [pc, #320]	; (8003fd0 <StartImuTask+0x270>)
 8003e90:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e94:	eef0 0a67 	vmov.f32	s1, s15
 8003e98:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8003ff0 <StartImuTask+0x290>
 8003e9c:	4844      	ldr	r0, [pc, #272]	; (8003fb0 <StartImuTask+0x250>)
 8003e9e:	f7fe fd27 	bl	80028f0 <PIDController_Update>
 8003ea2:	eef0 7a40 	vmov.f32	s15, s0
 8003ea6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eaa:	ee17 2a90 	vmov	r2, s15
 8003eae:	4b4e      	ldr	r3, [pc, #312]	; (8003fe8 <StartImuTask+0x288>)
 8003eb0:	601a      	str	r2, [r3, #0]
						imu.y);	//pitch +180 -180 aralığında

			}

			if (uartBuffer.movementData.rollPositive == TRUE) {
 8003eb2:	4b4b      	ldr	r3, [pc, #300]	; (8003fe0 <StartImuTask+0x280>)
 8003eb4:	795b      	ldrb	r3, [r3, #5]
 8003eb6:	2b31      	cmp	r3, #49	; 0x31
 8003eb8:	d112      	bne.n	8003ee0 <StartImuTask+0x180>
				PID_ROLL = PIDController_Update(&roll_pid_t, PWM_POS_ROLL,
 8003eba:	4b45      	ldr	r3, [pc, #276]	; (8003fd0 <StartImuTask+0x270>)
 8003ebc:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ec0:	eef0 0a67 	vmov.f32	s1, s15
 8003ec4:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8003fe4 <StartImuTask+0x284>
 8003ec8:	483a      	ldr	r0, [pc, #232]	; (8003fb4 <StartImuTask+0x254>)
 8003eca:	f7fe fd11 	bl	80028f0 <PIDController_Update>
 8003ece:	eef0 7a40 	vmov.f32	s15, s0
 8003ed2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ed6:	ee17 2a90 	vmov	r2, s15
 8003eda:	4b46      	ldr	r3, [pc, #280]	; (8003ff4 <StartImuTask+0x294>)
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	e05b      	b.n	8003f98 <StartImuTask+0x238>
						imu.z);	//roll +90 -90 aralığında

			} else if (uartBuffer.movementData.rollNegative == TRUE) {
 8003ee0:	4b3f      	ldr	r3, [pc, #252]	; (8003fe0 <StartImuTask+0x280>)
 8003ee2:	799b      	ldrb	r3, [r3, #6]
 8003ee4:	2b31      	cmp	r3, #49	; 0x31
 8003ee6:	d112      	bne.n	8003f0e <StartImuTask+0x1ae>
				PID_ROLL = PIDController_Update(&roll_pid_t, PWM_NEG_ROLL,
 8003ee8:	4b39      	ldr	r3, [pc, #228]	; (8003fd0 <StartImuTask+0x270>)
 8003eea:	edd3 7a03 	vldr	s15, [r3, #12]
 8003eee:	eef0 0a67 	vmov.f32	s1, s15
 8003ef2:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8003fec <StartImuTask+0x28c>
 8003ef6:	482f      	ldr	r0, [pc, #188]	; (8003fb4 <StartImuTask+0x254>)
 8003ef8:	f7fe fcfa 	bl	80028f0 <PIDController_Update>
 8003efc:	eef0 7a40 	vmov.f32	s15, s0
 8003f00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f04:	ee17 2a90 	vmov	r2, s15
 8003f08:	4b3a      	ldr	r3, [pc, #232]	; (8003ff4 <StartImuTask+0x294>)
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	e044      	b.n	8003f98 <StartImuTask+0x238>
						imu.z);	//roll +90 -90 aralığında

			} else if (uartBuffer.movementData.rollPositive == FALSE
 8003f0e:	4b34      	ldr	r3, [pc, #208]	; (8003fe0 <StartImuTask+0x280>)
 8003f10:	795b      	ldrb	r3, [r3, #5]
 8003f12:	2b30      	cmp	r3, #48	; 0x30
 8003f14:	d140      	bne.n	8003f98 <StartImuTask+0x238>
					&& uartBuffer.movementData.rollNegative == FALSE) {
 8003f16:	4b32      	ldr	r3, [pc, #200]	; (8003fe0 <StartImuTask+0x280>)
 8003f18:	799b      	ldrb	r3, [r3, #6]
 8003f1a:	2b30      	cmp	r3, #48	; 0x30
 8003f1c:	d13c      	bne.n	8003f98 <StartImuTask+0x238>
				PID_PITCH = PIDController_Update(&roll_pid_t, PWM_NOTR_ROLL,
 8003f1e:	4b2c      	ldr	r3, [pc, #176]	; (8003fd0 <StartImuTask+0x270>)
 8003f20:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f24:	eef0 0a67 	vmov.f32	s1, s15
 8003f28:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8003ff0 <StartImuTask+0x290>
 8003f2c:	4821      	ldr	r0, [pc, #132]	; (8003fb4 <StartImuTask+0x254>)
 8003f2e:	f7fe fcdf 	bl	80028f0 <PIDController_Update>
 8003f32:	eef0 7a40 	vmov.f32	s15, s0
 8003f36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f3a:	ee17 2a90 	vmov	r2, s15
 8003f3e:	4b2a      	ldr	r3, [pc, #168]	; (8003fe8 <StartImuTask+0x288>)
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	e029      	b.n	8003f98 <StartImuTask+0x238>

			}
		}

		else {//kumanda bölümü 		//ikisini de +90 -90 aralığında verebiliriz//delta t yi parametre olarak verebiliriz
			PID_PITCH = PIDController_Update(&pitch_pid_t, rc_pitch.dutyCycle,
 8003f44:	4b2c      	ldr	r3, [pc, #176]	; (8003ff8 <StartImuTask+0x298>)
 8003f46:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f4a:	4b21      	ldr	r3, [pc, #132]	; (8003fd0 <StartImuTask+0x270>)
 8003f4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003f50:	eef0 0a47 	vmov.f32	s1, s14
 8003f54:	eeb0 0a67 	vmov.f32	s0, s15
 8003f58:	4815      	ldr	r0, [pc, #84]	; (8003fb0 <StartImuTask+0x250>)
 8003f5a:	f7fe fcc9 	bl	80028f0 <PIDController_Update>
 8003f5e:	eef0 7a40 	vmov.f32	s15, s0
 8003f62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f66:	ee17 2a90 	vmov	r2, s15
 8003f6a:	4b1f      	ldr	r3, [pc, #124]	; (8003fe8 <StartImuTask+0x288>)
 8003f6c:	601a      	str	r2, [r3, #0]
					imu.y);	//pitch +180 -180 aralığında
			PID_ROLL = PIDController_Update(&roll_pid_t, rc_roll.dutyCycle,
 8003f6e:	4b23      	ldr	r3, [pc, #140]	; (8003ffc <StartImuTask+0x29c>)
 8003f70:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f74:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <StartImuTask+0x270>)
 8003f76:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f7a:	eef0 0a47 	vmov.f32	s1, s14
 8003f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f82:	480c      	ldr	r0, [pc, #48]	; (8003fb4 <StartImuTask+0x254>)
 8003f84:	f7fe fcb4 	bl	80028f0 <PIDController_Update>
 8003f88:	eef0 7a40 	vmov.f32	s15, s0
 8003f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f90:	ee17 2a90 	vmov	r2, s15
 8003f94:	4b17      	ldr	r3, [pc, #92]	; (8003ff4 <StartImuTask+0x294>)
 8003f96:	601a      	str	r2, [r3, #0]
					imu.z);	//roll +90 -90 aralığında
		}

		deltaT = __HAL_TIM_GET_COUNTER(&htim5);
 8003f98:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <StartImuTask+0x278>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <StartImuTask+0x274>)
 8003fa2:	601a      	str	r2, [r3, #0]

		//printf("PID_PITCH: %d\n", PID_PITCH);
		//printf("PID_ROLL: %d\n", PID_ROLL);
		osDelay(SAMPLE_TIME_IMU);
 8003fa4:	2014      	movs	r0, #20
 8003fa6:	f008 f85e 	bl	800c066 <osDelay>
		imu = bno055_getVectorEuler();
 8003faa:	e716      	b.n	8003dda <StartImuTask+0x7a>
 8003fac:	20000880 	.word	0x20000880
 8003fb0:	200003e8 	.word	0x200003e8
 8003fb4:	20000420 	.word	0x20000420
 8003fb8:	3d4ccccd 	.word	0x3d4ccccd
 8003fbc:	3851b717 	.word	0x3851b717
 8003fc0:	42480000 	.word	0x42480000
 8003fc4:	43e10000 	.word	0x43e10000
 8003fc8:	c3e10000 	.word	0xc3e10000
 8003fcc:	461c4000 	.word	0x461c4000
 8003fd0:	2000045c 	.word	0x2000045c
 8003fd4:	20000458 	.word	0x20000458
 8003fd8:	20000a9c 	.word	0x20000a9c
 8003fdc:	20000478 	.word	0x20000478
 8003fe0:	200008d4 	.word	0x200008d4
 8003fe4:	44d48000 	.word	0x44d48000
 8003fe8:	20000470 	.word	0x20000470
 8003fec:	44a28000 	.word	0x44a28000
 8003ff0:	44bb8000 	.word	0x44bb8000
 8003ff4:	2000046c 	.word	0x2000046c
 8003ff8:	2000091c 	.word	0x2000091c
 8003ffc:	200008dc 	.word	0x200008dc

08004000 <StartBatteryTask>:
 * @brief Function implementing the batteryTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBatteryTask */
void StartBatteryTask(void const *argument) {
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartBatteryTask */
//BatteryInit();
	/* Infinite loop */
	for (;;) {
		battery.voltage = getBatteryVoltage();
 8004008:	f000 fb46 	bl	8004698 <getBatteryVoltage>
 800400c:	eef0 7a40 	vmov.f32	s15, s0
 8004010:	4b23      	ldr	r3, [pc, #140]	; (80040a0 <StartBatteryTask+0xa0>)
 8004012:	edc3 7a00 	vstr	s15, [r3]

		if (battery.voltage < FAILSAFE_VOLTAGE
 8004016:	4b22      	ldr	r3, [pc, #136]	; (80040a0 <StartBatteryTask+0xa0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7fc fa94 	bl	8000548 <__aeabi_f2d>
 8004020:	a31b      	add	r3, pc, #108	; (adr r3, 8004090 <StartBatteryTask+0x90>)
 8004022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004026:	f7fc fd59 	bl	8000adc <__aeabi_dcmplt>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d010      	beq.n	8004052 <StartBatteryTask+0x52>
				&& battery.voltage >= DEAD_VOLTAGE) {
 8004030:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <StartBatteryTask+0xa0>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f7fc fa87 	bl	8000548 <__aeabi_f2d>
 800403a:	a317      	add	r3, pc, #92	; (adr r3, 8004098 <StartBatteryTask+0x98>)
 800403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004040:	f7fc fd60 	bl	8000b04 <__aeabi_dcmpge>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <StartBatteryTask+0x52>
			battery.isBatteryLow = true;
 800404a:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <StartBatteryTask+0xa0>)
 800404c:	2201      	movs	r2, #1
 800404e:	711a      	strb	r2, [r3, #4]
 8004050:	e019      	b.n	8004086 <StartBatteryTask+0x86>

		} else if (battery.voltage < DEAD_VOLTAGE) {
 8004052:	4b13      	ldr	r3, [pc, #76]	; (80040a0 <StartBatteryTask+0xa0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7fc fa76 	bl	8000548 <__aeabi_f2d>
 800405c:	a30e      	add	r3, pc, #56	; (adr r3, 8004098 <StartBatteryTask+0x98>)
 800405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004062:	f7fc fd3b 	bl	8000adc <__aeabi_dcmplt>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d006      	beq.n	800407a <StartBatteryTask+0x7a>
			battery.isBatteryDead = true;
 800406c:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <StartBatteryTask+0xa0>)
 800406e:	2201      	movs	r2, #1
 8004070:	715a      	strb	r2, [r3, #5]
			battery.isBatteryLow = false;
 8004072:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <StartBatteryTask+0xa0>)
 8004074:	2200      	movs	r2, #0
 8004076:	711a      	strb	r2, [r3, #4]
 8004078:	e005      	b.n	8004086 <StartBatteryTask+0x86>
		} else {
			battery.isBatteryDead = false;
 800407a:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <StartBatteryTask+0xa0>)
 800407c:	2200      	movs	r2, #0
 800407e:	715a      	strb	r2, [r3, #5]
			battery.isBatteryLow = false;
 8004080:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <StartBatteryTask+0xa0>)
 8004082:	2200      	movs	r2, #0
 8004084:	711a      	strb	r2, [r3, #4]
		}
		osDelay(SAMPLE_TIME_POWER_MODULE);
 8004086:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800408a:	f007 ffec 	bl	800c066 <osDelay>
		battery.voltage = getBatteryVoltage();
 800408e:	e7bb      	b.n	8004008 <StartBatteryTask+0x8>
 8004090:	66666666 	.word	0x66666666
 8004094:	402e6666 	.word	0x402e6666
 8004098:	66666666 	.word	0x66666666
 800409c:	402c6666 	.word	0x402c6666
 80040a0:	2000048c 	.word	0x2000048c

080040a4 <StartGPSTask>:
 * @brief Function implementing the gpsTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGPSTask */
void StartGPSTask(void const *argument) {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGPSTask */
	/* Infinite loop */
	for (;;) {
		if (Wait_for(GGA) == 1) {
 80040ac:	4831      	ldr	r0, [pc, #196]	; (8004174 <StartGPSTask+0xd0>)
 80040ae:	f001 fdcb 	bl	8005c48 <Wait_for>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d115      	bne.n	80040e4 <StartGPSTask+0x40>

			VCCTimeout = 5000; // Reset the VCC Timeout indicating the GGA is being received
 80040b8:	4b2f      	ldr	r3, [pc, #188]	; (8004178 <StartGPSTask+0xd4>)
 80040ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80040be:	601a      	str	r2, [r3, #0]

			Copy_upto("*", GGA);
 80040c0:	492c      	ldr	r1, [pc, #176]	; (8004174 <StartGPSTask+0xd0>)
 80040c2:	482e      	ldr	r0, [pc, #184]	; (800417c <StartGPSTask+0xd8>)
 80040c4:	f001 fd40 	bl	8005b48 <Copy_upto>
			if (decodeGGA(GGA, &gpsData.ggastruct) == 0)
 80040c8:	492d      	ldr	r1, [pc, #180]	; (8004180 <StartGPSTask+0xdc>)
 80040ca:	482a      	ldr	r0, [pc, #168]	; (8004174 <StartGPSTask+0xd0>)
 80040cc:	f7fd fd90 	bl	8001bf0 <decodeGGA>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d103      	bne.n	80040de <StartGPSTask+0x3a>
				flagGGA = 2;  // 2 indicates the data is valid
 80040d6:	4b2b      	ldr	r3, [pc, #172]	; (8004184 <StartGPSTask+0xe0>)
 80040d8:	2202      	movs	r2, #2
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	e002      	b.n	80040e4 <StartGPSTask+0x40>
			else
				flagGGA = 1;  // 1 indicates the data is invalid
 80040de:	4b29      	ldr	r3, [pc, #164]	; (8004184 <StartGPSTask+0xe0>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	601a      	str	r2, [r3, #0]
		}

		if (Wait_for("RMC") == 1) {
 80040e4:	4828      	ldr	r0, [pc, #160]	; (8004188 <StartGPSTask+0xe4>)
 80040e6:	f001 fdaf 	bl	8005c48 <Wait_for>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d115      	bne.n	800411c <StartGPSTask+0x78>

			VCCTimeout = 5000; // Reset the VCC Timeout indicating the RMC is being received
 80040f0:	4b21      	ldr	r3, [pc, #132]	; (8004178 <StartGPSTask+0xd4>)
 80040f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f6:	601a      	str	r2, [r3, #0]

			Copy_upto("*", RMC);
 80040f8:	4924      	ldr	r1, [pc, #144]	; (800418c <StartGPSTask+0xe8>)
 80040fa:	4820      	ldr	r0, [pc, #128]	; (800417c <StartGPSTask+0xd8>)
 80040fc:	f001 fd24 	bl	8005b48 <Copy_upto>
			if (decodeRMC(RMC, &gpsData.rmcstruct) == 0)
 8004100:	4923      	ldr	r1, [pc, #140]	; (8004190 <StartGPSTask+0xec>)
 8004102:	4822      	ldr	r0, [pc, #136]	; (800418c <StartGPSTask+0xe8>)
 8004104:	f7fe f990 	bl	8002428 <decodeRMC>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d103      	bne.n	8004116 <StartGPSTask+0x72>
				flagRMC = 2;  // 2 indicates the data is valid
 800410e:	4b21      	ldr	r3, [pc, #132]	; (8004194 <StartGPSTask+0xf0>)
 8004110:	2202      	movs	r2, #2
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	e002      	b.n	800411c <StartGPSTask+0x78>
			else
				flagRMC = 1;  // 1 indicates the data is invalid
 8004116:	4b1f      	ldr	r3, [pc, #124]	; (8004194 <StartGPSTask+0xf0>)
 8004118:	2201      	movs	r2, #1
 800411a:	601a      	str	r2, [r3, #0]
		}

		if ((flagGGA == 2) | (flagRMC == 2)) {
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <StartGPSTask+0xe0>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b02      	cmp	r3, #2
 8004122:	bf0c      	ite	eq
 8004124:	2301      	moveq	r3, #1
 8004126:	2300      	movne	r3, #0
 8004128:	b2da      	uxtb	r2, r3
 800412a:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <StartGPSTask+0xf0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b02      	cmp	r3, #2
 8004130:	bf0c      	ite	eq
 8004132:	2301      	moveq	r3, #1
 8004134:	2300      	movne	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	4313      	orrs	r3, r2
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d105      	bne.n	800414c <StartGPSTask+0xa8>
		}

		else if ((flagGGA == 1) | (flagRMC == 1)) {
 8004140:	4b10      	ldr	r3, [pc, #64]	; (8004184 <StartGPSTask+0xe0>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	4b13      	ldr	r3, [pc, #76]	; (8004194 <StartGPSTask+0xf0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b01      	cmp	r3, #1
			// Instead of clearing the display, it's better if we print spaces.
			// This will avoid the "refreshing" part
		}

		if (VCCTimeout <= 0) {
 800414c:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <StartGPSTask+0xd4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	dc0a      	bgt.n	800416a <StartGPSTask+0xc6>
			VCCTimeout = 5000;  // Reset the timeout
 8004154:	4b08      	ldr	r3, [pc, #32]	; (8004178 <StartGPSTask+0xd4>)
 8004156:	f241 3288 	movw	r2, #5000	; 0x1388
 800415a:	601a      	str	r2, [r3, #0]

			//reset flags
			flagGGA = flagRMC = 0;
 800415c:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <StartGPSTask+0xf0>)
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <StartGPSTask+0xf0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a07      	ldr	r2, [pc, #28]	; (8004184 <StartGPSTask+0xe0>)
 8004168:	6013      	str	r3, [r2, #0]

			// You are here means the VCC is less, or maybe there is some connection issue
			// Check the VCC, also you can try connecting to the external 5V
		}

		osDelay(SAMPLE_TIME_GPS);
 800416a:	2064      	movs	r0, #100	; 0x64
 800416c:	f007 ff7b 	bl	800c066 <osDelay>
		if (Wait_for(GGA) == 1) {
 8004170:	e79c      	b.n	80040ac <StartGPSTask+0x8>
 8004172:	bf00      	nop
 8004174:	20000010 	.word	0x20000010
 8004178:	20000074 	.word	0x20000074
 800417c:	08011618 	.word	0x08011618
 8004180:	20000510 	.word	0x20000510
 8004184:	2000056c 	.word	0x2000056c
 8004188:	0801161c 	.word	0x0801161c
 800418c:	200004ac 	.word	0x200004ac
 8004190:	20000554 	.word	0x20000554
 8004194:	20000570 	.word	0x20000570

08004198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08c      	sub	sp, #48	; 0x30
 800419c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800419e:	f107 031c 	add.w	r3, r7, #28
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	605a      	str	r2, [r3, #4]
 80041a8:	609a      	str	r2, [r3, #8]
 80041aa:	60da      	str	r2, [r3, #12]
 80041ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	4b35      	ldr	r3, [pc, #212]	; (8004288 <MX_GPIO_Init+0xf0>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	4a34      	ldr	r2, [pc, #208]	; (8004288 <MX_GPIO_Init+0xf0>)
 80041b8:	f043 0310 	orr.w	r3, r3, #16
 80041bc:	6313      	str	r3, [r2, #48]	; 0x30
 80041be:	4b32      	ldr	r3, [pc, #200]	; (8004288 <MX_GPIO_Init+0xf0>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	61bb      	str	r3, [r7, #24]
 80041c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	4b2e      	ldr	r3, [pc, #184]	; (8004288 <MX_GPIO_Init+0xf0>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	4a2d      	ldr	r2, [pc, #180]	; (8004288 <MX_GPIO_Init+0xf0>)
 80041d4:	f043 0304 	orr.w	r3, r3, #4
 80041d8:	6313      	str	r3, [r2, #48]	; 0x30
 80041da:	4b2b      	ldr	r3, [pc, #172]	; (8004288 <MX_GPIO_Init+0xf0>)
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	4b27      	ldr	r3, [pc, #156]	; (8004288 <MX_GPIO_Init+0xf0>)
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	4a26      	ldr	r2, [pc, #152]	; (8004288 <MX_GPIO_Init+0xf0>)
 80041f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f4:	6313      	str	r3, [r2, #48]	; 0x30
 80041f6:	4b24      	ldr	r3, [pc, #144]	; (8004288 <MX_GPIO_Init+0xf0>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	4b20      	ldr	r3, [pc, #128]	; (8004288 <MX_GPIO_Init+0xf0>)
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	4a1f      	ldr	r2, [pc, #124]	; (8004288 <MX_GPIO_Init+0xf0>)
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	6313      	str	r3, [r2, #48]	; 0x30
 8004212:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <MX_GPIO_Init+0xf0>)
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	4b19      	ldr	r3, [pc, #100]	; (8004288 <MX_GPIO_Init+0xf0>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	4a18      	ldr	r2, [pc, #96]	; (8004288 <MX_GPIO_Init+0xf0>)
 8004228:	f043 0302 	orr.w	r3, r3, #2
 800422c:	6313      	str	r3, [r2, #48]	; 0x30
 800422e:	4b16      	ldr	r3, [pc, #88]	; (8004288 <MX_GPIO_Init+0xf0>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800423a:	2300      	movs	r3, #0
 800423c:	607b      	str	r3, [r7, #4]
 800423e:	4b12      	ldr	r3, [pc, #72]	; (8004288 <MX_GPIO_Init+0xf0>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	4a11      	ldr	r2, [pc, #68]	; (8004288 <MX_GPIO_Init+0xf0>)
 8004244:	f043 0308 	orr.w	r3, r3, #8
 8004248:	6313      	str	r3, [r2, #48]	; 0x30
 800424a:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <MX_GPIO_Init+0xf0>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	607b      	str	r3, [r7, #4]
 8004254:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led_2_Pin|led_1_Pin, GPIO_PIN_RESET);
 8004256:	2200      	movs	r2, #0
 8004258:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800425c:	480b      	ldr	r0, [pc, #44]	; (800428c <MX_GPIO_Init+0xf4>)
 800425e:	f002 febb 	bl	8006fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = led_2_Pin|led_1_Pin;
 8004262:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004268:	2301      	movs	r3, #1
 800426a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426c:	2300      	movs	r3, #0
 800426e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004270:	2300      	movs	r3, #0
 8004272:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004274:	f107 031c 	add.w	r3, r7, #28
 8004278:	4619      	mov	r1, r3
 800427a:	4804      	ldr	r0, [pc, #16]	; (800428c <MX_GPIO_Init+0xf4>)
 800427c:	f002 fd10 	bl	8006ca0 <HAL_GPIO_Init>

}
 8004280:	bf00      	nop
 8004282:	3730      	adds	r7, #48	; 0x30
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40023800 	.word	0x40023800
 800428c:	40020c00 	.word	0x40020c00

08004290 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004294:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <MX_I2C1_Init+0x50>)
 8004296:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <MX_I2C1_Init+0x54>)
 8004298:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800429a:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <MX_I2C1_Init+0x50>)
 800429c:	4a12      	ldr	r2, [pc, #72]	; (80042e8 <MX_I2C1_Init+0x58>)
 800429e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80042a0:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <MX_I2C1_Init+0x50>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80042a6:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <MX_I2C1_Init+0x50>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <MX_I2C1_Init+0x50>)
 80042ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042b4:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <MX_I2C1_Init+0x50>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80042ba:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <MX_I2C1_Init+0x50>)
 80042bc:	2200      	movs	r2, #0
 80042be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042c0:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <MX_I2C1_Init+0x50>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80042c6:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <MX_I2C1_Init+0x50>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80042cc:	4804      	ldr	r0, [pc, #16]	; (80042e0 <MX_I2C1_Init+0x50>)
 80042ce:	f002 fe9d 	bl	800700c <HAL_I2C_Init>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80042d8:	f000 f9d8 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80042dc:	bf00      	nop
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	2000082c 	.word	0x2000082c
 80042e4:	40005400 	.word	0x40005400
 80042e8:	000186a0 	.word	0x000186a0

080042ec <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80042f0:	4b12      	ldr	r3, [pc, #72]	; (800433c <MX_I2C3_Init+0x50>)
 80042f2:	4a13      	ldr	r2, [pc, #76]	; (8004340 <MX_I2C3_Init+0x54>)
 80042f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80042f6:	4b11      	ldr	r3, [pc, #68]	; (800433c <MX_I2C3_Init+0x50>)
 80042f8:	4a12      	ldr	r2, [pc, #72]	; (8004344 <MX_I2C3_Init+0x58>)
 80042fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80042fc:	4b0f      	ldr	r3, [pc, #60]	; (800433c <MX_I2C3_Init+0x50>)
 80042fe:	2200      	movs	r2, #0
 8004300:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004302:	4b0e      	ldr	r3, [pc, #56]	; (800433c <MX_I2C3_Init+0x50>)
 8004304:	2200      	movs	r2, #0
 8004306:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <MX_I2C3_Init+0x50>)
 800430a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800430e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004310:	4b0a      	ldr	r3, [pc, #40]	; (800433c <MX_I2C3_Init+0x50>)
 8004312:	2200      	movs	r2, #0
 8004314:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004316:	4b09      	ldr	r3, [pc, #36]	; (800433c <MX_I2C3_Init+0x50>)
 8004318:	2200      	movs	r2, #0
 800431a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800431c:	4b07      	ldr	r3, [pc, #28]	; (800433c <MX_I2C3_Init+0x50>)
 800431e:	2200      	movs	r2, #0
 8004320:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004322:	4b06      	ldr	r3, [pc, #24]	; (800433c <MX_I2C3_Init+0x50>)
 8004324:	2200      	movs	r2, #0
 8004326:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004328:	4804      	ldr	r0, [pc, #16]	; (800433c <MX_I2C3_Init+0x50>)
 800432a:	f002 fe6f 	bl	800700c <HAL_I2C_Init>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004334:	f000 f9aa 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004338:	bf00      	nop
 800433a:	bd80      	pop	{r7, pc}
 800433c:	20000880 	.word	0x20000880
 8004340:	40005c00 	.word	0x40005c00
 8004344:	00061a80 	.word	0x00061a80

08004348 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08c      	sub	sp, #48	; 0x30
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004350:	f107 031c 	add.w	r3, r7, #28
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a42      	ldr	r2, [pc, #264]	; (8004470 <HAL_I2C_MspInit+0x128>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d12c      	bne.n	80043c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	61bb      	str	r3, [r7, #24]
 800436e:	4b41      	ldr	r3, [pc, #260]	; (8004474 <HAL_I2C_MspInit+0x12c>)
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	4a40      	ldr	r2, [pc, #256]	; (8004474 <HAL_I2C_MspInit+0x12c>)
 8004374:	f043 0302 	orr.w	r3, r3, #2
 8004378:	6313      	str	r3, [r2, #48]	; 0x30
 800437a:	4b3e      	ldr	r3, [pc, #248]	; (8004474 <HAL_I2C_MspInit+0x12c>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = barometre_scl_Pin|barometre_sda_Pin;
 8004386:	23c0      	movs	r3, #192	; 0xc0
 8004388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800438a:	2312      	movs	r3, #18
 800438c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438e:	2300      	movs	r3, #0
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004392:	2303      	movs	r3, #3
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004396:	2304      	movs	r3, #4
 8004398:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800439a:	f107 031c 	add.w	r3, r7, #28
 800439e:	4619      	mov	r1, r3
 80043a0:	4835      	ldr	r0, [pc, #212]	; (8004478 <HAL_I2C_MspInit+0x130>)
 80043a2:	f002 fc7d 	bl	8006ca0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	4b32      	ldr	r3, [pc, #200]	; (8004474 <HAL_I2C_MspInit+0x12c>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	4a31      	ldr	r2, [pc, #196]	; (8004474 <HAL_I2C_MspInit+0x12c>)
 80043b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043b4:	6413      	str	r3, [r2, #64]	; 0x40
 80043b6:	4b2f      	ldr	r3, [pc, #188]	; (8004474 <HAL_I2C_MspInit+0x12c>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80043c2:	e050      	b.n	8004466 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a2c      	ldr	r2, [pc, #176]	; (800447c <HAL_I2C_MspInit+0x134>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d14b      	bne.n	8004466 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043ce:	2300      	movs	r3, #0
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	4b28      	ldr	r3, [pc, #160]	; (8004474 <HAL_I2C_MspInit+0x12c>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	4a27      	ldr	r2, [pc, #156]	; (8004474 <HAL_I2C_MspInit+0x12c>)
 80043d8:	f043 0304 	orr.w	r3, r3, #4
 80043dc:	6313      	str	r3, [r2, #48]	; 0x30
 80043de:	4b25      	ldr	r3, [pc, #148]	; (8004474 <HAL_I2C_MspInit+0x12c>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	4b21      	ldr	r3, [pc, #132]	; (8004474 <HAL_I2C_MspInit+0x12c>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	4a20      	ldr	r2, [pc, #128]	; (8004474 <HAL_I2C_MspInit+0x12c>)
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	6313      	str	r3, [r2, #48]	; 0x30
 80043fa:	4b1e      	ldr	r3, [pc, #120]	; (8004474 <HAL_I2C_MspInit+0x12c>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = imu_sda_i2c3_Pin;
 8004406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800440a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800440c:	2312      	movs	r3, #18
 800440e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004410:	2300      	movs	r3, #0
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004414:	2303      	movs	r3, #3
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004418:	2304      	movs	r3, #4
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(imu_sda_i2c3_GPIO_Port, &GPIO_InitStruct);
 800441c:	f107 031c 	add.w	r3, r7, #28
 8004420:	4619      	mov	r1, r3
 8004422:	4817      	ldr	r0, [pc, #92]	; (8004480 <HAL_I2C_MspInit+0x138>)
 8004424:	f002 fc3c 	bl	8006ca0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = imu_scl_i2c3_Pin;
 8004428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800442c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800442e:	2312      	movs	r3, #18
 8004430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004432:	2300      	movs	r3, #0
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004436:	2303      	movs	r3, #3
 8004438:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800443a:	2304      	movs	r3, #4
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(imu_scl_i2c3_GPIO_Port, &GPIO_InitStruct);
 800443e:	f107 031c 	add.w	r3, r7, #28
 8004442:	4619      	mov	r1, r3
 8004444:	480f      	ldr	r0, [pc, #60]	; (8004484 <HAL_I2C_MspInit+0x13c>)
 8004446:	f002 fc2b 	bl	8006ca0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800444a:	2300      	movs	r3, #0
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	4b09      	ldr	r3, [pc, #36]	; (8004474 <HAL_I2C_MspInit+0x12c>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	4a08      	ldr	r2, [pc, #32]	; (8004474 <HAL_I2C_MspInit+0x12c>)
 8004454:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004458:	6413      	str	r3, [r2, #64]	; 0x40
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_I2C_MspInit+0x12c>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004462:	60bb      	str	r3, [r7, #8]
 8004464:	68bb      	ldr	r3, [r7, #8]
}
 8004466:	bf00      	nop
 8004468:	3730      	adds	r7, #48	; 0x30
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40005400 	.word	0x40005400
 8004474:	40023800 	.word	0x40023800
 8004478:	40020400 	.word	0x40020400
 800447c:	40005c00 	.word	0x40005c00
 8004480:	40020800 	.word	0x40020800
 8004484:	40020000 	.word	0x40020000

08004488 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	b29a      	uxth	r2, r3
 8004498:	f04f 33ff 	mov.w	r3, #4294967295
 800449c:	68b9      	ldr	r1, [r7, #8]
 800449e:	4804      	ldr	r0, [pc, #16]	; (80044b0 <_write+0x28>)
 80044a0:	f006 fd41 	bl	800af26 <HAL_UART_Transmit>
	return len;
 80044a4:	687b      	ldr	r3, [r7, #4]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20001060 	.word	0x20001060

080044b4 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
	pwm_read_ch1();
 80044bc:	f000 f974 	bl	80047a8 <pwm_read_ch1>
	pwm_read_ch2();
 80044c0:	f000 f9a6 	bl	8004810 <pwm_read_ch2>
	pwm_read_ch3();
 80044c4:	f000 f9d8 	bl	8004878 <pwm_read_ch3>
	pwm_read_ch4();
 80044c8:	f000 fa0a 	bl	80048e0 <pwm_read_ch4>
	pwm_read_ch5();
 80044cc:	f000 fa78 	bl	80049c0 <pwm_read_ch5>

	if (rc_throttle.dutyCycle < 1000) {
 80044d0:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <HAL_TIM_IC_CaptureCallback+0x48>)
 80044d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80044d6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004500 <HAL_TIM_IC_CaptureCallback+0x4c>
 80044da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e2:	d503      	bpl.n	80044ec <HAL_TIM_IC_CaptureCallback+0x38>
		failsafe.flag = true;
 80044e4:	4b07      	ldr	r3, [pc, #28]	; (8004504 <HAL_TIM_IC_CaptureCallback+0x50>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
	}else{
		failsafe.flag = false;
	}
}
 80044ea:	e002      	b.n	80044f2 <HAL_TIM_IC_CaptureCallback+0x3e>
		failsafe.flag = false;
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <HAL_TIM_IC_CaptureCallback+0x50>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	701a      	strb	r2, [r3, #0]
}
 80044f2:	bf00      	nop
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	2000090c 	.word	0x2000090c
 8004500:	447a0000 	.word	0x447a0000
 8004504:	2000092c 	.word	0x2000092c

08004508 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800450c:	f001 fdee 	bl	80060ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004510:	f000 f840 	bl	8004594 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004514:	f7ff fe40 	bl	8004198 <MX_GPIO_Init>
	MX_TIM1_Init();
 8004518:	f000 fc5e 	bl	8004dd8 <MX_TIM1_Init>
	MX_ADC1_Init();
 800451c:	f7fe fb32 	bl	8002b84 <MX_ADC1_Init>
	MX_I2C1_Init();
 8004520:	f7ff feb6 	bl	8004290 <MX_I2C1_Init>
	MX_I2C3_Init();
 8004524:	f7ff fee2 	bl	80042ec <MX_I2C3_Init>
	MX_TIM2_Init();
 8004528:	f000 fd1a 	bl	8004f60 <MX_TIM2_Init>
	MX_TIM3_Init();
 800452c:	f000 fdb6 	bl	800509c <MX_TIM3_Init>
	MX_TIM9_Init();
 8004530:	f000 ff74 	bl	800541c <MX_TIM9_Init>
	MX_TIM12_Init();
 8004534:	f000 fffc 	bl	8005530 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 8004538:	f001 fc6c 	bl	8005e14 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800453c:	f001 fc94 	bl	8005e68 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8004540:	f001 fcbc 	bl	8005ebc <MX_USART3_UART_Init>
	MX_TIM4_Init();
 8004544:	f000 fe48 	bl	80051d8 <MX_TIM4_Init>
	MX_TIM5_Init();
 8004548:	f000 fee4 	bl	8005314 <MX_TIM5_Init>
	MX_TIM6_Init();
 800454c:	f000 ff30 	bl	80053b0 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart3, (uint8_t*) uartBuffer.buffer, 8);
 8004550:	2208      	movs	r2, #8
 8004552:	490c      	ldr	r1, [pc, #48]	; (8004584 <main+0x7c>)
 8004554:	480c      	ldr	r0, [pc, #48]	; (8004588 <main+0x80>)
 8004556:	f006 fd78 	bl	800b04a <HAL_UART_Receive_IT>

	HAL_TIM_Base_Start(&htim5);
 800455a:	480c      	ldr	r0, [pc, #48]	; (800458c <main+0x84>)
 800455c:	f004 febe 	bl	80092dc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim6);
 8004560:	480b      	ldr	r0, [pc, #44]	; (8004590 <main+0x88>)
 8004562:	f004 febb 	bl	80092dc <HAL_TIM_Base_Start>

	Ringbuf_init();
 8004566:	f001 fa3f 	bl	80059e8 <Ringbuf_init>

	HAL_Delay(500);
 800456a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800456e:	f001 fdff 	bl	8006170 <HAL_Delay>

	init_esc();
 8004572:	f7fe fd75 	bl	8003060 <init_esc>

	pwm_enabled();
 8004576:	f000 f8e1 	bl	800473c <pwm_enabled>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 800457a:	f7ff f86f 	bl	800365c <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 800457e:	f007 fd1f 	bl	800bfc0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8004582:	e7fe      	b.n	8004582 <main+0x7a>
 8004584:	200008d4 	.word	0x200008d4
 8004588:	20001060 	.word	0x20001060
 800458c:	20000a9c 	.word	0x20000a9c
 8004590:	20000ae4 	.word	0x20000ae4

08004594 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004594:	b580      	push	{r7, lr}
 8004596:	b094      	sub	sp, #80	; 0x50
 8004598:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800459a:	f107 0320 	add.w	r3, r7, #32
 800459e:	2230      	movs	r2, #48	; 0x30
 80045a0:	2100      	movs	r1, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	f009 fe82 	bl	800e2ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80045a8:	f107 030c 	add.w	r3, r7, #12
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80045b8:	2300      	movs	r3, #0
 80045ba:	60bb      	str	r3, [r7, #8]
 80045bc:	4b28      	ldr	r3, [pc, #160]	; (8004660 <SystemClock_Config+0xcc>)
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	4a27      	ldr	r2, [pc, #156]	; (8004660 <SystemClock_Config+0xcc>)
 80045c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c6:	6413      	str	r3, [r2, #64]	; 0x40
 80045c8:	4b25      	ldr	r3, [pc, #148]	; (8004660 <SystemClock_Config+0xcc>)
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80045d4:	2300      	movs	r3, #0
 80045d6:	607b      	str	r3, [r7, #4]
 80045d8:	4b22      	ldr	r3, [pc, #136]	; (8004664 <SystemClock_Config+0xd0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a21      	ldr	r2, [pc, #132]	; (8004664 <SystemClock_Config+0xd0>)
 80045de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	4b1f      	ldr	r3, [pc, #124]	; (8004664 <SystemClock_Config+0xd0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ec:	607b      	str	r3, [r7, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80045f0:	2301      	movs	r3, #1
 80045f2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045fa:	2302      	movs	r3, #2
 80045fc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004602:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8004604:	2304      	movs	r3, #4
 8004606:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8004608:	23a8      	movs	r3, #168	; 0xa8
 800460a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800460c:	2302      	movs	r3, #2
 800460e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8004610:	2304      	movs	r3, #4
 8004612:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004614:	f107 0320 	add.w	r3, r7, #32
 8004618:	4618      	mov	r0, r3
 800461a:	f004 f945 	bl	80088a8 <HAL_RCC_OscConfig>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <SystemClock_Config+0x94>
		Error_Handler();
 8004624:	f000 f832 	bl	800468c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004628:	230f      	movs	r3, #15
 800462a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800462c:	2302      	movs	r3, #2
 800462e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004634:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004638:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800463a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800463e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8004640:	f107 030c 	add.w	r3, r7, #12
 8004644:	2105      	movs	r1, #5
 8004646:	4618      	mov	r0, r3
 8004648:	f004 fba6 	bl	8008d98 <HAL_RCC_ClockConfig>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <SystemClock_Config+0xc2>
		Error_Handler();
 8004652:	f000 f81b 	bl	800468c <Error_Handler>
	}
}
 8004656:	bf00      	nop
 8004658:	3750      	adds	r7, #80	; 0x50
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40023800 	.word	0x40023800
 8004664:	40007000 	.word	0x40007000

08004668 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM10) {
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a04      	ldr	r2, [pc, #16]	; (8004688 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d101      	bne.n	800467e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800467a:	f001 fd59 	bl	8006130 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40014400 	.word	0x40014400

0800468c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004690:	b672      	cpsid	i
}
 8004692:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004694:	e7fe      	b.n	8004694 <Error_Handler+0x8>
	...

08004698 <getBatteryVoltage>:

void BatteryInit() {
	HAL_ADC_Start(&hadc1);
}

float getBatteryVoltage() {
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
	uint16_t adcValue;
	float adcVoltage;
	HAL_ADC_Start(&hadc1); // start the adc
 800469e:	4826      	ldr	r0, [pc, #152]	; (8004738 <getBatteryVoltage+0xa0>)
 80046a0:	f001 fdce 	bl	8006240 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 80046a4:	2164      	movs	r1, #100	; 0x64
 80046a6:	4824      	ldr	r0, [pc, #144]	; (8004738 <getBatteryVoltage+0xa0>)
 80046a8:	f001 fecf 	bl	800644a <HAL_ADC_PollForConversion>

	adcValue = HAL_ADC_GetValue(&hadc1); // get the adc value
 80046ac:	4822      	ldr	r0, [pc, #136]	; (8004738 <getBatteryVoltage+0xa0>)
 80046ae:	f001 ff57 	bl	8006560 <HAL_ADC_GetValue>
 80046b2:	4603      	mov	r3, r0
 80046b4:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Stop(&hadc1); // stop adc
 80046b6:	4820      	ldr	r0, [pc, #128]	; (8004738 <getBatteryVoltage+0xa0>)
 80046b8:	f001 fe94 	bl	80063e4 <HAL_ADC_Stop>

	adcVoltage = 3.3 * adcValue / 4095;
 80046bc:	88fb      	ldrh	r3, [r7, #6]
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fb ff30 	bl	8000524 <__aeabi_i2d>
 80046c4:	a316      	add	r3, pc, #88	; (adr r3, 8004720 <getBatteryVoltage+0x88>)
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	f7fb ff95 	bl	80005f8 <__aeabi_dmul>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	4610      	mov	r0, r2
 80046d4:	4619      	mov	r1, r3
 80046d6:	a314      	add	r3, pc, #80	; (adr r3, 8004728 <getBatteryVoltage+0x90>)
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	f7fc f8b6 	bl	800084c <__aeabi_ddiv>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4610      	mov	r0, r2
 80046e6:	4619      	mov	r1, r3
 80046e8:	f7fc fa5e 	bl	8000ba8 <__aeabi_d2f>
 80046ec:	4603      	mov	r3, r0
 80046ee:	603b      	str	r3, [r7, #0]

	return adcVoltage * 10.818;
 80046f0:	6838      	ldr	r0, [r7, #0]
 80046f2:	f7fb ff29 	bl	8000548 <__aeabi_f2d>
 80046f6:	a30e      	add	r3, pc, #56	; (adr r3, 8004730 <getBatteryVoltage+0x98>)
 80046f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fc:	f7fb ff7c 	bl	80005f8 <__aeabi_dmul>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4610      	mov	r0, r2
 8004706:	4619      	mov	r1, r3
 8004708:	f7fc fa4e 	bl	8000ba8 <__aeabi_d2f>
 800470c:	4603      	mov	r3, r0
 800470e:	ee07 3a90 	vmov	s15, r3
}
 8004712:	eeb0 0a67 	vmov.f32	s0, s15
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	f3af 8000 	nop.w
 8004720:	66666666 	.word	0x66666666
 8004724:	400a6666 	.word	0x400a6666
 8004728:	00000000 	.word	0x00000000
 800472c:	40affe00 	.word	0x40affe00
 8004730:	e5604189 	.word	0xe5604189
 8004734:	4025a2d0 	.word	0x4025a2d0
 8004738:	20000338 	.word	0x20000338

0800473c <pwm_enabled>:
extern uint8_t drive_mode;

//ch1 roll, ch2 yaw, ch3 mod, ch4 throttle, ch5 pitch

//pwm read için 2 kanalda rising ve falling alıyor global interrupt yapılmalı internal clock kullanılmalı
void pwm_enabled() {
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8004740:	2100      	movs	r1, #0
 8004742:	4814      	ldr	r0, [pc, #80]	; (8004794 <pwm_enabled+0x58>)
 8004744:	f005 f8fa 	bl	800993c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8004748:	2104      	movs	r1, #4
 800474a:	4812      	ldr	r0, [pc, #72]	; (8004794 <pwm_enabled+0x58>)
 800474c:	f005 f81a 	bl	8009784 <HAL_TIM_IC_Start>

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8004750:	2100      	movs	r1, #0
 8004752:	4811      	ldr	r0, [pc, #68]	; (8004798 <pwm_enabled+0x5c>)
 8004754:	f005 f8f2 	bl	800993c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8004758:	2104      	movs	r1, #4
 800475a:	480f      	ldr	r0, [pc, #60]	; (8004798 <pwm_enabled+0x5c>)
 800475c:	f005 f812 	bl	8009784 <HAL_TIM_IC_Start>

	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8004760:	2100      	movs	r1, #0
 8004762:	480e      	ldr	r0, [pc, #56]	; (800479c <pwm_enabled+0x60>)
 8004764:	f005 f8ea 	bl	800993c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 8004768:	2104      	movs	r1, #4
 800476a:	480c      	ldr	r0, [pc, #48]	; (800479c <pwm_enabled+0x60>)
 800476c:	f005 f80a 	bl	8009784 <HAL_TIM_IC_Start>

	HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_1);
 8004770:	2100      	movs	r1, #0
 8004772:	480b      	ldr	r0, [pc, #44]	; (80047a0 <pwm_enabled+0x64>)
 8004774:	f005 f8e2 	bl	800993c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim9, TIM_CHANNEL_2);
 8004778:	2104      	movs	r1, #4
 800477a:	4809      	ldr	r0, [pc, #36]	; (80047a0 <pwm_enabled+0x64>)
 800477c:	f005 f802 	bl	8009784 <HAL_TIM_IC_Start>

	HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1);
 8004780:	2100      	movs	r1, #0
 8004782:	4808      	ldr	r0, [pc, #32]	; (80047a4 <pwm_enabled+0x68>)
 8004784:	f005 f8da 	bl	800993c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim12, TIM_CHANNEL_2);
 8004788:	2104      	movs	r1, #4
 800478a:	4806      	ldr	r0, [pc, #24]	; (80047a4 <pwm_enabled+0x68>)
 800478c:	f004 fffa 	bl	8009784 <HAL_TIM_IC_Start>
}
 8004790:	bf00      	nop
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20000a0c 	.word	0x20000a0c
 8004798:	200009c4 	.word	0x200009c4
 800479c:	20000a54 	.word	0x20000a54
 80047a0:	20000b2c 	.word	0x20000b2c
 80047a4:	20000b74 	.word	0x20000b74

080047a8 <pwm_read_ch1>:

	HAL_TIM_IC_Stop_IT(&htim12, TIM_CHANNEL_1);
	HAL_TIM_IC_Stop(&htim12, TIM_CHANNEL_2);
}

void pwm_read_ch1() {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
	if (htim2.Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80047ac:	4b15      	ldr	r3, [pc, #84]	; (8004804 <pwm_read_ch1+0x5c>)
 80047ae:	7f1b      	ldrb	r3, [r3, #28]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d125      	bne.n	8004800 <pwm_read_ch1+0x58>
		rc_roll.ICValue = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 80047b4:	2100      	movs	r1, #0
 80047b6:	4813      	ldr	r0, [pc, #76]	; (8004804 <pwm_read_ch1+0x5c>)
 80047b8:	f005 fd58 	bl	800a26c <HAL_TIM_ReadCapturedValue>
 80047bc:	4603      	mov	r3, r0
 80047be:	4a12      	ldr	r2, [pc, #72]	; (8004808 <pwm_read_ch1+0x60>)
 80047c0:	6013      	str	r3, [r2, #0]

		if (rc_roll.ICValue != 0) {
 80047c2:	4b11      	ldr	r3, [pc, #68]	; (8004808 <pwm_read_ch1+0x60>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d01a      	beq.n	8004800 <pwm_read_ch1+0x58>
			rc_roll.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim2,
 80047ca:	2104      	movs	r1, #4
 80047cc:	480d      	ldr	r0, [pc, #52]	; (8004804 <pwm_read_ch1+0x5c>)
 80047ce:	f005 fd4d 	bl	800a26c <HAL_TIM_ReadCapturedValue>
 80047d2:	4603      	mov	r3, r0
			TIM_CHANNEL_2) * 15000) / rc_roll.ICValue; //max2000 oluyor pwm out ile aynı
 80047d4:	f643 2298 	movw	r2, #15000	; 0x3a98
 80047d8:	fb03 f202 	mul.w	r2, r3, r2
 80047dc:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <pwm_read_ch1+0x60>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
			rc_roll.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim2,
 80047e4:	ee07 3a90 	vmov	s15, r3
 80047e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ec:	4b06      	ldr	r3, [pc, #24]	; (8004808 <pwm_read_ch1+0x60>)
 80047ee:	edc3 7a02 	vstr	s15, [r3, #8]

			rc_roll.frequency = 400000 / rc_roll.ICValue;
 80047f2:	4b05      	ldr	r3, [pc, #20]	; (8004808 <pwm_read_ch1+0x60>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a05      	ldr	r2, [pc, #20]	; (800480c <pwm_read_ch1+0x64>)
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	4a02      	ldr	r2, [pc, #8]	; (8004808 <pwm_read_ch1+0x60>)
 80047fe:	6053      	str	r3, [r2, #4]
		}
	}
}
 8004800:	bf00      	nop
 8004802:	bd80      	pop	{r7, pc}
 8004804:	200009c4 	.word	0x200009c4
 8004808:	200008dc 	.word	0x200008dc
 800480c:	00061a80 	.word	0x00061a80

08004810 <pwm_read_ch2>:
void pwm_read_ch2() {
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
	if (htim3.Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8004814:	4b15      	ldr	r3, [pc, #84]	; (800486c <pwm_read_ch2+0x5c>)
 8004816:	7f1b      	ldrb	r3, [r3, #28]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d125      	bne.n	8004868 <pwm_read_ch2+0x58>
		rc_yaw.ICValue = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 800481c:	2100      	movs	r1, #0
 800481e:	4813      	ldr	r0, [pc, #76]	; (800486c <pwm_read_ch2+0x5c>)
 8004820:	f005 fd24 	bl	800a26c <HAL_TIM_ReadCapturedValue>
 8004824:	4603      	mov	r3, r0
 8004826:	4a12      	ldr	r2, [pc, #72]	; (8004870 <pwm_read_ch2+0x60>)
 8004828:	6013      	str	r3, [r2, #0]

		if (rc_yaw.ICValue != 0) {
 800482a:	4b11      	ldr	r3, [pc, #68]	; (8004870 <pwm_read_ch2+0x60>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d01a      	beq.n	8004868 <pwm_read_ch2+0x58>
			rc_yaw.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim3,
 8004832:	2104      	movs	r1, #4
 8004834:	480d      	ldr	r0, [pc, #52]	; (800486c <pwm_read_ch2+0x5c>)
 8004836:	f005 fd19 	bl	800a26c <HAL_TIM_ReadCapturedValue>
 800483a:	4603      	mov	r3, r0
			TIM_CHANNEL_2) * 15000) / rc_yaw.ICValue;
 800483c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8004840:	fb03 f202 	mul.w	r2, r3, r2
 8004844:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <pwm_read_ch2+0x60>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	fbb2 f3f3 	udiv	r3, r2, r3
			rc_yaw.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim3,
 800484c:	ee07 3a90 	vmov	s15, r3
 8004850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004854:	4b06      	ldr	r3, [pc, #24]	; (8004870 <pwm_read_ch2+0x60>)
 8004856:	edc3 7a02 	vstr	s15, [r3, #8]

			rc_yaw.frequency = 400000 / rc_yaw.ICValue;
 800485a:	4b05      	ldr	r3, [pc, #20]	; (8004870 <pwm_read_ch2+0x60>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a05      	ldr	r2, [pc, #20]	; (8004874 <pwm_read_ch2+0x64>)
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	4a02      	ldr	r2, [pc, #8]	; (8004870 <pwm_read_ch2+0x60>)
 8004866:	6053      	str	r3, [r2, #4]
		}
	}
}
 8004868:	bf00      	nop
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20000a0c 	.word	0x20000a0c
 8004870:	200008ec 	.word	0x200008ec
 8004874:	00061a80 	.word	0x00061a80

08004878 <pwm_read_ch3>:
void pwm_read_ch3() {
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
	if (htim4.Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800487c:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <pwm_read_ch3+0x5c>)
 800487e:	7f1b      	ldrb	r3, [r3, #28]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d125      	bne.n	80048d0 <pwm_read_ch3+0x58>
		rc_mode.ICValue = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8004884:	2100      	movs	r1, #0
 8004886:	4813      	ldr	r0, [pc, #76]	; (80048d4 <pwm_read_ch3+0x5c>)
 8004888:	f005 fcf0 	bl	800a26c <HAL_TIM_ReadCapturedValue>
 800488c:	4603      	mov	r3, r0
 800488e:	4a12      	ldr	r2, [pc, #72]	; (80048d8 <pwm_read_ch3+0x60>)
 8004890:	6013      	str	r3, [r2, #0]

		if (rc_mode.ICValue != 0) {
 8004892:	4b11      	ldr	r3, [pc, #68]	; (80048d8 <pwm_read_ch3+0x60>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d01a      	beq.n	80048d0 <pwm_read_ch3+0x58>
			rc_mode.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim4,
 800489a:	2104      	movs	r1, #4
 800489c:	480d      	ldr	r0, [pc, #52]	; (80048d4 <pwm_read_ch3+0x5c>)
 800489e:	f005 fce5 	bl	800a26c <HAL_TIM_ReadCapturedValue>
 80048a2:	4603      	mov	r3, r0
			TIM_CHANNEL_2) * 15000) / rc_mode.ICValue;
 80048a4:	f643 2298 	movw	r2, #15000	; 0x3a98
 80048a8:	fb03 f202 	mul.w	r2, r3, r2
 80048ac:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <pwm_read_ch3+0x60>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
			rc_mode.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim4,
 80048b4:	ee07 3a90 	vmov	s15, r3
 80048b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048bc:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <pwm_read_ch3+0x60>)
 80048be:	edc3 7a02 	vstr	s15, [r3, #8]

			rc_mode.frequency = 400000 / rc_mode.ICValue;
 80048c2:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <pwm_read_ch3+0x60>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a05      	ldr	r2, [pc, #20]	; (80048dc <pwm_read_ch3+0x64>)
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	4a02      	ldr	r2, [pc, #8]	; (80048d8 <pwm_read_ch3+0x60>)
 80048ce:	6053      	str	r3, [r2, #4]
		}
	}

}
 80048d0:	bf00      	nop
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	20000a54 	.word	0x20000a54
 80048d8:	200008fc 	.word	0x200008fc
 80048dc:	00061a80 	.word	0x00061a80

080048e0 <pwm_read_ch4>:
void pwm_read_ch4() {
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
	if (htim9.Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80048e4:	4b2f      	ldr	r3, [pc, #188]	; (80049a4 <pwm_read_ch4+0xc4>)
 80048e6:	7f1b      	ldrb	r3, [r3, #28]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d159      	bne.n	80049a0 <pwm_read_ch4+0xc0>
		rc_throttle.ICValue = HAL_TIM_ReadCapturedValue(&htim9, TIM_CHANNEL_1);
 80048ec:	2100      	movs	r1, #0
 80048ee:	482d      	ldr	r0, [pc, #180]	; (80049a4 <pwm_read_ch4+0xc4>)
 80048f0:	f005 fcbc 	bl	800a26c <HAL_TIM_ReadCapturedValue>
 80048f4:	4603      	mov	r3, r0
 80048f6:	4a2c      	ldr	r2, [pc, #176]	; (80049a8 <pwm_read_ch4+0xc8>)
 80048f8:	6013      	str	r3, [r2, #0]

		if (rc_throttle.ICValue != 0) {
 80048fa:	4b2b      	ldr	r3, [pc, #172]	; (80049a8 <pwm_read_ch4+0xc8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d04e      	beq.n	80049a0 <pwm_read_ch4+0xc0>
			rc_throttle.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim9,
 8004902:	2104      	movs	r1, #4
 8004904:	4827      	ldr	r0, [pc, #156]	; (80049a4 <pwm_read_ch4+0xc4>)
 8004906:	f005 fcb1 	bl	800a26c <HAL_TIM_ReadCapturedValue>
 800490a:	4603      	mov	r3, r0
			TIM_CHANNEL_2) * 15000) / rc_throttle.ICValue;
 800490c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8004910:	fb03 f202 	mul.w	r2, r3, r2
 8004914:	4b24      	ldr	r3, [pc, #144]	; (80049a8 <pwm_read_ch4+0xc8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	fbb2 f3f3 	udiv	r3, r2, r3
			rc_throttle.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim9,
 800491c:	ee07 3a90 	vmov	s15, r3
 8004920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004924:	4b20      	ldr	r3, [pc, #128]	; (80049a8 <pwm_read_ch4+0xc8>)
 8004926:	edc3 7a02 	vstr	s15, [r3, #8]

			rc_throttle.frequency = 400000 / rc_throttle.ICValue;
 800492a:	4b1f      	ldr	r3, [pc, #124]	; (80049a8 <pwm_read_ch4+0xc8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a1f      	ldr	r2, [pc, #124]	; (80049ac <pwm_read_ch4+0xcc>)
 8004930:	fbb2 f3f3 	udiv	r3, r2, r3
 8004934:	4a1c      	ldr	r2, [pc, #112]	; (80049a8 <pwm_read_ch4+0xc8>)
 8004936:	6053      	str	r3, [r2, #4]
			if (rc_mode.dutyCycle < 1200) { // sadece 2 mod var kumanda da 3 mod var. kill mod falan eklenmek isteniyor ise kod eklenebilir.
 8004938:	4b1d      	ldr	r3, [pc, #116]	; (80049b0 <pwm_read_ch4+0xd0>)
 800493a:	edd3 7a02 	vldr	s15, [r3, #8]
 800493e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80049b4 <pwm_read_ch4+0xd4>
 8004942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494a:	d503      	bpl.n	8004954 <pwm_read_ch4+0x74>
				drive_mode = MANUAL_MODE;	// yukarıda iken manuel modda
 800494c:	4b1a      	ldr	r3, [pc, #104]	; (80049b8 <pwm_read_ch4+0xd8>)
 800494e:	2200      	movs	r2, #0
 8004950:	701a      	strb	r2, [r3, #0]
				drive_mode = SAFETY_MODE;
			}
		}
	}

}
 8004952:	e025      	b.n	80049a0 <pwm_read_ch4+0xc0>
			} else if (rc_mode.dutyCycle > 1700) {
 8004954:	4b16      	ldr	r3, [pc, #88]	; (80049b0 <pwm_read_ch4+0xd0>)
 8004956:	edd3 7a02 	vldr	s15, [r3, #8]
 800495a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80049bc <pwm_read_ch4+0xdc>
 800495e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004966:	dd03      	ble.n	8004970 <pwm_read_ch4+0x90>
				drive_mode = AUTONOMOUS_MODE;
 8004968:	4b13      	ldr	r3, [pc, #76]	; (80049b8 <pwm_read_ch4+0xd8>)
 800496a:	2201      	movs	r2, #1
 800496c:	701a      	strb	r2, [r3, #0]
}
 800496e:	e017      	b.n	80049a0 <pwm_read_ch4+0xc0>
			} else if (rc_mode.dutyCycle < 1700 || rc_mode.dutyCycle > 1200) {
 8004970:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <pwm_read_ch4+0xd0>)
 8004972:	edd3 7a02 	vldr	s15, [r3, #8]
 8004976:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80049bc <pwm_read_ch4+0xdc>
 800497a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800497e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004982:	d40a      	bmi.n	800499a <pwm_read_ch4+0xba>
 8004984:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <pwm_read_ch4+0xd0>)
 8004986:	edd3 7a02 	vldr	s15, [r3, #8]
 800498a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80049b4 <pwm_read_ch4+0xd4>
 800498e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004996:	dc00      	bgt.n	800499a <pwm_read_ch4+0xba>
}
 8004998:	e002      	b.n	80049a0 <pwm_read_ch4+0xc0>
				drive_mode = SAFETY_MODE;
 800499a:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <pwm_read_ch4+0xd8>)
 800499c:	2202      	movs	r2, #2
 800499e:	701a      	strb	r2, [r3, #0]
}
 80049a0:	bf00      	nop
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20000b2c 	.word	0x20000b2c
 80049a8:	2000090c 	.word	0x2000090c
 80049ac:	00061a80 	.word	0x00061a80
 80049b0:	200008fc 	.word	0x200008fc
 80049b4:	44960000 	.word	0x44960000
 80049b8:	20000478 	.word	0x20000478
 80049bc:	44d48000 	.word	0x44d48000

080049c0 <pwm_read_ch5>:
void pwm_read_ch5() {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
	if (htim12.Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80049c4:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <pwm_read_ch5+0x5c>)
 80049c6:	7f1b      	ldrb	r3, [r3, #28]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d125      	bne.n	8004a18 <pwm_read_ch5+0x58>
		rc_pitch.ICValue = HAL_TIM_ReadCapturedValue(&htim12, TIM_CHANNEL_1);
 80049cc:	2100      	movs	r1, #0
 80049ce:	4813      	ldr	r0, [pc, #76]	; (8004a1c <pwm_read_ch5+0x5c>)
 80049d0:	f005 fc4c 	bl	800a26c <HAL_TIM_ReadCapturedValue>
 80049d4:	4603      	mov	r3, r0
 80049d6:	4a12      	ldr	r2, [pc, #72]	; (8004a20 <pwm_read_ch5+0x60>)
 80049d8:	6013      	str	r3, [r2, #0]

		if (rc_pitch.ICValue != 0) {
 80049da:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <pwm_read_ch5+0x60>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d01a      	beq.n	8004a18 <pwm_read_ch5+0x58>
			rc_pitch.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim12,
 80049e2:	2104      	movs	r1, #4
 80049e4:	480d      	ldr	r0, [pc, #52]	; (8004a1c <pwm_read_ch5+0x5c>)
 80049e6:	f005 fc41 	bl	800a26c <HAL_TIM_ReadCapturedValue>
 80049ea:	4603      	mov	r3, r0
			TIM_CHANNEL_2) * 15000) / rc_pitch.ICValue;
 80049ec:	f643 2298 	movw	r2, #15000	; 0x3a98
 80049f0:	fb03 f202 	mul.w	r2, r3, r2
 80049f4:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <pwm_read_ch5+0x60>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	fbb2 f3f3 	udiv	r3, r2, r3
			rc_pitch.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim12,
 80049fc:	ee07 3a90 	vmov	s15, r3
 8004a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a04:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <pwm_read_ch5+0x60>)
 8004a06:	edc3 7a02 	vstr	s15, [r3, #8]

			rc_pitch.frequency = 400000 / rc_pitch.ICValue;
 8004a0a:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <pwm_read_ch5+0x60>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a05      	ldr	r2, [pc, #20]	; (8004a24 <pwm_read_ch5+0x64>)
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	4a02      	ldr	r2, [pc, #8]	; (8004a20 <pwm_read_ch5+0x60>)
 8004a16:	6053      	str	r3, [r2, #4]

		}
	}
}
 8004a18:	bf00      	nop
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	20000b74 	.word	0x20000b74
 8004a20:	2000091c 	.word	0x2000091c
 8004a24:	00061a80 	.word	0x00061a80

08004a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a2e:	2300      	movs	r3, #0
 8004a30:	607b      	str	r3, [r7, #4]
 8004a32:	4b12      	ldr	r3, [pc, #72]	; (8004a7c <HAL_MspInit+0x54>)
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	4a11      	ldr	r2, [pc, #68]	; (8004a7c <HAL_MspInit+0x54>)
 8004a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a3e:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <HAL_MspInit+0x54>)
 8004a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a46:	607b      	str	r3, [r7, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	603b      	str	r3, [r7, #0]
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <HAL_MspInit+0x54>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	4a0a      	ldr	r2, [pc, #40]	; (8004a7c <HAL_MspInit+0x54>)
 8004a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a58:	6413      	str	r3, [r2, #64]	; 0x40
 8004a5a:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <HAL_MspInit+0x54>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a66:	2200      	movs	r2, #0
 8004a68:	210f      	movs	r1, #15
 8004a6a:	f06f 0001 	mvn.w	r0, #1
 8004a6e:	f002 f85b 	bl	8006b28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a72:	bf00      	nop
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40023800 	.word	0x40023800

08004a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08c      	sub	sp, #48	; 0x30
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8004a90:	2300      	movs	r3, #0
 8004a92:	60bb      	str	r3, [r7, #8]
 8004a94:	4b2f      	ldr	r3, [pc, #188]	; (8004b54 <HAL_InitTick+0xd4>)
 8004a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a98:	4a2e      	ldr	r2, [pc, #184]	; (8004b54 <HAL_InitTick+0xd4>)
 8004a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a9e:	6453      	str	r3, [r2, #68]	; 0x44
 8004aa0:	4b2c      	ldr	r3, [pc, #176]	; (8004b54 <HAL_InitTick+0xd4>)
 8004aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004aac:	f107 020c 	add.w	r2, r7, #12
 8004ab0:	f107 0310 	add.w	r3, r7, #16
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f004 fb8e 	bl	80091d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004abc:	f004 fb78 	bl	80091b0 <HAL_RCC_GetPCLK2Freq>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	4a23      	ldr	r2, [pc, #140]	; (8004b58 <HAL_InitTick+0xd8>)
 8004aca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ace:	0c9b      	lsrs	r3, r3, #18
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8004ad4:	4b21      	ldr	r3, [pc, #132]	; (8004b5c <HAL_InitTick+0xdc>)
 8004ad6:	4a22      	ldr	r2, [pc, #136]	; (8004b60 <HAL_InitTick+0xe0>)
 8004ad8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8004ada:	4b20      	ldr	r3, [pc, #128]	; (8004b5c <HAL_InitTick+0xdc>)
 8004adc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004ae0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8004ae2:	4a1e      	ldr	r2, [pc, #120]	; (8004b5c <HAL_InitTick+0xdc>)
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8004ae8:	4b1c      	ldr	r3, [pc, #112]	; (8004b5c <HAL_InitTick+0xdc>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004aee:	4b1b      	ldr	r3, [pc, #108]	; (8004b5c <HAL_InitTick+0xdc>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004af4:	4b19      	ldr	r3, [pc, #100]	; (8004b5c <HAL_InitTick+0xdc>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8004afa:	4818      	ldr	r0, [pc, #96]	; (8004b5c <HAL_InitTick+0xdc>)
 8004afc:	f004 fb9e 	bl	800923c <HAL_TIM_Base_Init>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004b06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d11b      	bne.n	8004b46 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8004b0e:	4813      	ldr	r0, [pc, #76]	; (8004b5c <HAL_InitTick+0xdc>)
 8004b10:	f004 fc4c 	bl	80093ac <HAL_TIM_Base_Start_IT>
 8004b14:	4603      	mov	r3, r0
 8004b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d111      	bne.n	8004b46 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004b22:	2019      	movs	r0, #25
 8004b24:	f002 f81c 	bl	8006b60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b0f      	cmp	r3, #15
 8004b2c:	d808      	bhi.n	8004b40 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8004b2e:	2200      	movs	r2, #0
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	2019      	movs	r0, #25
 8004b34:	f001 fff8 	bl	8006b28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b38:	4a0a      	ldr	r2, [pc, #40]	; (8004b64 <HAL_InitTick+0xe4>)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	e002      	b.n	8004b46 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004b46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3730      	adds	r7, #48	; 0x30
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40023800 	.word	0x40023800
 8004b58:	431bde83 	.word	0x431bde83
 8004b5c:	20000930 	.word	0x20000930
 8004b60:	40014400 	.word	0x40014400
 8004b64:	2000007c 	.word	0x2000007c

08004b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004b6c:	e7fe      	b.n	8004b6c <NMI_Handler+0x4>
	...

08004b70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HARD FAULT'A GIRDI!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
 8004b74:	4801      	ldr	r0, [pc, #4]	; (8004b7c <HardFault_Handler+0xc>)
 8004b76:	f009 fab9 	bl	800e0ec <puts>
 8004b7a:	e7fb      	b.n	8004b74 <HardFault_Handler+0x4>
 8004b7c:	08011620 	.word	0x08011620

08004b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b84:	e7fe      	b.n	8004b84 <MemManage_Handler+0x4>

08004b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b86:	b480      	push	{r7}
 8004b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b8a:	e7fe      	b.n	8004b8a <BusFault_Handler+0x4>

08004b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b90:	e7fe      	b.n	8004b90 <UsageFault_Handler+0x4>

08004b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b92:	b480      	push	{r7}
 8004b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b96:	bf00      	nop
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ba4:	4803      	ldr	r0, [pc, #12]	; (8004bb4 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8004ba6:	f004 fff1 	bl	8009b8c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8004baa:	4803      	ldr	r0, [pc, #12]	; (8004bb8 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8004bac:	f004 ffee 	bl	8009b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004bb0:	bf00      	nop
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	2000097c 	.word	0x2000097c
 8004bb8:	20000b2c 	.word	0x20000b2c

08004bbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004bc0:	4803      	ldr	r0, [pc, #12]	; (8004bd0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004bc2:	f004 ffe3 	bl	8009b8c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004bc6:	4803      	ldr	r0, [pc, #12]	; (8004bd4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004bc8:	f004 ffe0 	bl	8009b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004bcc:	bf00      	nop
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	2000097c 	.word	0x2000097c
 8004bd4:	20000930 	.word	0x20000930

08004bd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004bdc:	4802      	ldr	r0, [pc, #8]	; (8004be8 <TIM2_IRQHandler+0x10>)
 8004bde:	f004 ffd5 	bl	8009b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004be2:	bf00      	nop
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	200009c4 	.word	0x200009c4

08004bec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004bf0:	4802      	ldr	r0, [pc, #8]	; (8004bfc <TIM3_IRQHandler+0x10>)
 8004bf2:	f004 ffcb 	bl	8009b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004bf6:	bf00      	nop
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000a0c 	.word	0x20000a0c

08004c00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004c04:	4802      	ldr	r0, [pc, #8]	; (8004c10 <TIM4_IRQHandler+0x10>)
 8004c06:	f004 ffc1 	bl	8009b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004c0a:	bf00      	nop
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000a54 	.word	0x20000a54

08004c14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8004c18:	4803      	ldr	r0, [pc, #12]	; (8004c28 <USART2_IRQHandler+0x14>)
 8004c1a:	f001 f89d 	bl	8005d58 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004c1e:	4802      	ldr	r0, [pc, #8]	; (8004c28 <USART2_IRQHandler+0x14>)
 8004c20:	f006 fa44 	bl	800b0ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8004c24:	bf00      	nop
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	2000101c 	.word	0x2000101c

08004c2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004c30:	4804      	ldr	r0, [pc, #16]	; (8004c44 <USART3_IRQHandler+0x18>)
 8004c32:	f006 fa3b 	bl	800b0ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
	HAL_UART_Receive_IT(&huart3, (uint8_t*) uartBuffer.buffer, 8);
 8004c36:	2208      	movs	r2, #8
 8004c38:	4903      	ldr	r1, [pc, #12]	; (8004c48 <USART3_IRQHandler+0x1c>)
 8004c3a:	4802      	ldr	r0, [pc, #8]	; (8004c44 <USART3_IRQHandler+0x18>)
 8004c3c:	f006 fa05 	bl	800b04a <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 8004c40:	bf00      	nop
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20001060 	.word	0x20001060
 8004c48:	200008d4 	.word	0x200008d4

08004c4c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8004c50:	4802      	ldr	r0, [pc, #8]	; (8004c5c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8004c52:	f004 ff9b 	bl	8009b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004c56:	bf00      	nop
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000b74 	.word	0x20000b74

08004c60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  return 1;
 8004c64:	2301      	movs	r3, #1
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <_kill>:

int _kill(int pid, int sig)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004c7a:	f009 fbbf 	bl	800e3fc <__errno>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2216      	movs	r2, #22
 8004c82:	601a      	str	r2, [r3, #0]
  return -1;
 8004c84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <_exit>:

void _exit (int status)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004c98:	f04f 31ff 	mov.w	r1, #4294967295
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff ffe7 	bl	8004c70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ca2:	e7fe      	b.n	8004ca2 <_exit+0x12>

08004ca4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	e00a      	b.n	8004ccc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004cb6:	f3af 8000 	nop.w
 8004cba:	4601      	mov	r1, r0
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	60ba      	str	r2, [r7, #8]
 8004cc2:	b2ca      	uxtb	r2, r1
 8004cc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	dbf0      	blt.n	8004cb6 <_read+0x12>
  }

  return len;
 8004cd4:	687b      	ldr	r3, [r7, #4]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <_close>:
  }
  return len;
}

int _close(int file)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d06:	605a      	str	r2, [r3, #4]
  return 0;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <_isatty>:

int _isatty(int file)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004d1e:	2301      	movs	r3, #1
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
	...

08004d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d50:	4a14      	ldr	r2, [pc, #80]	; (8004da4 <_sbrk+0x5c>)
 8004d52:	4b15      	ldr	r3, [pc, #84]	; (8004da8 <_sbrk+0x60>)
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d5c:	4b13      	ldr	r3, [pc, #76]	; (8004dac <_sbrk+0x64>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d102      	bne.n	8004d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d64:	4b11      	ldr	r3, [pc, #68]	; (8004dac <_sbrk+0x64>)
 8004d66:	4a12      	ldr	r2, [pc, #72]	; (8004db0 <_sbrk+0x68>)
 8004d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d6a:	4b10      	ldr	r3, [pc, #64]	; (8004dac <_sbrk+0x64>)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4413      	add	r3, r2
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d207      	bcs.n	8004d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d78:	f009 fb40 	bl	800e3fc <__errno>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	220c      	movs	r2, #12
 8004d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d82:	f04f 33ff 	mov.w	r3, #4294967295
 8004d86:	e009      	b.n	8004d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d88:	4b08      	ldr	r3, [pc, #32]	; (8004dac <_sbrk+0x64>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d8e:	4b07      	ldr	r3, [pc, #28]	; (8004dac <_sbrk+0x64>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4413      	add	r3, r2
 8004d96:	4a05      	ldr	r2, [pc, #20]	; (8004dac <_sbrk+0x64>)
 8004d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20020000 	.word	0x20020000
 8004da8:	00000400 	.word	0x00000400
 8004dac:	20000978 	.word	0x20000978
 8004db0:	20004f48 	.word	0x20004f48

08004db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004db8:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <SystemInit+0x20>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbe:	4a05      	ldr	r2, [pc, #20]	; (8004dd4 <SystemInit+0x20>)
 8004dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004dc8:	bf00      	nop
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	e000ed00 	.word	0xe000ed00

08004dd8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b096      	sub	sp, #88	; 0x58
 8004ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004dde:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	605a      	str	r2, [r3, #4]
 8004de8:	609a      	str	r2, [r3, #8]
 8004dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	605a      	str	r2, [r3, #4]
 8004e00:	609a      	str	r2, [r3, #8]
 8004e02:	60da      	str	r2, [r3, #12]
 8004e04:	611a      	str	r2, [r3, #16]
 8004e06:	615a      	str	r2, [r3, #20]
 8004e08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004e0a:	1d3b      	adds	r3, r7, #4
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	2100      	movs	r1, #0
 8004e10:	4618      	mov	r0, r3
 8004e12:	f009 fa4b 	bl	800e2ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004e16:	4b50      	ldr	r3, [pc, #320]	; (8004f58 <MX_TIM1_Init+0x180>)
 8004e18:	4a50      	ldr	r2, [pc, #320]	; (8004f5c <MX_TIM1_Init+0x184>)
 8004e1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8004e1c:	4b4e      	ldr	r3, [pc, #312]	; (8004f58 <MX_TIM1_Init+0x180>)
 8004e1e:	22a7      	movs	r2, #167	; 0xa7
 8004e20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e22:	4b4d      	ldr	r3, [pc, #308]	; (8004f58 <MX_TIM1_Init+0x180>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8004e28:	4b4b      	ldr	r3, [pc, #300]	; (8004f58 <MX_TIM1_Init+0x180>)
 8004e2a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004e2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e30:	4b49      	ldr	r3, [pc, #292]	; (8004f58 <MX_TIM1_Init+0x180>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004e36:	4b48      	ldr	r3, [pc, #288]	; (8004f58 <MX_TIM1_Init+0x180>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e3c:	4b46      	ldr	r3, [pc, #280]	; (8004f58 <MX_TIM1_Init+0x180>)
 8004e3e:	2280      	movs	r2, #128	; 0x80
 8004e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004e42:	4845      	ldr	r0, [pc, #276]	; (8004f58 <MX_TIM1_Init+0x180>)
 8004e44:	f004 f9fa 	bl	800923c <HAL_TIM_Base_Init>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004e4e:	f7ff fc1d 	bl	800468c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004e58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	483e      	ldr	r0, [pc, #248]	; (8004f58 <MX_TIM1_Init+0x180>)
 8004e60:	f005 f8fa 	bl	800a058 <HAL_TIM_ConfigClockSource>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004e6a:	f7ff fc0f 	bl	800468c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004e6e:	483a      	ldr	r0, [pc, #232]	; (8004f58 <MX_TIM1_Init+0x180>)
 8004e70:	f004 fb0c 	bl	800948c <HAL_TIM_PWM_Init>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004e7a:	f7ff fc07 	bl	800468c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e82:	2300      	movs	r3, #0
 8004e84:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4832      	ldr	r0, [pc, #200]	; (8004f58 <MX_TIM1_Init+0x180>)
 8004e8e:	f005 ff1b 	bl	800acc8 <HAL_TIMEx_MasterConfigSynchronization>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004e98:	f7ff fbf8 	bl	800468c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e9c:	2360      	movs	r3, #96	; 0x60
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004eac:	2300      	movs	r3, #0
 8004eae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4825      	ldr	r0, [pc, #148]	; (8004f58 <MX_TIM1_Init+0x180>)
 8004ec2:	f005 f807 	bl	8009ed4 <HAL_TIM_PWM_ConfigChannel>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004ecc:	f7ff fbde 	bl	800468c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ed4:	2204      	movs	r2, #4
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	481f      	ldr	r0, [pc, #124]	; (8004f58 <MX_TIM1_Init+0x180>)
 8004eda:	f004 fffb 	bl	8009ed4 <HAL_TIM_PWM_ConfigChannel>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8004ee4:	f7ff fbd2 	bl	800468c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eec:	2208      	movs	r2, #8
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4819      	ldr	r0, [pc, #100]	; (8004f58 <MX_TIM1_Init+0x180>)
 8004ef2:	f004 ffef 	bl	8009ed4 <HAL_TIM_PWM_ConfigChannel>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8004efc:	f7ff fbc6 	bl	800468c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f04:	220c      	movs	r2, #12
 8004f06:	4619      	mov	r1, r3
 8004f08:	4813      	ldr	r0, [pc, #76]	; (8004f58 <MX_TIM1_Init+0x180>)
 8004f0a:	f004 ffe3 	bl	8009ed4 <HAL_TIM_PWM_ConfigChannel>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8004f14:	f7ff fbba 	bl	800468c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004f32:	2300      	movs	r3, #0
 8004f34:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004f36:	1d3b      	adds	r3, r7, #4
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4807      	ldr	r0, [pc, #28]	; (8004f58 <MX_TIM1_Init+0x180>)
 8004f3c:	f005 ff40 	bl	800adc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8004f46:	f7ff fba1 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004f4a:	4803      	ldr	r0, [pc, #12]	; (8004f58 <MX_TIM1_Init+0x180>)
 8004f4c:	f000 fd12 	bl	8005974 <HAL_TIM_MspPostInit>

}
 8004f50:	bf00      	nop
 8004f52:	3758      	adds	r7, #88	; 0x58
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	2000097c 	.word	0x2000097c
 8004f5c:	40010000 	.word	0x40010000

08004f60 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b090      	sub	sp, #64	; 0x40
 8004f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	605a      	str	r2, [r3, #4]
 8004f70:	609a      	str	r2, [r3, #8]
 8004f72:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004f74:	f107 031c 	add.w	r3, r7, #28
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	605a      	str	r2, [r3, #4]
 8004f7e:	609a      	str	r2, [r3, #8]
 8004f80:	60da      	str	r2, [r3, #12]
 8004f82:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004f84:	f107 030c 	add.w	r3, r7, #12
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	605a      	str	r2, [r3, #4]
 8004f8e:	609a      	str	r2, [r3, #8]
 8004f90:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f92:	1d3b      	adds	r3, r7, #4
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004f9a:	4b3f      	ldr	r3, [pc, #252]	; (8005098 <MX_TIM2_Init+0x138>)
 8004f9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004fa0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2100-1;
 8004fa2:	4b3d      	ldr	r3, [pc, #244]	; (8005098 <MX_TIM2_Init+0x138>)
 8004fa4:	f640 0233 	movw	r2, #2099	; 0x833
 8004fa8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004faa:	4b3b      	ldr	r3, [pc, #236]	; (8005098 <MX_TIM2_Init+0x138>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8004fb0:	4b39      	ldr	r3, [pc, #228]	; (8005098 <MX_TIM2_Init+0x138>)
 8004fb2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004fb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fb8:	4b37      	ldr	r3, [pc, #220]	; (8005098 <MX_TIM2_Init+0x138>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fbe:	4b36      	ldr	r3, [pc, #216]	; (8005098 <MX_TIM2_Init+0x138>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004fc4:	4834      	ldr	r0, [pc, #208]	; (8005098 <MX_TIM2_Init+0x138>)
 8004fc6:	f004 f939 	bl	800923c <HAL_TIM_Base_Init>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8004fd0:	f7ff fb5c 	bl	800468c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fd8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004fda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fde:	4619      	mov	r1, r3
 8004fe0:	482d      	ldr	r0, [pc, #180]	; (8005098 <MX_TIM2_Init+0x138>)
 8004fe2:	f005 f839 	bl	800a058 <HAL_TIM_ConfigClockSource>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8004fec:	f7ff fb4e 	bl	800468c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004ff0:	4829      	ldr	r0, [pc, #164]	; (8005098 <MX_TIM2_Init+0x138>)
 8004ff2:	f004 fb6d 	bl	80096d0 <HAL_TIM_IC_Init>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8004ffc:	f7ff fb46 	bl	800468c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8005000:	2304      	movs	r3, #4
 8005002:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8005004:	2350      	movs	r3, #80	; 0x50
 8005006:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005008:	2300      	movs	r3, #0
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800500c:	2300      	movs	r3, #0
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8005014:	f107 031c 	add.w	r3, r7, #28
 8005018:	4619      	mov	r1, r3
 800501a:	481f      	ldr	r0, [pc, #124]	; (8005098 <MX_TIM2_Init+0x138>)
 800501c:	f005 f8e3 	bl	800a1e6 <HAL_TIM_SlaveConfigSynchro>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8005026:	f7ff fb31 	bl	800468c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800502e:	2301      	movs	r3, #1
 8005030:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800503a:	f107 030c 	add.w	r3, r7, #12
 800503e:	2200      	movs	r2, #0
 8005040:	4619      	mov	r1, r3
 8005042:	4815      	ldr	r0, [pc, #84]	; (8005098 <MX_TIM2_Init+0x138>)
 8005044:	f004 feaa 	bl	8009d9c <HAL_TIM_IC_ConfigChannel>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800504e:	f7ff fb1d 	bl	800468c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8005052:	2302      	movs	r3, #2
 8005054:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8005056:	2302      	movs	r3, #2
 8005058:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800505a:	f107 030c 	add.w	r3, r7, #12
 800505e:	2204      	movs	r2, #4
 8005060:	4619      	mov	r1, r3
 8005062:	480d      	ldr	r0, [pc, #52]	; (8005098 <MX_TIM2_Init+0x138>)
 8005064:	f004 fe9a 	bl	8009d9c <HAL_TIM_IC_ConfigChannel>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 800506e:	f7ff fb0d 	bl	800468c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005072:	2300      	movs	r3, #0
 8005074:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005076:	2300      	movs	r3, #0
 8005078:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800507a:	1d3b      	adds	r3, r7, #4
 800507c:	4619      	mov	r1, r3
 800507e:	4806      	ldr	r0, [pc, #24]	; (8005098 <MX_TIM2_Init+0x138>)
 8005080:	f005 fe22 	bl	800acc8 <HAL_TIMEx_MasterConfigSynchronization>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 800508a:	f7ff faff 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800508e:	bf00      	nop
 8005090:	3740      	adds	r7, #64	; 0x40
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	200009c4 	.word	0x200009c4

0800509c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b090      	sub	sp, #64	; 0x40
 80050a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	605a      	str	r2, [r3, #4]
 80050ac:	609a      	str	r2, [r3, #8]
 80050ae:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80050b0:	f107 031c 	add.w	r3, r7, #28
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	605a      	str	r2, [r3, #4]
 80050ba:	609a      	str	r2, [r3, #8]
 80050bc:	60da      	str	r2, [r3, #12]
 80050be:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80050c0:	f107 030c 	add.w	r3, r7, #12
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	605a      	str	r2, [r3, #4]
 80050ca:	609a      	str	r2, [r3, #8]
 80050cc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050ce:	1d3b      	adds	r3, r7, #4
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80050d6:	4b3e      	ldr	r3, [pc, #248]	; (80051d0 <MX_TIM3_Init+0x134>)
 80050d8:	4a3e      	ldr	r2, [pc, #248]	; (80051d4 <MX_TIM3_Init+0x138>)
 80050da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 210-1;
 80050dc:	4b3c      	ldr	r3, [pc, #240]	; (80051d0 <MX_TIM3_Init+0x134>)
 80050de:	22d1      	movs	r2, #209	; 0xd1
 80050e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050e2:	4b3b      	ldr	r3, [pc, #236]	; (80051d0 <MX_TIM3_Init+0x134>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80050e8:	4b39      	ldr	r3, [pc, #228]	; (80051d0 <MX_TIM3_Init+0x134>)
 80050ea:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80050ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050f0:	4b37      	ldr	r3, [pc, #220]	; (80051d0 <MX_TIM3_Init+0x134>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050f6:	4b36      	ldr	r3, [pc, #216]	; (80051d0 <MX_TIM3_Init+0x134>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80050fc:	4834      	ldr	r0, [pc, #208]	; (80051d0 <MX_TIM3_Init+0x134>)
 80050fe:	f004 f89d 	bl	800923c <HAL_TIM_Base_Init>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8005108:	f7ff fac0 	bl	800468c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800510c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005110:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005112:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005116:	4619      	mov	r1, r3
 8005118:	482d      	ldr	r0, [pc, #180]	; (80051d0 <MX_TIM3_Init+0x134>)
 800511a:	f004 ff9d 	bl	800a058 <HAL_TIM_ConfigClockSource>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8005124:	f7ff fab2 	bl	800468c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8005128:	4829      	ldr	r0, [pc, #164]	; (80051d0 <MX_TIM3_Init+0x134>)
 800512a:	f004 fad1 	bl	80096d0 <HAL_TIM_IC_Init>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005134:	f7ff faaa 	bl	800468c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8005138:	2304      	movs	r3, #4
 800513a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800513c:	2350      	movs	r3, #80	; 0x50
 800513e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005140:	2300      	movs	r3, #0
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8005144:	2300      	movs	r3, #0
 8005146:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800514c:	f107 031c 	add.w	r3, r7, #28
 8005150:	4619      	mov	r1, r3
 8005152:	481f      	ldr	r0, [pc, #124]	; (80051d0 <MX_TIM3_Init+0x134>)
 8005154:	f005 f847 	bl	800a1e6 <HAL_TIM_SlaveConfigSynchro>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800515e:	f7ff fa95 	bl	800468c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005166:	2301      	movs	r3, #1
 8005168:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800516e:	2300      	movs	r3, #0
 8005170:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005172:	f107 030c 	add.w	r3, r7, #12
 8005176:	2200      	movs	r2, #0
 8005178:	4619      	mov	r1, r3
 800517a:	4815      	ldr	r0, [pc, #84]	; (80051d0 <MX_TIM3_Init+0x134>)
 800517c:	f004 fe0e 	bl	8009d9c <HAL_TIM_IC_ConfigChannel>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8005186:	f7ff fa81 	bl	800468c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800518a:	2302      	movs	r3, #2
 800518c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800518e:	2302      	movs	r3, #2
 8005190:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005192:	f107 030c 	add.w	r3, r7, #12
 8005196:	2204      	movs	r2, #4
 8005198:	4619      	mov	r1, r3
 800519a:	480d      	ldr	r0, [pc, #52]	; (80051d0 <MX_TIM3_Init+0x134>)
 800519c:	f004 fdfe 	bl	8009d9c <HAL_TIM_IC_ConfigChannel>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 80051a6:	f7ff fa71 	bl	800468c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051aa:	2300      	movs	r3, #0
 80051ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80051b2:	1d3b      	adds	r3, r7, #4
 80051b4:	4619      	mov	r1, r3
 80051b6:	4806      	ldr	r0, [pc, #24]	; (80051d0 <MX_TIM3_Init+0x134>)
 80051b8:	f005 fd86 	bl	800acc8 <HAL_TIMEx_MasterConfigSynchronization>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 80051c2:	f7ff fa63 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80051c6:	bf00      	nop
 80051c8:	3740      	adds	r7, #64	; 0x40
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	20000a0c 	.word	0x20000a0c
 80051d4:	40000400 	.word	0x40000400

080051d8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b090      	sub	sp, #64	; 0x40
 80051dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	605a      	str	r2, [r3, #4]
 80051e8:	609a      	str	r2, [r3, #8]
 80051ea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80051ec:	f107 031c 	add.w	r3, r7, #28
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	605a      	str	r2, [r3, #4]
 80051f6:	609a      	str	r2, [r3, #8]
 80051f8:	60da      	str	r2, [r3, #12]
 80051fa:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80051fc:	f107 030c 	add.w	r3, r7, #12
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	609a      	str	r2, [r3, #8]
 8005208:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800520a:	1d3b      	adds	r3, r7, #4
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005212:	4b3e      	ldr	r3, [pc, #248]	; (800530c <MX_TIM4_Init+0x134>)
 8005214:	4a3e      	ldr	r2, [pc, #248]	; (8005310 <MX_TIM4_Init+0x138>)
 8005216:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 210-1;
 8005218:	4b3c      	ldr	r3, [pc, #240]	; (800530c <MX_TIM4_Init+0x134>)
 800521a:	22d1      	movs	r2, #209	; 0xd1
 800521c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800521e:	4b3b      	ldr	r3, [pc, #236]	; (800530c <MX_TIM4_Init+0x134>)
 8005220:	2200      	movs	r2, #0
 8005222:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8005224:	4b39      	ldr	r3, [pc, #228]	; (800530c <MX_TIM4_Init+0x134>)
 8005226:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800522a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800522c:	4b37      	ldr	r3, [pc, #220]	; (800530c <MX_TIM4_Init+0x134>)
 800522e:	2200      	movs	r2, #0
 8005230:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005232:	4b36      	ldr	r3, [pc, #216]	; (800530c <MX_TIM4_Init+0x134>)
 8005234:	2200      	movs	r2, #0
 8005236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005238:	4834      	ldr	r0, [pc, #208]	; (800530c <MX_TIM4_Init+0x134>)
 800523a:	f003 ffff 	bl	800923c <HAL_TIM_Base_Init>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8005244:	f7ff fa22 	bl	800468c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800524c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800524e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005252:	4619      	mov	r1, r3
 8005254:	482d      	ldr	r0, [pc, #180]	; (800530c <MX_TIM4_Init+0x134>)
 8005256:	f004 feff 	bl	800a058 <HAL_TIM_ConfigClockSource>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8005260:	f7ff fa14 	bl	800468c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8005264:	4829      	ldr	r0, [pc, #164]	; (800530c <MX_TIM4_Init+0x134>)
 8005266:	f004 fa33 	bl	80096d0 <HAL_TIM_IC_Init>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8005270:	f7ff fa0c 	bl	800468c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8005274:	2304      	movs	r3, #4
 8005276:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8005278:	2350      	movs	r3, #80	; 0x50
 800527a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800527c:	2300      	movs	r3, #0
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8005280:	2300      	movs	r3, #0
 8005282:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8005288:	f107 031c 	add.w	r3, r7, #28
 800528c:	4619      	mov	r1, r3
 800528e:	481f      	ldr	r0, [pc, #124]	; (800530c <MX_TIM4_Init+0x134>)
 8005290:	f004 ffa9 	bl	800a1e6 <HAL_TIM_SlaveConfigSynchro>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 800529a:	f7ff f9f7 	bl	800468c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80052a2:	2301      	movs	r3, #1
 80052a4:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80052a6:	2300      	movs	r3, #0
 80052a8:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80052ae:	f107 030c 	add.w	r3, r7, #12
 80052b2:	2200      	movs	r2, #0
 80052b4:	4619      	mov	r1, r3
 80052b6:	4815      	ldr	r0, [pc, #84]	; (800530c <MX_TIM4_Init+0x134>)
 80052b8:	f004 fd70 	bl	8009d9c <HAL_TIM_IC_ConfigChannel>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80052c2:	f7ff f9e3 	bl	800468c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80052c6:	2302      	movs	r3, #2
 80052c8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80052ca:	2302      	movs	r3, #2
 80052cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80052ce:	f107 030c 	add.w	r3, r7, #12
 80052d2:	2204      	movs	r2, #4
 80052d4:	4619      	mov	r1, r3
 80052d6:	480d      	ldr	r0, [pc, #52]	; (800530c <MX_TIM4_Init+0x134>)
 80052d8:	f004 fd60 	bl	8009d9c <HAL_TIM_IC_ConfigChannel>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <MX_TIM4_Init+0x10e>
  {
    Error_Handler();
 80052e2:	f7ff f9d3 	bl	800468c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052e6:	2300      	movs	r3, #0
 80052e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052ea:	2300      	movs	r3, #0
 80052ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80052ee:	1d3b      	adds	r3, r7, #4
 80052f0:	4619      	mov	r1, r3
 80052f2:	4806      	ldr	r0, [pc, #24]	; (800530c <MX_TIM4_Init+0x134>)
 80052f4:	f005 fce8 	bl	800acc8 <HAL_TIMEx_MasterConfigSynchronization>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <MX_TIM4_Init+0x12a>
  {
    Error_Handler();
 80052fe:	f7ff f9c5 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005302:	bf00      	nop
 8005304:	3740      	adds	r7, #64	; 0x40
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20000a54 	.word	0x20000a54
 8005310:	40000800 	.word	0x40000800

08005314 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800531a:	f107 0308 	add.w	r3, r7, #8
 800531e:	2200      	movs	r2, #0
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	605a      	str	r2, [r3, #4]
 8005324:	609a      	str	r2, [r3, #8]
 8005326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005328:	463b      	mov	r3, r7
 800532a:	2200      	movs	r2, #0
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005330:	4b1c      	ldr	r3, [pc, #112]	; (80053a4 <MX_TIM5_Init+0x90>)
 8005332:	4a1d      	ldr	r2, [pc, #116]	; (80053a8 <MX_TIM5_Init+0x94>)
 8005334:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8005336:	4b1b      	ldr	r3, [pc, #108]	; (80053a4 <MX_TIM5_Init+0x90>)
 8005338:	2253      	movs	r2, #83	; 0x53
 800533a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800533c:	4b19      	ldr	r3, [pc, #100]	; (80053a4 <MX_TIM5_Init+0x90>)
 800533e:	2200      	movs	r2, #0
 8005340:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000000-1;
 8005342:	4b18      	ldr	r3, [pc, #96]	; (80053a4 <MX_TIM5_Init+0x90>)
 8005344:	4a19      	ldr	r2, [pc, #100]	; (80053ac <MX_TIM5_Init+0x98>)
 8005346:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005348:	4b16      	ldr	r3, [pc, #88]	; (80053a4 <MX_TIM5_Init+0x90>)
 800534a:	2200      	movs	r2, #0
 800534c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800534e:	4b15      	ldr	r3, [pc, #84]	; (80053a4 <MX_TIM5_Init+0x90>)
 8005350:	2200      	movs	r2, #0
 8005352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005354:	4813      	ldr	r0, [pc, #76]	; (80053a4 <MX_TIM5_Init+0x90>)
 8005356:	f003 ff71 	bl	800923c <HAL_TIM_Base_Init>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8005360:	f7ff f994 	bl	800468c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005368:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800536a:	f107 0308 	add.w	r3, r7, #8
 800536e:	4619      	mov	r1, r3
 8005370:	480c      	ldr	r0, [pc, #48]	; (80053a4 <MX_TIM5_Init+0x90>)
 8005372:	f004 fe71 	bl	800a058 <HAL_TIM_ConfigClockSource>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 800537c:	f7ff f986 	bl	800468c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005380:	2300      	movs	r3, #0
 8005382:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005384:	2300      	movs	r3, #0
 8005386:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005388:	463b      	mov	r3, r7
 800538a:	4619      	mov	r1, r3
 800538c:	4805      	ldr	r0, [pc, #20]	; (80053a4 <MX_TIM5_Init+0x90>)
 800538e:	f005 fc9b 	bl	800acc8 <HAL_TIMEx_MasterConfigSynchronization>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8005398:	f7ff f978 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800539c:	bf00      	nop
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20000a9c 	.word	0x20000a9c
 80053a8:	40000c00 	.word	0x40000c00
 80053ac:	000f423f 	.word	0x000f423f

080053b0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053b6:	463b      	mov	r3, r7
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80053be:	4b15      	ldr	r3, [pc, #84]	; (8005414 <MX_TIM6_Init+0x64>)
 80053c0:	4a15      	ldr	r2, [pc, #84]	; (8005418 <MX_TIM6_Init+0x68>)
 80053c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 80053c4:	4b13      	ldr	r3, [pc, #76]	; (8005414 <MX_TIM6_Init+0x64>)
 80053c6:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80053ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053cc:	4b11      	ldr	r3, [pc, #68]	; (8005414 <MX_TIM6_Init+0x64>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000-1;
 80053d2:	4b10      	ldr	r3, [pc, #64]	; (8005414 <MX_TIM6_Init+0x64>)
 80053d4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80053d8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053da:	4b0e      	ldr	r3, [pc, #56]	; (8005414 <MX_TIM6_Init+0x64>)
 80053dc:	2200      	movs	r2, #0
 80053de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80053e0:	480c      	ldr	r0, [pc, #48]	; (8005414 <MX_TIM6_Init+0x64>)
 80053e2:	f003 ff2b 	bl	800923c <HAL_TIM_Base_Init>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80053ec:	f7ff f94e 	bl	800468c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053f0:	2300      	movs	r3, #0
 80053f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053f4:	2300      	movs	r3, #0
 80053f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80053f8:	463b      	mov	r3, r7
 80053fa:	4619      	mov	r1, r3
 80053fc:	4805      	ldr	r0, [pc, #20]	; (8005414 <MX_TIM6_Init+0x64>)
 80053fe:	f005 fc63 	bl	800acc8 <HAL_TIMEx_MasterConfigSynchronization>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8005408:	f7ff f940 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800540c:	bf00      	nop
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	20000ae4 	.word	0x20000ae4
 8005418:	40001000 	.word	0x40001000

0800541c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08e      	sub	sp, #56	; 0x38
 8005420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	605a      	str	r2, [r3, #4]
 800542c:	609a      	str	r2, [r3, #8]
 800542e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8005430:	f107 0314 	add.w	r3, r7, #20
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	605a      	str	r2, [r3, #4]
 800543a:	609a      	str	r2, [r3, #8]
 800543c:	60da      	str	r2, [r3, #12]
 800543e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005440:	1d3b      	adds	r3, r7, #4
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	605a      	str	r2, [r3, #4]
 8005448:	609a      	str	r2, [r3, #8]
 800544a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800544c:	4b36      	ldr	r3, [pc, #216]	; (8005528 <MX_TIM9_Init+0x10c>)
 800544e:	4a37      	ldr	r2, [pc, #220]	; (800552c <MX_TIM9_Init+0x110>)
 8005450:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 420-1;
 8005452:	4b35      	ldr	r3, [pc, #212]	; (8005528 <MX_TIM9_Init+0x10c>)
 8005454:	f240 12a3 	movw	r2, #419	; 0x1a3
 8005458:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800545a:	4b33      	ldr	r3, [pc, #204]	; (8005528 <MX_TIM9_Init+0x10c>)
 800545c:	2200      	movs	r2, #0
 800545e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 8005460:	4b31      	ldr	r3, [pc, #196]	; (8005528 <MX_TIM9_Init+0x10c>)
 8005462:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005466:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005468:	4b2f      	ldr	r3, [pc, #188]	; (8005528 <MX_TIM9_Init+0x10c>)
 800546a:	2200      	movs	r2, #0
 800546c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800546e:	4b2e      	ldr	r3, [pc, #184]	; (8005528 <MX_TIM9_Init+0x10c>)
 8005470:	2200      	movs	r2, #0
 8005472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8005474:	482c      	ldr	r0, [pc, #176]	; (8005528 <MX_TIM9_Init+0x10c>)
 8005476:	f003 fee1 	bl	800923c <HAL_TIM_Base_Init>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <MX_TIM9_Init+0x68>
  {
    Error_Handler();
 8005480:	f7ff f904 	bl	800468c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005488:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800548a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800548e:	4619      	mov	r1, r3
 8005490:	4825      	ldr	r0, [pc, #148]	; (8005528 <MX_TIM9_Init+0x10c>)
 8005492:	f004 fde1 	bl	800a058 <HAL_TIM_ConfigClockSource>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <MX_TIM9_Init+0x84>
  {
    Error_Handler();
 800549c:	f7ff f8f6 	bl	800468c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 80054a0:	4821      	ldr	r0, [pc, #132]	; (8005528 <MX_TIM9_Init+0x10c>)
 80054a2:	f004 f915 	bl	80096d0 <HAL_TIM_IC_Init>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <MX_TIM9_Init+0x94>
  {
    Error_Handler();
 80054ac:	f7ff f8ee 	bl	800468c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80054b0:	2304      	movs	r3, #4
 80054b2:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80054b4:	2350      	movs	r3, #80	; 0x50
 80054b6:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80054b8:	2300      	movs	r3, #0
 80054ba:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80054bc:	2300      	movs	r3, #0
 80054be:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 80054c0:	2300      	movs	r3, #0
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 80054c4:	f107 0314 	add.w	r3, r7, #20
 80054c8:	4619      	mov	r1, r3
 80054ca:	4817      	ldr	r0, [pc, #92]	; (8005528 <MX_TIM9_Init+0x10c>)
 80054cc:	f004 fe8b 	bl	800a1e6 <HAL_TIM_SlaveConfigSynchro>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <MX_TIM9_Init+0xbe>
  {
    Error_Handler();
 80054d6:	f7ff f8d9 	bl	800468c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80054da:	2300      	movs	r3, #0
 80054dc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80054de:	2301      	movs	r3, #1
 80054e0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80054ea:	1d3b      	adds	r3, r7, #4
 80054ec:	2200      	movs	r2, #0
 80054ee:	4619      	mov	r1, r3
 80054f0:	480d      	ldr	r0, [pc, #52]	; (8005528 <MX_TIM9_Init+0x10c>)
 80054f2:	f004 fc53 	bl	8009d9c <HAL_TIM_IC_ConfigChannel>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <MX_TIM9_Init+0xe4>
  {
    Error_Handler();
 80054fc:	f7ff f8c6 	bl	800468c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8005500:	2302      	movs	r3, #2
 8005502:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8005504:	2302      	movs	r3, #2
 8005506:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005508:	1d3b      	adds	r3, r7, #4
 800550a:	2204      	movs	r2, #4
 800550c:	4619      	mov	r1, r3
 800550e:	4806      	ldr	r0, [pc, #24]	; (8005528 <MX_TIM9_Init+0x10c>)
 8005510:	f004 fc44 	bl	8009d9c <HAL_TIM_IC_ConfigChannel>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <MX_TIM9_Init+0x102>
  {
    Error_Handler();
 800551a:	f7ff f8b7 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800551e:	bf00      	nop
 8005520:	3738      	adds	r7, #56	; 0x38
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000b2c 	.word	0x20000b2c
 800552c:	40014000 	.word	0x40014000

08005530 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b08e      	sub	sp, #56	; 0x38
 8005534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	605a      	str	r2, [r3, #4]
 8005540:	609a      	str	r2, [r3, #8]
 8005542:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8005544:	f107 0314 	add.w	r3, r7, #20
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	605a      	str	r2, [r3, #4]
 800554e:	609a      	str	r2, [r3, #8]
 8005550:	60da      	str	r2, [r3, #12]
 8005552:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005554:	1d3b      	adds	r3, r7, #4
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	605a      	str	r2, [r3, #4]
 800555c:	609a      	str	r2, [r3, #8]
 800555e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8005560:	4b35      	ldr	r3, [pc, #212]	; (8005638 <MX_TIM12_Init+0x108>)
 8005562:	4a36      	ldr	r2, [pc, #216]	; (800563c <MX_TIM12_Init+0x10c>)
 8005564:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 210-1;
 8005566:	4b34      	ldr	r3, [pc, #208]	; (8005638 <MX_TIM12_Init+0x108>)
 8005568:	22d1      	movs	r2, #209	; 0xd1
 800556a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800556c:	4b32      	ldr	r3, [pc, #200]	; (8005638 <MX_TIM12_Init+0x108>)
 800556e:	2200      	movs	r2, #0
 8005570:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 8005572:	4b31      	ldr	r3, [pc, #196]	; (8005638 <MX_TIM12_Init+0x108>)
 8005574:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005578:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800557a:	4b2f      	ldr	r3, [pc, #188]	; (8005638 <MX_TIM12_Init+0x108>)
 800557c:	2200      	movs	r2, #0
 800557e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005580:	4b2d      	ldr	r3, [pc, #180]	; (8005638 <MX_TIM12_Init+0x108>)
 8005582:	2200      	movs	r2, #0
 8005584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8005586:	482c      	ldr	r0, [pc, #176]	; (8005638 <MX_TIM12_Init+0x108>)
 8005588:	f003 fe58 	bl	800923c <HAL_TIM_Base_Init>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 8005592:	f7ff f87b 	bl	800468c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800559a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800559c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055a0:	4619      	mov	r1, r3
 80055a2:	4825      	ldr	r0, [pc, #148]	; (8005638 <MX_TIM12_Init+0x108>)
 80055a4:	f004 fd58 	bl	800a058 <HAL_TIM_ConfigClockSource>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 80055ae:	f7ff f86d 	bl	800468c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 80055b2:	4821      	ldr	r0, [pc, #132]	; (8005638 <MX_TIM12_Init+0x108>)
 80055b4:	f004 f88c 	bl	80096d0 <HAL_TIM_IC_Init>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <MX_TIM12_Init+0x92>
  {
    Error_Handler();
 80055be:	f7ff f865 	bl	800468c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80055c2:	2304      	movs	r3, #4
 80055c4:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80055c6:	2350      	movs	r3, #80	; 0x50
 80055c8:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80055ca:	2300      	movs	r3, #0
 80055cc:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80055ce:	2300      	movs	r3, #0
 80055d0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 80055d6:	f107 0314 	add.w	r3, r7, #20
 80055da:	4619      	mov	r1, r3
 80055dc:	4816      	ldr	r0, [pc, #88]	; (8005638 <MX_TIM12_Init+0x108>)
 80055de:	f004 fe02 	bl	800a1e6 <HAL_TIM_SlaveConfigSynchro>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <MX_TIM12_Init+0xbc>
  {
    Error_Handler();
 80055e8:	f7ff f850 	bl	800468c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80055ec:	2300      	movs	r3, #0
 80055ee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80055f0:	2301      	movs	r3, #1
 80055f2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80055f8:	2300      	movs	r3, #0
 80055fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80055fc:	1d3b      	adds	r3, r7, #4
 80055fe:	2200      	movs	r2, #0
 8005600:	4619      	mov	r1, r3
 8005602:	480d      	ldr	r0, [pc, #52]	; (8005638 <MX_TIM12_Init+0x108>)
 8005604:	f004 fbca 	bl	8009d9c <HAL_TIM_IC_ConfigChannel>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <MX_TIM12_Init+0xe2>
  {
    Error_Handler();
 800560e:	f7ff f83d 	bl	800468c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8005612:	2302      	movs	r3, #2
 8005614:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8005616:	2302      	movs	r3, #2
 8005618:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800561a:	1d3b      	adds	r3, r7, #4
 800561c:	2204      	movs	r2, #4
 800561e:	4619      	mov	r1, r3
 8005620:	4805      	ldr	r0, [pc, #20]	; (8005638 <MX_TIM12_Init+0x108>)
 8005622:	f004 fbbb 	bl	8009d9c <HAL_TIM_IC_ConfigChannel>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <MX_TIM12_Init+0x100>
  {
    Error_Handler();
 800562c:	f7ff f82e 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8005630:	bf00      	nop
 8005632:	3738      	adds	r7, #56	; 0x38
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	20000b74 	.word	0x20000b74
 800563c:	40001800 	.word	0x40001800

08005640 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b094      	sub	sp, #80	; 0x50
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005648:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	609a      	str	r2, [r3, #8]
 8005654:	60da      	str	r2, [r3, #12]
 8005656:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a99      	ldr	r2, [pc, #612]	; (80058c4 <HAL_TIM_Base_MspInit+0x284>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d11e      	bne.n	80056a0 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005662:	2300      	movs	r3, #0
 8005664:	63bb      	str	r3, [r7, #56]	; 0x38
 8005666:	4b98      	ldr	r3, [pc, #608]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 8005668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566a:	4a97      	ldr	r2, [pc, #604]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 800566c:	f043 0301 	orr.w	r3, r3, #1
 8005670:	6453      	str	r3, [r2, #68]	; 0x44
 8005672:	4b95      	ldr	r3, [pc, #596]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 8005674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	63bb      	str	r3, [r7, #56]	; 0x38
 800567c:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800567e:	2200      	movs	r2, #0
 8005680:	2105      	movs	r1, #5
 8005682:	2018      	movs	r0, #24
 8005684:	f001 fa50 	bl	8006b28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005688:	2018      	movs	r0, #24
 800568a:	f001 fa69 	bl	8006b60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 800568e:	2200      	movs	r2, #0
 8005690:	210f      	movs	r1, #15
 8005692:	2019      	movs	r0, #25
 8005694:	f001 fa48 	bl	8006b28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005698:	2019      	movs	r0, #25
 800569a:	f001 fa61 	bl	8006b60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800569e:	e15f      	b.n	8005960 <HAL_TIM_Base_MspInit+0x320>
  else if(tim_baseHandle->Instance==TIM2)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a8:	d134      	bne.n	8005714 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80056aa:	2300      	movs	r3, #0
 80056ac:	637b      	str	r3, [r7, #52]	; 0x34
 80056ae:	4b86      	ldr	r3, [pc, #536]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	4a85      	ldr	r2, [pc, #532]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 80056b4:	f043 0301 	orr.w	r3, r3, #1
 80056b8:	6413      	str	r3, [r2, #64]	; 0x40
 80056ba:	4b83      	ldr	r3, [pc, #524]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	637b      	str	r3, [r7, #52]	; 0x34
 80056c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056c6:	2300      	movs	r3, #0
 80056c8:	633b      	str	r3, [r7, #48]	; 0x30
 80056ca:	4b7f      	ldr	r3, [pc, #508]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	4a7e      	ldr	r2, [pc, #504]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 80056d0:	f043 0301 	orr.w	r3, r3, #1
 80056d4:	6313      	str	r3, [r2, #48]	; 0x30
 80056d6:	4b7c      	ldr	r3, [pc, #496]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 80056d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	633b      	str	r3, [r7, #48]	; 0x30
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = pwm_input_2_Pin;
 80056e2:	2301      	movs	r3, #1
 80056e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e6:	2302      	movs	r3, #2
 80056e8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ee:	2300      	movs	r3, #0
 80056f0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80056f2:	2301      	movs	r3, #1
 80056f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(pwm_input_2_GPIO_Port, &GPIO_InitStruct);
 80056f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80056fa:	4619      	mov	r1, r3
 80056fc:	4873      	ldr	r0, [pc, #460]	; (80058cc <HAL_TIM_Base_MspInit+0x28c>)
 80056fe:	f001 facf 	bl	8006ca0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8005702:	2200      	movs	r2, #0
 8005704:	2106      	movs	r1, #6
 8005706:	201c      	movs	r0, #28
 8005708:	f001 fa0e 	bl	8006b28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800570c:	201c      	movs	r0, #28
 800570e:	f001 fa27 	bl	8006b60 <HAL_NVIC_EnableIRQ>
}
 8005712:	e125      	b.n	8005960 <HAL_TIM_Base_MspInit+0x320>
  else if(tim_baseHandle->Instance==TIM3)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a6d      	ldr	r2, [pc, #436]	; (80058d0 <HAL_TIM_Base_MspInit+0x290>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d134      	bne.n	8005788 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800571e:	2300      	movs	r3, #0
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005722:	4b69      	ldr	r3, [pc, #420]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	4a68      	ldr	r2, [pc, #416]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 8005728:	f043 0302 	orr.w	r3, r3, #2
 800572c:	6413      	str	r3, [r2, #64]	; 0x40
 800572e:	4b66      	ldr	r3, [pc, #408]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800573a:	2300      	movs	r3, #0
 800573c:	62bb      	str	r3, [r7, #40]	; 0x28
 800573e:	4b62      	ldr	r3, [pc, #392]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	4a61      	ldr	r2, [pc, #388]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 8005744:	f043 0301 	orr.w	r3, r3, #1
 8005748:	6313      	str	r3, [r2, #48]	; 0x30
 800574a:	4b5f      	ldr	r3, [pc, #380]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	62bb      	str	r3, [r7, #40]	; 0x28
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = pwm_input_3_Pin;
 8005756:	2340      	movs	r3, #64	; 0x40
 8005758:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800575a:	2302      	movs	r3, #2
 800575c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800575e:	2300      	movs	r3, #0
 8005760:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005762:	2300      	movs	r3, #0
 8005764:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005766:	2302      	movs	r3, #2
 8005768:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(pwm_input_3_GPIO_Port, &GPIO_InitStruct);
 800576a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800576e:	4619      	mov	r1, r3
 8005770:	4856      	ldr	r0, [pc, #344]	; (80058cc <HAL_TIM_Base_MspInit+0x28c>)
 8005772:	f001 fa95 	bl	8006ca0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 7, 0);
 8005776:	2200      	movs	r2, #0
 8005778:	2107      	movs	r1, #7
 800577a:	201d      	movs	r0, #29
 800577c:	f001 f9d4 	bl	8006b28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005780:	201d      	movs	r0, #29
 8005782:	f001 f9ed 	bl	8006b60 <HAL_NVIC_EnableIRQ>
}
 8005786:	e0eb      	b.n	8005960 <HAL_TIM_Base_MspInit+0x320>
  else if(tim_baseHandle->Instance==TIM4)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a51      	ldr	r2, [pc, #324]	; (80058d4 <HAL_TIM_Base_MspInit+0x294>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d135      	bne.n	80057fe <HAL_TIM_Base_MspInit+0x1be>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005792:	2300      	movs	r3, #0
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
 8005796:	4b4c      	ldr	r3, [pc, #304]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	4a4b      	ldr	r2, [pc, #300]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 800579c:	f043 0304 	orr.w	r3, r3, #4
 80057a0:	6413      	str	r3, [r2, #64]	; 0x40
 80057a2:	4b49      	ldr	r3, [pc, #292]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80057ae:	2300      	movs	r3, #0
 80057b0:	623b      	str	r3, [r7, #32]
 80057b2:	4b45      	ldr	r3, [pc, #276]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	4a44      	ldr	r2, [pc, #272]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 80057b8:	f043 0308 	orr.w	r3, r3, #8
 80057bc:	6313      	str	r3, [r2, #48]	; 0x30
 80057be:	4b42      	ldr	r3, [pc, #264]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	623b      	str	r3, [r7, #32]
 80057c8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = pwm_input_4_Pin;
 80057ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d0:	2302      	movs	r3, #2
 80057d2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d4:	2300      	movs	r3, #0
 80057d6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057d8:	2300      	movs	r3, #0
 80057da:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80057dc:	2302      	movs	r3, #2
 80057de:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(pwm_input_4_GPIO_Port, &GPIO_InitStruct);
 80057e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80057e4:	4619      	mov	r1, r3
 80057e6:	483c      	ldr	r0, [pc, #240]	; (80058d8 <HAL_TIM_Base_MspInit+0x298>)
 80057e8:	f001 fa5a 	bl	8006ca0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 8, 0);
 80057ec:	2200      	movs	r2, #0
 80057ee:	2108      	movs	r1, #8
 80057f0:	201e      	movs	r0, #30
 80057f2:	f001 f999 	bl	8006b28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80057f6:	201e      	movs	r0, #30
 80057f8:	f001 f9b2 	bl	8006b60 <HAL_NVIC_EnableIRQ>
}
 80057fc:	e0b0      	b.n	8005960 <HAL_TIM_Base_MspInit+0x320>
  else if(tim_baseHandle->Instance==TIM5)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a36      	ldr	r2, [pc, #216]	; (80058dc <HAL_TIM_Base_MspInit+0x29c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d10e      	bne.n	8005826 <HAL_TIM_Base_MspInit+0x1e6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005808:	2300      	movs	r3, #0
 800580a:	61fb      	str	r3, [r7, #28]
 800580c:	4b2e      	ldr	r3, [pc, #184]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 800580e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005810:	4a2d      	ldr	r2, [pc, #180]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 8005812:	f043 0308 	orr.w	r3, r3, #8
 8005816:	6413      	str	r3, [r2, #64]	; 0x40
 8005818:	4b2b      	ldr	r3, [pc, #172]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	69fb      	ldr	r3, [r7, #28]
}
 8005824:	e09c      	b.n	8005960 <HAL_TIM_Base_MspInit+0x320>
  else if(tim_baseHandle->Instance==TIM6)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a2d      	ldr	r2, [pc, #180]	; (80058e0 <HAL_TIM_Base_MspInit+0x2a0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d10e      	bne.n	800584e <HAL_TIM_Base_MspInit+0x20e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005830:	2300      	movs	r3, #0
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	4b24      	ldr	r3, [pc, #144]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	4a23      	ldr	r2, [pc, #140]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 800583a:	f043 0310 	orr.w	r3, r3, #16
 800583e:	6413      	str	r3, [r2, #64]	; 0x40
 8005840:	4b21      	ldr	r3, [pc, #132]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 8005842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005844:	f003 0310 	and.w	r3, r3, #16
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	69bb      	ldr	r3, [r7, #24]
}
 800584c:	e088      	b.n	8005960 <HAL_TIM_Base_MspInit+0x320>
  else if(tim_baseHandle->Instance==TIM9)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a24      	ldr	r2, [pc, #144]	; (80058e4 <HAL_TIM_Base_MspInit+0x2a4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d149      	bne.n	80058ec <HAL_TIM_Base_MspInit+0x2ac>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	4b1a      	ldr	r3, [pc, #104]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 800585e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005860:	4a19      	ldr	r2, [pc, #100]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 8005862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005866:	6453      	str	r3, [r2, #68]	; 0x44
 8005868:	4b17      	ldr	r3, [pc, #92]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 800586a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005870:	617b      	str	r3, [r7, #20]
 8005872:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005874:	2300      	movs	r3, #0
 8005876:	613b      	str	r3, [r7, #16]
 8005878:	4b13      	ldr	r3, [pc, #76]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 800587a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587c:	4a12      	ldr	r2, [pc, #72]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 800587e:	f043 0310 	orr.w	r3, r3, #16
 8005882:	6313      	str	r3, [r2, #48]	; 0x30
 8005884:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <HAL_TIM_Base_MspInit+0x288>)
 8005886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	613b      	str	r3, [r7, #16]
 800588e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = pwm_input_1_Pin;
 8005890:	2320      	movs	r3, #32
 8005892:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005894:	2302      	movs	r3, #2
 8005896:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005898:	2300      	movs	r3, #0
 800589a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800589c:	2300      	movs	r3, #0
 800589e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80058a0:	2303      	movs	r3, #3
 80058a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(pwm_input_1_GPIO_Port, &GPIO_InitStruct);
 80058a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058a8:	4619      	mov	r1, r3
 80058aa:	480f      	ldr	r0, [pc, #60]	; (80058e8 <HAL_TIM_Base_MspInit+0x2a8>)
 80058ac:	f001 f9f8 	bl	8006ca0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80058b0:	2200      	movs	r2, #0
 80058b2:	2105      	movs	r1, #5
 80058b4:	2018      	movs	r0, #24
 80058b6:	f001 f937 	bl	8006b28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80058ba:	2018      	movs	r0, #24
 80058bc:	f001 f950 	bl	8006b60 <HAL_NVIC_EnableIRQ>
}
 80058c0:	e04e      	b.n	8005960 <HAL_TIM_Base_MspInit+0x320>
 80058c2:	bf00      	nop
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40023800 	.word	0x40023800
 80058cc:	40020000 	.word	0x40020000
 80058d0:	40000400 	.word	0x40000400
 80058d4:	40000800 	.word	0x40000800
 80058d8:	40020c00 	.word	0x40020c00
 80058dc:	40000c00 	.word	0x40000c00
 80058e0:	40001000 	.word	0x40001000
 80058e4:	40014000 	.word	0x40014000
 80058e8:	40021000 	.word	0x40021000
  else if(tim_baseHandle->Instance==TIM12)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1d      	ldr	r2, [pc, #116]	; (8005968 <HAL_TIM_Base_MspInit+0x328>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d134      	bne.n	8005960 <HAL_TIM_Base_MspInit+0x320>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80058f6:	2300      	movs	r3, #0
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	4b1c      	ldr	r3, [pc, #112]	; (800596c <HAL_TIM_Base_MspInit+0x32c>)
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	4a1b      	ldr	r2, [pc, #108]	; (800596c <HAL_TIM_Base_MspInit+0x32c>)
 8005900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005904:	6413      	str	r3, [r2, #64]	; 0x40
 8005906:	4b19      	ldr	r3, [pc, #100]	; (800596c <HAL_TIM_Base_MspInit+0x32c>)
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005912:	2300      	movs	r3, #0
 8005914:	60bb      	str	r3, [r7, #8]
 8005916:	4b15      	ldr	r3, [pc, #84]	; (800596c <HAL_TIM_Base_MspInit+0x32c>)
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	4a14      	ldr	r2, [pc, #80]	; (800596c <HAL_TIM_Base_MspInit+0x32c>)
 800591c:	f043 0302 	orr.w	r3, r3, #2
 8005920:	6313      	str	r3, [r2, #48]	; 0x30
 8005922:	4b12      	ldr	r3, [pc, #72]	; (800596c <HAL_TIM_Base_MspInit+0x32c>)
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	60bb      	str	r3, [r7, #8]
 800592c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = pwm_input_5_Pin;
 800592e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005932:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005934:	2302      	movs	r3, #2
 8005936:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005938:	2300      	movs	r3, #0
 800593a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800593c:	2300      	movs	r3, #0
 800593e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8005940:	2309      	movs	r3, #9
 8005942:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(pwm_input_5_GPIO_Port, &GPIO_InitStruct);
 8005944:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005948:	4619      	mov	r1, r3
 800594a:	4809      	ldr	r0, [pc, #36]	; (8005970 <HAL_TIM_Base_MspInit+0x330>)
 800594c:	f001 f9a8 	bl	8006ca0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 9, 0);
 8005950:	2200      	movs	r2, #0
 8005952:	2109      	movs	r1, #9
 8005954:	202b      	movs	r0, #43	; 0x2b
 8005956:	f001 f8e7 	bl	8006b28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800595a:	202b      	movs	r0, #43	; 0x2b
 800595c:	f001 f900 	bl	8006b60 <HAL_NVIC_EnableIRQ>
}
 8005960:	bf00      	nop
 8005962:	3750      	adds	r7, #80	; 0x50
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40001800 	.word	0x40001800
 800596c:	40023800 	.word	0x40023800
 8005970:	40020400 	.word	0x40020400

08005974 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b088      	sub	sp, #32
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800597c:	f107 030c 	add.w	r3, r7, #12
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	605a      	str	r2, [r3, #4]
 8005986:	609a      	str	r2, [r3, #8]
 8005988:	60da      	str	r2, [r3, #12]
 800598a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a12      	ldr	r2, [pc, #72]	; (80059dc <HAL_TIM_MspPostInit+0x68>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d11e      	bne.n	80059d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005996:	2300      	movs	r3, #0
 8005998:	60bb      	str	r3, [r7, #8]
 800599a:	4b11      	ldr	r3, [pc, #68]	; (80059e0 <HAL_TIM_MspPostInit+0x6c>)
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	4a10      	ldr	r2, [pc, #64]	; (80059e0 <HAL_TIM_MspPostInit+0x6c>)
 80059a0:	f043 0310 	orr.w	r3, r3, #16
 80059a4:	6313      	str	r3, [r2, #48]	; 0x30
 80059a6:	4b0e      	ldr	r3, [pc, #56]	; (80059e0 <HAL_TIM_MspPostInit+0x6c>)
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	f003 0310 	and.w	r3, r3, #16
 80059ae:	60bb      	str	r3, [r7, #8]
 80059b0:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = pwm_output_1_Pin|pwm_output_2_Pin|pwm_output_3_Pin|pwm_output_4_Pin;
 80059b2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80059b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059b8:	2302      	movs	r3, #2
 80059ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059bc:	2300      	movs	r3, #0
 80059be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059c0:	2300      	movs	r3, #0
 80059c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80059c4:	2301      	movs	r3, #1
 80059c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80059c8:	f107 030c 	add.w	r3, r7, #12
 80059cc:	4619      	mov	r1, r3
 80059ce:	4805      	ldr	r0, [pc, #20]	; (80059e4 <HAL_TIM_MspPostInit+0x70>)
 80059d0:	f001 f966 	bl	8006ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80059d4:	bf00      	nop
 80059d6:	3720      	adds	r7, #32
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	40010000 	.word	0x40010000
 80059e0:	40023800 	.word	0x40023800
 80059e4:	40021000 	.word	0x40021000

080059e8 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80059ec:	4b0d      	ldr	r3, [pc, #52]	; (8005a24 <Ringbuf_init+0x3c>)
 80059ee:	4a0e      	ldr	r2, [pc, #56]	; (8005a28 <Ringbuf_init+0x40>)
 80059f0:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80059f2:	4b0e      	ldr	r3, [pc, #56]	; (8005a2c <Ringbuf_init+0x44>)
 80059f4:	4a0e      	ldr	r2, [pc, #56]	; (8005a30 <Ringbuf_init+0x48>)
 80059f6:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80059f8:	4b0e      	ldr	r3, [pc, #56]	; (8005a34 <Ringbuf_init+0x4c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	695a      	ldr	r2, [r3, #20]
 80059fe:	4b0d      	ldr	r3, [pc, #52]	; (8005a34 <Ringbuf_init+0x4c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0201 	orr.w	r2, r2, #1
 8005a06:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8005a08:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <Ringbuf_init+0x4c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <Ringbuf_init+0x4c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0220 	orr.w	r2, r2, #32
 8005a16:	60da      	str	r2, [r3, #12]
}
 8005a18:	bf00      	nop
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20000fd0 	.word	0x20000fd0
 8005a28:	20000bc0 	.word	0x20000bc0
 8005a2c:	20000fd4 	.word	0x20000fd4
 8005a30:	20000dc8 	.word	0x20000dc8
 8005a34:	2000101c 	.word	0x2000101c

08005a38 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	6039      	str	r1, [r7, #0]
 8005a42:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a50:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d009      	beq.n	8005a72 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	79f9      	ldrb	r1, [r7, #7]
 8005a68:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8005a72:	bf00      	nop
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
	...

08005a80 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8005a86:	4b13      	ldr	r3, [pc, #76]	; (8005ad4 <Uart_read+0x54>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005a8e:	4b11      	ldr	r3, [pc, #68]	; (8005ad4 <Uart_read+0x54>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d102      	bne.n	8005aa0 <Uart_read+0x20>
  {
    return -1;
 8005a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9e:	e013      	b.n	8005ac8 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8005aa0:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <Uart_read+0x54>)
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <Uart_read+0x54>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005aac:	5cd3      	ldrb	r3, [r2, r3]
 8005aae:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8005ab0:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <Uart_read+0x54>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <Uart_read+0x54>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ac2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	20000fd0 	.word	0x20000fd0

08005ad8 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <IsDataAvailable+0x30>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	4b08      	ldr	r3, [pc, #32]	; (8005b08 <IsDataAvailable+0x30>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	20000fd0 	.word	0x20000fd0

08005b0c <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8005b10:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <Uart_peek+0x38>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005b18:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <Uart_peek+0x38>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d102      	bne.n	8005b2a <Uart_peek+0x1e>
  {
    return -1;
 8005b24:	f04f 33ff 	mov.w	r3, #4294967295
 8005b28:	e006      	b.n	8005b38 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8005b2a:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <Uart_peek+0x38>)
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <Uart_peek+0x38>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005b36:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	20000fd0 	.word	0x20000fd0

08005b48 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fa fb8a 	bl	8000270 <strlen>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8005b64:	e01e      	b.n	8005ba4 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8005b66:	4b36      	ldr	r3, [pc, #216]	; (8005c40 <Copy_upto+0xf8>)
 8005b68:	6819      	ldr	r1, [r3, #0]
 8005b6a:	4b35      	ldr	r3, [pc, #212]	; (8005c40 <Copy_upto+0xf8>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	6838      	ldr	r0, [r7, #0]
 8005b76:	4403      	add	r3, r0
 8005b78:	5c8a      	ldrb	r2, [r1, r2]
 8005b7a:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8005b7c:	4b30      	ldr	r3, [pc, #192]	; (8005c40 <Copy_upto+0xf8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	4b2e      	ldr	r3, [pc, #184]	; (8005c40 <Copy_upto+0xf8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	3301      	adds	r3, #1
 8005b96:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8005b98:	bf00      	nop
 8005b9a:	f7ff ff9d 	bl	8005ad8 <IsDataAvailable>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0fa      	beq.n	8005b9a <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8005ba4:	f7ff ffb2 	bl	8005b0c <Uart_peek>
 8005ba8:	4601      	mov	r1, r0
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	4413      	add	r3, r2
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	4299      	cmp	r1, r3
 8005bb4:	d1d7      	bne.n	8005b66 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8005bb6:	e027      	b.n	8005c08 <Copy_upto+0xc0>
	{
		so_far++;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8005bbe:	f7ff ff5f 	bl	8005a80 <Uart_read>
 8005bc2:	4601      	mov	r1, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	613a      	str	r2, [r7, #16]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	4413      	add	r3, r2
 8005bd0:	b2ca      	uxtb	r2, r1
 8005bd2:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d101      	bne.n	8005be0 <Copy_upto+0x98>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e02a      	b.n	8005c36 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8005be0:	4b18      	ldr	r3, [pc, #96]	; (8005c44 <Copy_upto+0xfc>)
 8005be2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005be6:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8005be8:	bf00      	nop
 8005bea:	f7ff ff75 	bl	8005ad8 <IsDataAvailable>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d103      	bne.n	8005bfc <Copy_upto+0xb4>
 8005bf4:	4b13      	ldr	r3, [pc, #76]	; (8005c44 <Copy_upto+0xfc>)
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1f6      	bne.n	8005bea <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8005bfc:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <Copy_upto+0xfc>)
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <Copy_upto+0xc0>
 8005c04:	2300      	movs	r3, #0
 8005c06:	e016      	b.n	8005c36 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8005c08:	f7ff ff80 	bl	8005b0c <Uart_peek>
 8005c0c:	4601      	mov	r1, r0
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	4413      	add	r3, r2
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	4299      	cmp	r1, r3
 8005c18:	d0ce      	beq.n	8005bb8 <Copy_upto+0x70>
	}

	if (so_far != len)
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d002      	beq.n	8005c28 <Copy_upto+0xe0>
	{
		so_far = 0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	617b      	str	r3, [r7, #20]
		goto again;
 8005c26:	e79d      	b.n	8005b64 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d101      	bne.n	8005c34 <Copy_upto+0xec>
 8005c30:	2301      	movs	r3, #1
 8005c32:	e000      	b.n	8005c36 <Copy_upto+0xee>
	else return 0;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000fd0 	.word	0x20000fd0
 8005c44:	20000bbc 	.word	0x20000bbc

08005c48 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8005c50:	2300      	movs	r3, #0
 8005c52:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7fa fb0b 	bl	8000270 <strlen>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8005c5e:	4b3c      	ldr	r3, [pc, #240]	; (8005d50 <Wait_for+0x108>)
 8005c60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005c64:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8005c66:	bf00      	nop
 8005c68:	f7ff ff36 	bl	8005ad8 <IsDataAvailable>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <Wait_for+0x32>
 8005c72:	4b37      	ldr	r3, [pc, #220]	; (8005d50 <Wait_for+0x108>)
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1f6      	bne.n	8005c68 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8005c7a:	4b35      	ldr	r3, [pc, #212]	; (8005d50 <Wait_for+0x108>)
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d119      	bne.n	8005cb6 <Wait_for+0x6e>
 8005c82:	2300      	movs	r3, #0
 8005c84:	e060      	b.n	8005d48 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8005c86:	4b33      	ldr	r3, [pc, #204]	; (8005d54 <Wait_for+0x10c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c8e:	4b31      	ldr	r3, [pc, #196]	; (8005d54 <Wait_for+0x10c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d00b      	beq.n	8005cb2 <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8005c9a:	4b2e      	ldr	r3, [pc, #184]	; (8005d54 <Wait_for+0x10c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	4b2b      	ldr	r3, [pc, #172]	; (8005d54 <Wait_for+0x10c>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005cb0:	e001      	b.n	8005cb6 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	e048      	b.n	8005d48 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8005cb6:	f7ff ff29 	bl	8005b0c <Uart_peek>
 8005cba:	4601      	mov	r1, r0
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	4299      	cmp	r1, r3
 8005cc6:	d1de      	bne.n	8005c86 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8005cc8:	e027      	b.n	8005d1a <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8005cd0:	4b20      	ldr	r3, [pc, #128]	; (8005d54 <Wait_for+0x10c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005cd8:	1c5a      	adds	r2, r3, #1
 8005cda:	4b1e      	ldr	r3, [pc, #120]	; (8005d54 <Wait_for+0x10c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ce2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d101      	bne.n	8005cf2 <Wait_for+0xaa>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e02a      	b.n	8005d48 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8005cf2:	4b17      	ldr	r3, [pc, #92]	; (8005d50 <Wait_for+0x108>)
 8005cf4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005cf8:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8005cfa:	bf00      	nop
 8005cfc:	f7ff feec 	bl	8005ad8 <IsDataAvailable>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d103      	bne.n	8005d0e <Wait_for+0xc6>
 8005d06:	4b12      	ldr	r3, [pc, #72]	; (8005d50 <Wait_for+0x108>)
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1f6      	bne.n	8005cfc <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8005d0e:	4b10      	ldr	r3, [pc, #64]	; (8005d50 <Wait_for+0x108>)
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <Wait_for+0xd2>
 8005d16:	2300      	movs	r3, #0
 8005d18:	e016      	b.n	8005d48 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8005d1a:	f7ff fef7 	bl	8005b0c <Uart_peek>
 8005d1e:	4601      	mov	r1, r0
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	4413      	add	r3, r2
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	4299      	cmp	r1, r3
 8005d2a:	d0ce      	beq.n	8005cca <Wait_for+0x82>
	}

	if (so_far != len)
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d002      	beq.n	8005d3a <Wait_for+0xf2>
	{
		so_far = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]
		goto again;
 8005d38:	e791      	b.n	8005c5e <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d101      	bne.n	8005d46 <Wait_for+0xfe>
 8005d42:	2301      	movs	r3, #1
 8005d44:	e000      	b.n	8005d48 <Wait_for+0x100>
	else return 0;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20000bbc 	.word	0x20000bbc
 8005d54:	20000fd0 	.word	0x20000fd0

08005d58 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f003 0320 	and.w	r3, r3, #32
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d013      	beq.n	8005da2 <Uart_isr+0x4a>
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f003 0320 	and.w	r3, r3, #32
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00e      	beq.n	8005da2 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8005d92:	4b1e      	ldr	r3, [pc, #120]	; (8005e0c <Uart_isr+0xb4>)
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	4611      	mov	r1, r2
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff fe4c 	bl	8005a38 <store_char>
        return;
 8005da0:	e031      	b.n	8005e06 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d02c      	beq.n	8005e06 <Uart_isr+0xae>
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d027      	beq.n	8005e06 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8005db6:	4b16      	ldr	r3, [pc, #88]	; (8005e10 <Uart_isr+0xb8>)
 8005db8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005dbc:	4b14      	ldr	r3, [pc, #80]	; (8005e10 <Uart_isr+0xb8>)
 8005dbe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d108      	bne.n	8005dd8 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dd4:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8005dd6:	e015      	b.n	8005e04 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8005dd8:	4b0d      	ldr	r3, [pc, #52]	; (8005e10 <Uart_isr+0xb8>)
 8005dda:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005dde:	4a0c      	ldr	r2, [pc, #48]	; (8005e10 <Uart_isr+0xb8>)
 8005de0:	5cd3      	ldrb	r3, [r2, r3]
 8005de2:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8005de4:	4b0a      	ldr	r3, [pc, #40]	; (8005e10 <Uart_isr+0xb8>)
 8005de6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005dea:	3301      	adds	r3, #1
 8005dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df0:	4a07      	ldr	r2, [pc, #28]	; (8005e10 <Uart_isr+0xb8>)
 8005df2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	7bba      	ldrb	r2, [r7, #14]
 8005e02:	605a      	str	r2, [r3, #4]
    	return;
 8005e04:	bf00      	nop
    }
}
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20000fd0 	.word	0x20000fd0
 8005e10:	20000dc8 	.word	0x20000dc8

08005e14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005e18:	4b11      	ldr	r3, [pc, #68]	; (8005e60 <MX_USART1_UART_Init+0x4c>)
 8005e1a:	4a12      	ldr	r2, [pc, #72]	; (8005e64 <MX_USART1_UART_Init+0x50>)
 8005e1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005e1e:	4b10      	ldr	r3, [pc, #64]	; (8005e60 <MX_USART1_UART_Init+0x4c>)
 8005e20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005e26:	4b0e      	ldr	r3, [pc, #56]	; (8005e60 <MX_USART1_UART_Init+0x4c>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005e2c:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <MX_USART1_UART_Init+0x4c>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005e32:	4b0b      	ldr	r3, [pc, #44]	; (8005e60 <MX_USART1_UART_Init+0x4c>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005e38:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <MX_USART1_UART_Init+0x4c>)
 8005e3a:	220c      	movs	r2, #12
 8005e3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e3e:	4b08      	ldr	r3, [pc, #32]	; (8005e60 <MX_USART1_UART_Init+0x4c>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e44:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <MX_USART1_UART_Init+0x4c>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005e4a:	4805      	ldr	r0, [pc, #20]	; (8005e60 <MX_USART1_UART_Init+0x4c>)
 8005e4c:	f005 f81e 	bl	800ae8c <HAL_UART_Init>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005e56:	f7fe fc19 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005e5a:	bf00      	nop
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20000fd8 	.word	0x20000fd8
 8005e64:	40011000 	.word	0x40011000

08005e68 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005e6c:	4b11      	ldr	r3, [pc, #68]	; (8005eb4 <MX_USART2_UART_Init+0x4c>)
 8005e6e:	4a12      	ldr	r2, [pc, #72]	; (8005eb8 <MX_USART2_UART_Init+0x50>)
 8005e70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005e72:	4b10      	ldr	r3, [pc, #64]	; (8005eb4 <MX_USART2_UART_Init+0x4c>)
 8005e74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005e7a:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <MX_USART2_UART_Init+0x4c>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005e80:	4b0c      	ldr	r3, [pc, #48]	; (8005eb4 <MX_USART2_UART_Init+0x4c>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005e86:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <MX_USART2_UART_Init+0x4c>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005e8c:	4b09      	ldr	r3, [pc, #36]	; (8005eb4 <MX_USART2_UART_Init+0x4c>)
 8005e8e:	220c      	movs	r2, #12
 8005e90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e92:	4b08      	ldr	r3, [pc, #32]	; (8005eb4 <MX_USART2_UART_Init+0x4c>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e98:	4b06      	ldr	r3, [pc, #24]	; (8005eb4 <MX_USART2_UART_Init+0x4c>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005e9e:	4805      	ldr	r0, [pc, #20]	; (8005eb4 <MX_USART2_UART_Init+0x4c>)
 8005ea0:	f004 fff4 	bl	800ae8c <HAL_UART_Init>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005eaa:	f7fe fbef 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005eae:	bf00      	nop
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	2000101c 	.word	0x2000101c
 8005eb8:	40004400 	.word	0x40004400

08005ebc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005ec0:	4b11      	ldr	r3, [pc, #68]	; (8005f08 <MX_USART3_UART_Init+0x4c>)
 8005ec2:	4a12      	ldr	r2, [pc, #72]	; (8005f0c <MX_USART3_UART_Init+0x50>)
 8005ec4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005ec6:	4b10      	ldr	r3, [pc, #64]	; (8005f08 <MX_USART3_UART_Init+0x4c>)
 8005ec8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005ecc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005ece:	4b0e      	ldr	r3, [pc, #56]	; (8005f08 <MX_USART3_UART_Init+0x4c>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005ed4:	4b0c      	ldr	r3, [pc, #48]	; (8005f08 <MX_USART3_UART_Init+0x4c>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005eda:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <MX_USART3_UART_Init+0x4c>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005ee0:	4b09      	ldr	r3, [pc, #36]	; (8005f08 <MX_USART3_UART_Init+0x4c>)
 8005ee2:	220c      	movs	r2, #12
 8005ee4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ee6:	4b08      	ldr	r3, [pc, #32]	; (8005f08 <MX_USART3_UART_Init+0x4c>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005eec:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <MX_USART3_UART_Init+0x4c>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005ef2:	4805      	ldr	r0, [pc, #20]	; (8005f08 <MX_USART3_UART_Init+0x4c>)
 8005ef4:	f004 ffca 	bl	800ae8c <HAL_UART_Init>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005efe:	f7fe fbc5 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005f02:	bf00      	nop
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20001060 	.word	0x20001060
 8005f0c:	40004800 	.word	0x40004800

08005f10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08e      	sub	sp, #56	; 0x38
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	605a      	str	r2, [r3, #4]
 8005f22:	609a      	str	r2, [r3, #8]
 8005f24:	60da      	str	r2, [r3, #12]
 8005f26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a54      	ldr	r2, [pc, #336]	; (8006080 <HAL_UART_MspInit+0x170>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d12d      	bne.n	8005f8e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f32:	2300      	movs	r3, #0
 8005f34:	623b      	str	r3, [r7, #32]
 8005f36:	4b53      	ldr	r3, [pc, #332]	; (8006084 <HAL_UART_MspInit+0x174>)
 8005f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3a:	4a52      	ldr	r2, [pc, #328]	; (8006084 <HAL_UART_MspInit+0x174>)
 8005f3c:	f043 0310 	orr.w	r3, r3, #16
 8005f40:	6453      	str	r3, [r2, #68]	; 0x44
 8005f42:	4b50      	ldr	r3, [pc, #320]	; (8006084 <HAL_UART_MspInit+0x174>)
 8005f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f46:	f003 0310 	and.w	r3, r3, #16
 8005f4a:	623b      	str	r3, [r7, #32]
 8005f4c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61fb      	str	r3, [r7, #28]
 8005f52:	4b4c      	ldr	r3, [pc, #304]	; (8006084 <HAL_UART_MspInit+0x174>)
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	4a4b      	ldr	r2, [pc, #300]	; (8006084 <HAL_UART_MspInit+0x174>)
 8005f58:	f043 0301 	orr.w	r3, r3, #1
 8005f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f5e:	4b49      	ldr	r3, [pc, #292]	; (8006084 <HAL_UART_MspInit+0x174>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	61fb      	str	r3, [r7, #28]
 8005f68:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = jetson_uart_tx_Pin|jetson_uart_rx_Pin;
 8005f6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f70:	2302      	movs	r3, #2
 8005f72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f74:	2300      	movs	r3, #0
 8005f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005f7c:	2307      	movs	r3, #7
 8005f7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f84:	4619      	mov	r1, r3
 8005f86:	4840      	ldr	r0, [pc, #256]	; (8006088 <HAL_UART_MspInit+0x178>)
 8005f88:	f000 fe8a 	bl	8006ca0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005f8c:	e073      	b.n	8006076 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART2)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a3e      	ldr	r2, [pc, #248]	; (800608c <HAL_UART_MspInit+0x17c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d134      	bne.n	8006002 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61bb      	str	r3, [r7, #24]
 8005f9c:	4b39      	ldr	r3, [pc, #228]	; (8006084 <HAL_UART_MspInit+0x174>)
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	4a38      	ldr	r2, [pc, #224]	; (8006084 <HAL_UART_MspInit+0x174>)
 8005fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8005fa8:	4b36      	ldr	r3, [pc, #216]	; (8006084 <HAL_UART_MspInit+0x174>)
 8005faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	4b32      	ldr	r3, [pc, #200]	; (8006084 <HAL_UART_MspInit+0x174>)
 8005fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbc:	4a31      	ldr	r2, [pc, #196]	; (8006084 <HAL_UART_MspInit+0x174>)
 8005fbe:	f043 0301 	orr.w	r3, r3, #1
 8005fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8005fc4:	4b2f      	ldr	r3, [pc, #188]	; (8006084 <HAL_UART_MspInit+0x174>)
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = gps_uart_tx_Pin|gps_uart_rx_Pin;
 8005fd0:	230c      	movs	r3, #12
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005fe0:	2307      	movs	r3, #7
 8005fe2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4827      	ldr	r0, [pc, #156]	; (8006088 <HAL_UART_MspInit+0x178>)
 8005fec:	f000 fe58 	bl	8006ca0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	210a      	movs	r1, #10
 8005ff4:	2026      	movs	r0, #38	; 0x26
 8005ff6:	f000 fd97 	bl	8006b28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005ffa:	2026      	movs	r0, #38	; 0x26
 8005ffc:	f000 fdb0 	bl	8006b60 <HAL_NVIC_EnableIRQ>
}
 8006000:	e039      	b.n	8006076 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART3)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a22      	ldr	r2, [pc, #136]	; (8006090 <HAL_UART_MspInit+0x180>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d134      	bne.n	8006076 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART3_CLK_ENABLE();
 800600c:	2300      	movs	r3, #0
 800600e:	613b      	str	r3, [r7, #16]
 8006010:	4b1c      	ldr	r3, [pc, #112]	; (8006084 <HAL_UART_MspInit+0x174>)
 8006012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006014:	4a1b      	ldr	r2, [pc, #108]	; (8006084 <HAL_UART_MspInit+0x174>)
 8006016:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800601a:	6413      	str	r3, [r2, #64]	; 0x40
 800601c:	4b19      	ldr	r3, [pc, #100]	; (8006084 <HAL_UART_MspInit+0x174>)
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006028:	2300      	movs	r3, #0
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	4b15      	ldr	r3, [pc, #84]	; (8006084 <HAL_UART_MspInit+0x174>)
 800602e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006030:	4a14      	ldr	r2, [pc, #80]	; (8006084 <HAL_UART_MspInit+0x174>)
 8006032:	f043 0302 	orr.w	r3, r3, #2
 8006036:	6313      	str	r3, [r2, #48]	; 0x30
 8006038:	4b12      	ldr	r3, [pc, #72]	; (8006084 <HAL_UART_MspInit+0x174>)
 800603a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = debug_ttl_tx_Pin|debug_ttl_rx_Pin;
 8006044:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800604a:	2302      	movs	r3, #2
 800604c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800604e:	2300      	movs	r3, #0
 8006050:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006052:	2303      	movs	r3, #3
 8006054:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006056:	2307      	movs	r3, #7
 8006058:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800605a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800605e:	4619      	mov	r1, r3
 8006060:	480c      	ldr	r0, [pc, #48]	; (8006094 <HAL_UART_MspInit+0x184>)
 8006062:	f000 fe1d 	bl	8006ca0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 11, 0);
 8006066:	2200      	movs	r2, #0
 8006068:	210b      	movs	r1, #11
 800606a:	2027      	movs	r0, #39	; 0x27
 800606c:	f000 fd5c 	bl	8006b28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006070:	2027      	movs	r0, #39	; 0x27
 8006072:	f000 fd75 	bl	8006b60 <HAL_NVIC_EnableIRQ>
}
 8006076:	bf00      	nop
 8006078:	3738      	adds	r7, #56	; 0x38
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40011000 	.word	0x40011000
 8006084:	40023800 	.word	0x40023800
 8006088:	40020000 	.word	0x40020000
 800608c:	40004400 	.word	0x40004400
 8006090:	40004800 	.word	0x40004800
 8006094:	40020400 	.word	0x40020400

08006098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80060d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800609c:	480d      	ldr	r0, [pc, #52]	; (80060d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800609e:	490e      	ldr	r1, [pc, #56]	; (80060d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80060a0:	4a0e      	ldr	r2, [pc, #56]	; (80060dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80060a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80060a4:	e002      	b.n	80060ac <LoopCopyDataInit>

080060a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80060a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80060a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80060aa:	3304      	adds	r3, #4

080060ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80060ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80060ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80060b0:	d3f9      	bcc.n	80060a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80060b2:	4a0b      	ldr	r2, [pc, #44]	; (80060e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80060b4:	4c0b      	ldr	r4, [pc, #44]	; (80060e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80060b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80060b8:	e001      	b.n	80060be <LoopFillZerobss>

080060ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80060ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80060bc:	3204      	adds	r2, #4

080060be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80060be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80060c0:	d3fb      	bcc.n	80060ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80060c2:	f7fe fe77 	bl	8004db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80060c6:	f008 f99f 	bl	800e408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80060ca:	f7fe fa1d 	bl	8004508 <main>
  bx  lr    
 80060ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80060d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80060d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80060d8:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 80060dc:	08011a30 	.word	0x08011a30
  ldr r2, =_sbss
 80060e0:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 80060e4:	20004f48 	.word	0x20004f48

080060e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80060e8:	e7fe      	b.n	80060e8 <ADC_IRQHandler>
	...

080060ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80060f0:	4b0e      	ldr	r3, [pc, #56]	; (800612c <HAL_Init+0x40>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a0d      	ldr	r2, [pc, #52]	; (800612c <HAL_Init+0x40>)
 80060f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80060fc:	4b0b      	ldr	r3, [pc, #44]	; (800612c <HAL_Init+0x40>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a0a      	ldr	r2, [pc, #40]	; (800612c <HAL_Init+0x40>)
 8006102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006106:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006108:	4b08      	ldr	r3, [pc, #32]	; (800612c <HAL_Init+0x40>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a07      	ldr	r2, [pc, #28]	; (800612c <HAL_Init+0x40>)
 800610e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006114:	2003      	movs	r0, #3
 8006116:	f000 fcfc 	bl	8006b12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800611a:	200f      	movs	r0, #15
 800611c:	f7fe fcb0 	bl	8004a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006120:	f7fe fc82 	bl	8004a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	40023c00 	.word	0x40023c00

08006130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006134:	4b06      	ldr	r3, [pc, #24]	; (8006150 <HAL_IncTick+0x20>)
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	461a      	mov	r2, r3
 800613a:	4b06      	ldr	r3, [pc, #24]	; (8006154 <HAL_IncTick+0x24>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4413      	add	r3, r2
 8006140:	4a04      	ldr	r2, [pc, #16]	; (8006154 <HAL_IncTick+0x24>)
 8006142:	6013      	str	r3, [r2, #0]
}
 8006144:	bf00      	nop
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	20000080 	.word	0x20000080
 8006154:	200010a4 	.word	0x200010a4

08006158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
  return uwTick;
 800615c:	4b03      	ldr	r3, [pc, #12]	; (800616c <HAL_GetTick+0x14>)
 800615e:	681b      	ldr	r3, [r3, #0]
}
 8006160:	4618      	mov	r0, r3
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	200010a4 	.word	0x200010a4

08006170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006178:	f7ff ffee 	bl	8006158 <HAL_GetTick>
 800617c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006188:	d005      	beq.n	8006196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800618a:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <HAL_Delay+0x44>)
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006196:	bf00      	nop
 8006198:	f7ff ffde 	bl	8006158 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d8f7      	bhi.n	8006198 <HAL_Delay+0x28>
  {
  }
}
 80061a8:	bf00      	nop
 80061aa:	bf00      	nop
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20000080 	.word	0x20000080

080061b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e033      	b.n	8006236 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d109      	bne.n	80061ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7fc fd26 	bl	8002c28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d118      	bne.n	8006228 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80061fe:	f023 0302 	bic.w	r3, r3, #2
 8006202:	f043 0202 	orr.w	r2, r3, #2
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fad8 	bl	80067c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	f023 0303 	bic.w	r3, r3, #3
 800621e:	f043 0201 	orr.w	r2, r3, #1
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	641a      	str	r2, [r3, #64]	; 0x40
 8006226:	e001      	b.n	800622c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006234:	7bfb      	ldrb	r3, [r7, #15]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_ADC_Start+0x1a>
 8006256:	2302      	movs	r3, #2
 8006258:	e0b2      	b.n	80063c0 <HAL_ADC_Start+0x180>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b01      	cmp	r3, #1
 800626e:	d018      	beq.n	80062a2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689a      	ldr	r2, [r3, #8]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006280:	4b52      	ldr	r3, [pc, #328]	; (80063cc <HAL_ADC_Start+0x18c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a52      	ldr	r2, [pc, #328]	; (80063d0 <HAL_ADC_Start+0x190>)
 8006286:	fba2 2303 	umull	r2, r3, r2, r3
 800628a:	0c9a      	lsrs	r2, r3, #18
 800628c:	4613      	mov	r3, r2
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	4413      	add	r3, r2
 8006292:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006294:	e002      	b.n	800629c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	3b01      	subs	r3, #1
 800629a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1f9      	bne.n	8006296 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d17a      	bne.n	80063a6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80062b8:	f023 0301 	bic.w	r3, r3, #1
 80062bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d007      	beq.n	80062e2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80062da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ee:	d106      	bne.n	80062fe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f4:	f023 0206 	bic.w	r2, r3, #6
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	645a      	str	r2, [r3, #68]	; 0x44
 80062fc:	e002      	b.n	8006304 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800630c:	4b31      	ldr	r3, [pc, #196]	; (80063d4 <HAL_ADC_Start+0x194>)
 800630e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006318:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	2b00      	cmp	r3, #0
 8006324:	d12a      	bne.n	800637c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a2b      	ldr	r2, [pc, #172]	; (80063d8 <HAL_ADC_Start+0x198>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d015      	beq.n	800635c <HAL_ADC_Start+0x11c>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a29      	ldr	r2, [pc, #164]	; (80063dc <HAL_ADC_Start+0x19c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d105      	bne.n	8006346 <HAL_ADC_Start+0x106>
 800633a:	4b26      	ldr	r3, [pc, #152]	; (80063d4 <HAL_ADC_Start+0x194>)
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f003 031f 	and.w	r3, r3, #31
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a25      	ldr	r2, [pc, #148]	; (80063e0 <HAL_ADC_Start+0x1a0>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d136      	bne.n	80063be <HAL_ADC_Start+0x17e>
 8006350:	4b20      	ldr	r3, [pc, #128]	; (80063d4 <HAL_ADC_Start+0x194>)
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b00      	cmp	r3, #0
 800635a:	d130      	bne.n	80063be <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d129      	bne.n	80063be <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006378:	609a      	str	r2, [r3, #8]
 800637a:	e020      	b.n	80063be <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a15      	ldr	r2, [pc, #84]	; (80063d8 <HAL_ADC_Start+0x198>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d11b      	bne.n	80063be <HAL_ADC_Start+0x17e>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d114      	bne.n	80063be <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80063a2:	609a      	str	r2, [r3, #8]
 80063a4:	e00b      	b.n	80063be <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	f043 0210 	orr.w	r2, r3, #16
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b6:	f043 0201 	orr.w	r2, r3, #1
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	20000078 	.word	0x20000078
 80063d0:	431bde83 	.word	0x431bde83
 80063d4:	40012300 	.word	0x40012300
 80063d8:	40012000 	.word	0x40012000
 80063dc:	40012100 	.word	0x40012100
 80063e0:	40012200 	.word	0x40012200

080063e4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d101      	bne.n	80063fa <HAL_ADC_Stop+0x16>
 80063f6:	2302      	movs	r3, #2
 80063f8:	e021      	b.n	800643e <HAL_ADC_Stop+0x5a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0201 	bic.w	r2, r2, #1
 8006410:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d109      	bne.n	8006434 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006424:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006428:	f023 0301 	bic.w	r3, r3, #1
 800642c:	f043 0201 	orr.w	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006466:	d113      	bne.n	8006490 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006476:	d10b      	bne.n	8006490 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647c:	f043 0220 	orr.w	r2, r3, #32
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e063      	b.n	8006558 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006490:	f7ff fe62 	bl	8006158 <HAL_GetTick>
 8006494:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006496:	e021      	b.n	80064dc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649e:	d01d      	beq.n	80064dc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d007      	beq.n	80064b6 <HAL_ADC_PollForConversion+0x6c>
 80064a6:	f7ff fe57 	bl	8006158 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d212      	bcs.n	80064dc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d00b      	beq.n	80064dc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c8:	f043 0204 	orr.w	r2, r3, #4
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e03d      	b.n	8006558 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d1d6      	bne.n	8006498 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f06f 0212 	mvn.w	r2, #18
 80064f2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d123      	bne.n	8006556 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006512:	2b00      	cmp	r3, #0
 8006514:	d11f      	bne.n	8006556 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006520:	2b00      	cmp	r3, #0
 8006522:	d006      	beq.n	8006532 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800652e:	2b00      	cmp	r3, #0
 8006530:	d111      	bne.n	8006556 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d105      	bne.n	8006556 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	f043 0201 	orr.w	r2, r3, #1
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800656e:	4618      	mov	r0, r3
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
	...

0800657c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_ADC_ConfigChannel+0x1c>
 8006594:	2302      	movs	r3, #2
 8006596:	e105      	b.n	80067a4 <HAL_ADC_ConfigChannel+0x228>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b09      	cmp	r3, #9
 80065a6:	d925      	bls.n	80065f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68d9      	ldr	r1, [r3, #12]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	461a      	mov	r2, r3
 80065b6:	4613      	mov	r3, r2
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	4413      	add	r3, r2
 80065bc:	3b1e      	subs	r3, #30
 80065be:	2207      	movs	r2, #7
 80065c0:	fa02 f303 	lsl.w	r3, r2, r3
 80065c4:	43da      	mvns	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	400a      	ands	r2, r1
 80065cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68d9      	ldr	r1, [r3, #12]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	689a      	ldr	r2, [r3, #8]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	4618      	mov	r0, r3
 80065e0:	4603      	mov	r3, r0
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	4403      	add	r3, r0
 80065e6:	3b1e      	subs	r3, #30
 80065e8:	409a      	lsls	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	60da      	str	r2, [r3, #12]
 80065f2:	e022      	b.n	800663a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6919      	ldr	r1, [r3, #16]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	b29b      	uxth	r3, r3
 8006600:	461a      	mov	r2, r3
 8006602:	4613      	mov	r3, r2
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	4413      	add	r3, r2
 8006608:	2207      	movs	r2, #7
 800660a:	fa02 f303 	lsl.w	r3, r2, r3
 800660e:	43da      	mvns	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	400a      	ands	r2, r1
 8006616:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6919      	ldr	r1, [r3, #16]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	b29b      	uxth	r3, r3
 8006628:	4618      	mov	r0, r3
 800662a:	4603      	mov	r3, r0
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	4403      	add	r3, r0
 8006630:	409a      	lsls	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	2b06      	cmp	r3, #6
 8006640:	d824      	bhi.n	800668c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	4613      	mov	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	3b05      	subs	r3, #5
 8006654:	221f      	movs	r2, #31
 8006656:	fa02 f303 	lsl.w	r3, r2, r3
 800665a:	43da      	mvns	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	400a      	ands	r2, r1
 8006662:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	b29b      	uxth	r3, r3
 8006670:	4618      	mov	r0, r3
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	4613      	mov	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	3b05      	subs	r3, #5
 800667e:	fa00 f203 	lsl.w	r2, r0, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	635a      	str	r2, [r3, #52]	; 0x34
 800668a:	e04c      	b.n	8006726 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2b0c      	cmp	r3, #12
 8006692:	d824      	bhi.n	80066de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	4613      	mov	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	3b23      	subs	r3, #35	; 0x23
 80066a6:	221f      	movs	r2, #31
 80066a8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ac:	43da      	mvns	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	400a      	ands	r2, r1
 80066b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	4618      	mov	r0, r3
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	4613      	mov	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	3b23      	subs	r3, #35	; 0x23
 80066d0:	fa00 f203 	lsl.w	r2, r0, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	430a      	orrs	r2, r1
 80066da:	631a      	str	r2, [r3, #48]	; 0x30
 80066dc:	e023      	b.n	8006726 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	4613      	mov	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	3b41      	subs	r3, #65	; 0x41
 80066f0:	221f      	movs	r2, #31
 80066f2:	fa02 f303 	lsl.w	r3, r2, r3
 80066f6:	43da      	mvns	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	400a      	ands	r2, r1
 80066fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	4618      	mov	r0, r3
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	4613      	mov	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	3b41      	subs	r3, #65	; 0x41
 800671a:	fa00 f203 	lsl.w	r2, r0, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006726:	4b22      	ldr	r3, [pc, #136]	; (80067b0 <HAL_ADC_ConfigChannel+0x234>)
 8006728:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a21      	ldr	r2, [pc, #132]	; (80067b4 <HAL_ADC_ConfigChannel+0x238>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d109      	bne.n	8006748 <HAL_ADC_ConfigChannel+0x1cc>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b12      	cmp	r3, #18
 800673a:	d105      	bne.n	8006748 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a19      	ldr	r2, [pc, #100]	; (80067b4 <HAL_ADC_ConfigChannel+0x238>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d123      	bne.n	800679a <HAL_ADC_ConfigChannel+0x21e>
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b10      	cmp	r3, #16
 8006758:	d003      	beq.n	8006762 <HAL_ADC_ConfigChannel+0x1e6>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b11      	cmp	r3, #17
 8006760:	d11b      	bne.n	800679a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b10      	cmp	r3, #16
 8006774:	d111      	bne.n	800679a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006776:	4b10      	ldr	r3, [pc, #64]	; (80067b8 <HAL_ADC_ConfigChannel+0x23c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a10      	ldr	r2, [pc, #64]	; (80067bc <HAL_ADC_ConfigChannel+0x240>)
 800677c:	fba2 2303 	umull	r2, r3, r2, r3
 8006780:	0c9a      	lsrs	r2, r3, #18
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800678c:	e002      	b.n	8006794 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	3b01      	subs	r3, #1
 8006792:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f9      	bne.n	800678e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	40012300 	.word	0x40012300
 80067b4:	40012000 	.word	0x40012000
 80067b8:	20000078 	.word	0x20000078
 80067bc:	431bde83 	.word	0x431bde83

080067c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80067c8:	4b79      	ldr	r3, [pc, #484]	; (80069b0 <ADC_Init+0x1f0>)
 80067ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	431a      	orrs	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6859      	ldr	r1, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	021a      	lsls	r2, r3, #8
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006818:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6859      	ldr	r1, [r3, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800683a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6899      	ldr	r1, [r3, #8]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	4a58      	ldr	r2, [pc, #352]	; (80069b4 <ADC_Init+0x1f4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d022      	beq.n	800689e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006866:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6899      	ldr	r1, [r3, #8]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006888:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6899      	ldr	r1, [r3, #8]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	609a      	str	r2, [r3, #8]
 800689c:	e00f      	b.n	80068be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80068ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80068bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0202 	bic.w	r2, r2, #2
 80068cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6899      	ldr	r1, [r3, #8]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	7e1b      	ldrb	r3, [r3, #24]
 80068d8:	005a      	lsls	r2, r3, #1
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01b      	beq.n	8006924 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800690a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6859      	ldr	r1, [r3, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	3b01      	subs	r3, #1
 8006918:	035a      	lsls	r2, r3, #13
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	605a      	str	r2, [r3, #4]
 8006922:	e007      	b.n	8006934 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006932:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006942:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	3b01      	subs	r3, #1
 8006950:	051a      	lsls	r2, r3, #20
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006968:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6899      	ldr	r1, [r3, #8]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006976:	025a      	lsls	r2, r3, #9
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689a      	ldr	r2, [r3, #8]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800698e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6899      	ldr	r1, [r3, #8]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	029a      	lsls	r2, r3, #10
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	609a      	str	r2, [r3, #8]
}
 80069a4:	bf00      	nop
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	40012300 	.word	0x40012300
 80069b4:	0f000001 	.word	0x0f000001

080069b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f003 0307 	and.w	r3, r3, #7
 80069c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069c8:	4b0c      	ldr	r3, [pc, #48]	; (80069fc <__NVIC_SetPriorityGrouping+0x44>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80069d4:	4013      	ands	r3, r2
 80069d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80069e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069ea:	4a04      	ldr	r2, [pc, #16]	; (80069fc <__NVIC_SetPriorityGrouping+0x44>)
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	60d3      	str	r3, [r2, #12]
}
 80069f0:	bf00      	nop
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	e000ed00 	.word	0xe000ed00

08006a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a00:	b480      	push	{r7}
 8006a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a04:	4b04      	ldr	r3, [pc, #16]	; (8006a18 <__NVIC_GetPriorityGrouping+0x18>)
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	0a1b      	lsrs	r3, r3, #8
 8006a0a:	f003 0307 	and.w	r3, r3, #7
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	e000ed00 	.word	0xe000ed00

08006a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	4603      	mov	r3, r0
 8006a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	db0b      	blt.n	8006a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a2e:	79fb      	ldrb	r3, [r7, #7]
 8006a30:	f003 021f 	and.w	r2, r3, #31
 8006a34:	4907      	ldr	r1, [pc, #28]	; (8006a54 <__NVIC_EnableIRQ+0x38>)
 8006a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	2001      	movs	r0, #1
 8006a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8006a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	e000e100 	.word	0xe000e100

08006a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	4603      	mov	r3, r0
 8006a60:	6039      	str	r1, [r7, #0]
 8006a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	db0a      	blt.n	8006a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	490c      	ldr	r1, [pc, #48]	; (8006aa4 <__NVIC_SetPriority+0x4c>)
 8006a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a76:	0112      	lsls	r2, r2, #4
 8006a78:	b2d2      	uxtb	r2, r2
 8006a7a:	440b      	add	r3, r1
 8006a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a80:	e00a      	b.n	8006a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	4908      	ldr	r1, [pc, #32]	; (8006aa8 <__NVIC_SetPriority+0x50>)
 8006a88:	79fb      	ldrb	r3, [r7, #7]
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	3b04      	subs	r3, #4
 8006a90:	0112      	lsls	r2, r2, #4
 8006a92:	b2d2      	uxtb	r2, r2
 8006a94:	440b      	add	r3, r1
 8006a96:	761a      	strb	r2, [r3, #24]
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	e000e100 	.word	0xe000e100
 8006aa8:	e000ed00 	.word	0xe000ed00

08006aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b089      	sub	sp, #36	; 0x24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f003 0307 	and.w	r3, r3, #7
 8006abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f1c3 0307 	rsb	r3, r3, #7
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	bf28      	it	cs
 8006aca:	2304      	movcs	r3, #4
 8006acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	2b06      	cmp	r3, #6
 8006ad4:	d902      	bls.n	8006adc <NVIC_EncodePriority+0x30>
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	3b03      	subs	r3, #3
 8006ada:	e000      	b.n	8006ade <NVIC_EncodePriority+0x32>
 8006adc:	2300      	movs	r3, #0
 8006ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aea:	43da      	mvns	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	401a      	ands	r2, r3
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006af4:	f04f 31ff 	mov.w	r1, #4294967295
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	fa01 f303 	lsl.w	r3, r1, r3
 8006afe:	43d9      	mvns	r1, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b04:	4313      	orrs	r3, r2
         );
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3724      	adds	r7, #36	; 0x24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b082      	sub	sp, #8
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff ff4c 	bl	80069b8 <__NVIC_SetPriorityGrouping>
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	4603      	mov	r3, r0
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b3a:	f7ff ff61 	bl	8006a00 <__NVIC_GetPriorityGrouping>
 8006b3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	68b9      	ldr	r1, [r7, #8]
 8006b44:	6978      	ldr	r0, [r7, #20]
 8006b46:	f7ff ffb1 	bl	8006aac <NVIC_EncodePriority>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b50:	4611      	mov	r1, r2
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff ff80 	bl	8006a58 <__NVIC_SetPriority>
}
 8006b58:	bf00      	nop
 8006b5a:	3718      	adds	r7, #24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	4603      	mov	r3, r0
 8006b68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff ff54 	bl	8006a1c <__NVIC_EnableIRQ>
}
 8006b74:	bf00      	nop
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006b8a:	f7ff fae5 	bl	8006158 <HAL_GetTick>
 8006b8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d008      	beq.n	8006bae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2280      	movs	r2, #128	; 0x80
 8006ba0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e052      	b.n	8006c54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0216 	bic.w	r2, r2, #22
 8006bbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	695a      	ldr	r2, [r3, #20]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bcc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d103      	bne.n	8006bde <HAL_DMA_Abort+0x62>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d007      	beq.n	8006bee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0208 	bic.w	r2, r2, #8
 8006bec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0201 	bic.w	r2, r2, #1
 8006bfc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bfe:	e013      	b.n	8006c28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c00:	f7ff faaa 	bl	8006158 <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	2b05      	cmp	r3, #5
 8006c0c:	d90c      	bls.n	8006c28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2220      	movs	r2, #32
 8006c12:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2203      	movs	r2, #3
 8006c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e015      	b.n	8006c54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e4      	bne.n	8006c00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c3a:	223f      	movs	r2, #63	; 0x3f
 8006c3c:	409a      	lsls	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d004      	beq.n	8006c7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2280      	movs	r2, #128	; 0x80
 8006c74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e00c      	b.n	8006c94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2205      	movs	r2, #5
 8006c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0201 	bic.w	r2, r2, #1
 8006c90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b089      	sub	sp, #36	; 0x24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	e16b      	b.n	8006f94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4013      	ands	r3, r2
 8006cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	f040 815a 	bne.w	8006f8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f003 0303 	and.w	r3, r3, #3
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d005      	beq.n	8006cf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d130      	bne.n	8006d54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	2203      	movs	r2, #3
 8006cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006d02:	43db      	mvns	r3, r3
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	4013      	ands	r3, r2
 8006d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	68da      	ldr	r2, [r3, #12]
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	fa02 f303 	lsl.w	r3, r2, r3
 8006d16:	69ba      	ldr	r2, [r7, #24]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d28:	2201      	movs	r2, #1
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d30:	43db      	mvns	r3, r3
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	4013      	ands	r3, r2
 8006d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	091b      	lsrs	r3, r3, #4
 8006d3e:	f003 0201 	and.w	r2, r3, #1
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	fa02 f303 	lsl.w	r3, r2, r3
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f003 0303 	and.w	r3, r3, #3
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	d017      	beq.n	8006d90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	2203      	movs	r2, #3
 8006d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d70:	43db      	mvns	r3, r3
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	4013      	ands	r3, r2
 8006d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	fa02 f303 	lsl.w	r3, r2, r3
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f003 0303 	and.w	r3, r3, #3
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d123      	bne.n	8006de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	08da      	lsrs	r2, r3, #3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3208      	adds	r2, #8
 8006da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	f003 0307 	and.w	r3, r3, #7
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	220f      	movs	r2, #15
 8006db4:	fa02 f303 	lsl.w	r3, r2, r3
 8006db8:	43db      	mvns	r3, r3
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	691a      	ldr	r2, [r3, #16]
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	f003 0307 	and.w	r3, r3, #7
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	08da      	lsrs	r2, r3, #3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	3208      	adds	r2, #8
 8006dde:	69b9      	ldr	r1, [r7, #24]
 8006de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	2203      	movs	r2, #3
 8006df0:	fa02 f303 	lsl.w	r3, r2, r3
 8006df4:	43db      	mvns	r3, r3
 8006df6:	69ba      	ldr	r2, [r7, #24]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f003 0203 	and.w	r2, r3, #3
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 80b4 	beq.w	8006f8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
 8006e2a:	4b60      	ldr	r3, [pc, #384]	; (8006fac <HAL_GPIO_Init+0x30c>)
 8006e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2e:	4a5f      	ldr	r2, [pc, #380]	; (8006fac <HAL_GPIO_Init+0x30c>)
 8006e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e34:	6453      	str	r3, [r2, #68]	; 0x44
 8006e36:	4b5d      	ldr	r3, [pc, #372]	; (8006fac <HAL_GPIO_Init+0x30c>)
 8006e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e42:	4a5b      	ldr	r2, [pc, #364]	; (8006fb0 <HAL_GPIO_Init+0x310>)
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	089b      	lsrs	r3, r3, #2
 8006e48:	3302      	adds	r3, #2
 8006e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	f003 0303 	and.w	r3, r3, #3
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	220f      	movs	r2, #15
 8006e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5e:	43db      	mvns	r3, r3
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	4013      	ands	r3, r2
 8006e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a52      	ldr	r2, [pc, #328]	; (8006fb4 <HAL_GPIO_Init+0x314>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d02b      	beq.n	8006ec6 <HAL_GPIO_Init+0x226>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a51      	ldr	r2, [pc, #324]	; (8006fb8 <HAL_GPIO_Init+0x318>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d025      	beq.n	8006ec2 <HAL_GPIO_Init+0x222>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a50      	ldr	r2, [pc, #320]	; (8006fbc <HAL_GPIO_Init+0x31c>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d01f      	beq.n	8006ebe <HAL_GPIO_Init+0x21e>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a4f      	ldr	r2, [pc, #316]	; (8006fc0 <HAL_GPIO_Init+0x320>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d019      	beq.n	8006eba <HAL_GPIO_Init+0x21a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a4e      	ldr	r2, [pc, #312]	; (8006fc4 <HAL_GPIO_Init+0x324>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d013      	beq.n	8006eb6 <HAL_GPIO_Init+0x216>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a4d      	ldr	r2, [pc, #308]	; (8006fc8 <HAL_GPIO_Init+0x328>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d00d      	beq.n	8006eb2 <HAL_GPIO_Init+0x212>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a4c      	ldr	r2, [pc, #304]	; (8006fcc <HAL_GPIO_Init+0x32c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d007      	beq.n	8006eae <HAL_GPIO_Init+0x20e>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a4b      	ldr	r2, [pc, #300]	; (8006fd0 <HAL_GPIO_Init+0x330>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d101      	bne.n	8006eaa <HAL_GPIO_Init+0x20a>
 8006ea6:	2307      	movs	r3, #7
 8006ea8:	e00e      	b.n	8006ec8 <HAL_GPIO_Init+0x228>
 8006eaa:	2308      	movs	r3, #8
 8006eac:	e00c      	b.n	8006ec8 <HAL_GPIO_Init+0x228>
 8006eae:	2306      	movs	r3, #6
 8006eb0:	e00a      	b.n	8006ec8 <HAL_GPIO_Init+0x228>
 8006eb2:	2305      	movs	r3, #5
 8006eb4:	e008      	b.n	8006ec8 <HAL_GPIO_Init+0x228>
 8006eb6:	2304      	movs	r3, #4
 8006eb8:	e006      	b.n	8006ec8 <HAL_GPIO_Init+0x228>
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e004      	b.n	8006ec8 <HAL_GPIO_Init+0x228>
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	e002      	b.n	8006ec8 <HAL_GPIO_Init+0x228>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e000      	b.n	8006ec8 <HAL_GPIO_Init+0x228>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	69fa      	ldr	r2, [r7, #28]
 8006eca:	f002 0203 	and.w	r2, r2, #3
 8006ece:	0092      	lsls	r2, r2, #2
 8006ed0:	4093      	lsls	r3, r2
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ed8:	4935      	ldr	r1, [pc, #212]	; (8006fb0 <HAL_GPIO_Init+0x310>)
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	089b      	lsrs	r3, r3, #2
 8006ede:	3302      	adds	r3, #2
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006ee6:	4b3b      	ldr	r3, [pc, #236]	; (8006fd4 <HAL_GPIO_Init+0x334>)
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	43db      	mvns	r3, r3
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006f0a:	4a32      	ldr	r2, [pc, #200]	; (8006fd4 <HAL_GPIO_Init+0x334>)
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006f10:	4b30      	ldr	r3, [pc, #192]	; (8006fd4 <HAL_GPIO_Init+0x334>)
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	43db      	mvns	r3, r3
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d003      	beq.n	8006f34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f34:	4a27      	ldr	r2, [pc, #156]	; (8006fd4 <HAL_GPIO_Init+0x334>)
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006f3a:	4b26      	ldr	r3, [pc, #152]	; (8006fd4 <HAL_GPIO_Init+0x334>)
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	43db      	mvns	r3, r3
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	4013      	ands	r3, r2
 8006f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f5e:	4a1d      	ldr	r2, [pc, #116]	; (8006fd4 <HAL_GPIO_Init+0x334>)
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006f64:	4b1b      	ldr	r3, [pc, #108]	; (8006fd4 <HAL_GPIO_Init+0x334>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	43db      	mvns	r3, r3
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	4013      	ands	r3, r2
 8006f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006f88:	4a12      	ldr	r2, [pc, #72]	; (8006fd4 <HAL_GPIO_Init+0x334>)
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	3301      	adds	r3, #1
 8006f92:	61fb      	str	r3, [r7, #28]
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	2b0f      	cmp	r3, #15
 8006f98:	f67f ae90 	bls.w	8006cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f9c:	bf00      	nop
 8006f9e:	bf00      	nop
 8006fa0:	3724      	adds	r7, #36	; 0x24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40023800 	.word	0x40023800
 8006fb0:	40013800 	.word	0x40013800
 8006fb4:	40020000 	.word	0x40020000
 8006fb8:	40020400 	.word	0x40020400
 8006fbc:	40020800 	.word	0x40020800
 8006fc0:	40020c00 	.word	0x40020c00
 8006fc4:	40021000 	.word	0x40021000
 8006fc8:	40021400 	.word	0x40021400
 8006fcc:	40021800 	.word	0x40021800
 8006fd0:	40021c00 	.word	0x40021c00
 8006fd4:	40013c00 	.word	0x40013c00

08006fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	807b      	strh	r3, [r7, #2]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006fe8:	787b      	ldrb	r3, [r7, #1]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006fee:	887a      	ldrh	r2, [r7, #2]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006ff4:	e003      	b.n	8006ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006ff6:	887b      	ldrh	r3, [r7, #2]
 8006ff8:	041a      	lsls	r2, r3, #16
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	619a      	str	r2, [r3, #24]
}
 8006ffe:	bf00      	nop
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
	...

0800700c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e12b      	b.n	8007276 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d106      	bne.n	8007038 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7fd f988 	bl	8004348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2224      	movs	r2, #36	; 0x24
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0201 	bic.w	r2, r2, #1
 800704e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800705e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800706e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007070:	f002 f88a 	bl	8009188 <HAL_RCC_GetPCLK1Freq>
 8007074:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	4a81      	ldr	r2, [pc, #516]	; (8007280 <HAL_I2C_Init+0x274>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d807      	bhi.n	8007090 <HAL_I2C_Init+0x84>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4a80      	ldr	r2, [pc, #512]	; (8007284 <HAL_I2C_Init+0x278>)
 8007084:	4293      	cmp	r3, r2
 8007086:	bf94      	ite	ls
 8007088:	2301      	movls	r3, #1
 800708a:	2300      	movhi	r3, #0
 800708c:	b2db      	uxtb	r3, r3
 800708e:	e006      	b.n	800709e <HAL_I2C_Init+0x92>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4a7d      	ldr	r2, [pc, #500]	; (8007288 <HAL_I2C_Init+0x27c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	bf94      	ite	ls
 8007098:	2301      	movls	r3, #1
 800709a:	2300      	movhi	r3, #0
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e0e7      	b.n	8007276 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	4a78      	ldr	r2, [pc, #480]	; (800728c <HAL_I2C_Init+0x280>)
 80070aa:	fba2 2303 	umull	r2, r3, r2, r3
 80070ae:	0c9b      	lsrs	r3, r3, #18
 80070b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	4a6a      	ldr	r2, [pc, #424]	; (8007280 <HAL_I2C_Init+0x274>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d802      	bhi.n	80070e0 <HAL_I2C_Init+0xd4>
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	3301      	adds	r3, #1
 80070de:	e009      	b.n	80070f4 <HAL_I2C_Init+0xe8>
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80070e6:	fb02 f303 	mul.w	r3, r2, r3
 80070ea:	4a69      	ldr	r2, [pc, #420]	; (8007290 <HAL_I2C_Init+0x284>)
 80070ec:	fba2 2303 	umull	r2, r3, r2, r3
 80070f0:	099b      	lsrs	r3, r3, #6
 80070f2:	3301      	adds	r3, #1
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	6812      	ldr	r2, [r2, #0]
 80070f8:	430b      	orrs	r3, r1
 80070fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007106:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	495c      	ldr	r1, [pc, #368]	; (8007280 <HAL_I2C_Init+0x274>)
 8007110:	428b      	cmp	r3, r1
 8007112:	d819      	bhi.n	8007148 <HAL_I2C_Init+0x13c>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	1e59      	subs	r1, r3, #1
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007122:	1c59      	adds	r1, r3, #1
 8007124:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007128:	400b      	ands	r3, r1
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <HAL_I2C_Init+0x138>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	1e59      	subs	r1, r3, #1
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	fbb1 f3f3 	udiv	r3, r1, r3
 800713c:	3301      	adds	r3, #1
 800713e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007142:	e051      	b.n	80071e8 <HAL_I2C_Init+0x1dc>
 8007144:	2304      	movs	r3, #4
 8007146:	e04f      	b.n	80071e8 <HAL_I2C_Init+0x1dc>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d111      	bne.n	8007174 <HAL_I2C_Init+0x168>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	1e58      	subs	r0, r3, #1
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6859      	ldr	r1, [r3, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	440b      	add	r3, r1
 800715e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007162:	3301      	adds	r3, #1
 8007164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007168:	2b00      	cmp	r3, #0
 800716a:	bf0c      	ite	eq
 800716c:	2301      	moveq	r3, #1
 800716e:	2300      	movne	r3, #0
 8007170:	b2db      	uxtb	r3, r3
 8007172:	e012      	b.n	800719a <HAL_I2C_Init+0x18e>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	1e58      	subs	r0, r3, #1
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6859      	ldr	r1, [r3, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	440b      	add	r3, r1
 8007182:	0099      	lsls	r1, r3, #2
 8007184:	440b      	add	r3, r1
 8007186:	fbb0 f3f3 	udiv	r3, r0, r3
 800718a:	3301      	adds	r3, #1
 800718c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007190:	2b00      	cmp	r3, #0
 8007192:	bf0c      	ite	eq
 8007194:	2301      	moveq	r3, #1
 8007196:	2300      	movne	r3, #0
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d001      	beq.n	80071a2 <HAL_I2C_Init+0x196>
 800719e:	2301      	movs	r3, #1
 80071a0:	e022      	b.n	80071e8 <HAL_I2C_Init+0x1dc>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10e      	bne.n	80071c8 <HAL_I2C_Init+0x1bc>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	1e58      	subs	r0, r3, #1
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6859      	ldr	r1, [r3, #4]
 80071b2:	460b      	mov	r3, r1
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	440b      	add	r3, r1
 80071b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80071bc:	3301      	adds	r3, #1
 80071be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071c6:	e00f      	b.n	80071e8 <HAL_I2C_Init+0x1dc>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	1e58      	subs	r0, r3, #1
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6859      	ldr	r1, [r3, #4]
 80071d0:	460b      	mov	r3, r1
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	440b      	add	r3, r1
 80071d6:	0099      	lsls	r1, r3, #2
 80071d8:	440b      	add	r3, r1
 80071da:	fbb0 f3f3 	udiv	r3, r0, r3
 80071de:	3301      	adds	r3, #1
 80071e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071e8:	6879      	ldr	r1, [r7, #4]
 80071ea:	6809      	ldr	r1, [r1, #0]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	69da      	ldr	r2, [r3, #28]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	431a      	orrs	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007216:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	6911      	ldr	r1, [r2, #16]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	68d2      	ldr	r2, [r2, #12]
 8007222:	4311      	orrs	r1, r2
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	6812      	ldr	r2, [r2, #0]
 8007228:	430b      	orrs	r3, r1
 800722a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	695a      	ldr	r2, [r3, #20]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	431a      	orrs	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0201 	orr.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2220      	movs	r2, #32
 8007262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	000186a0 	.word	0x000186a0
 8007284:	001e847f 	.word	0x001e847f
 8007288:	003d08ff 	.word	0x003d08ff
 800728c:	431bde83 	.word	0x431bde83
 8007290:	10624dd3 	.word	0x10624dd3

08007294 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af02      	add	r7, sp, #8
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	607a      	str	r2, [r7, #4]
 800729e:	461a      	mov	r2, r3
 80072a0:	460b      	mov	r3, r1
 80072a2:	817b      	strh	r3, [r7, #10]
 80072a4:	4613      	mov	r3, r2
 80072a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80072a8:	f7fe ff56 	bl	8006158 <HAL_GetTick>
 80072ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b20      	cmp	r3, #32
 80072b8:	f040 80e0 	bne.w	800747c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	2319      	movs	r3, #25
 80072c2:	2201      	movs	r2, #1
 80072c4:	4970      	ldr	r1, [pc, #448]	; (8007488 <HAL_I2C_Master_Transmit+0x1f4>)
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f001 f910 	bl	80084ec <I2C_WaitOnFlagUntilTimeout>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80072d2:	2302      	movs	r3, #2
 80072d4:	e0d3      	b.n	800747e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d101      	bne.n	80072e4 <HAL_I2C_Master_Transmit+0x50>
 80072e0:	2302      	movs	r3, #2
 80072e2:	e0cc      	b.n	800747e <HAL_I2C_Master_Transmit+0x1ea>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d007      	beq.n	800730a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f042 0201 	orr.w	r2, r2, #1
 8007308:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007318:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2221      	movs	r2, #33	; 0x21
 800731e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2210      	movs	r2, #16
 8007326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	893a      	ldrh	r2, [r7, #8]
 800733a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007340:	b29a      	uxth	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	4a50      	ldr	r2, [pc, #320]	; (800748c <HAL_I2C_Master_Transmit+0x1f8>)
 800734a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800734c:	8979      	ldrh	r1, [r7, #10]
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	6a3a      	ldr	r2, [r7, #32]
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f000 fdfc 	bl	8007f50 <I2C_MasterRequestWrite>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e08d      	b.n	800747e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007362:	2300      	movs	r3, #0
 8007364:	613b      	str	r3, [r7, #16]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	613b      	str	r3, [r7, #16]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	613b      	str	r3, [r7, #16]
 8007376:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007378:	e066      	b.n	8007448 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	6a39      	ldr	r1, [r7, #32]
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f001 f98a 	bl	8008698 <I2C_WaitOnTXEFlagUntilTimeout>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00d      	beq.n	80073a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	2b04      	cmp	r3, #4
 8007390:	d107      	bne.n	80073a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e06b      	b.n	800747e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073aa:	781a      	ldrb	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	1c5a      	adds	r2, r3, #1
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	3b01      	subs	r3, #1
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ce:	3b01      	subs	r3, #1
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	f003 0304 	and.w	r3, r3, #4
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	d11b      	bne.n	800741c <HAL_I2C_Master_Transmit+0x188>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d017      	beq.n	800741c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	781a      	ldrb	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007406:	b29b      	uxth	r3, r3
 8007408:	3b01      	subs	r3, #1
 800740a:	b29a      	uxth	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007414:	3b01      	subs	r3, #1
 8007416:	b29a      	uxth	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	6a39      	ldr	r1, [r7, #32]
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f001 f97a 	bl	800871a <I2C_WaitOnBTFFlagUntilTimeout>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00d      	beq.n	8007448 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007430:	2b04      	cmp	r3, #4
 8007432:	d107      	bne.n	8007444 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007442:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e01a      	b.n	800747e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800744c:	2b00      	cmp	r3, #0
 800744e:	d194      	bne.n	800737a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800745e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2220      	movs	r2, #32
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	e000      	b.n	800747e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800747c:	2302      	movs	r3, #2
  }
}
 800747e:	4618      	mov	r0, r3
 8007480:	3718      	adds	r7, #24
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	00100002 	.word	0x00100002
 800748c:	ffff0000 	.word	0xffff0000

08007490 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08c      	sub	sp, #48	; 0x30
 8007494:	af02      	add	r7, sp, #8
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	607a      	str	r2, [r7, #4]
 800749a:	461a      	mov	r2, r3
 800749c:	460b      	mov	r3, r1
 800749e:	817b      	strh	r3, [r7, #10]
 80074a0:	4613      	mov	r3, r2
 80074a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80074a4:	f7fe fe58 	bl	8006158 <HAL_GetTick>
 80074a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	f040 820b 	bne.w	80078ce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	2319      	movs	r3, #25
 80074be:	2201      	movs	r2, #1
 80074c0:	497c      	ldr	r1, [pc, #496]	; (80076b4 <HAL_I2C_Master_Receive+0x224>)
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f001 f812 	bl	80084ec <I2C_WaitOnFlagUntilTimeout>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80074ce:	2302      	movs	r3, #2
 80074d0:	e1fe      	b.n	80078d0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d101      	bne.n	80074e0 <HAL_I2C_Master_Receive+0x50>
 80074dc:	2302      	movs	r3, #2
 80074de:	e1f7      	b.n	80078d0 <HAL_I2C_Master_Receive+0x440>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d007      	beq.n	8007506 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f042 0201 	orr.w	r2, r2, #1
 8007504:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007514:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2222      	movs	r2, #34	; 0x22
 800751a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2210      	movs	r2, #16
 8007522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	893a      	ldrh	r2, [r7, #8]
 8007536:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800753c:	b29a      	uxth	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	4a5c      	ldr	r2, [pc, #368]	; (80076b8 <HAL_I2C_Master_Receive+0x228>)
 8007546:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007548:	8979      	ldrh	r1, [r7, #10]
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f000 fd80 	bl	8008054 <I2C_MasterRequestRead>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e1b8      	b.n	80078d0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007562:	2b00      	cmp	r3, #0
 8007564:	d113      	bne.n	800758e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007566:	2300      	movs	r3, #0
 8007568:	623b      	str	r3, [r7, #32]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	623b      	str	r3, [r7, #32]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	623b      	str	r3, [r7, #32]
 800757a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	e18c      	b.n	80078a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007592:	2b01      	cmp	r3, #1
 8007594:	d11b      	bne.n	80075ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075a6:	2300      	movs	r3, #0
 80075a8:	61fb      	str	r3, [r7, #28]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	61fb      	str	r3, [r7, #28]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	61fb      	str	r3, [r7, #28]
 80075ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	e16c      	b.n	80078a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d11b      	bne.n	800760e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075f6:	2300      	movs	r3, #0
 80075f8:	61bb      	str	r3, [r7, #24]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	61bb      	str	r3, [r7, #24]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	61bb      	str	r3, [r7, #24]
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	e14c      	b.n	80078a8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800761c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800761e:	2300      	movs	r3, #0
 8007620:	617b      	str	r3, [r7, #20]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	617b      	str	r3, [r7, #20]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	617b      	str	r3, [r7, #20]
 8007632:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007634:	e138      	b.n	80078a8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800763a:	2b03      	cmp	r3, #3
 800763c:	f200 80f1 	bhi.w	8007822 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007644:	2b01      	cmp	r3, #1
 8007646:	d123      	bne.n	8007690 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800764a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f001 f8a5 	bl	800879c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e139      	b.n	80078d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	691a      	ldr	r2, [r3, #16]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007666:	b2d2      	uxtb	r2, r2
 8007668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007678:	3b01      	subs	r3, #1
 800767a:	b29a      	uxth	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007684:	b29b      	uxth	r3, r3
 8007686:	3b01      	subs	r3, #1
 8007688:	b29a      	uxth	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800768e:	e10b      	b.n	80078a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007694:	2b02      	cmp	r3, #2
 8007696:	d14e      	bne.n	8007736 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769e:	2200      	movs	r2, #0
 80076a0:	4906      	ldr	r1, [pc, #24]	; (80076bc <HAL_I2C_Master_Receive+0x22c>)
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 ff22 	bl	80084ec <I2C_WaitOnFlagUntilTimeout>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d008      	beq.n	80076c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e10e      	b.n	80078d0 <HAL_I2C_Master_Receive+0x440>
 80076b2:	bf00      	nop
 80076b4:	00100002 	.word	0x00100002
 80076b8:	ffff0000 	.word	0xffff0000
 80076bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	691a      	ldr	r2, [r3, #16]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	b2d2      	uxtb	r2, r2
 80076dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e2:	1c5a      	adds	r2, r3, #1
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ec:	3b01      	subs	r3, #1
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	3b01      	subs	r3, #1
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	691a      	ldr	r2, [r3, #16]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770c:	b2d2      	uxtb	r2, r2
 800770e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800771e:	3b01      	subs	r3, #1
 8007720:	b29a      	uxth	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772a:	b29b      	uxth	r3, r3
 800772c:	3b01      	subs	r3, #1
 800772e:	b29a      	uxth	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007734:	e0b8      	b.n	80078a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	2200      	movs	r2, #0
 800773e:	4966      	ldr	r1, [pc, #408]	; (80078d8 <HAL_I2C_Master_Receive+0x448>)
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 fed3 	bl	80084ec <I2C_WaitOnFlagUntilTimeout>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e0bf      	b.n	80078d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800775e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	691a      	ldr	r2, [r3, #16]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776a:	b2d2      	uxtb	r2, r2
 800776c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007772:	1c5a      	adds	r2, r3, #1
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800777c:	3b01      	subs	r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007788:	b29b      	uxth	r3, r3
 800778a:	3b01      	subs	r3, #1
 800778c:	b29a      	uxth	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007798:	2200      	movs	r2, #0
 800779a:	494f      	ldr	r1, [pc, #316]	; (80078d8 <HAL_I2C_Master_Receive+0x448>)
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 fea5 	bl	80084ec <I2C_WaitOnFlagUntilTimeout>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e091      	b.n	80078d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	691a      	ldr	r2, [r3, #16]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	b2d2      	uxtb	r2, r2
 80077c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	1c5a      	adds	r2, r3, #1
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077d8:	3b01      	subs	r3, #1
 80077da:	b29a      	uxth	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	691a      	ldr	r2, [r3, #16]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	b2d2      	uxtb	r2, r2
 80077fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800780a:	3b01      	subs	r3, #1
 800780c:	b29a      	uxth	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007816:	b29b      	uxth	r3, r3
 8007818:	3b01      	subs	r3, #1
 800781a:	b29a      	uxth	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007820:	e042      	b.n	80078a8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007824:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 ffb8 	bl	800879c <I2C_WaitOnRXNEFlagUntilTimeout>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e04c      	b.n	80078d0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	691a      	ldr	r2, [r3, #16]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007840:	b2d2      	uxtb	r2, r2
 8007842:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007852:	3b01      	subs	r3, #1
 8007854:	b29a      	uxth	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785e:	b29b      	uxth	r3, r3
 8007860:	3b01      	subs	r3, #1
 8007862:	b29a      	uxth	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	f003 0304 	and.w	r3, r3, #4
 8007872:	2b04      	cmp	r3, #4
 8007874:	d118      	bne.n	80078a8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	691a      	ldr	r2, [r3, #16]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	b2d2      	uxtb	r2, r2
 8007882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007892:	3b01      	subs	r3, #1
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800789e:	b29b      	uxth	r3, r3
 80078a0:	3b01      	subs	r3, #1
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f47f aec2 	bne.w	8007636 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	e000      	b.n	80078d0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80078ce:	2302      	movs	r3, #2
  }
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3728      	adds	r7, #40	; 0x28
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	00010004 	.word	0x00010004

080078dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b088      	sub	sp, #32
 80078e0:	af02      	add	r7, sp, #8
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	4608      	mov	r0, r1
 80078e6:	4611      	mov	r1, r2
 80078e8:	461a      	mov	r2, r3
 80078ea:	4603      	mov	r3, r0
 80078ec:	817b      	strh	r3, [r7, #10]
 80078ee:	460b      	mov	r3, r1
 80078f0:	813b      	strh	r3, [r7, #8]
 80078f2:	4613      	mov	r3, r2
 80078f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80078f6:	f7fe fc2f 	bl	8006158 <HAL_GetTick>
 80078fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b20      	cmp	r3, #32
 8007906:	f040 80d9 	bne.w	8007abc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	2319      	movs	r3, #25
 8007910:	2201      	movs	r2, #1
 8007912:	496d      	ldr	r1, [pc, #436]	; (8007ac8 <HAL_I2C_Mem_Write+0x1ec>)
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 fde9 	bl	80084ec <I2C_WaitOnFlagUntilTimeout>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007920:	2302      	movs	r3, #2
 8007922:	e0cc      	b.n	8007abe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800792a:	2b01      	cmp	r3, #1
 800792c:	d101      	bne.n	8007932 <HAL_I2C_Mem_Write+0x56>
 800792e:	2302      	movs	r3, #2
 8007930:	e0c5      	b.n	8007abe <HAL_I2C_Mem_Write+0x1e2>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b01      	cmp	r3, #1
 8007946:	d007      	beq.n	8007958 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0201 	orr.w	r2, r2, #1
 8007956:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007966:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2221      	movs	r2, #33	; 0x21
 800796c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2240      	movs	r2, #64	; 0x40
 8007974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6a3a      	ldr	r2, [r7, #32]
 8007982:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007988:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800798e:	b29a      	uxth	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4a4d      	ldr	r2, [pc, #308]	; (8007acc <HAL_I2C_Mem_Write+0x1f0>)
 8007998:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800799a:	88f8      	ldrh	r0, [r7, #6]
 800799c:	893a      	ldrh	r2, [r7, #8]
 800799e:	8979      	ldrh	r1, [r7, #10]
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	9301      	str	r3, [sp, #4]
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	4603      	mov	r3, r0
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 fc20 	bl	80081f0 <I2C_RequestMemoryWrite>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d052      	beq.n	8007a5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e081      	b.n	8007abe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 fe6a 	bl	8008698 <I2C_WaitOnTXEFlagUntilTimeout>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00d      	beq.n	80079e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d107      	bne.n	80079e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e06b      	b.n	8007abe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	781a      	ldrb	r2, [r3, #0]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f6:	1c5a      	adds	r2, r3, #1
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a00:	3b01      	subs	r3, #1
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b04      	cmp	r3, #4
 8007a22:	d11b      	bne.n	8007a5c <HAL_I2C_Mem_Write+0x180>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d017      	beq.n	8007a5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	781a      	ldrb	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a46:	3b01      	subs	r3, #1
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1aa      	bne.n	80079ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f000 fe56 	bl	800871a <I2C_WaitOnBTFFlagUntilTimeout>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00d      	beq.n	8007a90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a78:	2b04      	cmp	r3, #4
 8007a7a:	d107      	bne.n	8007a8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e016      	b.n	8007abe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	e000      	b.n	8007abe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007abc:	2302      	movs	r3, #2
  }
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	00100002 	.word	0x00100002
 8007acc:	ffff0000 	.word	0xffff0000

08007ad0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08c      	sub	sp, #48	; 0x30
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	4608      	mov	r0, r1
 8007ada:	4611      	mov	r1, r2
 8007adc:	461a      	mov	r2, r3
 8007ade:	4603      	mov	r3, r0
 8007ae0:	817b      	strh	r3, [r7, #10]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	813b      	strh	r3, [r7, #8]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007aea:	f7fe fb35 	bl	8006158 <HAL_GetTick>
 8007aee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b20      	cmp	r3, #32
 8007afa:	f040 8208 	bne.w	8007f0e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	2319      	movs	r3, #25
 8007b04:	2201      	movs	r2, #1
 8007b06:	497b      	ldr	r1, [pc, #492]	; (8007cf4 <HAL_I2C_Mem_Read+0x224>)
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 fcef 	bl	80084ec <I2C_WaitOnFlagUntilTimeout>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007b14:	2302      	movs	r3, #2
 8007b16:	e1fb      	b.n	8007f10 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d101      	bne.n	8007b26 <HAL_I2C_Mem_Read+0x56>
 8007b22:	2302      	movs	r3, #2
 8007b24:	e1f4      	b.n	8007f10 <HAL_I2C_Mem_Read+0x440>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d007      	beq.n	8007b4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f042 0201 	orr.w	r2, r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2222      	movs	r2, #34	; 0x22
 8007b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2240      	movs	r2, #64	; 0x40
 8007b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4a5b      	ldr	r2, [pc, #364]	; (8007cf8 <HAL_I2C_Mem_Read+0x228>)
 8007b8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b8e:	88f8      	ldrh	r0, [r7, #6]
 8007b90:	893a      	ldrh	r2, [r7, #8]
 8007b92:	8979      	ldrh	r1, [r7, #10]
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	9301      	str	r3, [sp, #4]
 8007b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 fbbc 	bl	800831c <I2C_RequestMemoryRead>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e1b0      	b.n	8007f10 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d113      	bne.n	8007bde <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	623b      	str	r3, [r7, #32]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	695b      	ldr	r3, [r3, #20]
 8007bc0:	623b      	str	r3, [r7, #32]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	623b      	str	r3, [r7, #32]
 8007bca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	e184      	b.n	8007ee8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d11b      	bne.n	8007c1e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61fb      	str	r3, [r7, #28]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	61fb      	str	r3, [r7, #28]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	61fb      	str	r3, [r7, #28]
 8007c0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c1a:	601a      	str	r2, [r3, #0]
 8007c1c:	e164      	b.n	8007ee8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d11b      	bne.n	8007c5e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c46:	2300      	movs	r3, #0
 8007c48:	61bb      	str	r3, [r7, #24]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	61bb      	str	r3, [r7, #24]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	61bb      	str	r3, [r7, #24]
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	e144      	b.n	8007ee8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c5e:	2300      	movs	r3, #0
 8007c60:	617b      	str	r3, [r7, #20]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	695b      	ldr	r3, [r3, #20]
 8007c68:	617b      	str	r3, [r7, #20]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	617b      	str	r3, [r7, #20]
 8007c72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007c74:	e138      	b.n	8007ee8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	f200 80f1 	bhi.w	8007e62 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d123      	bne.n	8007cd0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 fd85 	bl	800879c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e139      	b.n	8007f10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691a      	ldr	r2, [r3, #16]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca6:	b2d2      	uxtb	r2, r2
 8007ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cae:	1c5a      	adds	r2, r3, #1
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007cce:	e10b      	b.n	8007ee8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d14e      	bne.n	8007d76 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cde:	2200      	movs	r2, #0
 8007ce0:	4906      	ldr	r1, [pc, #24]	; (8007cfc <HAL_I2C_Mem_Read+0x22c>)
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f000 fc02 	bl	80084ec <I2C_WaitOnFlagUntilTimeout>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d008      	beq.n	8007d00 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e10e      	b.n	8007f10 <HAL_I2C_Mem_Read+0x440>
 8007cf2:	bf00      	nop
 8007cf4:	00100002 	.word	0x00100002
 8007cf8:	ffff0000 	.word	0xffff0000
 8007cfc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	691a      	ldr	r2, [r3, #16]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1a:	b2d2      	uxtb	r2, r2
 8007d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	1c5a      	adds	r2, r3, #1
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	691a      	ldr	r2, [r3, #16]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4c:	b2d2      	uxtb	r2, r2
 8007d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d54:	1c5a      	adds	r2, r3, #1
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d74:	e0b8      	b.n	8007ee8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	4966      	ldr	r1, [pc, #408]	; (8007f18 <HAL_I2C_Mem_Read+0x448>)
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 fbb3 	bl	80084ec <I2C_WaitOnFlagUntilTimeout>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e0bf      	b.n	8007f10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	691a      	ldr	r2, [r3, #16]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	b2d2      	uxtb	r2, r2
 8007dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd8:	2200      	movs	r2, #0
 8007dda:	494f      	ldr	r1, [pc, #316]	; (8007f18 <HAL_I2C_Mem_Read+0x448>)
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 fb85 	bl	80084ec <I2C_WaitOnFlagUntilTimeout>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e091      	b.n	8007f10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	691a      	ldr	r2, [r3, #16]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	b2d2      	uxtb	r2, r2
 8007e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	3b01      	subs	r3, #1
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	691a      	ldr	r2, [r3, #16]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e38:	b2d2      	uxtb	r2, r2
 8007e3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e60:	e042      	b.n	8007ee8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f000 fc98 	bl	800879c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e04c      	b.n	8007f10 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	691a      	ldr	r2, [r3, #16]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	b2d2      	uxtb	r2, r2
 8007e82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e92:	3b01      	subs	r3, #1
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	f003 0304 	and.w	r3, r3, #4
 8007eb2:	2b04      	cmp	r3, #4
 8007eb4:	d118      	bne.n	8007ee8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	691a      	ldr	r2, [r3, #16]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec0:	b2d2      	uxtb	r2, r2
 8007ec2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	1c5a      	adds	r2, r3, #1
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f47f aec2 	bne.w	8007c76 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e000      	b.n	8007f10 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007f0e:	2302      	movs	r3, #2
  }
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3728      	adds	r7, #40	; 0x28
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	00010004 	.word	0x00010004

08007f1c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f2a:	b2db      	uxtb	r3, r3
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af02      	add	r7, sp, #8
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	607a      	str	r2, [r7, #4]
 8007f5a:	603b      	str	r3, [r7, #0]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	2b08      	cmp	r3, #8
 8007f6a:	d006      	beq.n	8007f7a <I2C_MasterRequestWrite+0x2a>
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d003      	beq.n	8007f7a <I2C_MasterRequestWrite+0x2a>
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007f78:	d108      	bne.n	8007f8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	e00b      	b.n	8007fa4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f90:	2b12      	cmp	r3, #18
 8007f92:	d107      	bne.n	8007fa4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fa2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f000 fa9b 	bl	80084ec <I2C_WaitOnFlagUntilTimeout>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00d      	beq.n	8007fd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fca:	d103      	bne.n	8007fd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e035      	b.n	8008044 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fe0:	d108      	bne.n	8007ff4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007fe2:	897b      	ldrh	r3, [r7, #10]
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ff0:	611a      	str	r2, [r3, #16]
 8007ff2:	e01b      	b.n	800802c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007ff4:	897b      	ldrh	r3, [r7, #10]
 8007ff6:	11db      	asrs	r3, r3, #7
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	f003 0306 	and.w	r3, r3, #6
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	f063 030f 	orn	r3, r3, #15
 8008004:	b2da      	uxtb	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	490e      	ldr	r1, [pc, #56]	; (800804c <I2C_MasterRequestWrite+0xfc>)
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 fac1 	bl	800859a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e010      	b.n	8008044 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008022:	897b      	ldrh	r3, [r7, #10]
 8008024:	b2da      	uxtb	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	4907      	ldr	r1, [pc, #28]	; (8008050 <I2C_MasterRequestWrite+0x100>)
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 fab1 	bl	800859a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e000      	b.n	8008044 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	00010008 	.word	0x00010008
 8008050:	00010002 	.word	0x00010002

08008054 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b088      	sub	sp, #32
 8008058:	af02      	add	r7, sp, #8
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	607a      	str	r2, [r7, #4]
 800805e:	603b      	str	r3, [r7, #0]
 8008060:	460b      	mov	r3, r1
 8008062:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008068:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008078:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2b08      	cmp	r3, #8
 800807e:	d006      	beq.n	800808e <I2C_MasterRequestRead+0x3a>
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d003      	beq.n	800808e <I2C_MasterRequestRead+0x3a>
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800808c:	d108      	bne.n	80080a0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800809c:	601a      	str	r2, [r3, #0]
 800809e:	e00b      	b.n	80080b8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a4:	2b11      	cmp	r3, #17
 80080a6:	d107      	bne.n	80080b8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f000 fa11 	bl	80084ec <I2C_WaitOnFlagUntilTimeout>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00d      	beq.n	80080ec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080de:	d103      	bne.n	80080e8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e079      	b.n	80081e0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080f4:	d108      	bne.n	8008108 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80080f6:	897b      	ldrh	r3, [r7, #10]
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	f043 0301 	orr.w	r3, r3, #1
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	611a      	str	r2, [r3, #16]
 8008106:	e05f      	b.n	80081c8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008108:	897b      	ldrh	r3, [r7, #10]
 800810a:	11db      	asrs	r3, r3, #7
 800810c:	b2db      	uxtb	r3, r3
 800810e:	f003 0306 	and.w	r3, r3, #6
 8008112:	b2db      	uxtb	r3, r3
 8008114:	f063 030f 	orn	r3, r3, #15
 8008118:	b2da      	uxtb	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	4930      	ldr	r1, [pc, #192]	; (80081e8 <I2C_MasterRequestRead+0x194>)
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f000 fa37 	bl	800859a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e054      	b.n	80081e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008136:	897b      	ldrh	r3, [r7, #10]
 8008138:	b2da      	uxtb	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	4929      	ldr	r1, [pc, #164]	; (80081ec <I2C_MasterRequestRead+0x198>)
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 fa27 	bl	800859a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e044      	b.n	80081e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008156:	2300      	movs	r3, #0
 8008158:	613b      	str	r3, [r7, #16]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	613b      	str	r3, [r7, #16]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	613b      	str	r3, [r7, #16]
 800816a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800817a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 f9af 	bl	80084ec <I2C_WaitOnFlagUntilTimeout>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00d      	beq.n	80081b0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800819e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081a2:	d103      	bne.n	80081ac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081aa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e017      	b.n	80081e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80081b0:	897b      	ldrh	r3, [r7, #10]
 80081b2:	11db      	asrs	r3, r3, #7
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	f003 0306 	and.w	r3, r3, #6
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	f063 030e 	orn	r3, r3, #14
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	4907      	ldr	r1, [pc, #28]	; (80081ec <I2C_MasterRequestRead+0x198>)
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 f9e3 	bl	800859a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e000      	b.n	80081e0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3718      	adds	r7, #24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	00010008 	.word	0x00010008
 80081ec:	00010002 	.word	0x00010002

080081f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b088      	sub	sp, #32
 80081f4:	af02      	add	r7, sp, #8
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	4608      	mov	r0, r1
 80081fa:	4611      	mov	r1, r2
 80081fc:	461a      	mov	r2, r3
 80081fe:	4603      	mov	r3, r0
 8008200:	817b      	strh	r3, [r7, #10]
 8008202:	460b      	mov	r3, r1
 8008204:	813b      	strh	r3, [r7, #8]
 8008206:	4613      	mov	r3, r2
 8008208:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008218:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	2200      	movs	r2, #0
 8008222:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f000 f960 	bl	80084ec <I2C_WaitOnFlagUntilTimeout>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00d      	beq.n	800824e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800823c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008240:	d103      	bne.n	800824a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008248:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e05f      	b.n	800830e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800824e:	897b      	ldrh	r3, [r7, #10]
 8008250:	b2db      	uxtb	r3, r3
 8008252:	461a      	mov	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800825c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	6a3a      	ldr	r2, [r7, #32]
 8008262:	492d      	ldr	r1, [pc, #180]	; (8008318 <I2C_RequestMemoryWrite+0x128>)
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f000 f998 	bl	800859a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d001      	beq.n	8008274 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e04c      	b.n	800830e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008274:	2300      	movs	r3, #0
 8008276:	617b      	str	r3, [r7, #20]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	617b      	str	r3, [r7, #20]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	617b      	str	r3, [r7, #20]
 8008288:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800828a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800828c:	6a39      	ldr	r1, [r7, #32]
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f000 fa02 	bl	8008698 <I2C_WaitOnTXEFlagUntilTimeout>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00d      	beq.n	80082b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d107      	bne.n	80082b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e02b      	b.n	800830e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082b6:	88fb      	ldrh	r3, [r7, #6]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d105      	bne.n	80082c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80082bc:	893b      	ldrh	r3, [r7, #8]
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	611a      	str	r2, [r3, #16]
 80082c6:	e021      	b.n	800830c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80082c8:	893b      	ldrh	r3, [r7, #8]
 80082ca:	0a1b      	lsrs	r3, r3, #8
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d8:	6a39      	ldr	r1, [r7, #32]
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f000 f9dc 	bl	8008698 <I2C_WaitOnTXEFlagUntilTimeout>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00d      	beq.n	8008302 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	d107      	bne.n	80082fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e005      	b.n	800830e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008302:	893b      	ldrh	r3, [r7, #8]
 8008304:	b2da      	uxtb	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3718      	adds	r7, #24
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	00010002 	.word	0x00010002

0800831c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b088      	sub	sp, #32
 8008320:	af02      	add	r7, sp, #8
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	4608      	mov	r0, r1
 8008326:	4611      	mov	r1, r2
 8008328:	461a      	mov	r2, r3
 800832a:	4603      	mov	r3, r0
 800832c:	817b      	strh	r3, [r7, #10]
 800832e:	460b      	mov	r3, r1
 8008330:	813b      	strh	r3, [r7, #8]
 8008332:	4613      	mov	r3, r2
 8008334:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008344:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008354:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	2200      	movs	r2, #0
 800835e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f000 f8c2 	bl	80084ec <I2C_WaitOnFlagUntilTimeout>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00d      	beq.n	800838a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800837c:	d103      	bne.n	8008386 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008384:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e0aa      	b.n	80084e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800838a:	897b      	ldrh	r3, [r7, #10]
 800838c:	b2db      	uxtb	r3, r3
 800838e:	461a      	mov	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008398:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	6a3a      	ldr	r2, [r7, #32]
 800839e:	4952      	ldr	r1, [pc, #328]	; (80084e8 <I2C_RequestMemoryRead+0x1cc>)
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 f8fa 	bl	800859a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d001      	beq.n	80083b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e097      	b.n	80084e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083b0:	2300      	movs	r3, #0
 80083b2:	617b      	str	r3, [r7, #20]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	617b      	str	r3, [r7, #20]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	699b      	ldr	r3, [r3, #24]
 80083c2:	617b      	str	r3, [r7, #20]
 80083c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c8:	6a39      	ldr	r1, [r7, #32]
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f000 f964 	bl	8008698 <I2C_WaitOnTXEFlagUntilTimeout>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00d      	beq.n	80083f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083da:	2b04      	cmp	r3, #4
 80083dc:	d107      	bne.n	80083ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e076      	b.n	80084e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80083f2:	88fb      	ldrh	r3, [r7, #6]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d105      	bne.n	8008404 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083f8:	893b      	ldrh	r3, [r7, #8]
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	611a      	str	r2, [r3, #16]
 8008402:	e021      	b.n	8008448 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008404:	893b      	ldrh	r3, [r7, #8]
 8008406:	0a1b      	lsrs	r3, r3, #8
 8008408:	b29b      	uxth	r3, r3
 800840a:	b2da      	uxtb	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008414:	6a39      	ldr	r1, [r7, #32]
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f000 f93e 	bl	8008698 <I2C_WaitOnTXEFlagUntilTimeout>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00d      	beq.n	800843e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008426:	2b04      	cmp	r3, #4
 8008428:	d107      	bne.n	800843a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008438:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e050      	b.n	80084e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800843e:	893b      	ldrh	r3, [r7, #8]
 8008440:	b2da      	uxtb	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800844a:	6a39      	ldr	r1, [r7, #32]
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f000 f923 	bl	8008698 <I2C_WaitOnTXEFlagUntilTimeout>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00d      	beq.n	8008474 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845c:	2b04      	cmp	r3, #4
 800845e:	d107      	bne.n	8008470 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800846e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e035      	b.n	80084e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008482:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	6a3b      	ldr	r3, [r7, #32]
 800848a:	2200      	movs	r2, #0
 800848c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f000 f82b 	bl	80084ec <I2C_WaitOnFlagUntilTimeout>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00d      	beq.n	80084b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084aa:	d103      	bne.n	80084b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e013      	b.n	80084e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80084b8:	897b      	ldrh	r3, [r7, #10]
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	f043 0301 	orr.w	r3, r3, #1
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	6a3a      	ldr	r2, [r7, #32]
 80084cc:	4906      	ldr	r1, [pc, #24]	; (80084e8 <I2C_RequestMemoryRead+0x1cc>)
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 f863 	bl	800859a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e000      	b.n	80084e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3718      	adds	r7, #24
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	00010002 	.word	0x00010002

080084ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	603b      	str	r3, [r7, #0]
 80084f8:	4613      	mov	r3, r2
 80084fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084fc:	e025      	b.n	800854a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008504:	d021      	beq.n	800854a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008506:	f7fd fe27 	bl	8006158 <HAL_GetTick>
 800850a:	4602      	mov	r2, r0
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	683a      	ldr	r2, [r7, #0]
 8008512:	429a      	cmp	r2, r3
 8008514:	d302      	bcc.n	800851c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d116      	bne.n	800854a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2220      	movs	r2, #32
 8008526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008536:	f043 0220 	orr.w	r2, r3, #32
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e023      	b.n	8008592 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	0c1b      	lsrs	r3, r3, #16
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b01      	cmp	r3, #1
 8008552:	d10d      	bne.n	8008570 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	43da      	mvns	r2, r3
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	4013      	ands	r3, r2
 8008560:	b29b      	uxth	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	bf0c      	ite	eq
 8008566:	2301      	moveq	r3, #1
 8008568:	2300      	movne	r3, #0
 800856a:	b2db      	uxtb	r3, r3
 800856c:	461a      	mov	r2, r3
 800856e:	e00c      	b.n	800858a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	43da      	mvns	r2, r3
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	4013      	ands	r3, r2
 800857c:	b29b      	uxth	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	bf0c      	ite	eq
 8008582:	2301      	moveq	r3, #1
 8008584:	2300      	movne	r3, #0
 8008586:	b2db      	uxtb	r3, r3
 8008588:	461a      	mov	r2, r3
 800858a:	79fb      	ldrb	r3, [r7, #7]
 800858c:	429a      	cmp	r2, r3
 800858e:	d0b6      	beq.n	80084fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b084      	sub	sp, #16
 800859e:	af00      	add	r7, sp, #0
 80085a0:	60f8      	str	r0, [r7, #12]
 80085a2:	60b9      	str	r1, [r7, #8]
 80085a4:	607a      	str	r2, [r7, #4]
 80085a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80085a8:	e051      	b.n	800864e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b8:	d123      	bne.n	8008602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80085d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2220      	movs	r2, #32
 80085de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	f043 0204 	orr.w	r2, r3, #4
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e046      	b.n	8008690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008608:	d021      	beq.n	800864e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800860a:	f7fd fda5 	bl	8006158 <HAL_GetTick>
 800860e:	4602      	mov	r2, r0
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	429a      	cmp	r2, r3
 8008618:	d302      	bcc.n	8008620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d116      	bne.n	800864e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2220      	movs	r2, #32
 800862a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	f043 0220 	orr.w	r2, r3, #32
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e020      	b.n	8008690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	0c1b      	lsrs	r3, r3, #16
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b01      	cmp	r3, #1
 8008656:	d10c      	bne.n	8008672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	43da      	mvns	r2, r3
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	4013      	ands	r3, r2
 8008664:	b29b      	uxth	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	bf14      	ite	ne
 800866a:	2301      	movne	r3, #1
 800866c:	2300      	moveq	r3, #0
 800866e:	b2db      	uxtb	r3, r3
 8008670:	e00b      	b.n	800868a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	43da      	mvns	r2, r3
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	4013      	ands	r3, r2
 800867e:	b29b      	uxth	r3, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	bf14      	ite	ne
 8008684:	2301      	movne	r3, #1
 8008686:	2300      	moveq	r3, #0
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d18d      	bne.n	80085aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086a4:	e02d      	b.n	8008702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f000 f8ce 	bl	8008848 <I2C_IsAcknowledgeFailed>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e02d      	b.n	8008712 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086bc:	d021      	beq.n	8008702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086be:	f7fd fd4b 	bl	8006158 <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d302      	bcc.n	80086d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d116      	bne.n	8008702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2220      	movs	r2, #32
 80086de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ee:	f043 0220 	orr.w	r2, r3, #32
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e007      	b.n	8008712 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800870c:	2b80      	cmp	r3, #128	; 0x80
 800870e:	d1ca      	bne.n	80086a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b084      	sub	sp, #16
 800871e:	af00      	add	r7, sp, #0
 8008720:	60f8      	str	r0, [r7, #12]
 8008722:	60b9      	str	r1, [r7, #8]
 8008724:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008726:	e02d      	b.n	8008784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 f88d 	bl	8008848 <I2C_IsAcknowledgeFailed>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d001      	beq.n	8008738 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e02d      	b.n	8008794 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873e:	d021      	beq.n	8008784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008740:	f7fd fd0a 	bl	8006158 <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	429a      	cmp	r2, r3
 800874e:	d302      	bcc.n	8008756 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d116      	bne.n	8008784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2220      	movs	r2, #32
 8008760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008770:	f043 0220 	orr.w	r2, r3, #32
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e007      	b.n	8008794 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	f003 0304 	and.w	r3, r3, #4
 800878e:	2b04      	cmp	r3, #4
 8008790:	d1ca      	bne.n	8008728 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80087a8:	e042      	b.n	8008830 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	f003 0310 	and.w	r3, r3, #16
 80087b4:	2b10      	cmp	r3, #16
 80087b6:	d119      	bne.n	80087ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f06f 0210 	mvn.w	r2, #16
 80087c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2220      	movs	r2, #32
 80087cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e029      	b.n	8008840 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087ec:	f7fd fcb4 	bl	8006158 <HAL_GetTick>
 80087f0:	4602      	mov	r2, r0
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d302      	bcc.n	8008802 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d116      	bne.n	8008830 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2220      	movs	r2, #32
 800880c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881c:	f043 0220 	orr.w	r2, r3, #32
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e007      	b.n	8008840 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800883a:	2b40      	cmp	r3, #64	; 0x40
 800883c:	d1b5      	bne.n	80087aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800885a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800885e:	d11b      	bne.n	8008898 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008868:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2220      	movs	r2, #32
 8008874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008884:	f043 0204 	orr.w	r2, r3, #4
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e000      	b.n	800889a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
	...

080088a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e267      	b.n	8008d8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d075      	beq.n	80089b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80088c6:	4b88      	ldr	r3, [pc, #544]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f003 030c 	and.w	r3, r3, #12
 80088ce:	2b04      	cmp	r3, #4
 80088d0:	d00c      	beq.n	80088ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80088d2:	4b85      	ldr	r3, [pc, #532]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80088da:	2b08      	cmp	r3, #8
 80088dc:	d112      	bne.n	8008904 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80088de:	4b82      	ldr	r3, [pc, #520]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088ea:	d10b      	bne.n	8008904 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088ec:	4b7e      	ldr	r3, [pc, #504]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d05b      	beq.n	80089b0 <HAL_RCC_OscConfig+0x108>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d157      	bne.n	80089b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e242      	b.n	8008d8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800890c:	d106      	bne.n	800891c <HAL_RCC_OscConfig+0x74>
 800890e:	4b76      	ldr	r3, [pc, #472]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a75      	ldr	r2, [pc, #468]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 8008914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008918:	6013      	str	r3, [r2, #0]
 800891a:	e01d      	b.n	8008958 <HAL_RCC_OscConfig+0xb0>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008924:	d10c      	bne.n	8008940 <HAL_RCC_OscConfig+0x98>
 8008926:	4b70      	ldr	r3, [pc, #448]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a6f      	ldr	r2, [pc, #444]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 800892c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008930:	6013      	str	r3, [r2, #0]
 8008932:	4b6d      	ldr	r3, [pc, #436]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a6c      	ldr	r2, [pc, #432]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 8008938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800893c:	6013      	str	r3, [r2, #0]
 800893e:	e00b      	b.n	8008958 <HAL_RCC_OscConfig+0xb0>
 8008940:	4b69      	ldr	r3, [pc, #420]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a68      	ldr	r2, [pc, #416]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 8008946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800894a:	6013      	str	r3, [r2, #0]
 800894c:	4b66      	ldr	r3, [pc, #408]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a65      	ldr	r2, [pc, #404]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 8008952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d013      	beq.n	8008988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008960:	f7fd fbfa 	bl	8006158 <HAL_GetTick>
 8008964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008966:	e008      	b.n	800897a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008968:	f7fd fbf6 	bl	8006158 <HAL_GetTick>
 800896c:	4602      	mov	r2, r0
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	2b64      	cmp	r3, #100	; 0x64
 8008974:	d901      	bls.n	800897a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e207      	b.n	8008d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800897a:	4b5b      	ldr	r3, [pc, #364]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008982:	2b00      	cmp	r3, #0
 8008984:	d0f0      	beq.n	8008968 <HAL_RCC_OscConfig+0xc0>
 8008986:	e014      	b.n	80089b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008988:	f7fd fbe6 	bl	8006158 <HAL_GetTick>
 800898c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800898e:	e008      	b.n	80089a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008990:	f7fd fbe2 	bl	8006158 <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b64      	cmp	r3, #100	; 0x64
 800899c:	d901      	bls.n	80089a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e1f3      	b.n	8008d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089a2:	4b51      	ldr	r3, [pc, #324]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1f0      	bne.n	8008990 <HAL_RCC_OscConfig+0xe8>
 80089ae:	e000      	b.n	80089b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d063      	beq.n	8008a86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80089be:	4b4a      	ldr	r3, [pc, #296]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f003 030c 	and.w	r3, r3, #12
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00b      	beq.n	80089e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80089ca:	4b47      	ldr	r3, [pc, #284]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80089d2:	2b08      	cmp	r3, #8
 80089d4:	d11c      	bne.n	8008a10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80089d6:	4b44      	ldr	r3, [pc, #272]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d116      	bne.n	8008a10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089e2:	4b41      	ldr	r3, [pc, #260]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d005      	beq.n	80089fa <HAL_RCC_OscConfig+0x152>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d001      	beq.n	80089fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e1c7      	b.n	8008d8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089fa:	4b3b      	ldr	r3, [pc, #236]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	00db      	lsls	r3, r3, #3
 8008a08:	4937      	ldr	r1, [pc, #220]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a0e:	e03a      	b.n	8008a86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d020      	beq.n	8008a5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a18:	4b34      	ldr	r3, [pc, #208]	; (8008aec <HAL_RCC_OscConfig+0x244>)
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a1e:	f7fd fb9b 	bl	8006158 <HAL_GetTick>
 8008a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a24:	e008      	b.n	8008a38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a26:	f7fd fb97 	bl	8006158 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d901      	bls.n	8008a38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e1a8      	b.n	8008d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a38:	4b2b      	ldr	r3, [pc, #172]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 0302 	and.w	r3, r3, #2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d0f0      	beq.n	8008a26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a44:	4b28      	ldr	r3, [pc, #160]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	00db      	lsls	r3, r3, #3
 8008a52:	4925      	ldr	r1, [pc, #148]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	600b      	str	r3, [r1, #0]
 8008a58:	e015      	b.n	8008a86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a5a:	4b24      	ldr	r3, [pc, #144]	; (8008aec <HAL_RCC_OscConfig+0x244>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a60:	f7fd fb7a 	bl	8006158 <HAL_GetTick>
 8008a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a66:	e008      	b.n	8008a7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a68:	f7fd fb76 	bl	8006158 <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d901      	bls.n	8008a7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e187      	b.n	8008d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a7a:	4b1b      	ldr	r3, [pc, #108]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0302 	and.w	r3, r3, #2
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1f0      	bne.n	8008a68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 0308 	and.w	r3, r3, #8
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d036      	beq.n	8008b00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d016      	beq.n	8008ac8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a9a:	4b15      	ldr	r3, [pc, #84]	; (8008af0 <HAL_RCC_OscConfig+0x248>)
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aa0:	f7fd fb5a 	bl	8006158 <HAL_GetTick>
 8008aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008aa6:	e008      	b.n	8008aba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008aa8:	f7fd fb56 	bl	8006158 <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d901      	bls.n	8008aba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e167      	b.n	8008d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008aba:	4b0b      	ldr	r3, [pc, #44]	; (8008ae8 <HAL_RCC_OscConfig+0x240>)
 8008abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d0f0      	beq.n	8008aa8 <HAL_RCC_OscConfig+0x200>
 8008ac6:	e01b      	b.n	8008b00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ac8:	4b09      	ldr	r3, [pc, #36]	; (8008af0 <HAL_RCC_OscConfig+0x248>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ace:	f7fd fb43 	bl	8006158 <HAL_GetTick>
 8008ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ad4:	e00e      	b.n	8008af4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ad6:	f7fd fb3f 	bl	8006158 <HAL_GetTick>
 8008ada:	4602      	mov	r2, r0
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d907      	bls.n	8008af4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e150      	b.n	8008d8a <HAL_RCC_OscConfig+0x4e2>
 8008ae8:	40023800 	.word	0x40023800
 8008aec:	42470000 	.word	0x42470000
 8008af0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008af4:	4b88      	ldr	r3, [pc, #544]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1ea      	bne.n	8008ad6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f000 8097 	beq.w	8008c3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b12:	4b81      	ldr	r3, [pc, #516]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10f      	bne.n	8008b3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b1e:	2300      	movs	r3, #0
 8008b20:	60bb      	str	r3, [r7, #8]
 8008b22:	4b7d      	ldr	r3, [pc, #500]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b26:	4a7c      	ldr	r2, [pc, #496]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8008b2e:	4b7a      	ldr	r3, [pc, #488]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b36:	60bb      	str	r3, [r7, #8]
 8008b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b3e:	4b77      	ldr	r3, [pc, #476]	; (8008d1c <HAL_RCC_OscConfig+0x474>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d118      	bne.n	8008b7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b4a:	4b74      	ldr	r3, [pc, #464]	; (8008d1c <HAL_RCC_OscConfig+0x474>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a73      	ldr	r2, [pc, #460]	; (8008d1c <HAL_RCC_OscConfig+0x474>)
 8008b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b56:	f7fd faff 	bl	8006158 <HAL_GetTick>
 8008b5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b5c:	e008      	b.n	8008b70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b5e:	f7fd fafb 	bl	8006158 <HAL_GetTick>
 8008b62:	4602      	mov	r2, r0
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d901      	bls.n	8008b70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e10c      	b.n	8008d8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b70:	4b6a      	ldr	r3, [pc, #424]	; (8008d1c <HAL_RCC_OscConfig+0x474>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d0f0      	beq.n	8008b5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d106      	bne.n	8008b92 <HAL_RCC_OscConfig+0x2ea>
 8008b84:	4b64      	ldr	r3, [pc, #400]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b88:	4a63      	ldr	r2, [pc, #396]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008b8a:	f043 0301 	orr.w	r3, r3, #1
 8008b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8008b90:	e01c      	b.n	8008bcc <HAL_RCC_OscConfig+0x324>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	2b05      	cmp	r3, #5
 8008b98:	d10c      	bne.n	8008bb4 <HAL_RCC_OscConfig+0x30c>
 8008b9a:	4b5f      	ldr	r3, [pc, #380]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b9e:	4a5e      	ldr	r2, [pc, #376]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008ba0:	f043 0304 	orr.w	r3, r3, #4
 8008ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8008ba6:	4b5c      	ldr	r3, [pc, #368]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008baa:	4a5b      	ldr	r2, [pc, #364]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008bac:	f043 0301 	orr.w	r3, r3, #1
 8008bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8008bb2:	e00b      	b.n	8008bcc <HAL_RCC_OscConfig+0x324>
 8008bb4:	4b58      	ldr	r3, [pc, #352]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb8:	4a57      	ldr	r2, [pc, #348]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008bba:	f023 0301 	bic.w	r3, r3, #1
 8008bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8008bc0:	4b55      	ldr	r3, [pc, #340]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc4:	4a54      	ldr	r2, [pc, #336]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008bc6:	f023 0304 	bic.w	r3, r3, #4
 8008bca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d015      	beq.n	8008c00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bd4:	f7fd fac0 	bl	8006158 <HAL_GetTick>
 8008bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bda:	e00a      	b.n	8008bf2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bdc:	f7fd fabc 	bl	8006158 <HAL_GetTick>
 8008be0:	4602      	mov	r2, r0
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d901      	bls.n	8008bf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e0cb      	b.n	8008d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bf2:	4b49      	ldr	r3, [pc, #292]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf6:	f003 0302 	and.w	r3, r3, #2
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d0ee      	beq.n	8008bdc <HAL_RCC_OscConfig+0x334>
 8008bfe:	e014      	b.n	8008c2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c00:	f7fd faaa 	bl	8006158 <HAL_GetTick>
 8008c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c06:	e00a      	b.n	8008c1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c08:	f7fd faa6 	bl	8006158 <HAL_GetTick>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d901      	bls.n	8008c1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e0b5      	b.n	8008d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c1e:	4b3e      	ldr	r3, [pc, #248]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c22:	f003 0302 	and.w	r3, r3, #2
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1ee      	bne.n	8008c08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d105      	bne.n	8008c3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c30:	4b39      	ldr	r3, [pc, #228]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c34:	4a38      	ldr	r2, [pc, #224]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f000 80a1 	beq.w	8008d88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c46:	4b34      	ldr	r3, [pc, #208]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f003 030c 	and.w	r3, r3, #12
 8008c4e:	2b08      	cmp	r3, #8
 8008c50:	d05c      	beq.n	8008d0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d141      	bne.n	8008cde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c5a:	4b31      	ldr	r3, [pc, #196]	; (8008d20 <HAL_RCC_OscConfig+0x478>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c60:	f7fd fa7a 	bl	8006158 <HAL_GetTick>
 8008c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c66:	e008      	b.n	8008c7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c68:	f7fd fa76 	bl	8006158 <HAL_GetTick>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d901      	bls.n	8008c7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e087      	b.n	8008d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c7a:	4b27      	ldr	r3, [pc, #156]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1f0      	bne.n	8008c68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	69da      	ldr	r2, [r3, #28]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	431a      	orrs	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c94:	019b      	lsls	r3, r3, #6
 8008c96:	431a      	orrs	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9c:	085b      	lsrs	r3, r3, #1
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	041b      	lsls	r3, r3, #16
 8008ca2:	431a      	orrs	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca8:	061b      	lsls	r3, r3, #24
 8008caa:	491b      	ldr	r1, [pc, #108]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008cac:	4313      	orrs	r3, r2
 8008cae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008cb0:	4b1b      	ldr	r3, [pc, #108]	; (8008d20 <HAL_RCC_OscConfig+0x478>)
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cb6:	f7fd fa4f 	bl	8006158 <HAL_GetTick>
 8008cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cbc:	e008      	b.n	8008cd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cbe:	f7fd fa4b 	bl	8006158 <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d901      	bls.n	8008cd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	e05c      	b.n	8008d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cd0:	4b11      	ldr	r3, [pc, #68]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d0f0      	beq.n	8008cbe <HAL_RCC_OscConfig+0x416>
 8008cdc:	e054      	b.n	8008d88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cde:	4b10      	ldr	r3, [pc, #64]	; (8008d20 <HAL_RCC_OscConfig+0x478>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ce4:	f7fd fa38 	bl	8006158 <HAL_GetTick>
 8008ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cea:	e008      	b.n	8008cfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cec:	f7fd fa34 	bl	8006158 <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d901      	bls.n	8008cfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e045      	b.n	8008d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cfe:	4b06      	ldr	r3, [pc, #24]	; (8008d18 <HAL_RCC_OscConfig+0x470>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1f0      	bne.n	8008cec <HAL_RCC_OscConfig+0x444>
 8008d0a:	e03d      	b.n	8008d88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d107      	bne.n	8008d24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e038      	b.n	8008d8a <HAL_RCC_OscConfig+0x4e2>
 8008d18:	40023800 	.word	0x40023800
 8008d1c:	40007000 	.word	0x40007000
 8008d20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008d24:	4b1b      	ldr	r3, [pc, #108]	; (8008d94 <HAL_RCC_OscConfig+0x4ec>)
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d028      	beq.n	8008d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d121      	bne.n	8008d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d11a      	bne.n	8008d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008d54:	4013      	ands	r3, r2
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008d5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d111      	bne.n	8008d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6a:	085b      	lsrs	r3, r3, #1
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d107      	bne.n	8008d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d001      	beq.n	8008d88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	e000      	b.n	8008d8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3718      	adds	r7, #24
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	40023800 	.word	0x40023800

08008d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d101      	bne.n	8008dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e0cc      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008dac:	4b68      	ldr	r3, [pc, #416]	; (8008f50 <HAL_RCC_ClockConfig+0x1b8>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0307 	and.w	r3, r3, #7
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d90c      	bls.n	8008dd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dba:	4b65      	ldr	r3, [pc, #404]	; (8008f50 <HAL_RCC_ClockConfig+0x1b8>)
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	b2d2      	uxtb	r2, r2
 8008dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dc2:	4b63      	ldr	r3, [pc, #396]	; (8008f50 <HAL_RCC_ClockConfig+0x1b8>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0307 	and.w	r3, r3, #7
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d001      	beq.n	8008dd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e0b8      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d020      	beq.n	8008e22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 0304 	and.w	r3, r3, #4
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d005      	beq.n	8008df8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008dec:	4b59      	ldr	r3, [pc, #356]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	4a58      	ldr	r2, [pc, #352]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008df2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008df6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0308 	and.w	r3, r3, #8
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d005      	beq.n	8008e10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e04:	4b53      	ldr	r3, [pc, #332]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	4a52      	ldr	r2, [pc, #328]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008e0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e10:	4b50      	ldr	r3, [pc, #320]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	494d      	ldr	r1, [pc, #308]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d044      	beq.n	8008eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d107      	bne.n	8008e46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e36:	4b47      	ldr	r3, [pc, #284]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d119      	bne.n	8008e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e07f      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d003      	beq.n	8008e56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e52:	2b03      	cmp	r3, #3
 8008e54:	d107      	bne.n	8008e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e56:	4b3f      	ldr	r3, [pc, #252]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d109      	bne.n	8008e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e06f      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e66:	4b3b      	ldr	r3, [pc, #236]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0302 	and.w	r3, r3, #2
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e067      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e76:	4b37      	ldr	r3, [pc, #220]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f023 0203 	bic.w	r2, r3, #3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	4934      	ldr	r1, [pc, #208]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e84:	4313      	orrs	r3, r2
 8008e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e88:	f7fd f966 	bl	8006158 <HAL_GetTick>
 8008e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e8e:	e00a      	b.n	8008ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e90:	f7fd f962 	bl	8006158 <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d901      	bls.n	8008ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	e04f      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ea6:	4b2b      	ldr	r3, [pc, #172]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f003 020c 	and.w	r2, r3, #12
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d1eb      	bne.n	8008e90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008eb8:	4b25      	ldr	r3, [pc, #148]	; (8008f50 <HAL_RCC_ClockConfig+0x1b8>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 0307 	and.w	r3, r3, #7
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d20c      	bcs.n	8008ee0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ec6:	4b22      	ldr	r3, [pc, #136]	; (8008f50 <HAL_RCC_ClockConfig+0x1b8>)
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	b2d2      	uxtb	r2, r2
 8008ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ece:	4b20      	ldr	r3, [pc, #128]	; (8008f50 <HAL_RCC_ClockConfig+0x1b8>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 0307 	and.w	r3, r3, #7
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d001      	beq.n	8008ee0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e032      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0304 	and.w	r3, r3, #4
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d008      	beq.n	8008efe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008eec:	4b19      	ldr	r3, [pc, #100]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	4916      	ldr	r1, [pc, #88]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008efa:	4313      	orrs	r3, r2
 8008efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0308 	and.w	r3, r3, #8
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d009      	beq.n	8008f1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f0a:	4b12      	ldr	r3, [pc, #72]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	00db      	lsls	r3, r3, #3
 8008f18:	490e      	ldr	r1, [pc, #56]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008f1e:	f000 f821 	bl	8008f64 <HAL_RCC_GetSysClockFreq>
 8008f22:	4602      	mov	r2, r0
 8008f24:	4b0b      	ldr	r3, [pc, #44]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	091b      	lsrs	r3, r3, #4
 8008f2a:	f003 030f 	and.w	r3, r3, #15
 8008f2e:	490a      	ldr	r1, [pc, #40]	; (8008f58 <HAL_RCC_ClockConfig+0x1c0>)
 8008f30:	5ccb      	ldrb	r3, [r1, r3]
 8008f32:	fa22 f303 	lsr.w	r3, r2, r3
 8008f36:	4a09      	ldr	r2, [pc, #36]	; (8008f5c <HAL_RCC_ClockConfig+0x1c4>)
 8008f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008f3a:	4b09      	ldr	r3, [pc, #36]	; (8008f60 <HAL_RCC_ClockConfig+0x1c8>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fb fd9e 	bl	8004a80 <HAL_InitTick>

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	40023c00 	.word	0x40023c00
 8008f54:	40023800 	.word	0x40023800
 8008f58:	08011660 	.word	0x08011660
 8008f5c:	20000078 	.word	0x20000078
 8008f60:	2000007c 	.word	0x2000007c

08008f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f68:	b094      	sub	sp, #80	; 0x50
 8008f6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8008f70:	2300      	movs	r3, #0
 8008f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f74:	2300      	movs	r3, #0
 8008f76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f7c:	4b79      	ldr	r3, [pc, #484]	; (8009164 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	f003 030c 	and.w	r3, r3, #12
 8008f84:	2b08      	cmp	r3, #8
 8008f86:	d00d      	beq.n	8008fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8008f88:	2b08      	cmp	r3, #8
 8008f8a:	f200 80e1 	bhi.w	8009150 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d002      	beq.n	8008f98 <HAL_RCC_GetSysClockFreq+0x34>
 8008f92:	2b04      	cmp	r3, #4
 8008f94:	d003      	beq.n	8008f9e <HAL_RCC_GetSysClockFreq+0x3a>
 8008f96:	e0db      	b.n	8009150 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008f98:	4b73      	ldr	r3, [pc, #460]	; (8009168 <HAL_RCC_GetSysClockFreq+0x204>)
 8008f9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008f9c:	e0db      	b.n	8009156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008f9e:	4b73      	ldr	r3, [pc, #460]	; (800916c <HAL_RCC_GetSysClockFreq+0x208>)
 8008fa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008fa2:	e0d8      	b.n	8009156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008fa4:	4b6f      	ldr	r3, [pc, #444]	; (8009164 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008fae:	4b6d      	ldr	r3, [pc, #436]	; (8009164 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d063      	beq.n	8009082 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008fba:	4b6a      	ldr	r3, [pc, #424]	; (8009164 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	099b      	lsrs	r3, r3, #6
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8008fce:	2300      	movs	r3, #0
 8008fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8008fd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008fd6:	4622      	mov	r2, r4
 8008fd8:	462b      	mov	r3, r5
 8008fda:	f04f 0000 	mov.w	r0, #0
 8008fde:	f04f 0100 	mov.w	r1, #0
 8008fe2:	0159      	lsls	r1, r3, #5
 8008fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008fe8:	0150      	lsls	r0, r2, #5
 8008fea:	4602      	mov	r2, r0
 8008fec:	460b      	mov	r3, r1
 8008fee:	4621      	mov	r1, r4
 8008ff0:	1a51      	subs	r1, r2, r1
 8008ff2:	6139      	str	r1, [r7, #16]
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8008ffa:	617b      	str	r3, [r7, #20]
 8008ffc:	f04f 0200 	mov.w	r2, #0
 8009000:	f04f 0300 	mov.w	r3, #0
 8009004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009008:	4659      	mov	r1, fp
 800900a:	018b      	lsls	r3, r1, #6
 800900c:	4651      	mov	r1, sl
 800900e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009012:	4651      	mov	r1, sl
 8009014:	018a      	lsls	r2, r1, #6
 8009016:	4651      	mov	r1, sl
 8009018:	ebb2 0801 	subs.w	r8, r2, r1
 800901c:	4659      	mov	r1, fp
 800901e:	eb63 0901 	sbc.w	r9, r3, r1
 8009022:	f04f 0200 	mov.w	r2, #0
 8009026:	f04f 0300 	mov.w	r3, #0
 800902a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800902e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009036:	4690      	mov	r8, r2
 8009038:	4699      	mov	r9, r3
 800903a:	4623      	mov	r3, r4
 800903c:	eb18 0303 	adds.w	r3, r8, r3
 8009040:	60bb      	str	r3, [r7, #8]
 8009042:	462b      	mov	r3, r5
 8009044:	eb49 0303 	adc.w	r3, r9, r3
 8009048:	60fb      	str	r3, [r7, #12]
 800904a:	f04f 0200 	mov.w	r2, #0
 800904e:	f04f 0300 	mov.w	r3, #0
 8009052:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009056:	4629      	mov	r1, r5
 8009058:	024b      	lsls	r3, r1, #9
 800905a:	4621      	mov	r1, r4
 800905c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009060:	4621      	mov	r1, r4
 8009062:	024a      	lsls	r2, r1, #9
 8009064:	4610      	mov	r0, r2
 8009066:	4619      	mov	r1, r3
 8009068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800906a:	2200      	movs	r2, #0
 800906c:	62bb      	str	r3, [r7, #40]	; 0x28
 800906e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009070:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009074:	f7f7 fe38 	bl	8000ce8 <__aeabi_uldivmod>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	4613      	mov	r3, r2
 800907e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009080:	e058      	b.n	8009134 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009082:	4b38      	ldr	r3, [pc, #224]	; (8009164 <HAL_RCC_GetSysClockFreq+0x200>)
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	099b      	lsrs	r3, r3, #6
 8009088:	2200      	movs	r2, #0
 800908a:	4618      	mov	r0, r3
 800908c:	4611      	mov	r1, r2
 800908e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009092:	623b      	str	r3, [r7, #32]
 8009094:	2300      	movs	r3, #0
 8009096:	627b      	str	r3, [r7, #36]	; 0x24
 8009098:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800909c:	4642      	mov	r2, r8
 800909e:	464b      	mov	r3, r9
 80090a0:	f04f 0000 	mov.w	r0, #0
 80090a4:	f04f 0100 	mov.w	r1, #0
 80090a8:	0159      	lsls	r1, r3, #5
 80090aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090ae:	0150      	lsls	r0, r2, #5
 80090b0:	4602      	mov	r2, r0
 80090b2:	460b      	mov	r3, r1
 80090b4:	4641      	mov	r1, r8
 80090b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80090ba:	4649      	mov	r1, r9
 80090bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80090c0:	f04f 0200 	mov.w	r2, #0
 80090c4:	f04f 0300 	mov.w	r3, #0
 80090c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80090cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80090d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80090d4:	ebb2 040a 	subs.w	r4, r2, sl
 80090d8:	eb63 050b 	sbc.w	r5, r3, fp
 80090dc:	f04f 0200 	mov.w	r2, #0
 80090e0:	f04f 0300 	mov.w	r3, #0
 80090e4:	00eb      	lsls	r3, r5, #3
 80090e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090ea:	00e2      	lsls	r2, r4, #3
 80090ec:	4614      	mov	r4, r2
 80090ee:	461d      	mov	r5, r3
 80090f0:	4643      	mov	r3, r8
 80090f2:	18e3      	adds	r3, r4, r3
 80090f4:	603b      	str	r3, [r7, #0]
 80090f6:	464b      	mov	r3, r9
 80090f8:	eb45 0303 	adc.w	r3, r5, r3
 80090fc:	607b      	str	r3, [r7, #4]
 80090fe:	f04f 0200 	mov.w	r2, #0
 8009102:	f04f 0300 	mov.w	r3, #0
 8009106:	e9d7 4500 	ldrd	r4, r5, [r7]
 800910a:	4629      	mov	r1, r5
 800910c:	028b      	lsls	r3, r1, #10
 800910e:	4621      	mov	r1, r4
 8009110:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009114:	4621      	mov	r1, r4
 8009116:	028a      	lsls	r2, r1, #10
 8009118:	4610      	mov	r0, r2
 800911a:	4619      	mov	r1, r3
 800911c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800911e:	2200      	movs	r2, #0
 8009120:	61bb      	str	r3, [r7, #24]
 8009122:	61fa      	str	r2, [r7, #28]
 8009124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009128:	f7f7 fdde 	bl	8000ce8 <__aeabi_uldivmod>
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	4613      	mov	r3, r2
 8009132:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009134:	4b0b      	ldr	r3, [pc, #44]	; (8009164 <HAL_RCC_GetSysClockFreq+0x200>)
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	0c1b      	lsrs	r3, r3, #16
 800913a:	f003 0303 	and.w	r3, r3, #3
 800913e:	3301      	adds	r3, #1
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009144:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009148:	fbb2 f3f3 	udiv	r3, r2, r3
 800914c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800914e:	e002      	b.n	8009156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009150:	4b05      	ldr	r3, [pc, #20]	; (8009168 <HAL_RCC_GetSysClockFreq+0x204>)
 8009152:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009158:	4618      	mov	r0, r3
 800915a:	3750      	adds	r7, #80	; 0x50
 800915c:	46bd      	mov	sp, r7
 800915e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009162:	bf00      	nop
 8009164:	40023800 	.word	0x40023800
 8009168:	00f42400 	.word	0x00f42400
 800916c:	007a1200 	.word	0x007a1200

08009170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009170:	b480      	push	{r7}
 8009172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009174:	4b03      	ldr	r3, [pc, #12]	; (8009184 <HAL_RCC_GetHCLKFreq+0x14>)
 8009176:	681b      	ldr	r3, [r3, #0]
}
 8009178:	4618      	mov	r0, r3
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	20000078 	.word	0x20000078

08009188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800918c:	f7ff fff0 	bl	8009170 <HAL_RCC_GetHCLKFreq>
 8009190:	4602      	mov	r2, r0
 8009192:	4b05      	ldr	r3, [pc, #20]	; (80091a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	0a9b      	lsrs	r3, r3, #10
 8009198:	f003 0307 	and.w	r3, r3, #7
 800919c:	4903      	ldr	r1, [pc, #12]	; (80091ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800919e:	5ccb      	ldrb	r3, [r1, r3]
 80091a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	40023800 	.word	0x40023800
 80091ac:	08011670 	.word	0x08011670

080091b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80091b4:	f7ff ffdc 	bl	8009170 <HAL_RCC_GetHCLKFreq>
 80091b8:	4602      	mov	r2, r0
 80091ba:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	0b5b      	lsrs	r3, r3, #13
 80091c0:	f003 0307 	and.w	r3, r3, #7
 80091c4:	4903      	ldr	r1, [pc, #12]	; (80091d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80091c6:	5ccb      	ldrb	r3, [r1, r3]
 80091c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	40023800 	.word	0x40023800
 80091d4:	08011670 	.word	0x08011670

080091d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	220f      	movs	r2, #15
 80091e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80091e8:	4b12      	ldr	r3, [pc, #72]	; (8009234 <HAL_RCC_GetClockConfig+0x5c>)
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	f003 0203 	and.w	r2, r3, #3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80091f4:	4b0f      	ldr	r3, [pc, #60]	; (8009234 <HAL_RCC_GetClockConfig+0x5c>)
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009200:	4b0c      	ldr	r3, [pc, #48]	; (8009234 <HAL_RCC_GetClockConfig+0x5c>)
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800920c:	4b09      	ldr	r3, [pc, #36]	; (8009234 <HAL_RCC_GetClockConfig+0x5c>)
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	08db      	lsrs	r3, r3, #3
 8009212:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800921a:	4b07      	ldr	r3, [pc, #28]	; (8009238 <HAL_RCC_GetClockConfig+0x60>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0207 	and.w	r2, r3, #7
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	601a      	str	r2, [r3, #0]
}
 8009226:	bf00      	nop
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	40023800 	.word	0x40023800
 8009238:	40023c00 	.word	0x40023c00

0800923c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d101      	bne.n	800924e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e041      	b.n	80092d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009254:	b2db      	uxtb	r3, r3
 8009256:	2b00      	cmp	r3, #0
 8009258:	d106      	bne.n	8009268 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7fc f9ec 	bl	8005640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2202      	movs	r2, #2
 800926c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	3304      	adds	r3, #4
 8009278:	4619      	mov	r1, r3
 800927a:	4610      	mov	r0, r2
 800927c:	f001 f858 	bl	800a330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3708      	adds	r7, #8
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
	...

080092dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d001      	beq.n	80092f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e046      	b.n	8009382 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2202      	movs	r2, #2
 80092f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a23      	ldr	r2, [pc, #140]	; (8009390 <HAL_TIM_Base_Start+0xb4>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d022      	beq.n	800934c <HAL_TIM_Base_Start+0x70>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800930e:	d01d      	beq.n	800934c <HAL_TIM_Base_Start+0x70>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a1f      	ldr	r2, [pc, #124]	; (8009394 <HAL_TIM_Base_Start+0xb8>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d018      	beq.n	800934c <HAL_TIM_Base_Start+0x70>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a1e      	ldr	r2, [pc, #120]	; (8009398 <HAL_TIM_Base_Start+0xbc>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d013      	beq.n	800934c <HAL_TIM_Base_Start+0x70>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a1c      	ldr	r2, [pc, #112]	; (800939c <HAL_TIM_Base_Start+0xc0>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d00e      	beq.n	800934c <HAL_TIM_Base_Start+0x70>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a1b      	ldr	r2, [pc, #108]	; (80093a0 <HAL_TIM_Base_Start+0xc4>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d009      	beq.n	800934c <HAL_TIM_Base_Start+0x70>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a19      	ldr	r2, [pc, #100]	; (80093a4 <HAL_TIM_Base_Start+0xc8>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d004      	beq.n	800934c <HAL_TIM_Base_Start+0x70>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a18      	ldr	r2, [pc, #96]	; (80093a8 <HAL_TIM_Base_Start+0xcc>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d111      	bne.n	8009370 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	f003 0307 	and.w	r3, r3, #7
 8009356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2b06      	cmp	r3, #6
 800935c:	d010      	beq.n	8009380 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f042 0201 	orr.w	r2, r2, #1
 800936c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800936e:	e007      	b.n	8009380 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f042 0201 	orr.w	r2, r2, #1
 800937e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3714      	adds	r7, #20
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	40010000 	.word	0x40010000
 8009394:	40000400 	.word	0x40000400
 8009398:	40000800 	.word	0x40000800
 800939c:	40000c00 	.word	0x40000c00
 80093a0:	40010400 	.word	0x40010400
 80093a4:	40014000 	.word	0x40014000
 80093a8:	40001800 	.word	0x40001800

080093ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d001      	beq.n	80093c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e04e      	b.n	8009462 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2202      	movs	r2, #2
 80093c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68da      	ldr	r2, [r3, #12]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f042 0201 	orr.w	r2, r2, #1
 80093da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a23      	ldr	r2, [pc, #140]	; (8009470 <HAL_TIM_Base_Start_IT+0xc4>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d022      	beq.n	800942c <HAL_TIM_Base_Start_IT+0x80>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ee:	d01d      	beq.n	800942c <HAL_TIM_Base_Start_IT+0x80>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a1f      	ldr	r2, [pc, #124]	; (8009474 <HAL_TIM_Base_Start_IT+0xc8>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d018      	beq.n	800942c <HAL_TIM_Base_Start_IT+0x80>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a1e      	ldr	r2, [pc, #120]	; (8009478 <HAL_TIM_Base_Start_IT+0xcc>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d013      	beq.n	800942c <HAL_TIM_Base_Start_IT+0x80>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a1c      	ldr	r2, [pc, #112]	; (800947c <HAL_TIM_Base_Start_IT+0xd0>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d00e      	beq.n	800942c <HAL_TIM_Base_Start_IT+0x80>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a1b      	ldr	r2, [pc, #108]	; (8009480 <HAL_TIM_Base_Start_IT+0xd4>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d009      	beq.n	800942c <HAL_TIM_Base_Start_IT+0x80>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a19      	ldr	r2, [pc, #100]	; (8009484 <HAL_TIM_Base_Start_IT+0xd8>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d004      	beq.n	800942c <HAL_TIM_Base_Start_IT+0x80>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a18      	ldr	r2, [pc, #96]	; (8009488 <HAL_TIM_Base_Start_IT+0xdc>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d111      	bne.n	8009450 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	f003 0307 	and.w	r3, r3, #7
 8009436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2b06      	cmp	r3, #6
 800943c:	d010      	beq.n	8009460 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f042 0201 	orr.w	r2, r2, #1
 800944c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800944e:	e007      	b.n	8009460 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f042 0201 	orr.w	r2, r2, #1
 800945e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	40010000 	.word	0x40010000
 8009474:	40000400 	.word	0x40000400
 8009478:	40000800 	.word	0x40000800
 800947c:	40000c00 	.word	0x40000c00
 8009480:	40010400 	.word	0x40010400
 8009484:	40014000 	.word	0x40014000
 8009488:	40001800 	.word	0x40001800

0800948c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e041      	b.n	8009522 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d106      	bne.n	80094b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f839 	bl	800952a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2202      	movs	r2, #2
 80094bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	3304      	adds	r3, #4
 80094c8:	4619      	mov	r1, r3
 80094ca:	4610      	mov	r0, r2
 80094cc:	f000 ff30 	bl	800a330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800952a:	b480      	push	{r7}
 800952c:	b083      	sub	sp, #12
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009532:	bf00      	nop
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
	...

08009540 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d109      	bne.n	8009564 <HAL_TIM_PWM_Start+0x24>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b01      	cmp	r3, #1
 800955a:	bf14      	ite	ne
 800955c:	2301      	movne	r3, #1
 800955e:	2300      	moveq	r3, #0
 8009560:	b2db      	uxtb	r3, r3
 8009562:	e022      	b.n	80095aa <HAL_TIM_PWM_Start+0x6a>
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	2b04      	cmp	r3, #4
 8009568:	d109      	bne.n	800957e <HAL_TIM_PWM_Start+0x3e>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009570:	b2db      	uxtb	r3, r3
 8009572:	2b01      	cmp	r3, #1
 8009574:	bf14      	ite	ne
 8009576:	2301      	movne	r3, #1
 8009578:	2300      	moveq	r3, #0
 800957a:	b2db      	uxtb	r3, r3
 800957c:	e015      	b.n	80095aa <HAL_TIM_PWM_Start+0x6a>
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b08      	cmp	r3, #8
 8009582:	d109      	bne.n	8009598 <HAL_TIM_PWM_Start+0x58>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b01      	cmp	r3, #1
 800958e:	bf14      	ite	ne
 8009590:	2301      	movne	r3, #1
 8009592:	2300      	moveq	r3, #0
 8009594:	b2db      	uxtb	r3, r3
 8009596:	e008      	b.n	80095aa <HAL_TIM_PWM_Start+0x6a>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	bf14      	ite	ne
 80095a4:	2301      	movne	r3, #1
 80095a6:	2300      	moveq	r3, #0
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e07c      	b.n	80096ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d104      	bne.n	80095c2 <HAL_TIM_PWM_Start+0x82>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2202      	movs	r2, #2
 80095bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095c0:	e013      	b.n	80095ea <HAL_TIM_PWM_Start+0xaa>
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b04      	cmp	r3, #4
 80095c6:	d104      	bne.n	80095d2 <HAL_TIM_PWM_Start+0x92>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2202      	movs	r2, #2
 80095cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095d0:	e00b      	b.n	80095ea <HAL_TIM_PWM_Start+0xaa>
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	2b08      	cmp	r3, #8
 80095d6:	d104      	bne.n	80095e2 <HAL_TIM_PWM_Start+0xa2>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2202      	movs	r2, #2
 80095dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095e0:	e003      	b.n	80095ea <HAL_TIM_PWM_Start+0xaa>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2202      	movs	r2, #2
 80095e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2201      	movs	r2, #1
 80095f0:	6839      	ldr	r1, [r7, #0]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f001 fb42 	bl	800ac7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a2d      	ldr	r2, [pc, #180]	; (80096b4 <HAL_TIM_PWM_Start+0x174>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d004      	beq.n	800960c <HAL_TIM_PWM_Start+0xcc>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a2c      	ldr	r2, [pc, #176]	; (80096b8 <HAL_TIM_PWM_Start+0x178>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d101      	bne.n	8009610 <HAL_TIM_PWM_Start+0xd0>
 800960c:	2301      	movs	r3, #1
 800960e:	e000      	b.n	8009612 <HAL_TIM_PWM_Start+0xd2>
 8009610:	2300      	movs	r3, #0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d007      	beq.n	8009626 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009624:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a22      	ldr	r2, [pc, #136]	; (80096b4 <HAL_TIM_PWM_Start+0x174>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d022      	beq.n	8009676 <HAL_TIM_PWM_Start+0x136>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009638:	d01d      	beq.n	8009676 <HAL_TIM_PWM_Start+0x136>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a1f      	ldr	r2, [pc, #124]	; (80096bc <HAL_TIM_PWM_Start+0x17c>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d018      	beq.n	8009676 <HAL_TIM_PWM_Start+0x136>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a1d      	ldr	r2, [pc, #116]	; (80096c0 <HAL_TIM_PWM_Start+0x180>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d013      	beq.n	8009676 <HAL_TIM_PWM_Start+0x136>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a1c      	ldr	r2, [pc, #112]	; (80096c4 <HAL_TIM_PWM_Start+0x184>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d00e      	beq.n	8009676 <HAL_TIM_PWM_Start+0x136>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a16      	ldr	r2, [pc, #88]	; (80096b8 <HAL_TIM_PWM_Start+0x178>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d009      	beq.n	8009676 <HAL_TIM_PWM_Start+0x136>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a18      	ldr	r2, [pc, #96]	; (80096c8 <HAL_TIM_PWM_Start+0x188>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d004      	beq.n	8009676 <HAL_TIM_PWM_Start+0x136>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a16      	ldr	r2, [pc, #88]	; (80096cc <HAL_TIM_PWM_Start+0x18c>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d111      	bne.n	800969a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	f003 0307 	and.w	r3, r3, #7
 8009680:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2b06      	cmp	r3, #6
 8009686:	d010      	beq.n	80096aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f042 0201 	orr.w	r2, r2, #1
 8009696:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009698:	e007      	b.n	80096aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f042 0201 	orr.w	r2, r2, #1
 80096a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	40010000 	.word	0x40010000
 80096b8:	40010400 	.word	0x40010400
 80096bc:	40000400 	.word	0x40000400
 80096c0:	40000800 	.word	0x40000800
 80096c4:	40000c00 	.word	0x40000c00
 80096c8:	40014000 	.word	0x40014000
 80096cc:	40001800 	.word	0x40001800

080096d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d101      	bne.n	80096e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e041      	b.n	8009766 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d106      	bne.n	80096fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f839 	bl	800976e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2202      	movs	r2, #2
 8009700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	3304      	adds	r3, #4
 800970c:	4619      	mov	r1, r3
 800970e:	4610      	mov	r0, r2
 8009710:	f000 fe0e 	bl	800a330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800976e:	b480      	push	{r7}
 8009770:	b083      	sub	sp, #12
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009776:	bf00      	nop
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
	...

08009784 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d104      	bne.n	800979e <HAL_TIM_IC_Start+0x1a>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800979a:	b2db      	uxtb	r3, r3
 800979c:	e013      	b.n	80097c6 <HAL_TIM_IC_Start+0x42>
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	2b04      	cmp	r3, #4
 80097a2:	d104      	bne.n	80097ae <HAL_TIM_IC_Start+0x2a>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	e00b      	b.n	80097c6 <HAL_TIM_IC_Start+0x42>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	2b08      	cmp	r3, #8
 80097b2:	d104      	bne.n	80097be <HAL_TIM_IC_Start+0x3a>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	e003      	b.n	80097c6 <HAL_TIM_IC_Start+0x42>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d104      	bne.n	80097d8 <HAL_TIM_IC_Start+0x54>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	e013      	b.n	8009800 <HAL_TIM_IC_Start+0x7c>
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	2b04      	cmp	r3, #4
 80097dc:	d104      	bne.n	80097e8 <HAL_TIM_IC_Start+0x64>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	e00b      	b.n	8009800 <HAL_TIM_IC_Start+0x7c>
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2b08      	cmp	r3, #8
 80097ec:	d104      	bne.n	80097f8 <HAL_TIM_IC_Start+0x74>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	e003      	b.n	8009800 <HAL_TIM_IC_Start+0x7c>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009802:	7bfb      	ldrb	r3, [r7, #15]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d102      	bne.n	800980e <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009808:	7bbb      	ldrb	r3, [r7, #14]
 800980a:	2b01      	cmp	r3, #1
 800980c:	d001      	beq.n	8009812 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e081      	b.n	8009916 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d104      	bne.n	8009822 <HAL_TIM_IC_Start+0x9e>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2202      	movs	r2, #2
 800981c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009820:	e013      	b.n	800984a <HAL_TIM_IC_Start+0xc6>
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	2b04      	cmp	r3, #4
 8009826:	d104      	bne.n	8009832 <HAL_TIM_IC_Start+0xae>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2202      	movs	r2, #2
 800982c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009830:	e00b      	b.n	800984a <HAL_TIM_IC_Start+0xc6>
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	2b08      	cmp	r3, #8
 8009836:	d104      	bne.n	8009842 <HAL_TIM_IC_Start+0xbe>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2202      	movs	r2, #2
 800983c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009840:	e003      	b.n	800984a <HAL_TIM_IC_Start+0xc6>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2202      	movs	r2, #2
 8009846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d104      	bne.n	800985a <HAL_TIM_IC_Start+0xd6>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2202      	movs	r2, #2
 8009854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009858:	e013      	b.n	8009882 <HAL_TIM_IC_Start+0xfe>
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	2b04      	cmp	r3, #4
 800985e:	d104      	bne.n	800986a <HAL_TIM_IC_Start+0xe6>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2202      	movs	r2, #2
 8009864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009868:	e00b      	b.n	8009882 <HAL_TIM_IC_Start+0xfe>
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2b08      	cmp	r3, #8
 800986e:	d104      	bne.n	800987a <HAL_TIM_IC_Start+0xf6>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2202      	movs	r2, #2
 8009874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009878:	e003      	b.n	8009882 <HAL_TIM_IC_Start+0xfe>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2202      	movs	r2, #2
 800987e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2201      	movs	r2, #1
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	4618      	mov	r0, r3
 800988c:	f001 f9f6 	bl	800ac7c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a22      	ldr	r2, [pc, #136]	; (8009920 <HAL_TIM_IC_Start+0x19c>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d022      	beq.n	80098e0 <HAL_TIM_IC_Start+0x15c>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098a2:	d01d      	beq.n	80098e0 <HAL_TIM_IC_Start+0x15c>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a1e      	ldr	r2, [pc, #120]	; (8009924 <HAL_TIM_IC_Start+0x1a0>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d018      	beq.n	80098e0 <HAL_TIM_IC_Start+0x15c>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a1d      	ldr	r2, [pc, #116]	; (8009928 <HAL_TIM_IC_Start+0x1a4>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d013      	beq.n	80098e0 <HAL_TIM_IC_Start+0x15c>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a1b      	ldr	r2, [pc, #108]	; (800992c <HAL_TIM_IC_Start+0x1a8>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d00e      	beq.n	80098e0 <HAL_TIM_IC_Start+0x15c>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a1a      	ldr	r2, [pc, #104]	; (8009930 <HAL_TIM_IC_Start+0x1ac>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d009      	beq.n	80098e0 <HAL_TIM_IC_Start+0x15c>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a18      	ldr	r2, [pc, #96]	; (8009934 <HAL_TIM_IC_Start+0x1b0>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d004      	beq.n	80098e0 <HAL_TIM_IC_Start+0x15c>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a17      	ldr	r2, [pc, #92]	; (8009938 <HAL_TIM_IC_Start+0x1b4>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d111      	bne.n	8009904 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	f003 0307 	and.w	r3, r3, #7
 80098ea:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	2b06      	cmp	r3, #6
 80098f0:	d010      	beq.n	8009914 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f042 0201 	orr.w	r2, r2, #1
 8009900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009902:	e007      	b.n	8009914 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f042 0201 	orr.w	r2, r2, #1
 8009912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	40010000 	.word	0x40010000
 8009924:	40000400 	.word	0x40000400
 8009928:	40000800 	.word	0x40000800
 800992c:	40000c00 	.word	0x40000c00
 8009930:	40010400 	.word	0x40010400
 8009934:	40014000 	.word	0x40014000
 8009938:	40001800 	.word	0x40001800

0800993c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d104      	bne.n	800995a <HAL_TIM_IC_Start_IT+0x1e>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009956:	b2db      	uxtb	r3, r3
 8009958:	e013      	b.n	8009982 <HAL_TIM_IC_Start_IT+0x46>
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	2b04      	cmp	r3, #4
 800995e:	d104      	bne.n	800996a <HAL_TIM_IC_Start_IT+0x2e>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009966:	b2db      	uxtb	r3, r3
 8009968:	e00b      	b.n	8009982 <HAL_TIM_IC_Start_IT+0x46>
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2b08      	cmp	r3, #8
 800996e:	d104      	bne.n	800997a <HAL_TIM_IC_Start_IT+0x3e>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009976:	b2db      	uxtb	r3, r3
 8009978:	e003      	b.n	8009982 <HAL_TIM_IC_Start_IT+0x46>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009980:	b2db      	uxtb	r3, r3
 8009982:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d104      	bne.n	8009994 <HAL_TIM_IC_Start_IT+0x58>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009990:	b2db      	uxtb	r3, r3
 8009992:	e013      	b.n	80099bc <HAL_TIM_IC_Start_IT+0x80>
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	2b04      	cmp	r3, #4
 8009998:	d104      	bne.n	80099a4 <HAL_TIM_IC_Start_IT+0x68>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	e00b      	b.n	80099bc <HAL_TIM_IC_Start_IT+0x80>
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	2b08      	cmp	r3, #8
 80099a8:	d104      	bne.n	80099b4 <HAL_TIM_IC_Start_IT+0x78>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	e003      	b.n	80099bc <HAL_TIM_IC_Start_IT+0x80>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80099be:	7bbb      	ldrb	r3, [r7, #14]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d102      	bne.n	80099ca <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80099c4:	7b7b      	ldrb	r3, [r7, #13]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d001      	beq.n	80099ce <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	e0cc      	b.n	8009b68 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d104      	bne.n	80099de <HAL_TIM_IC_Start_IT+0xa2>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2202      	movs	r2, #2
 80099d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099dc:	e013      	b.n	8009a06 <HAL_TIM_IC_Start_IT+0xca>
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	d104      	bne.n	80099ee <HAL_TIM_IC_Start_IT+0xb2>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2202      	movs	r2, #2
 80099e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099ec:	e00b      	b.n	8009a06 <HAL_TIM_IC_Start_IT+0xca>
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	2b08      	cmp	r3, #8
 80099f2:	d104      	bne.n	80099fe <HAL_TIM_IC_Start_IT+0xc2>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2202      	movs	r2, #2
 80099f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099fc:	e003      	b.n	8009a06 <HAL_TIM_IC_Start_IT+0xca>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2202      	movs	r2, #2
 8009a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d104      	bne.n	8009a16 <HAL_TIM_IC_Start_IT+0xda>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2202      	movs	r2, #2
 8009a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a14:	e013      	b.n	8009a3e <HAL_TIM_IC_Start_IT+0x102>
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	2b04      	cmp	r3, #4
 8009a1a:	d104      	bne.n	8009a26 <HAL_TIM_IC_Start_IT+0xea>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2202      	movs	r2, #2
 8009a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a24:	e00b      	b.n	8009a3e <HAL_TIM_IC_Start_IT+0x102>
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b08      	cmp	r3, #8
 8009a2a:	d104      	bne.n	8009a36 <HAL_TIM_IC_Start_IT+0xfa>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2202      	movs	r2, #2
 8009a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a34:	e003      	b.n	8009a3e <HAL_TIM_IC_Start_IT+0x102>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2202      	movs	r2, #2
 8009a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	2b0c      	cmp	r3, #12
 8009a42:	d841      	bhi.n	8009ac8 <HAL_TIM_IC_Start_IT+0x18c>
 8009a44:	a201      	add	r2, pc, #4	; (adr r2, 8009a4c <HAL_TIM_IC_Start_IT+0x110>)
 8009a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4a:	bf00      	nop
 8009a4c:	08009a81 	.word	0x08009a81
 8009a50:	08009ac9 	.word	0x08009ac9
 8009a54:	08009ac9 	.word	0x08009ac9
 8009a58:	08009ac9 	.word	0x08009ac9
 8009a5c:	08009a93 	.word	0x08009a93
 8009a60:	08009ac9 	.word	0x08009ac9
 8009a64:	08009ac9 	.word	0x08009ac9
 8009a68:	08009ac9 	.word	0x08009ac9
 8009a6c:	08009aa5 	.word	0x08009aa5
 8009a70:	08009ac9 	.word	0x08009ac9
 8009a74:	08009ac9 	.word	0x08009ac9
 8009a78:	08009ac9 	.word	0x08009ac9
 8009a7c:	08009ab7 	.word	0x08009ab7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	68da      	ldr	r2, [r3, #12]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f042 0202 	orr.w	r2, r2, #2
 8009a8e:	60da      	str	r2, [r3, #12]
      break;
 8009a90:	e01d      	b.n	8009ace <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68da      	ldr	r2, [r3, #12]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f042 0204 	orr.w	r2, r2, #4
 8009aa0:	60da      	str	r2, [r3, #12]
      break;
 8009aa2:	e014      	b.n	8009ace <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68da      	ldr	r2, [r3, #12]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f042 0208 	orr.w	r2, r2, #8
 8009ab2:	60da      	str	r2, [r3, #12]
      break;
 8009ab4:	e00b      	b.n	8009ace <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68da      	ldr	r2, [r3, #12]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f042 0210 	orr.w	r2, r2, #16
 8009ac4:	60da      	str	r2, [r3, #12]
      break;
 8009ac6:	e002      	b.n	8009ace <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	73fb      	strb	r3, [r7, #15]
      break;
 8009acc:	bf00      	nop
  }

  if (status == HAL_OK)
 8009ace:	7bfb      	ldrb	r3, [r7, #15]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d148      	bne.n	8009b66 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f001 f8cd 	bl	800ac7c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a22      	ldr	r2, [pc, #136]	; (8009b70 <HAL_TIM_IC_Start_IT+0x234>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d022      	beq.n	8009b32 <HAL_TIM_IC_Start_IT+0x1f6>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009af4:	d01d      	beq.n	8009b32 <HAL_TIM_IC_Start_IT+0x1f6>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a1e      	ldr	r2, [pc, #120]	; (8009b74 <HAL_TIM_IC_Start_IT+0x238>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d018      	beq.n	8009b32 <HAL_TIM_IC_Start_IT+0x1f6>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a1c      	ldr	r2, [pc, #112]	; (8009b78 <HAL_TIM_IC_Start_IT+0x23c>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d013      	beq.n	8009b32 <HAL_TIM_IC_Start_IT+0x1f6>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a1b      	ldr	r2, [pc, #108]	; (8009b7c <HAL_TIM_IC_Start_IT+0x240>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d00e      	beq.n	8009b32 <HAL_TIM_IC_Start_IT+0x1f6>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a19      	ldr	r2, [pc, #100]	; (8009b80 <HAL_TIM_IC_Start_IT+0x244>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d009      	beq.n	8009b32 <HAL_TIM_IC_Start_IT+0x1f6>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a18      	ldr	r2, [pc, #96]	; (8009b84 <HAL_TIM_IC_Start_IT+0x248>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d004      	beq.n	8009b32 <HAL_TIM_IC_Start_IT+0x1f6>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a16      	ldr	r2, [pc, #88]	; (8009b88 <HAL_TIM_IC_Start_IT+0x24c>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d111      	bne.n	8009b56 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	f003 0307 	and.w	r3, r3, #7
 8009b3c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	2b06      	cmp	r3, #6
 8009b42:	d010      	beq.n	8009b66 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f042 0201 	orr.w	r2, r2, #1
 8009b52:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b54:	e007      	b.n	8009b66 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f042 0201 	orr.w	r2, r2, #1
 8009b64:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	40010000 	.word	0x40010000
 8009b74:	40000400 	.word	0x40000400
 8009b78:	40000800 	.word	0x40000800
 8009b7c:	40000c00 	.word	0x40000c00
 8009b80:	40010400 	.word	0x40010400
 8009b84:	40014000 	.word	0x40014000
 8009b88:	40001800 	.word	0x40001800

08009b8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	691b      	ldr	r3, [r3, #16]
 8009b9a:	f003 0302 	and.w	r3, r3, #2
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d122      	bne.n	8009be8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	f003 0302 	and.w	r3, r3, #2
 8009bac:	2b02      	cmp	r3, #2
 8009bae:	d11b      	bne.n	8009be8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f06f 0202 	mvn.w	r2, #2
 8009bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	f003 0303 	and.w	r3, r3, #3
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d003      	beq.n	8009bd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f7fa fc70 	bl	80044b4 <HAL_TIM_IC_CaptureCallback>
 8009bd4:	e005      	b.n	8009be2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fb8c 	bl	800a2f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fb93 	bl	800a308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	f003 0304 	and.w	r3, r3, #4
 8009bf2:	2b04      	cmp	r3, #4
 8009bf4:	d122      	bne.n	8009c3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	f003 0304 	and.w	r3, r3, #4
 8009c00:	2b04      	cmp	r3, #4
 8009c02:	d11b      	bne.n	8009c3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f06f 0204 	mvn.w	r2, #4
 8009c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2202      	movs	r2, #2
 8009c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f7fa fc46 	bl	80044b4 <HAL_TIM_IC_CaptureCallback>
 8009c28:	e005      	b.n	8009c36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fb62 	bl	800a2f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 fb69 	bl	800a308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	f003 0308 	and.w	r3, r3, #8
 8009c46:	2b08      	cmp	r3, #8
 8009c48:	d122      	bne.n	8009c90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	f003 0308 	and.w	r3, r3, #8
 8009c54:	2b08      	cmp	r3, #8
 8009c56:	d11b      	bne.n	8009c90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f06f 0208 	mvn.w	r2, #8
 8009c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2204      	movs	r2, #4
 8009c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	69db      	ldr	r3, [r3, #28]
 8009c6e:	f003 0303 	and.w	r3, r3, #3
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d003      	beq.n	8009c7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f7fa fc1c 	bl	80044b4 <HAL_TIM_IC_CaptureCallback>
 8009c7c:	e005      	b.n	8009c8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fb38 	bl	800a2f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fb3f 	bl	800a308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	f003 0310 	and.w	r3, r3, #16
 8009c9a:	2b10      	cmp	r3, #16
 8009c9c:	d122      	bne.n	8009ce4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	f003 0310 	and.w	r3, r3, #16
 8009ca8:	2b10      	cmp	r3, #16
 8009caa:	d11b      	bne.n	8009ce4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f06f 0210 	mvn.w	r2, #16
 8009cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2208      	movs	r2, #8
 8009cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	69db      	ldr	r3, [r3, #28]
 8009cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d003      	beq.n	8009cd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f7fa fbf2 	bl	80044b4 <HAL_TIM_IC_CaptureCallback>
 8009cd0:	e005      	b.n	8009cde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fb0e 	bl	800a2f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fb15 	bl	800a308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	f003 0301 	and.w	r3, r3, #1
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d10e      	bne.n	8009d10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	f003 0301 	and.w	r3, r3, #1
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d107      	bne.n	8009d10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f06f 0201 	mvn.w	r2, #1
 8009d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f7fa fcac 	bl	8004668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d1a:	2b80      	cmp	r3, #128	; 0x80
 8009d1c:	d10e      	bne.n	8009d3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d28:	2b80      	cmp	r3, #128	; 0x80
 8009d2a:	d107      	bne.n	8009d3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f001 f89e 	bl	800ae78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d46:	2b40      	cmp	r3, #64	; 0x40
 8009d48:	d10e      	bne.n	8009d68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d54:	2b40      	cmp	r3, #64	; 0x40
 8009d56:	d107      	bne.n	8009d68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fada 	bl	800a31c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	f003 0320 	and.w	r3, r3, #32
 8009d72:	2b20      	cmp	r3, #32
 8009d74:	d10e      	bne.n	8009d94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	f003 0320 	and.w	r3, r3, #32
 8009d80:	2b20      	cmp	r3, #32
 8009d82:	d107      	bne.n	8009d94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f06f 0220 	mvn.w	r2, #32
 8009d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f001 f868 	bl	800ae64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d94:	bf00      	nop
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b086      	sub	sp, #24
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009da8:	2300      	movs	r3, #0
 8009daa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d101      	bne.n	8009dba <HAL_TIM_IC_ConfigChannel+0x1e>
 8009db6:	2302      	movs	r3, #2
 8009db8:	e088      	b.n	8009ecc <HAL_TIM_IC_ConfigChannel+0x130>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d11b      	bne.n	8009e00 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6818      	ldr	r0, [r3, #0]
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	6819      	ldr	r1, [r3, #0]
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	685a      	ldr	r2, [r3, #4]
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	f000 fd8c 	bl	800a8f4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	699a      	ldr	r2, [r3, #24]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f022 020c 	bic.w	r2, r2, #12
 8009dea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	6999      	ldr	r1, [r3, #24]
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	689a      	ldr	r2, [r3, #8]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	619a      	str	r2, [r3, #24]
 8009dfe:	e060      	b.n	8009ec2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b04      	cmp	r3, #4
 8009e04:	d11c      	bne.n	8009e40 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6818      	ldr	r0, [r3, #0]
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	6819      	ldr	r1, [r3, #0]
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	685a      	ldr	r2, [r3, #4]
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	f000 fe10 	bl	800aa3a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	699a      	ldr	r2, [r3, #24]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009e28:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	6999      	ldr	r1, [r3, #24]
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	021a      	lsls	r2, r3, #8
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	619a      	str	r2, [r3, #24]
 8009e3e:	e040      	b.n	8009ec2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2b08      	cmp	r3, #8
 8009e44:	d11b      	bne.n	8009e7e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6818      	ldr	r0, [r3, #0]
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	6819      	ldr	r1, [r3, #0]
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	685a      	ldr	r2, [r3, #4]
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	f000 fe5d 	bl	800ab14 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	69da      	ldr	r2, [r3, #28]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f022 020c 	bic.w	r2, r2, #12
 8009e68:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	69d9      	ldr	r1, [r3, #28]
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	689a      	ldr	r2, [r3, #8]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	61da      	str	r2, [r3, #28]
 8009e7c:	e021      	b.n	8009ec2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2b0c      	cmp	r3, #12
 8009e82:	d11c      	bne.n	8009ebe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6818      	ldr	r0, [r3, #0]
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	6819      	ldr	r1, [r3, #0]
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	685a      	ldr	r2, [r3, #4]
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	f000 fe7a 	bl	800ab8c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	69da      	ldr	r2, [r3, #28]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009ea6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	69d9      	ldr	r1, [r3, #28]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	021a      	lsls	r2, r3, #8
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	430a      	orrs	r2, r1
 8009eba:	61da      	str	r2, [r3, #28]
 8009ebc:	e001      	b.n	8009ec2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3718      	adds	r7, #24
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d101      	bne.n	8009ef2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009eee:	2302      	movs	r3, #2
 8009ef0:	e0ae      	b.n	800a050 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2b0c      	cmp	r3, #12
 8009efe:	f200 809f 	bhi.w	800a040 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009f02:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f08:	08009f3d 	.word	0x08009f3d
 8009f0c:	0800a041 	.word	0x0800a041
 8009f10:	0800a041 	.word	0x0800a041
 8009f14:	0800a041 	.word	0x0800a041
 8009f18:	08009f7d 	.word	0x08009f7d
 8009f1c:	0800a041 	.word	0x0800a041
 8009f20:	0800a041 	.word	0x0800a041
 8009f24:	0800a041 	.word	0x0800a041
 8009f28:	08009fbf 	.word	0x08009fbf
 8009f2c:	0800a041 	.word	0x0800a041
 8009f30:	0800a041 	.word	0x0800a041
 8009f34:	0800a041 	.word	0x0800a041
 8009f38:	08009fff 	.word	0x08009fff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	68b9      	ldr	r1, [r7, #8]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f000 fa94 	bl	800a470 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	699a      	ldr	r2, [r3, #24]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f042 0208 	orr.w	r2, r2, #8
 8009f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	699a      	ldr	r2, [r3, #24]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f022 0204 	bic.w	r2, r2, #4
 8009f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	6999      	ldr	r1, [r3, #24]
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	691a      	ldr	r2, [r3, #16]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	430a      	orrs	r2, r1
 8009f78:	619a      	str	r2, [r3, #24]
      break;
 8009f7a:	e064      	b.n	800a046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68b9      	ldr	r1, [r7, #8]
 8009f82:	4618      	mov	r0, r3
 8009f84:	f000 fae4 	bl	800a550 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	699a      	ldr	r2, [r3, #24]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	699a      	ldr	r2, [r3, #24]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	6999      	ldr	r1, [r3, #24]
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	021a      	lsls	r2, r3, #8
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	430a      	orrs	r2, r1
 8009fba:	619a      	str	r2, [r3, #24]
      break;
 8009fbc:	e043      	b.n	800a046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68b9      	ldr	r1, [r7, #8]
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f000 fb39 	bl	800a63c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	69da      	ldr	r2, [r3, #28]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f042 0208 	orr.w	r2, r2, #8
 8009fd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	69da      	ldr	r2, [r3, #28]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f022 0204 	bic.w	r2, r2, #4
 8009fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	69d9      	ldr	r1, [r3, #28]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	691a      	ldr	r2, [r3, #16]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	430a      	orrs	r2, r1
 8009ffa:	61da      	str	r2, [r3, #28]
      break;
 8009ffc:	e023      	b.n	800a046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68b9      	ldr	r1, [r7, #8]
 800a004:	4618      	mov	r0, r3
 800a006:	f000 fb8d 	bl	800a724 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	69da      	ldr	r2, [r3, #28]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	69da      	ldr	r2, [r3, #28]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	69d9      	ldr	r1, [r3, #28]
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	021a      	lsls	r2, r3, #8
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	430a      	orrs	r2, r1
 800a03c:	61da      	str	r2, [r3, #28]
      break;
 800a03e:	e002      	b.n	800a046 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	75fb      	strb	r3, [r7, #23]
      break;
 800a044:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a04e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d101      	bne.n	800a074 <HAL_TIM_ConfigClockSource+0x1c>
 800a070:	2302      	movs	r3, #2
 800a072:	e0b4      	b.n	800a1de <HAL_TIM_ConfigClockSource+0x186>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2202      	movs	r2, #2
 800a080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a09a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0ac:	d03e      	beq.n	800a12c <HAL_TIM_ConfigClockSource+0xd4>
 800a0ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0b2:	f200 8087 	bhi.w	800a1c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a0b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0ba:	f000 8086 	beq.w	800a1ca <HAL_TIM_ConfigClockSource+0x172>
 800a0be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c2:	d87f      	bhi.n	800a1c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a0c4:	2b70      	cmp	r3, #112	; 0x70
 800a0c6:	d01a      	beq.n	800a0fe <HAL_TIM_ConfigClockSource+0xa6>
 800a0c8:	2b70      	cmp	r3, #112	; 0x70
 800a0ca:	d87b      	bhi.n	800a1c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a0cc:	2b60      	cmp	r3, #96	; 0x60
 800a0ce:	d050      	beq.n	800a172 <HAL_TIM_ConfigClockSource+0x11a>
 800a0d0:	2b60      	cmp	r3, #96	; 0x60
 800a0d2:	d877      	bhi.n	800a1c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a0d4:	2b50      	cmp	r3, #80	; 0x50
 800a0d6:	d03c      	beq.n	800a152 <HAL_TIM_ConfigClockSource+0xfa>
 800a0d8:	2b50      	cmp	r3, #80	; 0x50
 800a0da:	d873      	bhi.n	800a1c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a0dc:	2b40      	cmp	r3, #64	; 0x40
 800a0de:	d058      	beq.n	800a192 <HAL_TIM_ConfigClockSource+0x13a>
 800a0e0:	2b40      	cmp	r3, #64	; 0x40
 800a0e2:	d86f      	bhi.n	800a1c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a0e4:	2b30      	cmp	r3, #48	; 0x30
 800a0e6:	d064      	beq.n	800a1b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a0e8:	2b30      	cmp	r3, #48	; 0x30
 800a0ea:	d86b      	bhi.n	800a1c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a0ec:	2b20      	cmp	r3, #32
 800a0ee:	d060      	beq.n	800a1b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a0f0:	2b20      	cmp	r3, #32
 800a0f2:	d867      	bhi.n	800a1c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d05c      	beq.n	800a1b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a0f8:	2b10      	cmp	r3, #16
 800a0fa:	d05a      	beq.n	800a1b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a0fc:	e062      	b.n	800a1c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6818      	ldr	r0, [r3, #0]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	6899      	ldr	r1, [r3, #8]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	685a      	ldr	r2, [r3, #4]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	f000 fd95 	bl	800ac3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a120:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	609a      	str	r2, [r3, #8]
      break;
 800a12a:	e04f      	b.n	800a1cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6818      	ldr	r0, [r3, #0]
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	6899      	ldr	r1, [r3, #8]
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	685a      	ldr	r2, [r3, #4]
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	f000 fd7e 	bl	800ac3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	689a      	ldr	r2, [r3, #8]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a14e:	609a      	str	r2, [r3, #8]
      break;
 800a150:	e03c      	b.n	800a1cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6818      	ldr	r0, [r3, #0]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	6859      	ldr	r1, [r3, #4]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	461a      	mov	r2, r3
 800a160:	f000 fc3c 	bl	800a9dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2150      	movs	r1, #80	; 0x50
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 fd4b 	bl	800ac06 <TIM_ITRx_SetConfig>
      break;
 800a170:	e02c      	b.n	800a1cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6818      	ldr	r0, [r3, #0]
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	6859      	ldr	r1, [r3, #4]
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	461a      	mov	r2, r3
 800a180:	f000 fc98 	bl	800aab4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2160      	movs	r1, #96	; 0x60
 800a18a:	4618      	mov	r0, r3
 800a18c:	f000 fd3b 	bl	800ac06 <TIM_ITRx_SetConfig>
      break;
 800a190:	e01c      	b.n	800a1cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6818      	ldr	r0, [r3, #0]
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	6859      	ldr	r1, [r3, #4]
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	f000 fc1c 	bl	800a9dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2140      	movs	r1, #64	; 0x40
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f000 fd2b 	bl	800ac06 <TIM_ITRx_SetConfig>
      break;
 800a1b0:	e00c      	b.n	800a1cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	4610      	mov	r0, r2
 800a1be:	f000 fd22 	bl	800ac06 <TIM_ITRx_SetConfig>
      break;
 800a1c2:	e003      	b.n	800a1cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a1c8:	e000      	b.n	800a1cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a1ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b082      	sub	sp, #8
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d101      	bne.n	800a1fe <HAL_TIM_SlaveConfigSynchro+0x18>
 800a1fa:	2302      	movs	r3, #2
 800a1fc:	e031      	b.n	800a262 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2201      	movs	r2, #1
 800a202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2202      	movs	r2, #2
 800a20a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a20e:	6839      	ldr	r1, [r7, #0]
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 fadd 	bl	800a7d0 <TIM_SlaveTimer_SetConfig>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d009      	beq.n	800a230 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	e018      	b.n	800a262 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68da      	ldr	r2, [r3, #12]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a23e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	68da      	ldr	r2, [r3, #12]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a24e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3708      	adds	r7, #8
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
	...

0800a26c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a276:	2300      	movs	r3, #0
 800a278:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b0c      	cmp	r3, #12
 800a27e:	d831      	bhi.n	800a2e4 <HAL_TIM_ReadCapturedValue+0x78>
 800a280:	a201      	add	r2, pc, #4	; (adr r2, 800a288 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a286:	bf00      	nop
 800a288:	0800a2bd 	.word	0x0800a2bd
 800a28c:	0800a2e5 	.word	0x0800a2e5
 800a290:	0800a2e5 	.word	0x0800a2e5
 800a294:	0800a2e5 	.word	0x0800a2e5
 800a298:	0800a2c7 	.word	0x0800a2c7
 800a29c:	0800a2e5 	.word	0x0800a2e5
 800a2a0:	0800a2e5 	.word	0x0800a2e5
 800a2a4:	0800a2e5 	.word	0x0800a2e5
 800a2a8:	0800a2d1 	.word	0x0800a2d1
 800a2ac:	0800a2e5 	.word	0x0800a2e5
 800a2b0:	0800a2e5 	.word	0x0800a2e5
 800a2b4:	0800a2e5 	.word	0x0800a2e5
 800a2b8:	0800a2db 	.word	0x0800a2db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c2:	60fb      	str	r3, [r7, #12]

      break;
 800a2c4:	e00f      	b.n	800a2e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2cc:	60fb      	str	r3, [r7, #12]

      break;
 800a2ce:	e00a      	b.n	800a2e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d6:	60fb      	str	r3, [r7, #12]

      break;
 800a2d8:	e005      	b.n	800a2e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e0:	60fb      	str	r3, [r7, #12]

      break;
 800a2e2:	e000      	b.n	800a2e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a2e4:	bf00      	nop
  }

  return tmpreg;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a2fc:	bf00      	nop
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a310:	bf00      	nop
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a324:	bf00      	nop
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	4a40      	ldr	r2, [pc, #256]	; (800a444 <TIM_Base_SetConfig+0x114>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d013      	beq.n	800a370 <TIM_Base_SetConfig+0x40>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a34e:	d00f      	beq.n	800a370 <TIM_Base_SetConfig+0x40>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4a3d      	ldr	r2, [pc, #244]	; (800a448 <TIM_Base_SetConfig+0x118>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d00b      	beq.n	800a370 <TIM_Base_SetConfig+0x40>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4a3c      	ldr	r2, [pc, #240]	; (800a44c <TIM_Base_SetConfig+0x11c>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d007      	beq.n	800a370 <TIM_Base_SetConfig+0x40>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a3b      	ldr	r2, [pc, #236]	; (800a450 <TIM_Base_SetConfig+0x120>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d003      	beq.n	800a370 <TIM_Base_SetConfig+0x40>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a3a      	ldr	r2, [pc, #232]	; (800a454 <TIM_Base_SetConfig+0x124>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d108      	bne.n	800a382 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	4313      	orrs	r3, r2
 800a380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4a2f      	ldr	r2, [pc, #188]	; (800a444 <TIM_Base_SetConfig+0x114>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d02b      	beq.n	800a3e2 <TIM_Base_SetConfig+0xb2>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a390:	d027      	beq.n	800a3e2 <TIM_Base_SetConfig+0xb2>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4a2c      	ldr	r2, [pc, #176]	; (800a448 <TIM_Base_SetConfig+0x118>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d023      	beq.n	800a3e2 <TIM_Base_SetConfig+0xb2>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4a2b      	ldr	r2, [pc, #172]	; (800a44c <TIM_Base_SetConfig+0x11c>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d01f      	beq.n	800a3e2 <TIM_Base_SetConfig+0xb2>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4a2a      	ldr	r2, [pc, #168]	; (800a450 <TIM_Base_SetConfig+0x120>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d01b      	beq.n	800a3e2 <TIM_Base_SetConfig+0xb2>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	4a29      	ldr	r2, [pc, #164]	; (800a454 <TIM_Base_SetConfig+0x124>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d017      	beq.n	800a3e2 <TIM_Base_SetConfig+0xb2>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4a28      	ldr	r2, [pc, #160]	; (800a458 <TIM_Base_SetConfig+0x128>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d013      	beq.n	800a3e2 <TIM_Base_SetConfig+0xb2>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4a27      	ldr	r2, [pc, #156]	; (800a45c <TIM_Base_SetConfig+0x12c>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d00f      	beq.n	800a3e2 <TIM_Base_SetConfig+0xb2>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	4a26      	ldr	r2, [pc, #152]	; (800a460 <TIM_Base_SetConfig+0x130>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d00b      	beq.n	800a3e2 <TIM_Base_SetConfig+0xb2>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4a25      	ldr	r2, [pc, #148]	; (800a464 <TIM_Base_SetConfig+0x134>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d007      	beq.n	800a3e2 <TIM_Base_SetConfig+0xb2>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4a24      	ldr	r2, [pc, #144]	; (800a468 <TIM_Base_SetConfig+0x138>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d003      	beq.n	800a3e2 <TIM_Base_SetConfig+0xb2>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4a23      	ldr	r2, [pc, #140]	; (800a46c <TIM_Base_SetConfig+0x13c>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d108      	bne.n	800a3f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	4313      	orrs	r3, r2
 800a400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	689a      	ldr	r2, [r3, #8]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a0a      	ldr	r2, [pc, #40]	; (800a444 <TIM_Base_SetConfig+0x114>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d003      	beq.n	800a428 <TIM_Base_SetConfig+0xf8>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a0c      	ldr	r2, [pc, #48]	; (800a454 <TIM_Base_SetConfig+0x124>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d103      	bne.n	800a430 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	691a      	ldr	r2, [r3, #16]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	615a      	str	r2, [r3, #20]
}
 800a436:	bf00      	nop
 800a438:	3714      	adds	r7, #20
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	40010000 	.word	0x40010000
 800a448:	40000400 	.word	0x40000400
 800a44c:	40000800 	.word	0x40000800
 800a450:	40000c00 	.word	0x40000c00
 800a454:	40010400 	.word	0x40010400
 800a458:	40014000 	.word	0x40014000
 800a45c:	40014400 	.word	0x40014400
 800a460:	40014800 	.word	0x40014800
 800a464:	40001800 	.word	0x40001800
 800a468:	40001c00 	.word	0x40001c00
 800a46c:	40002000 	.word	0x40002000

0800a470 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a470:	b480      	push	{r7}
 800a472:	b087      	sub	sp, #28
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a1b      	ldr	r3, [r3, #32]
 800a47e:	f023 0201 	bic.w	r2, r3, #1
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a1b      	ldr	r3, [r3, #32]
 800a48a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a49e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f023 0303 	bic.w	r3, r3, #3
 800a4a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	f023 0302 	bic.w	r3, r3, #2
 800a4b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	697a      	ldr	r2, [r7, #20]
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a20      	ldr	r2, [pc, #128]	; (800a548 <TIM_OC1_SetConfig+0xd8>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d003      	beq.n	800a4d4 <TIM_OC1_SetConfig+0x64>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	4a1f      	ldr	r2, [pc, #124]	; (800a54c <TIM_OC1_SetConfig+0xdc>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d10c      	bne.n	800a4ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	f023 0308 	bic.w	r3, r3, #8
 800a4da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	697a      	ldr	r2, [r7, #20]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	f023 0304 	bic.w	r3, r3, #4
 800a4ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a15      	ldr	r2, [pc, #84]	; (800a548 <TIM_OC1_SetConfig+0xd8>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d003      	beq.n	800a4fe <TIM_OC1_SetConfig+0x8e>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a14      	ldr	r2, [pc, #80]	; (800a54c <TIM_OC1_SetConfig+0xdc>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d111      	bne.n	800a522 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a50c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	695b      	ldr	r3, [r3, #20]
 800a512:	693a      	ldr	r2, [r7, #16]
 800a514:	4313      	orrs	r3, r2
 800a516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	699b      	ldr	r3, [r3, #24]
 800a51c:	693a      	ldr	r2, [r7, #16]
 800a51e:	4313      	orrs	r3, r2
 800a520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	685a      	ldr	r2, [r3, #4]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	697a      	ldr	r2, [r7, #20]
 800a53a:	621a      	str	r2, [r3, #32]
}
 800a53c:	bf00      	nop
 800a53e:	371c      	adds	r7, #28
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr
 800a548:	40010000 	.word	0x40010000
 800a54c:	40010400 	.word	0x40010400

0800a550 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a550:	b480      	push	{r7}
 800a552:	b087      	sub	sp, #28
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a1b      	ldr	r3, [r3, #32]
 800a55e:	f023 0210 	bic.w	r2, r3, #16
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a1b      	ldr	r3, [r3, #32]
 800a56a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	699b      	ldr	r3, [r3, #24]
 800a576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a57e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	021b      	lsls	r3, r3, #8
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	4313      	orrs	r3, r2
 800a592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	f023 0320 	bic.w	r3, r3, #32
 800a59a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	011b      	lsls	r3, r3, #4
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a22      	ldr	r2, [pc, #136]	; (800a634 <TIM_OC2_SetConfig+0xe4>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d003      	beq.n	800a5b8 <TIM_OC2_SetConfig+0x68>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4a21      	ldr	r2, [pc, #132]	; (800a638 <TIM_OC2_SetConfig+0xe8>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d10d      	bne.n	800a5d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	011b      	lsls	r3, r3, #4
 800a5c6:	697a      	ldr	r2, [r7, #20]
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a17      	ldr	r2, [pc, #92]	; (800a634 <TIM_OC2_SetConfig+0xe4>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d003      	beq.n	800a5e4 <TIM_OC2_SetConfig+0x94>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a16      	ldr	r2, [pc, #88]	; (800a638 <TIM_OC2_SetConfig+0xe8>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d113      	bne.n	800a60c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a5ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a5f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	695b      	ldr	r3, [r3, #20]
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	693a      	ldr	r2, [r7, #16]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	699b      	ldr	r3, [r3, #24]
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	693a      	ldr	r2, [r7, #16]
 800a608:	4313      	orrs	r3, r2
 800a60a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	693a      	ldr	r2, [r7, #16]
 800a610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	685a      	ldr	r2, [r3, #4]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	621a      	str	r2, [r3, #32]
}
 800a626:	bf00      	nop
 800a628:	371c      	adds	r7, #28
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	40010000 	.word	0x40010000
 800a638:	40010400 	.word	0x40010400

0800a63c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b087      	sub	sp, #28
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a1b      	ldr	r3, [r3, #32]
 800a64a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a1b      	ldr	r3, [r3, #32]
 800a656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	69db      	ldr	r3, [r3, #28]
 800a662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a66a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f023 0303 	bic.w	r3, r3, #3
 800a672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	021b      	lsls	r3, r3, #8
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	4313      	orrs	r3, r2
 800a690:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a21      	ldr	r2, [pc, #132]	; (800a71c <TIM_OC3_SetConfig+0xe0>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d003      	beq.n	800a6a2 <TIM_OC3_SetConfig+0x66>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4a20      	ldr	r2, [pc, #128]	; (800a720 <TIM_OC3_SetConfig+0xe4>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d10d      	bne.n	800a6be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	021b      	lsls	r3, r3, #8
 800a6b0:	697a      	ldr	r2, [r7, #20]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4a16      	ldr	r2, [pc, #88]	; (800a71c <TIM_OC3_SetConfig+0xe0>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d003      	beq.n	800a6ce <TIM_OC3_SetConfig+0x92>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4a15      	ldr	r2, [pc, #84]	; (800a720 <TIM_OC3_SetConfig+0xe4>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d113      	bne.n	800a6f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a6dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	011b      	lsls	r3, r3, #4
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	699b      	ldr	r3, [r3, #24]
 800a6ee:	011b      	lsls	r3, r3, #4
 800a6f0:	693a      	ldr	r2, [r7, #16]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	693a      	ldr	r2, [r7, #16]
 800a6fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	685a      	ldr	r2, [r3, #4]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	621a      	str	r2, [r3, #32]
}
 800a710:	bf00      	nop
 800a712:	371c      	adds	r7, #28
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	40010000 	.word	0x40010000
 800a720:	40010400 	.word	0x40010400

0800a724 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a724:	b480      	push	{r7}
 800a726:	b087      	sub	sp, #28
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a1b      	ldr	r3, [r3, #32]
 800a732:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a1b      	ldr	r3, [r3, #32]
 800a73e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	69db      	ldr	r3, [r3, #28]
 800a74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a75a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	021b      	lsls	r3, r3, #8
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	4313      	orrs	r3, r2
 800a766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a76e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	031b      	lsls	r3, r3, #12
 800a776:	693a      	ldr	r2, [r7, #16]
 800a778:	4313      	orrs	r3, r2
 800a77a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a12      	ldr	r2, [pc, #72]	; (800a7c8 <TIM_OC4_SetConfig+0xa4>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d003      	beq.n	800a78c <TIM_OC4_SetConfig+0x68>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4a11      	ldr	r2, [pc, #68]	; (800a7cc <TIM_OC4_SetConfig+0xa8>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d109      	bne.n	800a7a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a792:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	695b      	ldr	r3, [r3, #20]
 800a798:	019b      	lsls	r3, r3, #6
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	697a      	ldr	r2, [r7, #20]
 800a7a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	685a      	ldr	r2, [r3, #4]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	693a      	ldr	r2, [r7, #16]
 800a7b8:	621a      	str	r2, [r3, #32]
}
 800a7ba:	bf00      	nop
 800a7bc:	371c      	adds	r7, #28
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	40010000 	.word	0x40010000
 800a7cc:	40010400 	.word	0x40010400

0800a7d0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ec:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	693a      	ldr	r2, [r7, #16]
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	f023 0307 	bic.w	r3, r3, #7
 800a7fe:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	693a      	ldr	r2, [r7, #16]
 800a806:	4313      	orrs	r3, r2
 800a808:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	693a      	ldr	r2, [r7, #16]
 800a810:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	2b70      	cmp	r3, #112	; 0x70
 800a818:	d01a      	beq.n	800a850 <TIM_SlaveTimer_SetConfig+0x80>
 800a81a:	2b70      	cmp	r3, #112	; 0x70
 800a81c:	d860      	bhi.n	800a8e0 <TIM_SlaveTimer_SetConfig+0x110>
 800a81e:	2b60      	cmp	r3, #96	; 0x60
 800a820:	d054      	beq.n	800a8cc <TIM_SlaveTimer_SetConfig+0xfc>
 800a822:	2b60      	cmp	r3, #96	; 0x60
 800a824:	d85c      	bhi.n	800a8e0 <TIM_SlaveTimer_SetConfig+0x110>
 800a826:	2b50      	cmp	r3, #80	; 0x50
 800a828:	d046      	beq.n	800a8b8 <TIM_SlaveTimer_SetConfig+0xe8>
 800a82a:	2b50      	cmp	r3, #80	; 0x50
 800a82c:	d858      	bhi.n	800a8e0 <TIM_SlaveTimer_SetConfig+0x110>
 800a82e:	2b40      	cmp	r3, #64	; 0x40
 800a830:	d019      	beq.n	800a866 <TIM_SlaveTimer_SetConfig+0x96>
 800a832:	2b40      	cmp	r3, #64	; 0x40
 800a834:	d854      	bhi.n	800a8e0 <TIM_SlaveTimer_SetConfig+0x110>
 800a836:	2b30      	cmp	r3, #48	; 0x30
 800a838:	d055      	beq.n	800a8e6 <TIM_SlaveTimer_SetConfig+0x116>
 800a83a:	2b30      	cmp	r3, #48	; 0x30
 800a83c:	d850      	bhi.n	800a8e0 <TIM_SlaveTimer_SetConfig+0x110>
 800a83e:	2b20      	cmp	r3, #32
 800a840:	d051      	beq.n	800a8e6 <TIM_SlaveTimer_SetConfig+0x116>
 800a842:	2b20      	cmp	r3, #32
 800a844:	d84c      	bhi.n	800a8e0 <TIM_SlaveTimer_SetConfig+0x110>
 800a846:	2b00      	cmp	r3, #0
 800a848:	d04d      	beq.n	800a8e6 <TIM_SlaveTimer_SetConfig+0x116>
 800a84a:	2b10      	cmp	r3, #16
 800a84c:	d04b      	beq.n	800a8e6 <TIM_SlaveTimer_SetConfig+0x116>
 800a84e:	e047      	b.n	800a8e0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6818      	ldr	r0, [r3, #0]
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	68d9      	ldr	r1, [r3, #12]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	689a      	ldr	r2, [r3, #8]
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	f000 f9ec 	bl	800ac3c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800a864:	e040      	b.n	800a8e8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2b05      	cmp	r3, #5
 800a86c:	d101      	bne.n	800a872 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	e03b      	b.n	800a8ea <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	6a1b      	ldr	r3, [r3, #32]
 800a878:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	6a1a      	ldr	r2, [r3, #32]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f022 0201 	bic.w	r2, r2, #1
 800a888:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	699b      	ldr	r3, [r3, #24]
 800a890:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a898:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	011b      	lsls	r3, r3, #4
 800a8a0:	68ba      	ldr	r2, [r7, #8]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	621a      	str	r2, [r3, #32]
      break;
 800a8b6:	e017      	b.n	800a8e8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6818      	ldr	r0, [r3, #0]
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	6899      	ldr	r1, [r3, #8]
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	f000 f889 	bl	800a9dc <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a8ca:	e00d      	b.n	800a8e8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6818      	ldr	r0, [r3, #0]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	6899      	ldr	r1, [r3, #8]
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	691b      	ldr	r3, [r3, #16]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	f000 f8eb 	bl	800aab4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a8de:	e003      	b.n	800a8e8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a8e4:	e000      	b.n	800a8e8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800a8e6:	bf00      	nop
  }

  return status;
 800a8e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3718      	adds	r7, #24
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
	...

0800a8f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b087      	sub	sp, #28
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]
 800a900:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6a1b      	ldr	r3, [r3, #32]
 800a906:	f023 0201 	bic.w	r2, r3, #1
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6a1b      	ldr	r3, [r3, #32]
 800a918:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	4a28      	ldr	r2, [pc, #160]	; (800a9c0 <TIM_TI1_SetConfig+0xcc>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d01b      	beq.n	800a95a <TIM_TI1_SetConfig+0x66>
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a928:	d017      	beq.n	800a95a <TIM_TI1_SetConfig+0x66>
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	4a25      	ldr	r2, [pc, #148]	; (800a9c4 <TIM_TI1_SetConfig+0xd0>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d013      	beq.n	800a95a <TIM_TI1_SetConfig+0x66>
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	4a24      	ldr	r2, [pc, #144]	; (800a9c8 <TIM_TI1_SetConfig+0xd4>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d00f      	beq.n	800a95a <TIM_TI1_SetConfig+0x66>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	4a23      	ldr	r2, [pc, #140]	; (800a9cc <TIM_TI1_SetConfig+0xd8>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d00b      	beq.n	800a95a <TIM_TI1_SetConfig+0x66>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	4a22      	ldr	r2, [pc, #136]	; (800a9d0 <TIM_TI1_SetConfig+0xdc>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d007      	beq.n	800a95a <TIM_TI1_SetConfig+0x66>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	4a21      	ldr	r2, [pc, #132]	; (800a9d4 <TIM_TI1_SetConfig+0xe0>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d003      	beq.n	800a95a <TIM_TI1_SetConfig+0x66>
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	4a20      	ldr	r2, [pc, #128]	; (800a9d8 <TIM_TI1_SetConfig+0xe4>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d101      	bne.n	800a95e <TIM_TI1_SetConfig+0x6a>
 800a95a:	2301      	movs	r3, #1
 800a95c:	e000      	b.n	800a960 <TIM_TI1_SetConfig+0x6c>
 800a95e:	2300      	movs	r3, #0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d008      	beq.n	800a976 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	f023 0303 	bic.w	r3, r3, #3
 800a96a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a96c:	697a      	ldr	r2, [r7, #20]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4313      	orrs	r3, r2
 800a972:	617b      	str	r3, [r7, #20]
 800a974:	e003      	b.n	800a97e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	f043 0301 	orr.w	r3, r3, #1
 800a97c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a984:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	011b      	lsls	r3, r3, #4
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	697a      	ldr	r2, [r7, #20]
 800a98e:	4313      	orrs	r3, r2
 800a990:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	f023 030a 	bic.w	r3, r3, #10
 800a998:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	f003 030a 	and.w	r3, r3, #10
 800a9a0:	693a      	ldr	r2, [r7, #16]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	697a      	ldr	r2, [r7, #20]
 800a9aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	693a      	ldr	r2, [r7, #16]
 800a9b0:	621a      	str	r2, [r3, #32]
}
 800a9b2:	bf00      	nop
 800a9b4:	371c      	adds	r7, #28
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	40010000 	.word	0x40010000
 800a9c4:	40000400 	.word	0x40000400
 800a9c8:	40000800 	.word	0x40000800
 800a9cc:	40000c00 	.word	0x40000c00
 800a9d0:	40010400 	.word	0x40010400
 800a9d4:	40014000 	.word	0x40014000
 800a9d8:	40001800 	.word	0x40001800

0800a9dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b087      	sub	sp, #28
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	6a1b      	ldr	r3, [r3, #32]
 800a9ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6a1b      	ldr	r3, [r3, #32]
 800a9f2:	f023 0201 	bic.w	r2, r3, #1
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	699b      	ldr	r3, [r3, #24]
 800a9fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	011b      	lsls	r3, r3, #4
 800aa0c:	693a      	ldr	r2, [r7, #16]
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	f023 030a 	bic.w	r3, r3, #10
 800aa18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	693a      	ldr	r2, [r7, #16]
 800aa26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	697a      	ldr	r2, [r7, #20]
 800aa2c:	621a      	str	r2, [r3, #32]
}
 800aa2e:	bf00      	nop
 800aa30:	371c      	adds	r7, #28
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr

0800aa3a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aa3a:	b480      	push	{r7}
 800aa3c:	b087      	sub	sp, #28
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	60f8      	str	r0, [r7, #12]
 800aa42:	60b9      	str	r1, [r7, #8]
 800aa44:	607a      	str	r2, [r7, #4]
 800aa46:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6a1b      	ldr	r3, [r3, #32]
 800aa4c:	f023 0210 	bic.w	r2, r3, #16
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	021b      	lsls	r3, r3, #8
 800aa6c:	697a      	ldr	r2, [r7, #20]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	031b      	lsls	r3, r3, #12
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	697a      	ldr	r2, [r7, #20]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa8c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	011b      	lsls	r3, r3, #4
 800aa92:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800aa96:	693a      	ldr	r2, [r7, #16]
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	621a      	str	r2, [r3, #32]
}
 800aaa8:	bf00      	nop
 800aaaa:	371c      	adds	r7, #28
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b087      	sub	sp, #28
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6a1b      	ldr	r3, [r3, #32]
 800aac4:	f023 0210 	bic.w	r2, r3, #16
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aade:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	031b      	lsls	r3, r3, #12
 800aae4:	697a      	ldr	r2, [r7, #20]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aaf0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	011b      	lsls	r3, r3, #4
 800aaf6:	693a      	ldr	r2, [r7, #16]
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	693a      	ldr	r2, [r7, #16]
 800ab06:	621a      	str	r2, [r3, #32]
}
 800ab08:	bf00      	nop
 800ab0a:	371c      	adds	r7, #28
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b087      	sub	sp, #28
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
 800ab20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6a1b      	ldr	r3, [r3, #32]
 800ab26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	69db      	ldr	r3, [r3, #28]
 800ab32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6a1b      	ldr	r3, [r3, #32]
 800ab38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	f023 0303 	bic.w	r3, r3, #3
 800ab40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ab42:	697a      	ldr	r2, [r7, #20]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	011b      	lsls	r3, r3, #4
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	697a      	ldr	r2, [r7, #20]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ab64:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	021b      	lsls	r3, r3, #8
 800ab6a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	697a      	ldr	r2, [r7, #20]
 800ab78:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	693a      	ldr	r2, [r7, #16]
 800ab7e:	621a      	str	r2, [r3, #32]
}
 800ab80:	bf00      	nop
 800ab82:	371c      	adds	r7, #28
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b087      	sub	sp, #28
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
 800ab98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6a1b      	ldr	r3, [r3, #32]
 800ab9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	6a1b      	ldr	r3, [r3, #32]
 800abb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abb8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	021b      	lsls	r3, r3, #8
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800abca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	031b      	lsls	r3, r3, #12
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800abde:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	031b      	lsls	r3, r3, #12
 800abe4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800abe8:	693a      	ldr	r2, [r7, #16]
 800abea:	4313      	orrs	r3, r2
 800abec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	697a      	ldr	r2, [r7, #20]
 800abf2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	693a      	ldr	r2, [r7, #16]
 800abf8:	621a      	str	r2, [r3, #32]
}
 800abfa:	bf00      	nop
 800abfc:	371c      	adds	r7, #28
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac06:	b480      	push	{r7}
 800ac08:	b085      	sub	sp, #20
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac1e:	683a      	ldr	r2, [r7, #0]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	4313      	orrs	r3, r2
 800ac24:	f043 0307 	orr.w	r3, r3, #7
 800ac28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	609a      	str	r2, [r3, #8]
}
 800ac30:	bf00      	nop
 800ac32:	3714      	adds	r7, #20
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b087      	sub	sp, #28
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
 800ac48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	021a      	lsls	r2, r3, #8
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	431a      	orrs	r2, r3
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	697a      	ldr	r2, [r7, #20]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	697a      	ldr	r2, [r7, #20]
 800ac6e:	609a      	str	r2, [r3, #8]
}
 800ac70:	bf00      	nop
 800ac72:	371c      	adds	r7, #28
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b087      	sub	sp, #28
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	f003 031f 	and.w	r3, r3, #31
 800ac8e:	2201      	movs	r2, #1
 800ac90:	fa02 f303 	lsl.w	r3, r2, r3
 800ac94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6a1a      	ldr	r2, [r3, #32]
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	43db      	mvns	r3, r3
 800ac9e:	401a      	ands	r2, r3
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6a1a      	ldr	r2, [r3, #32]
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	f003 031f 	and.w	r3, r3, #31
 800acae:	6879      	ldr	r1, [r7, #4]
 800acb0:	fa01 f303 	lsl.w	r3, r1, r3
 800acb4:	431a      	orrs	r2, r3
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	621a      	str	r2, [r3, #32]
}
 800acba:	bf00      	nop
 800acbc:	371c      	adds	r7, #28
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
	...

0800acc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d101      	bne.n	800ace0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800acdc:	2302      	movs	r3, #2
 800acde:	e05a      	b.n	800ad96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2201      	movs	r2, #1
 800ace4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2202      	movs	r2, #2
 800acec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a21      	ldr	r2, [pc, #132]	; (800ada4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d022      	beq.n	800ad6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad2c:	d01d      	beq.n	800ad6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a1d      	ldr	r2, [pc, #116]	; (800ada8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d018      	beq.n	800ad6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a1b      	ldr	r2, [pc, #108]	; (800adac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d013      	beq.n	800ad6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a1a      	ldr	r2, [pc, #104]	; (800adb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d00e      	beq.n	800ad6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a18      	ldr	r2, [pc, #96]	; (800adb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d009      	beq.n	800ad6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a17      	ldr	r2, [pc, #92]	; (800adb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d004      	beq.n	800ad6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a15      	ldr	r2, [pc, #84]	; (800adbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d10c      	bne.n	800ad84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2201      	movs	r2, #1
 800ad88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3714      	adds	r7, #20
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	40010000 	.word	0x40010000
 800ada8:	40000400 	.word	0x40000400
 800adac:	40000800 	.word	0x40000800
 800adb0:	40000c00 	.word	0x40000c00
 800adb4:	40010400 	.word	0x40010400
 800adb8:	40014000 	.word	0x40014000
 800adbc:	40001800 	.word	0x40001800

0800adc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800adca:	2300      	movs	r3, #0
 800adcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800add4:	2b01      	cmp	r3, #1
 800add6:	d101      	bne.n	800addc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800add8:	2302      	movs	r3, #2
 800adda:	e03d      	b.n	800ae58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	4313      	orrs	r3, r2
 800adf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	4313      	orrs	r3, r2
 800adfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	691b      	ldr	r3, [r3, #16]
 800ae26:	4313      	orrs	r3, r2
 800ae28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	695b      	ldr	r3, [r3, #20]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	69db      	ldr	r3, [r3, #28]
 800ae42:	4313      	orrs	r3, r2
 800ae44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3714      	adds	r7, #20
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae6c:	bf00      	nop
 800ae6e:	370c      	adds	r7, #12
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr

0800ae78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae80:	bf00      	nop
 800ae82:	370c      	adds	r7, #12
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d101      	bne.n	800ae9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e03f      	b.n	800af1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d106      	bne.n	800aeb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7fb f82c 	bl	8005f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2224      	movs	r2, #36	; 0x24
 800aebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68da      	ldr	r2, [r3, #12]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aece:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 fde9 	bl	800baa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	691a      	ldr	r2, [r3, #16]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aee4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	695a      	ldr	r2, [r3, #20]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aef4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	68da      	ldr	r2, [r3, #12]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2220      	movs	r2, #32
 800af10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2220      	movs	r2, #32
 800af18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800af1c:	2300      	movs	r3, #0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b08a      	sub	sp, #40	; 0x28
 800af2a:	af02      	add	r7, sp, #8
 800af2c:	60f8      	str	r0, [r7, #12]
 800af2e:	60b9      	str	r1, [r7, #8]
 800af30:	603b      	str	r3, [r7, #0]
 800af32:	4613      	mov	r3, r2
 800af34:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800af36:	2300      	movs	r3, #0
 800af38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af40:	b2db      	uxtb	r3, r3
 800af42:	2b20      	cmp	r3, #32
 800af44:	d17c      	bne.n	800b040 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d002      	beq.n	800af52 <HAL_UART_Transmit+0x2c>
 800af4c:	88fb      	ldrh	r3, [r7, #6]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d101      	bne.n	800af56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	e075      	b.n	800b042 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d101      	bne.n	800af64 <HAL_UART_Transmit+0x3e>
 800af60:	2302      	movs	r3, #2
 800af62:	e06e      	b.n	800b042 <HAL_UART_Transmit+0x11c>
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2201      	movs	r2, #1
 800af68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2200      	movs	r2, #0
 800af70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2221      	movs	r2, #33	; 0x21
 800af76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af7a:	f7fb f8ed 	bl	8006158 <HAL_GetTick>
 800af7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	88fa      	ldrh	r2, [r7, #6]
 800af84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	88fa      	ldrh	r2, [r7, #6]
 800af8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af94:	d108      	bne.n	800afa8 <HAL_UART_Transmit+0x82>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d104      	bne.n	800afa8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800af9e:	2300      	movs	r3, #0
 800afa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	61bb      	str	r3, [r7, #24]
 800afa6:	e003      	b.n	800afb0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800afac:	2300      	movs	r3, #0
 800afae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800afb8:	e02a      	b.n	800b010 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	2200      	movs	r2, #0
 800afc2:	2180      	movs	r1, #128	; 0x80
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	f000 fb29 	bl	800b61c <UART_WaitOnFlagUntilTimeout>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d001      	beq.n	800afd4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800afd0:	2303      	movs	r3, #3
 800afd2:	e036      	b.n	800b042 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d10b      	bne.n	800aff2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	881b      	ldrh	r3, [r3, #0]
 800afde:	461a      	mov	r2, r3
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800afe8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	3302      	adds	r3, #2
 800afee:	61bb      	str	r3, [r7, #24]
 800aff0:	e007      	b.n	800b002 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	781a      	ldrb	r2, [r3, #0]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	3301      	adds	r3, #1
 800b000:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b006:	b29b      	uxth	r3, r3
 800b008:	3b01      	subs	r3, #1
 800b00a:	b29a      	uxth	r2, r3
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b014:	b29b      	uxth	r3, r3
 800b016:	2b00      	cmp	r3, #0
 800b018:	d1cf      	bne.n	800afba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	2200      	movs	r2, #0
 800b022:	2140      	movs	r1, #64	; 0x40
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f000 faf9 	bl	800b61c <UART_WaitOnFlagUntilTimeout>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d001      	beq.n	800b034 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b030:	2303      	movs	r3, #3
 800b032:	e006      	b.n	800b042 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2220      	movs	r2, #32
 800b038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b03c:	2300      	movs	r3, #0
 800b03e:	e000      	b.n	800b042 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b040:	2302      	movs	r3, #2
  }
}
 800b042:	4618      	mov	r0, r3
 800b044:	3720      	adds	r7, #32
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b084      	sub	sp, #16
 800b04e:	af00      	add	r7, sp, #0
 800b050:	60f8      	str	r0, [r7, #12]
 800b052:	60b9      	str	r1, [r7, #8]
 800b054:	4613      	mov	r3, r2
 800b056:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	2b20      	cmp	r3, #32
 800b062:	d11d      	bne.n	800b0a0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d002      	beq.n	800b070 <HAL_UART_Receive_IT+0x26>
 800b06a:	88fb      	ldrh	r3, [r7, #6]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d101      	bne.n	800b074 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	e016      	b.n	800b0a2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d101      	bne.n	800b082 <HAL_UART_Receive_IT+0x38>
 800b07e:	2302      	movs	r3, #2
 800b080:	e00f      	b.n	800b0a2 <HAL_UART_Receive_IT+0x58>
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2201      	movs	r2, #1
 800b086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2200      	movs	r2, #0
 800b08e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b090:	88fb      	ldrh	r3, [r7, #6]
 800b092:	461a      	mov	r2, r3
 800b094:	68b9      	ldr	r1, [r7, #8]
 800b096:	68f8      	ldr	r0, [r7, #12]
 800b098:	f000 fb2e 	bl	800b6f8 <UART_Start_Receive_IT>
 800b09c:	4603      	mov	r3, r0
 800b09e:	e000      	b.n	800b0a2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b0a0:	2302      	movs	r3, #2
  }
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
	...

0800b0ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b0ba      	sub	sp, #232	; 0xe8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	695b      	ldr	r3, [r3, #20]
 800b0ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b0de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0e2:	f003 030f 	and.w	r3, r3, #15
 800b0e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b0ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d10f      	bne.n	800b112 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b0f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0f6:	f003 0320 	and.w	r3, r3, #32
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d009      	beq.n	800b112 <HAL_UART_IRQHandler+0x66>
 800b0fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b102:	f003 0320 	and.w	r3, r3, #32
 800b106:	2b00      	cmp	r3, #0
 800b108:	d003      	beq.n	800b112 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fc11 	bl	800b932 <UART_Receive_IT>
      return;
 800b110:	e256      	b.n	800b5c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b112:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b116:	2b00      	cmp	r3, #0
 800b118:	f000 80de 	beq.w	800b2d8 <HAL_UART_IRQHandler+0x22c>
 800b11c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b120:	f003 0301 	and.w	r3, r3, #1
 800b124:	2b00      	cmp	r3, #0
 800b126:	d106      	bne.n	800b136 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b12c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b130:	2b00      	cmp	r3, #0
 800b132:	f000 80d1 	beq.w	800b2d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b13a:	f003 0301 	and.w	r3, r3, #1
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00b      	beq.n	800b15a <HAL_UART_IRQHandler+0xae>
 800b142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d005      	beq.n	800b15a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b152:	f043 0201 	orr.w	r2, r3, #1
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b15a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b15e:	f003 0304 	and.w	r3, r3, #4
 800b162:	2b00      	cmp	r3, #0
 800b164:	d00b      	beq.n	800b17e <HAL_UART_IRQHandler+0xd2>
 800b166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b16a:	f003 0301 	and.w	r3, r3, #1
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d005      	beq.n	800b17e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b176:	f043 0202 	orr.w	r2, r3, #2
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b17e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b182:	f003 0302 	and.w	r3, r3, #2
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00b      	beq.n	800b1a2 <HAL_UART_IRQHandler+0xf6>
 800b18a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b18e:	f003 0301 	and.w	r3, r3, #1
 800b192:	2b00      	cmp	r3, #0
 800b194:	d005      	beq.n	800b1a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19a:	f043 0204 	orr.w	r2, r3, #4
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b1a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1a6:	f003 0308 	and.w	r3, r3, #8
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d011      	beq.n	800b1d2 <HAL_UART_IRQHandler+0x126>
 800b1ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1b2:	f003 0320 	and.w	r3, r3, #32
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d105      	bne.n	800b1c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b1ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1be:	f003 0301 	and.w	r3, r3, #1
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d005      	beq.n	800b1d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ca:	f043 0208 	orr.w	r2, r3, #8
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	f000 81ed 	beq.w	800b5b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b1dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1e0:	f003 0320 	and.w	r3, r3, #32
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d008      	beq.n	800b1fa <HAL_UART_IRQHandler+0x14e>
 800b1e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1ec:	f003 0320 	and.w	r3, r3, #32
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d002      	beq.n	800b1fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 fb9c 	bl	800b932 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	695b      	ldr	r3, [r3, #20]
 800b200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b204:	2b40      	cmp	r3, #64	; 0x40
 800b206:	bf0c      	ite	eq
 800b208:	2301      	moveq	r3, #1
 800b20a:	2300      	movne	r3, #0
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b216:	f003 0308 	and.w	r3, r3, #8
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d103      	bne.n	800b226 <HAL_UART_IRQHandler+0x17a>
 800b21e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b222:	2b00      	cmp	r3, #0
 800b224:	d04f      	beq.n	800b2c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 faa4 	bl	800b774 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	695b      	ldr	r3, [r3, #20]
 800b232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b236:	2b40      	cmp	r3, #64	; 0x40
 800b238:	d141      	bne.n	800b2be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	3314      	adds	r3, #20
 800b240:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b248:	e853 3f00 	ldrex	r3, [r3]
 800b24c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	3314      	adds	r3, #20
 800b262:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b266:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b26a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b272:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b276:	e841 2300 	strex	r3, r2, [r1]
 800b27a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b27e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d1d9      	bne.n	800b23a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d013      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b292:	4a7d      	ldr	r2, [pc, #500]	; (800b488 <HAL_UART_IRQHandler+0x3dc>)
 800b294:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fb fcde 	bl	8006c5c <HAL_DMA_Abort_IT>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d016      	beq.n	800b2d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b2b0:	4610      	mov	r0, r2
 800b2b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2b4:	e00e      	b.n	800b2d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f99a 	bl	800b5f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2bc:	e00a      	b.n	800b2d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 f996 	bl	800b5f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2c4:	e006      	b.n	800b2d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 f992 	bl	800b5f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b2d2:	e170      	b.n	800b5b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2d4:	bf00      	nop
    return;
 800b2d6:	e16e      	b.n	800b5b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	f040 814a 	bne.w	800b576 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b2e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2e6:	f003 0310 	and.w	r3, r3, #16
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	f000 8143 	beq.w	800b576 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b2f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2f4:	f003 0310 	and.w	r3, r3, #16
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f000 813c 	beq.w	800b576 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b2fe:	2300      	movs	r3, #0
 800b300:	60bb      	str	r3, [r7, #8]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	60bb      	str	r3, [r7, #8]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	60bb      	str	r3, [r7, #8]
 800b312:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	695b      	ldr	r3, [r3, #20]
 800b31a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b31e:	2b40      	cmp	r3, #64	; 0x40
 800b320:	f040 80b4 	bne.w	800b48c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b330:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b334:	2b00      	cmp	r3, #0
 800b336:	f000 8140 	beq.w	800b5ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b33e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b342:	429a      	cmp	r2, r3
 800b344:	f080 8139 	bcs.w	800b5ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b34e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b354:	69db      	ldr	r3, [r3, #28]
 800b356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b35a:	f000 8088 	beq.w	800b46e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	330c      	adds	r3, #12
 800b364:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b368:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b36c:	e853 3f00 	ldrex	r3, [r3]
 800b370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b374:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b37c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	330c      	adds	r3, #12
 800b386:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b38a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b38e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b392:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b396:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b39a:	e841 2300 	strex	r3, r2, [r1]
 800b39e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b3a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1d9      	bne.n	800b35e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3314      	adds	r3, #20
 800b3b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3b4:	e853 3f00 	ldrex	r3, [r3]
 800b3b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b3ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3bc:	f023 0301 	bic.w	r3, r3, #1
 800b3c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	3314      	adds	r3, #20
 800b3ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b3ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b3d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b3d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b3da:	e841 2300 	strex	r3, r2, [r1]
 800b3de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b3e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d1e1      	bne.n	800b3aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	3314      	adds	r3, #20
 800b3ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3f0:	e853 3f00 	ldrex	r3, [r3]
 800b3f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b3f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	3314      	adds	r3, #20
 800b406:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b40a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b40c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b40e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b410:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b412:	e841 2300 	strex	r3, r2, [r1]
 800b416:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1e3      	bne.n	800b3e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2220      	movs	r2, #32
 800b422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	330c      	adds	r3, #12
 800b432:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b436:	e853 3f00 	ldrex	r3, [r3]
 800b43a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b43c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b43e:	f023 0310 	bic.w	r3, r3, #16
 800b442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	330c      	adds	r3, #12
 800b44c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b450:	65ba      	str	r2, [r7, #88]	; 0x58
 800b452:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b454:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b456:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b458:	e841 2300 	strex	r3, r2, [r1]
 800b45c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b45e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1e3      	bne.n	800b42c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b468:	4618      	mov	r0, r3
 800b46a:	f7fb fb87 	bl	8006b7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b476:	b29b      	uxth	r3, r3
 800b478:	1ad3      	subs	r3, r2, r3
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	4619      	mov	r1, r3
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 f8c0 	bl	800b604 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b484:	e099      	b.n	800b5ba <HAL_UART_IRQHandler+0x50e>
 800b486:	bf00      	nop
 800b488:	0800b83b 	.word	0x0800b83b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b494:	b29b      	uxth	r3, r3
 800b496:	1ad3      	subs	r3, r2, r3
 800b498:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	f000 808b 	beq.w	800b5be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b4a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f000 8086 	beq.w	800b5be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	330c      	adds	r3, #12
 800b4b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4bc:	e853 3f00 	ldrex	r3, [r3]
 800b4c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	330c      	adds	r3, #12
 800b4d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b4d6:	647a      	str	r2, [r7, #68]	; 0x44
 800b4d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b4dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4de:	e841 2300 	strex	r3, r2, [r1]
 800b4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1e3      	bne.n	800b4b2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	3314      	adds	r3, #20
 800b4f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f4:	e853 3f00 	ldrex	r3, [r3]
 800b4f8:	623b      	str	r3, [r7, #32]
   return(result);
 800b4fa:	6a3b      	ldr	r3, [r7, #32]
 800b4fc:	f023 0301 	bic.w	r3, r3, #1
 800b500:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	3314      	adds	r3, #20
 800b50a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b50e:	633a      	str	r2, [r7, #48]	; 0x30
 800b510:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b516:	e841 2300 	strex	r3, r2, [r1]
 800b51a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1e3      	bne.n	800b4ea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2220      	movs	r2, #32
 800b526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	330c      	adds	r3, #12
 800b536:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	e853 3f00 	ldrex	r3, [r3]
 800b53e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f023 0310 	bic.w	r3, r3, #16
 800b546:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	330c      	adds	r3, #12
 800b550:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b554:	61fa      	str	r2, [r7, #28]
 800b556:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b558:	69b9      	ldr	r1, [r7, #24]
 800b55a:	69fa      	ldr	r2, [r7, #28]
 800b55c:	e841 2300 	strex	r3, r2, [r1]
 800b560:	617b      	str	r3, [r7, #20]
   return(result);
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d1e3      	bne.n	800b530 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b568:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b56c:	4619      	mov	r1, r3
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 f848 	bl	800b604 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b574:	e023      	b.n	800b5be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b57a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d009      	beq.n	800b596 <HAL_UART_IRQHandler+0x4ea>
 800b582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d003      	beq.n	800b596 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 f967 	bl	800b862 <UART_Transmit_IT>
    return;
 800b594:	e014      	b.n	800b5c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00e      	beq.n	800b5c0 <HAL_UART_IRQHandler+0x514>
 800b5a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d008      	beq.n	800b5c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 f9a7 	bl	800b902 <UART_EndTransmit_IT>
    return;
 800b5b4:	e004      	b.n	800b5c0 <HAL_UART_IRQHandler+0x514>
    return;
 800b5b6:	bf00      	nop
 800b5b8:	e002      	b.n	800b5c0 <HAL_UART_IRQHandler+0x514>
      return;
 800b5ba:	bf00      	nop
 800b5bc:	e000      	b.n	800b5c0 <HAL_UART_IRQHandler+0x514>
      return;
 800b5be:	bf00      	nop
  }
}
 800b5c0:	37e8      	adds	r7, #232	; 0xe8
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop

0800b5c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b5f8:	bf00      	nop
 800b5fa:	370c      	adds	r7, #12
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr

0800b604 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	460b      	mov	r3, r1
 800b60e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b090      	sub	sp, #64	; 0x40
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	603b      	str	r3, [r7, #0]
 800b628:	4613      	mov	r3, r2
 800b62a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b62c:	e050      	b.n	800b6d0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b62e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b630:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b634:	d04c      	beq.n	800b6d0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d007      	beq.n	800b64c <UART_WaitOnFlagUntilTimeout+0x30>
 800b63c:	f7fa fd8c 	bl	8006158 <HAL_GetTick>
 800b640:	4602      	mov	r2, r0
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	1ad3      	subs	r3, r2, r3
 800b646:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b648:	429a      	cmp	r2, r3
 800b64a:	d241      	bcs.n	800b6d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	330c      	adds	r3, #12
 800b652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b656:	e853 3f00 	ldrex	r3, [r3]
 800b65a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b662:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	330c      	adds	r3, #12
 800b66a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b66c:	637a      	str	r2, [r7, #52]	; 0x34
 800b66e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b670:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b674:	e841 2300 	strex	r3, r2, [r1]
 800b678:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1e5      	bne.n	800b64c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	3314      	adds	r3, #20
 800b686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	e853 3f00 	ldrex	r3, [r3]
 800b68e:	613b      	str	r3, [r7, #16]
   return(result);
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	f023 0301 	bic.w	r3, r3, #1
 800b696:	63bb      	str	r3, [r7, #56]	; 0x38
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	3314      	adds	r3, #20
 800b69e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6a0:	623a      	str	r2, [r7, #32]
 800b6a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a4:	69f9      	ldr	r1, [r7, #28]
 800b6a6:	6a3a      	ldr	r2, [r7, #32]
 800b6a8:	e841 2300 	strex	r3, r2, [r1]
 800b6ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d1e5      	bne.n	800b680 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2220      	movs	r2, #32
 800b6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2220      	movs	r2, #32
 800b6c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b6cc:	2303      	movs	r3, #3
 800b6ce:	e00f      	b.n	800b6f0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	4013      	ands	r3, r2
 800b6da:	68ba      	ldr	r2, [r7, #8]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	bf0c      	ite	eq
 800b6e0:	2301      	moveq	r3, #1
 800b6e2:	2300      	movne	r3, #0
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	79fb      	ldrb	r3, [r7, #7]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d09f      	beq.n	800b62e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b6ee:	2300      	movs	r3, #0
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3740      	adds	r7, #64	; 0x40
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b085      	sub	sp, #20
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	4613      	mov	r3, r2
 800b704:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	68ba      	ldr	r2, [r7, #8]
 800b70a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	88fa      	ldrh	r2, [r7, #6]
 800b710:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	88fa      	ldrh	r2, [r7, #6]
 800b716:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2200      	movs	r2, #0
 800b71c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2222      	movs	r2, #34	; 0x22
 800b722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d007      	beq.n	800b746 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	68da      	ldr	r2, [r3, #12]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b744:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	695a      	ldr	r2, [r3, #20]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f042 0201 	orr.w	r2, r2, #1
 800b754:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	68da      	ldr	r2, [r3, #12]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f042 0220 	orr.w	r2, r2, #32
 800b764:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3714      	adds	r7, #20
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b774:	b480      	push	{r7}
 800b776:	b095      	sub	sp, #84	; 0x54
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	330c      	adds	r3, #12
 800b782:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b786:	e853 3f00 	ldrex	r3, [r3]
 800b78a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b792:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	330c      	adds	r3, #12
 800b79a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b79c:	643a      	str	r2, [r7, #64]	; 0x40
 800b79e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b7a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7a4:	e841 2300 	strex	r3, r2, [r1]
 800b7a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d1e5      	bne.n	800b77c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	3314      	adds	r3, #20
 800b7b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b8:	6a3b      	ldr	r3, [r7, #32]
 800b7ba:	e853 3f00 	ldrex	r3, [r3]
 800b7be:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	f023 0301 	bic.w	r3, r3, #1
 800b7c6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	3314      	adds	r3, #20
 800b7ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b7d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7d8:	e841 2300 	strex	r3, r2, [r1]
 800b7dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1e5      	bne.n	800b7b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d119      	bne.n	800b820 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	330c      	adds	r3, #12
 800b7f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	e853 3f00 	ldrex	r3, [r3]
 800b7fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	f023 0310 	bic.w	r3, r3, #16
 800b802:	647b      	str	r3, [r7, #68]	; 0x44
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	330c      	adds	r3, #12
 800b80a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b80c:	61ba      	str	r2, [r7, #24]
 800b80e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b810:	6979      	ldr	r1, [r7, #20]
 800b812:	69ba      	ldr	r2, [r7, #24]
 800b814:	e841 2300 	strex	r3, r2, [r1]
 800b818:	613b      	str	r3, [r7, #16]
   return(result);
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d1e5      	bne.n	800b7ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2220      	movs	r2, #32
 800b824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b82e:	bf00      	nop
 800b830:	3754      	adds	r7, #84	; 0x54
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr

0800b83a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b084      	sub	sp, #16
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b846:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2200      	movs	r2, #0
 800b84c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2200      	movs	r2, #0
 800b852:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f7ff fecb 	bl	800b5f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b85a:	bf00      	nop
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b862:	b480      	push	{r7}
 800b864:	b085      	sub	sp, #20
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b870:	b2db      	uxtb	r3, r3
 800b872:	2b21      	cmp	r3, #33	; 0x21
 800b874:	d13e      	bne.n	800b8f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b87e:	d114      	bne.n	800b8aa <UART_Transmit_IT+0x48>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d110      	bne.n	800b8aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6a1b      	ldr	r3, [r3, #32]
 800b88c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	881b      	ldrh	r3, [r3, #0]
 800b892:	461a      	mov	r2, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b89c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6a1b      	ldr	r3, [r3, #32]
 800b8a2:	1c9a      	adds	r2, r3, #2
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	621a      	str	r2, [r3, #32]
 800b8a8:	e008      	b.n	800b8bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6a1b      	ldr	r3, [r3, #32]
 800b8ae:	1c59      	adds	r1, r3, #1
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	6211      	str	r1, [r2, #32]
 800b8b4:	781a      	ldrb	r2, [r3, #0]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d10f      	bne.n	800b8f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	68da      	ldr	r2, [r3, #12]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	68da      	ldr	r2, [r3, #12]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	e000      	b.n	800b8f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b8f4:	2302      	movs	r3, #2
  }
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3714      	adds	r7, #20
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr

0800b902 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b082      	sub	sp, #8
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	68da      	ldr	r2, [r3, #12]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b918:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2220      	movs	r2, #32
 800b91e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f7ff fe50 	bl	800b5c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b928:	2300      	movs	r3, #0
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b08c      	sub	sp, #48	; 0x30
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b940:	b2db      	uxtb	r3, r3
 800b942:	2b22      	cmp	r3, #34	; 0x22
 800b944:	f040 80ab 	bne.w	800ba9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b950:	d117      	bne.n	800b982 <UART_Receive_IT+0x50>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	691b      	ldr	r3, [r3, #16]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d113      	bne.n	800b982 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b95a:	2300      	movs	r3, #0
 800b95c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b962:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b970:	b29a      	uxth	r2, r3
 800b972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b974:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b97a:	1c9a      	adds	r2, r3, #2
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	629a      	str	r2, [r3, #40]	; 0x28
 800b980:	e026      	b.n	800b9d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b986:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b988:	2300      	movs	r3, #0
 800b98a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b994:	d007      	beq.n	800b9a6 <UART_Receive_IT+0x74>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10a      	bne.n	800b9b4 <UART_Receive_IT+0x82>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d106      	bne.n	800b9b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	b2da      	uxtb	r2, r3
 800b9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b0:	701a      	strb	r2, [r3, #0]
 800b9b2:	e008      	b.n	800b9c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9c0:	b2da      	uxtb	r2, r3
 800b9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ca:	1c5a      	adds	r2, r3, #1
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	4619      	mov	r1, r3
 800b9de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d15a      	bne.n	800ba9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	68da      	ldr	r2, [r3, #12]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f022 0220 	bic.w	r2, r2, #32
 800b9f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	68da      	ldr	r2, [r3, #12]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	695a      	ldr	r2, [r3, #20]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f022 0201 	bic.w	r2, r2, #1
 800ba12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2220      	movs	r2, #32
 800ba18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d135      	bne.n	800ba90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2200      	movs	r2, #0
 800ba28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	330c      	adds	r3, #12
 800ba30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	e853 3f00 	ldrex	r3, [r3]
 800ba38:	613b      	str	r3, [r7, #16]
   return(result);
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	f023 0310 	bic.w	r3, r3, #16
 800ba40:	627b      	str	r3, [r7, #36]	; 0x24
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	330c      	adds	r3, #12
 800ba48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba4a:	623a      	str	r2, [r7, #32]
 800ba4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4e:	69f9      	ldr	r1, [r7, #28]
 800ba50:	6a3a      	ldr	r2, [r7, #32]
 800ba52:	e841 2300 	strex	r3, r2, [r1]
 800ba56:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba58:	69bb      	ldr	r3, [r7, #24]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1e5      	bne.n	800ba2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f003 0310 	and.w	r3, r3, #16
 800ba68:	2b10      	cmp	r3, #16
 800ba6a:	d10a      	bne.n	800ba82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	60fb      	str	r3, [r7, #12]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	60fb      	str	r3, [r7, #12]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	60fb      	str	r3, [r7, #12]
 800ba80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ba86:	4619      	mov	r1, r3
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f7ff fdbb 	bl	800b604 <HAL_UARTEx_RxEventCallback>
 800ba8e:	e002      	b.n	800ba96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7ff fda3 	bl	800b5dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ba96:	2300      	movs	r3, #0
 800ba98:	e002      	b.n	800baa0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	e000      	b.n	800baa0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ba9e:	2302      	movs	r3, #2
  }
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3730      	adds	r7, #48	; 0x30
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800baa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800baac:	b0c0      	sub	sp, #256	; 0x100
 800baae:	af00      	add	r7, sp, #0
 800bab0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	691b      	ldr	r3, [r3, #16]
 800babc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bac4:	68d9      	ldr	r1, [r3, #12]
 800bac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	ea40 0301 	orr.w	r3, r0, r1
 800bad0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bad6:	689a      	ldr	r2, [r3, #8]
 800bad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	431a      	orrs	r2, r3
 800bae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bae4:	695b      	ldr	r3, [r3, #20]
 800bae6:	431a      	orrs	r2, r3
 800bae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baec:	69db      	ldr	r3, [r3, #28]
 800baee:	4313      	orrs	r3, r2
 800baf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800baf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	68db      	ldr	r3, [r3, #12]
 800bafc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bb00:	f021 010c 	bic.w	r1, r1, #12
 800bb04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bb0e:	430b      	orrs	r3, r1
 800bb10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bb12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	695b      	ldr	r3, [r3, #20]
 800bb1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bb1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb22:	6999      	ldr	r1, [r3, #24]
 800bb24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	ea40 0301 	orr.w	r3, r0, r1
 800bb2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bb30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	4b8f      	ldr	r3, [pc, #572]	; (800bd74 <UART_SetConfig+0x2cc>)
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d005      	beq.n	800bb48 <UART_SetConfig+0xa0>
 800bb3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	4b8d      	ldr	r3, [pc, #564]	; (800bd78 <UART_SetConfig+0x2d0>)
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d104      	bne.n	800bb52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bb48:	f7fd fb32 	bl	80091b0 <HAL_RCC_GetPCLK2Freq>
 800bb4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bb50:	e003      	b.n	800bb5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bb52:	f7fd fb19 	bl	8009188 <HAL_RCC_GetPCLK1Freq>
 800bb56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb5e:	69db      	ldr	r3, [r3, #28]
 800bb60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb64:	f040 810c 	bne.w	800bd80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bb68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bb72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bb76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bb7a:	4622      	mov	r2, r4
 800bb7c:	462b      	mov	r3, r5
 800bb7e:	1891      	adds	r1, r2, r2
 800bb80:	65b9      	str	r1, [r7, #88]	; 0x58
 800bb82:	415b      	adcs	r3, r3
 800bb84:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	eb12 0801 	adds.w	r8, r2, r1
 800bb90:	4629      	mov	r1, r5
 800bb92:	eb43 0901 	adc.w	r9, r3, r1
 800bb96:	f04f 0200 	mov.w	r2, #0
 800bb9a:	f04f 0300 	mov.w	r3, #0
 800bb9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bbaa:	4690      	mov	r8, r2
 800bbac:	4699      	mov	r9, r3
 800bbae:	4623      	mov	r3, r4
 800bbb0:	eb18 0303 	adds.w	r3, r8, r3
 800bbb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bbb8:	462b      	mov	r3, r5
 800bbba:	eb49 0303 	adc.w	r3, r9, r3
 800bbbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bbc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bbce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bbd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	18db      	adds	r3, r3, r3
 800bbda:	653b      	str	r3, [r7, #80]	; 0x50
 800bbdc:	4613      	mov	r3, r2
 800bbde:	eb42 0303 	adc.w	r3, r2, r3
 800bbe2:	657b      	str	r3, [r7, #84]	; 0x54
 800bbe4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bbe8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bbec:	f7f5 f87c 	bl	8000ce8 <__aeabi_uldivmod>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	4b61      	ldr	r3, [pc, #388]	; (800bd7c <UART_SetConfig+0x2d4>)
 800bbf6:	fba3 2302 	umull	r2, r3, r3, r2
 800bbfa:	095b      	lsrs	r3, r3, #5
 800bbfc:	011c      	lsls	r4, r3, #4
 800bbfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc02:	2200      	movs	r2, #0
 800bc04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bc0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bc10:	4642      	mov	r2, r8
 800bc12:	464b      	mov	r3, r9
 800bc14:	1891      	adds	r1, r2, r2
 800bc16:	64b9      	str	r1, [r7, #72]	; 0x48
 800bc18:	415b      	adcs	r3, r3
 800bc1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bc20:	4641      	mov	r1, r8
 800bc22:	eb12 0a01 	adds.w	sl, r2, r1
 800bc26:	4649      	mov	r1, r9
 800bc28:	eb43 0b01 	adc.w	fp, r3, r1
 800bc2c:	f04f 0200 	mov.w	r2, #0
 800bc30:	f04f 0300 	mov.w	r3, #0
 800bc34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bc38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bc3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bc40:	4692      	mov	sl, r2
 800bc42:	469b      	mov	fp, r3
 800bc44:	4643      	mov	r3, r8
 800bc46:	eb1a 0303 	adds.w	r3, sl, r3
 800bc4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc4e:	464b      	mov	r3, r9
 800bc50:	eb4b 0303 	adc.w	r3, fp, r3
 800bc54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bc58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bc68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	18db      	adds	r3, r3, r3
 800bc70:	643b      	str	r3, [r7, #64]	; 0x40
 800bc72:	4613      	mov	r3, r2
 800bc74:	eb42 0303 	adc.w	r3, r2, r3
 800bc78:	647b      	str	r3, [r7, #68]	; 0x44
 800bc7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bc7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bc82:	f7f5 f831 	bl	8000ce8 <__aeabi_uldivmod>
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	4611      	mov	r1, r2
 800bc8c:	4b3b      	ldr	r3, [pc, #236]	; (800bd7c <UART_SetConfig+0x2d4>)
 800bc8e:	fba3 2301 	umull	r2, r3, r3, r1
 800bc92:	095b      	lsrs	r3, r3, #5
 800bc94:	2264      	movs	r2, #100	; 0x64
 800bc96:	fb02 f303 	mul.w	r3, r2, r3
 800bc9a:	1acb      	subs	r3, r1, r3
 800bc9c:	00db      	lsls	r3, r3, #3
 800bc9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bca2:	4b36      	ldr	r3, [pc, #216]	; (800bd7c <UART_SetConfig+0x2d4>)
 800bca4:	fba3 2302 	umull	r2, r3, r3, r2
 800bca8:	095b      	lsrs	r3, r3, #5
 800bcaa:	005b      	lsls	r3, r3, #1
 800bcac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bcb0:	441c      	add	r4, r3
 800bcb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bcbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bcc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bcc4:	4642      	mov	r2, r8
 800bcc6:	464b      	mov	r3, r9
 800bcc8:	1891      	adds	r1, r2, r2
 800bcca:	63b9      	str	r1, [r7, #56]	; 0x38
 800bccc:	415b      	adcs	r3, r3
 800bcce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bcd4:	4641      	mov	r1, r8
 800bcd6:	1851      	adds	r1, r2, r1
 800bcd8:	6339      	str	r1, [r7, #48]	; 0x30
 800bcda:	4649      	mov	r1, r9
 800bcdc:	414b      	adcs	r3, r1
 800bcde:	637b      	str	r3, [r7, #52]	; 0x34
 800bce0:	f04f 0200 	mov.w	r2, #0
 800bce4:	f04f 0300 	mov.w	r3, #0
 800bce8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bcec:	4659      	mov	r1, fp
 800bcee:	00cb      	lsls	r3, r1, #3
 800bcf0:	4651      	mov	r1, sl
 800bcf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bcf6:	4651      	mov	r1, sl
 800bcf8:	00ca      	lsls	r2, r1, #3
 800bcfa:	4610      	mov	r0, r2
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	4603      	mov	r3, r0
 800bd00:	4642      	mov	r2, r8
 800bd02:	189b      	adds	r3, r3, r2
 800bd04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd08:	464b      	mov	r3, r9
 800bd0a:	460a      	mov	r2, r1
 800bd0c:	eb42 0303 	adc.w	r3, r2, r3
 800bd10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bd20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bd24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bd28:	460b      	mov	r3, r1
 800bd2a:	18db      	adds	r3, r3, r3
 800bd2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd2e:	4613      	mov	r3, r2
 800bd30:	eb42 0303 	adc.w	r3, r2, r3
 800bd34:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bd3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bd3e:	f7f4 ffd3 	bl	8000ce8 <__aeabi_uldivmod>
 800bd42:	4602      	mov	r2, r0
 800bd44:	460b      	mov	r3, r1
 800bd46:	4b0d      	ldr	r3, [pc, #52]	; (800bd7c <UART_SetConfig+0x2d4>)
 800bd48:	fba3 1302 	umull	r1, r3, r3, r2
 800bd4c:	095b      	lsrs	r3, r3, #5
 800bd4e:	2164      	movs	r1, #100	; 0x64
 800bd50:	fb01 f303 	mul.w	r3, r1, r3
 800bd54:	1ad3      	subs	r3, r2, r3
 800bd56:	00db      	lsls	r3, r3, #3
 800bd58:	3332      	adds	r3, #50	; 0x32
 800bd5a:	4a08      	ldr	r2, [pc, #32]	; (800bd7c <UART_SetConfig+0x2d4>)
 800bd5c:	fba2 2303 	umull	r2, r3, r2, r3
 800bd60:	095b      	lsrs	r3, r3, #5
 800bd62:	f003 0207 	and.w	r2, r3, #7
 800bd66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4422      	add	r2, r4
 800bd6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bd70:	e106      	b.n	800bf80 <UART_SetConfig+0x4d8>
 800bd72:	bf00      	nop
 800bd74:	40011000 	.word	0x40011000
 800bd78:	40011400 	.word	0x40011400
 800bd7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bd80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd84:	2200      	movs	r2, #0
 800bd86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bd8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bd8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bd92:	4642      	mov	r2, r8
 800bd94:	464b      	mov	r3, r9
 800bd96:	1891      	adds	r1, r2, r2
 800bd98:	6239      	str	r1, [r7, #32]
 800bd9a:	415b      	adcs	r3, r3
 800bd9c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bda2:	4641      	mov	r1, r8
 800bda4:	1854      	adds	r4, r2, r1
 800bda6:	4649      	mov	r1, r9
 800bda8:	eb43 0501 	adc.w	r5, r3, r1
 800bdac:	f04f 0200 	mov.w	r2, #0
 800bdb0:	f04f 0300 	mov.w	r3, #0
 800bdb4:	00eb      	lsls	r3, r5, #3
 800bdb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bdba:	00e2      	lsls	r2, r4, #3
 800bdbc:	4614      	mov	r4, r2
 800bdbe:	461d      	mov	r5, r3
 800bdc0:	4643      	mov	r3, r8
 800bdc2:	18e3      	adds	r3, r4, r3
 800bdc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bdc8:	464b      	mov	r3, r9
 800bdca:	eb45 0303 	adc.w	r3, r5, r3
 800bdce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bdd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bdde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bde2:	f04f 0200 	mov.w	r2, #0
 800bde6:	f04f 0300 	mov.w	r3, #0
 800bdea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bdee:	4629      	mov	r1, r5
 800bdf0:	008b      	lsls	r3, r1, #2
 800bdf2:	4621      	mov	r1, r4
 800bdf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bdf8:	4621      	mov	r1, r4
 800bdfa:	008a      	lsls	r2, r1, #2
 800bdfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800be00:	f7f4 ff72 	bl	8000ce8 <__aeabi_uldivmod>
 800be04:	4602      	mov	r2, r0
 800be06:	460b      	mov	r3, r1
 800be08:	4b60      	ldr	r3, [pc, #384]	; (800bf8c <UART_SetConfig+0x4e4>)
 800be0a:	fba3 2302 	umull	r2, r3, r3, r2
 800be0e:	095b      	lsrs	r3, r3, #5
 800be10:	011c      	lsls	r4, r3, #4
 800be12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be16:	2200      	movs	r2, #0
 800be18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800be1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800be20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800be24:	4642      	mov	r2, r8
 800be26:	464b      	mov	r3, r9
 800be28:	1891      	adds	r1, r2, r2
 800be2a:	61b9      	str	r1, [r7, #24]
 800be2c:	415b      	adcs	r3, r3
 800be2e:	61fb      	str	r3, [r7, #28]
 800be30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800be34:	4641      	mov	r1, r8
 800be36:	1851      	adds	r1, r2, r1
 800be38:	6139      	str	r1, [r7, #16]
 800be3a:	4649      	mov	r1, r9
 800be3c:	414b      	adcs	r3, r1
 800be3e:	617b      	str	r3, [r7, #20]
 800be40:	f04f 0200 	mov.w	r2, #0
 800be44:	f04f 0300 	mov.w	r3, #0
 800be48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800be4c:	4659      	mov	r1, fp
 800be4e:	00cb      	lsls	r3, r1, #3
 800be50:	4651      	mov	r1, sl
 800be52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be56:	4651      	mov	r1, sl
 800be58:	00ca      	lsls	r2, r1, #3
 800be5a:	4610      	mov	r0, r2
 800be5c:	4619      	mov	r1, r3
 800be5e:	4603      	mov	r3, r0
 800be60:	4642      	mov	r2, r8
 800be62:	189b      	adds	r3, r3, r2
 800be64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be68:	464b      	mov	r3, r9
 800be6a:	460a      	mov	r2, r1
 800be6c:	eb42 0303 	adc.w	r3, r2, r3
 800be70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800be74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	67bb      	str	r3, [r7, #120]	; 0x78
 800be7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800be80:	f04f 0200 	mov.w	r2, #0
 800be84:	f04f 0300 	mov.w	r3, #0
 800be88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800be8c:	4649      	mov	r1, r9
 800be8e:	008b      	lsls	r3, r1, #2
 800be90:	4641      	mov	r1, r8
 800be92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be96:	4641      	mov	r1, r8
 800be98:	008a      	lsls	r2, r1, #2
 800be9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800be9e:	f7f4 ff23 	bl	8000ce8 <__aeabi_uldivmod>
 800bea2:	4602      	mov	r2, r0
 800bea4:	460b      	mov	r3, r1
 800bea6:	4611      	mov	r1, r2
 800bea8:	4b38      	ldr	r3, [pc, #224]	; (800bf8c <UART_SetConfig+0x4e4>)
 800beaa:	fba3 2301 	umull	r2, r3, r3, r1
 800beae:	095b      	lsrs	r3, r3, #5
 800beb0:	2264      	movs	r2, #100	; 0x64
 800beb2:	fb02 f303 	mul.w	r3, r2, r3
 800beb6:	1acb      	subs	r3, r1, r3
 800beb8:	011b      	lsls	r3, r3, #4
 800beba:	3332      	adds	r3, #50	; 0x32
 800bebc:	4a33      	ldr	r2, [pc, #204]	; (800bf8c <UART_SetConfig+0x4e4>)
 800bebe:	fba2 2303 	umull	r2, r3, r2, r3
 800bec2:	095b      	lsrs	r3, r3, #5
 800bec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bec8:	441c      	add	r4, r3
 800beca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bece:	2200      	movs	r2, #0
 800bed0:	673b      	str	r3, [r7, #112]	; 0x70
 800bed2:	677a      	str	r2, [r7, #116]	; 0x74
 800bed4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bed8:	4642      	mov	r2, r8
 800beda:	464b      	mov	r3, r9
 800bedc:	1891      	adds	r1, r2, r2
 800bede:	60b9      	str	r1, [r7, #8]
 800bee0:	415b      	adcs	r3, r3
 800bee2:	60fb      	str	r3, [r7, #12]
 800bee4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bee8:	4641      	mov	r1, r8
 800beea:	1851      	adds	r1, r2, r1
 800beec:	6039      	str	r1, [r7, #0]
 800beee:	4649      	mov	r1, r9
 800bef0:	414b      	adcs	r3, r1
 800bef2:	607b      	str	r3, [r7, #4]
 800bef4:	f04f 0200 	mov.w	r2, #0
 800bef8:	f04f 0300 	mov.w	r3, #0
 800befc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bf00:	4659      	mov	r1, fp
 800bf02:	00cb      	lsls	r3, r1, #3
 800bf04:	4651      	mov	r1, sl
 800bf06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf0a:	4651      	mov	r1, sl
 800bf0c:	00ca      	lsls	r2, r1, #3
 800bf0e:	4610      	mov	r0, r2
 800bf10:	4619      	mov	r1, r3
 800bf12:	4603      	mov	r3, r0
 800bf14:	4642      	mov	r2, r8
 800bf16:	189b      	adds	r3, r3, r2
 800bf18:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf1a:	464b      	mov	r3, r9
 800bf1c:	460a      	mov	r2, r1
 800bf1e:	eb42 0303 	adc.w	r3, r2, r3
 800bf22:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	663b      	str	r3, [r7, #96]	; 0x60
 800bf2e:	667a      	str	r2, [r7, #100]	; 0x64
 800bf30:	f04f 0200 	mov.w	r2, #0
 800bf34:	f04f 0300 	mov.w	r3, #0
 800bf38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bf3c:	4649      	mov	r1, r9
 800bf3e:	008b      	lsls	r3, r1, #2
 800bf40:	4641      	mov	r1, r8
 800bf42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf46:	4641      	mov	r1, r8
 800bf48:	008a      	lsls	r2, r1, #2
 800bf4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bf4e:	f7f4 fecb 	bl	8000ce8 <__aeabi_uldivmod>
 800bf52:	4602      	mov	r2, r0
 800bf54:	460b      	mov	r3, r1
 800bf56:	4b0d      	ldr	r3, [pc, #52]	; (800bf8c <UART_SetConfig+0x4e4>)
 800bf58:	fba3 1302 	umull	r1, r3, r3, r2
 800bf5c:	095b      	lsrs	r3, r3, #5
 800bf5e:	2164      	movs	r1, #100	; 0x64
 800bf60:	fb01 f303 	mul.w	r3, r1, r3
 800bf64:	1ad3      	subs	r3, r2, r3
 800bf66:	011b      	lsls	r3, r3, #4
 800bf68:	3332      	adds	r3, #50	; 0x32
 800bf6a:	4a08      	ldr	r2, [pc, #32]	; (800bf8c <UART_SetConfig+0x4e4>)
 800bf6c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf70:	095b      	lsrs	r3, r3, #5
 800bf72:	f003 020f 	and.w	r2, r3, #15
 800bf76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4422      	add	r2, r4
 800bf7e:	609a      	str	r2, [r3, #8]
}
 800bf80:	bf00      	nop
 800bf82:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bf86:	46bd      	mov	sp, r7
 800bf88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf8c:	51eb851f 	.word	0x51eb851f

0800bf90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	4603      	mov	r3, r0
 800bf98:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bf9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bfa2:	2b84      	cmp	r3, #132	; 0x84
 800bfa4:	d005      	beq.n	800bfb2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bfa6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	4413      	add	r3, r2
 800bfae:	3303      	adds	r3, #3
 800bfb0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3714      	adds	r7, #20
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bfc4:	f000 faf6 	bl	800c5b4 <vTaskStartScheduler>
  
  return osOK;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bfce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfd0:	b089      	sub	sp, #36	; 0x24
 800bfd2:	af04      	add	r7, sp, #16
 800bfd4:	6078      	str	r0, [r7, #4]
 800bfd6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	695b      	ldr	r3, [r3, #20]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d020      	beq.n	800c022 <osThreadCreate+0x54>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	699b      	ldr	r3, [r3, #24]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d01c      	beq.n	800c022 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	685c      	ldr	r4, [r3, #4]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	691e      	ldr	r6, [r3, #16]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7ff ffc8 	bl	800bf90 <makeFreeRtosPriority>
 800c000:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	695b      	ldr	r3, [r3, #20]
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c00a:	9202      	str	r2, [sp, #8]
 800c00c:	9301      	str	r3, [sp, #4]
 800c00e:	9100      	str	r1, [sp, #0]
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	4632      	mov	r2, r6
 800c014:	4629      	mov	r1, r5
 800c016:	4620      	mov	r0, r4
 800c018:	f000 f8ed 	bl	800c1f6 <xTaskCreateStatic>
 800c01c:	4603      	mov	r3, r0
 800c01e:	60fb      	str	r3, [r7, #12]
 800c020:	e01c      	b.n	800c05c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	685c      	ldr	r4, [r3, #4]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c02e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c036:	4618      	mov	r0, r3
 800c038:	f7ff ffaa 	bl	800bf90 <makeFreeRtosPriority>
 800c03c:	4602      	mov	r2, r0
 800c03e:	f107 030c 	add.w	r3, r7, #12
 800c042:	9301      	str	r3, [sp, #4]
 800c044:	9200      	str	r2, [sp, #0]
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	4632      	mov	r2, r6
 800c04a:	4629      	mov	r1, r5
 800c04c:	4620      	mov	r0, r4
 800c04e:	f000 f92f 	bl	800c2b0 <xTaskCreate>
 800c052:	4603      	mov	r3, r0
 800c054:	2b01      	cmp	r3, #1
 800c056:	d001      	beq.n	800c05c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c058:	2300      	movs	r3, #0
 800c05a:	e000      	b.n	800c05e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c05c:	68fb      	ldr	r3, [r7, #12]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3714      	adds	r7, #20
 800c062:	46bd      	mov	sp, r7
 800c064:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c066 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b084      	sub	sp, #16
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d001      	beq.n	800c07c <osDelay+0x16>
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	e000      	b.n	800c07e <osDelay+0x18>
 800c07c:	2301      	movs	r3, #1
 800c07e:	4618      	mov	r0, r3
 800c080:	f000 fa64 	bl	800c54c <vTaskDelay>
  
  return osOK;
 800c084:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c086:	4618      	mov	r0, r3
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}

0800c08e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c08e:	b480      	push	{r7}
 800c090:	b083      	sub	sp, #12
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f103 0208 	add.w	r2, r3, #8
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c0a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f103 0208 	add.w	r2, r3, #8
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f103 0208 	add.w	r2, r3, #8
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c0c2:	bf00      	nop
 800c0c4:	370c      	adds	r7, #12
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr

0800c0ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c0ce:	b480      	push	{r7}
 800c0d0:	b083      	sub	sp, #12
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c0dc:	bf00      	nop
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	689a      	ldr	r2, [r3, #8]
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	683a      	ldr	r2, [r7, #0]
 800c10c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	683a      	ldr	r2, [r7, #0]
 800c112:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	601a      	str	r2, [r3, #0]
}
 800c124:	bf00      	nop
 800c126:	3714      	adds	r7, #20
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c146:	d103      	bne.n	800c150 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	691b      	ldr	r3, [r3, #16]
 800c14c:	60fb      	str	r3, [r7, #12]
 800c14e:	e00c      	b.n	800c16a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	3308      	adds	r3, #8
 800c154:	60fb      	str	r3, [r7, #12]
 800c156:	e002      	b.n	800c15e <vListInsert+0x2e>
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	60fb      	str	r3, [r7, #12]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	68ba      	ldr	r2, [r7, #8]
 800c166:	429a      	cmp	r2, r3
 800c168:	d2f6      	bcs.n	800c158 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	685a      	ldr	r2, [r3, #4]
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	683a      	ldr	r2, [r7, #0]
 800c178:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	683a      	ldr	r2, [r7, #0]
 800c184:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	1c5a      	adds	r2, r3, #1
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	601a      	str	r2, [r3, #0]
}
 800c196:	bf00      	nop
 800c198:	3714      	adds	r7, #20
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr

0800c1a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c1a2:	b480      	push	{r7}
 800c1a4:	b085      	sub	sp, #20
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	6892      	ldr	r2, [r2, #8]
 800c1b8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	6852      	ldr	r2, [r2, #4]
 800c1c2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d103      	bne.n	800c1d6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	689a      	ldr	r2, [r3, #8]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	1e5a      	subs	r2, r3, #1
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3714      	adds	r7, #20
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr

0800c1f6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b08e      	sub	sp, #56	; 0x38
 800c1fa:	af04      	add	r7, sp, #16
 800c1fc:	60f8      	str	r0, [r7, #12]
 800c1fe:	60b9      	str	r1, [r7, #8]
 800c200:	607a      	str	r2, [r7, #4]
 800c202:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c206:	2b00      	cmp	r3, #0
 800c208:	d10a      	bne.n	800c220 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20e:	f383 8811 	msr	BASEPRI, r3
 800c212:	f3bf 8f6f 	isb	sy
 800c216:	f3bf 8f4f 	dsb	sy
 800c21a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c21c:	bf00      	nop
 800c21e:	e7fe      	b.n	800c21e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c222:	2b00      	cmp	r3, #0
 800c224:	d10a      	bne.n	800c23c <xTaskCreateStatic+0x46>
	__asm volatile
 800c226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22a:	f383 8811 	msr	BASEPRI, r3
 800c22e:	f3bf 8f6f 	isb	sy
 800c232:	f3bf 8f4f 	dsb	sy
 800c236:	61fb      	str	r3, [r7, #28]
}
 800c238:	bf00      	nop
 800c23a:	e7fe      	b.n	800c23a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c23c:	23a0      	movs	r3, #160	; 0xa0
 800c23e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	2ba0      	cmp	r3, #160	; 0xa0
 800c244:	d00a      	beq.n	800c25c <xTaskCreateStatic+0x66>
	__asm volatile
 800c246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24a:	f383 8811 	msr	BASEPRI, r3
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f3bf 8f4f 	dsb	sy
 800c256:	61bb      	str	r3, [r7, #24]
}
 800c258:	bf00      	nop
 800c25a:	e7fe      	b.n	800c25a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c25c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c260:	2b00      	cmp	r3, #0
 800c262:	d01e      	beq.n	800c2a2 <xTaskCreateStatic+0xac>
 800c264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c266:	2b00      	cmp	r3, #0
 800c268:	d01b      	beq.n	800c2a2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c272:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c276:	2202      	movs	r2, #2
 800c278:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c27c:	2300      	movs	r3, #0
 800c27e:	9303      	str	r3, [sp, #12]
 800c280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c282:	9302      	str	r3, [sp, #8]
 800c284:	f107 0314 	add.w	r3, r7, #20
 800c288:	9301      	str	r3, [sp, #4]
 800c28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28c:	9300      	str	r3, [sp, #0]
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	68b9      	ldr	r1, [r7, #8]
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f000 f851 	bl	800c33c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c29a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c29c:	f000 f8ec 	bl	800c478 <prvAddNewTaskToReadyList>
 800c2a0:	e001      	b.n	800c2a6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c2a6:	697b      	ldr	r3, [r7, #20]
	}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3728      	adds	r7, #40	; 0x28
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b08c      	sub	sp, #48	; 0x30
 800c2b4:	af04      	add	r7, sp, #16
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	603b      	str	r3, [r7, #0]
 800c2bc:	4613      	mov	r3, r2
 800c2be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c2c0:	88fb      	ldrh	r3, [r7, #6]
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f000 feef 	bl	800d0a8 <pvPortMalloc>
 800c2ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d00e      	beq.n	800c2f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c2d2:	20a0      	movs	r0, #160	; 0xa0
 800c2d4:	f000 fee8 	bl	800d0a8 <pvPortMalloc>
 800c2d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d003      	beq.n	800c2e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	697a      	ldr	r2, [r7, #20]
 800c2e4:	631a      	str	r2, [r3, #48]	; 0x30
 800c2e6:	e005      	b.n	800c2f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c2e8:	6978      	ldr	r0, [r7, #20]
 800c2ea:	f000 ffa9 	bl	800d240 <vPortFree>
 800c2ee:	e001      	b.n	800c2f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d017      	beq.n	800c32a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c302:	88fa      	ldrh	r2, [r7, #6]
 800c304:	2300      	movs	r3, #0
 800c306:	9303      	str	r3, [sp, #12]
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	9302      	str	r3, [sp, #8]
 800c30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30e:	9301      	str	r3, [sp, #4]
 800c310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c312:	9300      	str	r3, [sp, #0]
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	68b9      	ldr	r1, [r7, #8]
 800c318:	68f8      	ldr	r0, [r7, #12]
 800c31a:	f000 f80f 	bl	800c33c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c31e:	69f8      	ldr	r0, [r7, #28]
 800c320:	f000 f8aa 	bl	800c478 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c324:	2301      	movs	r3, #1
 800c326:	61bb      	str	r3, [r7, #24]
 800c328:	e002      	b.n	800c330 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c32a:	f04f 33ff 	mov.w	r3, #4294967295
 800c32e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c330:	69bb      	ldr	r3, [r7, #24]
	}
 800c332:	4618      	mov	r0, r3
 800c334:	3720      	adds	r7, #32
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
	...

0800c33c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b088      	sub	sp, #32
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]
 800c348:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c354:	3b01      	subs	r3, #1
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	4413      	add	r3, r2
 800c35a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	f023 0307 	bic.w	r3, r3, #7
 800c362:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	f003 0307 	and.w	r3, r3, #7
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00a      	beq.n	800c384 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	617b      	str	r3, [r7, #20]
}
 800c380:	bf00      	nop
 800c382:	e7fe      	b.n	800c382 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d01f      	beq.n	800c3ca <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c38a:	2300      	movs	r3, #0
 800c38c:	61fb      	str	r3, [r7, #28]
 800c38e:	e012      	b.n	800c3b6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c390:	68ba      	ldr	r2, [r7, #8]
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	4413      	add	r3, r2
 800c396:	7819      	ldrb	r1, [r3, #0]
 800c398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	4413      	add	r3, r2
 800c39e:	3334      	adds	r3, #52	; 0x34
 800c3a0:	460a      	mov	r2, r1
 800c3a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c3a4:	68ba      	ldr	r2, [r7, #8]
 800c3a6:	69fb      	ldr	r3, [r7, #28]
 800c3a8:	4413      	add	r3, r2
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d006      	beq.n	800c3be <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	61fb      	str	r3, [r7, #28]
 800c3b6:	69fb      	ldr	r3, [r7, #28]
 800c3b8:	2b0f      	cmp	r3, #15
 800c3ba:	d9e9      	bls.n	800c390 <prvInitialiseNewTask+0x54>
 800c3bc:	e000      	b.n	800c3c0 <prvInitialiseNewTask+0x84>
			{
				break;
 800c3be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c3c8:	e003      	b.n	800c3d2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d4:	2b06      	cmp	r3, #6
 800c3d6:	d901      	bls.n	800c3dc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c3d8:	2306      	movs	r3, #6
 800c3da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3e6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f0:	3304      	adds	r3, #4
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7ff fe6b 	bl	800c0ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fa:	3318      	adds	r3, #24
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7ff fe66 	bl	800c0ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c406:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40a:	f1c3 0207 	rsb	r2, r3, #7
 800c40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c410:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c416:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41a:	2200      	movs	r2, #0
 800c41c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c422:	2200      	movs	r2, #0
 800c424:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42a:	334c      	adds	r3, #76	; 0x4c
 800c42c:	224c      	movs	r2, #76	; 0x4c
 800c42e:	2100      	movs	r1, #0
 800c430:	4618      	mov	r0, r3
 800c432:	f001 ff3b 	bl	800e2ac <memset>
 800c436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c438:	4a0c      	ldr	r2, [pc, #48]	; (800c46c <prvInitialiseNewTask+0x130>)
 800c43a:	651a      	str	r2, [r3, #80]	; 0x50
 800c43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43e:	4a0c      	ldr	r2, [pc, #48]	; (800c470 <prvInitialiseNewTask+0x134>)
 800c440:	655a      	str	r2, [r3, #84]	; 0x54
 800c442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c444:	4a0b      	ldr	r2, [pc, #44]	; (800c474 <prvInitialiseNewTask+0x138>)
 800c446:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c448:	683a      	ldr	r2, [r7, #0]
 800c44a:	68f9      	ldr	r1, [r7, #12]
 800c44c:	69b8      	ldr	r0, [r7, #24]
 800c44e:	f000 fc1f 	bl	800cc90 <pxPortInitialiseStack>
 800c452:	4602      	mov	r2, r0
 800c454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c456:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d002      	beq.n	800c464 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c462:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c464:	bf00      	nop
 800c466:	3720      	adds	r7, #32
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	20004dfc 	.word	0x20004dfc
 800c470:	20004e64 	.word	0x20004e64
 800c474:	20004ecc 	.word	0x20004ecc

0800c478 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c480:	f000 fd30 	bl	800cee4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c484:	4b2a      	ldr	r3, [pc, #168]	; (800c530 <prvAddNewTaskToReadyList+0xb8>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	3301      	adds	r3, #1
 800c48a:	4a29      	ldr	r2, [pc, #164]	; (800c530 <prvAddNewTaskToReadyList+0xb8>)
 800c48c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c48e:	4b29      	ldr	r3, [pc, #164]	; (800c534 <prvAddNewTaskToReadyList+0xbc>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d109      	bne.n	800c4aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c496:	4a27      	ldr	r2, [pc, #156]	; (800c534 <prvAddNewTaskToReadyList+0xbc>)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c49c:	4b24      	ldr	r3, [pc, #144]	; (800c530 <prvAddNewTaskToReadyList+0xb8>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d110      	bne.n	800c4c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c4a4:	f000 facc 	bl	800ca40 <prvInitialiseTaskLists>
 800c4a8:	e00d      	b.n	800c4c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c4aa:	4b23      	ldr	r3, [pc, #140]	; (800c538 <prvAddNewTaskToReadyList+0xc0>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d109      	bne.n	800c4c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c4b2:	4b20      	ldr	r3, [pc, #128]	; (800c534 <prvAddNewTaskToReadyList+0xbc>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d802      	bhi.n	800c4c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c4c0:	4a1c      	ldr	r2, [pc, #112]	; (800c534 <prvAddNewTaskToReadyList+0xbc>)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c4c6:	4b1d      	ldr	r3, [pc, #116]	; (800c53c <prvAddNewTaskToReadyList+0xc4>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	4a1b      	ldr	r2, [pc, #108]	; (800c53c <prvAddNewTaskToReadyList+0xc4>)
 800c4ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	409a      	lsls	r2, r3
 800c4d8:	4b19      	ldr	r3, [pc, #100]	; (800c540 <prvAddNewTaskToReadyList+0xc8>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	4a18      	ldr	r2, [pc, #96]	; (800c540 <prvAddNewTaskToReadyList+0xc8>)
 800c4e0:	6013      	str	r3, [r2, #0]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	4413      	add	r3, r2
 800c4ec:	009b      	lsls	r3, r3, #2
 800c4ee:	4a15      	ldr	r2, [pc, #84]	; (800c544 <prvAddNewTaskToReadyList+0xcc>)
 800c4f0:	441a      	add	r2, r3
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	3304      	adds	r3, #4
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	4610      	mov	r0, r2
 800c4fa:	f7ff fdf5 	bl	800c0e8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c4fe:	f000 fd21 	bl	800cf44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c502:	4b0d      	ldr	r3, [pc, #52]	; (800c538 <prvAddNewTaskToReadyList+0xc0>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00e      	beq.n	800c528 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c50a:	4b0a      	ldr	r3, [pc, #40]	; (800c534 <prvAddNewTaskToReadyList+0xbc>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c514:	429a      	cmp	r2, r3
 800c516:	d207      	bcs.n	800c528 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c518:	4b0b      	ldr	r3, [pc, #44]	; (800c548 <prvAddNewTaskToReadyList+0xd0>)
 800c51a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c51e:	601a      	str	r2, [r3, #0]
 800c520:	f3bf 8f4f 	dsb	sy
 800c524:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c528:	bf00      	nop
 800c52a:	3708      	adds	r7, #8
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	200011a8 	.word	0x200011a8
 800c534:	200010a8 	.word	0x200010a8
 800c538:	200011b4 	.word	0x200011b4
 800c53c:	200011c4 	.word	0x200011c4
 800c540:	200011b0 	.word	0x200011b0
 800c544:	200010ac 	.word	0x200010ac
 800c548:	e000ed04 	.word	0xe000ed04

0800c54c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c554:	2300      	movs	r3, #0
 800c556:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d017      	beq.n	800c58e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c55e:	4b13      	ldr	r3, [pc, #76]	; (800c5ac <vTaskDelay+0x60>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d00a      	beq.n	800c57c <vTaskDelay+0x30>
	__asm volatile
 800c566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56a:	f383 8811 	msr	BASEPRI, r3
 800c56e:	f3bf 8f6f 	isb	sy
 800c572:	f3bf 8f4f 	dsb	sy
 800c576:	60bb      	str	r3, [r7, #8]
}
 800c578:	bf00      	nop
 800c57a:	e7fe      	b.n	800c57a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c57c:	f000 f884 	bl	800c688 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c580:	2100      	movs	r1, #0
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 fb1e 	bl	800cbc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c588:	f000 f88c 	bl	800c6a4 <xTaskResumeAll>
 800c58c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d107      	bne.n	800c5a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c594:	4b06      	ldr	r3, [pc, #24]	; (800c5b0 <vTaskDelay+0x64>)
 800c596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c59a:	601a      	str	r2, [r3, #0]
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c5a4:	bf00      	nop
 800c5a6:	3710      	adds	r7, #16
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	200011d0 	.word	0x200011d0
 800c5b0:	e000ed04 	.word	0xe000ed04

0800c5b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b08a      	sub	sp, #40	; 0x28
 800c5b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c5c2:	463a      	mov	r2, r7
 800c5c4:	1d39      	adds	r1, r7, #4
 800c5c6:	f107 0308 	add.w	r3, r7, #8
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7f7 f82c 	bl	8003628 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c5d0:	6839      	ldr	r1, [r7, #0]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	68ba      	ldr	r2, [r7, #8]
 800c5d6:	9202      	str	r2, [sp, #8]
 800c5d8:	9301      	str	r3, [sp, #4]
 800c5da:	2300      	movs	r3, #0
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	2300      	movs	r3, #0
 800c5e0:	460a      	mov	r2, r1
 800c5e2:	4921      	ldr	r1, [pc, #132]	; (800c668 <vTaskStartScheduler+0xb4>)
 800c5e4:	4821      	ldr	r0, [pc, #132]	; (800c66c <vTaskStartScheduler+0xb8>)
 800c5e6:	f7ff fe06 	bl	800c1f6 <xTaskCreateStatic>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	4a20      	ldr	r2, [pc, #128]	; (800c670 <vTaskStartScheduler+0xbc>)
 800c5ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c5f0:	4b1f      	ldr	r3, [pc, #124]	; (800c670 <vTaskStartScheduler+0xbc>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d002      	beq.n	800c5fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	617b      	str	r3, [r7, #20]
 800c5fc:	e001      	b.n	800c602 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c5fe:	2300      	movs	r3, #0
 800c600:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	2b01      	cmp	r3, #1
 800c606:	d11b      	bne.n	800c640 <vTaskStartScheduler+0x8c>
	__asm volatile
 800c608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60c:	f383 8811 	msr	BASEPRI, r3
 800c610:	f3bf 8f6f 	isb	sy
 800c614:	f3bf 8f4f 	dsb	sy
 800c618:	613b      	str	r3, [r7, #16]
}
 800c61a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c61c:	4b15      	ldr	r3, [pc, #84]	; (800c674 <vTaskStartScheduler+0xc0>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	334c      	adds	r3, #76	; 0x4c
 800c622:	4a15      	ldr	r2, [pc, #84]	; (800c678 <vTaskStartScheduler+0xc4>)
 800c624:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c626:	4b15      	ldr	r3, [pc, #84]	; (800c67c <vTaskStartScheduler+0xc8>)
 800c628:	f04f 32ff 	mov.w	r2, #4294967295
 800c62c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c62e:	4b14      	ldr	r3, [pc, #80]	; (800c680 <vTaskStartScheduler+0xcc>)
 800c630:	2201      	movs	r2, #1
 800c632:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c634:	4b13      	ldr	r3, [pc, #76]	; (800c684 <vTaskStartScheduler+0xd0>)
 800c636:	2200      	movs	r2, #0
 800c638:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c63a:	f000 fbb1 	bl	800cda0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c63e:	e00e      	b.n	800c65e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c646:	d10a      	bne.n	800c65e <vTaskStartScheduler+0xaa>
	__asm volatile
 800c648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64c:	f383 8811 	msr	BASEPRI, r3
 800c650:	f3bf 8f6f 	isb	sy
 800c654:	f3bf 8f4f 	dsb	sy
 800c658:	60fb      	str	r3, [r7, #12]
}
 800c65a:	bf00      	nop
 800c65c:	e7fe      	b.n	800c65c <vTaskStartScheduler+0xa8>
}
 800c65e:	bf00      	nop
 800c660:	3718      	adds	r7, #24
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	08011658 	.word	0x08011658
 800c66c:	0800ca11 	.word	0x0800ca11
 800c670:	200011cc 	.word	0x200011cc
 800c674:	200010a8 	.word	0x200010a8
 800c678:	200000e0 	.word	0x200000e0
 800c67c:	200011c8 	.word	0x200011c8
 800c680:	200011b4 	.word	0x200011b4
 800c684:	200011ac 	.word	0x200011ac

0800c688 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c688:	b480      	push	{r7}
 800c68a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c68c:	4b04      	ldr	r3, [pc, #16]	; (800c6a0 <vTaskSuspendAll+0x18>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	3301      	adds	r3, #1
 800c692:	4a03      	ldr	r2, [pc, #12]	; (800c6a0 <vTaskSuspendAll+0x18>)
 800c694:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c696:	bf00      	nop
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr
 800c6a0:	200011d0 	.word	0x200011d0

0800c6a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c6b2:	4b41      	ldr	r3, [pc, #260]	; (800c7b8 <xTaskResumeAll+0x114>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d10a      	bne.n	800c6d0 <xTaskResumeAll+0x2c>
	__asm volatile
 800c6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6be:	f383 8811 	msr	BASEPRI, r3
 800c6c2:	f3bf 8f6f 	isb	sy
 800c6c6:	f3bf 8f4f 	dsb	sy
 800c6ca:	603b      	str	r3, [r7, #0]
}
 800c6cc:	bf00      	nop
 800c6ce:	e7fe      	b.n	800c6ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c6d0:	f000 fc08 	bl	800cee4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c6d4:	4b38      	ldr	r3, [pc, #224]	; (800c7b8 <xTaskResumeAll+0x114>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	3b01      	subs	r3, #1
 800c6da:	4a37      	ldr	r2, [pc, #220]	; (800c7b8 <xTaskResumeAll+0x114>)
 800c6dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6de:	4b36      	ldr	r3, [pc, #216]	; (800c7b8 <xTaskResumeAll+0x114>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d161      	bne.n	800c7aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c6e6:	4b35      	ldr	r3, [pc, #212]	; (800c7bc <xTaskResumeAll+0x118>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d05d      	beq.n	800c7aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c6ee:	e02e      	b.n	800c74e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6f0:	4b33      	ldr	r3, [pc, #204]	; (800c7c0 <xTaskResumeAll+0x11c>)
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	68db      	ldr	r3, [r3, #12]
 800c6f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	3318      	adds	r3, #24
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7ff fd50 	bl	800c1a2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	3304      	adds	r3, #4
 800c706:	4618      	mov	r0, r3
 800c708:	f7ff fd4b 	bl	800c1a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c710:	2201      	movs	r2, #1
 800c712:	409a      	lsls	r2, r3
 800c714:	4b2b      	ldr	r3, [pc, #172]	; (800c7c4 <xTaskResumeAll+0x120>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4313      	orrs	r3, r2
 800c71a:	4a2a      	ldr	r2, [pc, #168]	; (800c7c4 <xTaskResumeAll+0x120>)
 800c71c:	6013      	str	r3, [r2, #0]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c722:	4613      	mov	r3, r2
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	4413      	add	r3, r2
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	4a27      	ldr	r2, [pc, #156]	; (800c7c8 <xTaskResumeAll+0x124>)
 800c72c:	441a      	add	r2, r3
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	3304      	adds	r3, #4
 800c732:	4619      	mov	r1, r3
 800c734:	4610      	mov	r0, r2
 800c736:	f7ff fcd7 	bl	800c0e8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c73e:	4b23      	ldr	r3, [pc, #140]	; (800c7cc <xTaskResumeAll+0x128>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c744:	429a      	cmp	r2, r3
 800c746:	d302      	bcc.n	800c74e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c748:	4b21      	ldr	r3, [pc, #132]	; (800c7d0 <xTaskResumeAll+0x12c>)
 800c74a:	2201      	movs	r2, #1
 800c74c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c74e:	4b1c      	ldr	r3, [pc, #112]	; (800c7c0 <xTaskResumeAll+0x11c>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1cc      	bne.n	800c6f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d001      	beq.n	800c760 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c75c:	f000 fa12 	bl	800cb84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c760:	4b1c      	ldr	r3, [pc, #112]	; (800c7d4 <xTaskResumeAll+0x130>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d010      	beq.n	800c78e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c76c:	f000 f836 	bl	800c7dc <xTaskIncrementTick>
 800c770:	4603      	mov	r3, r0
 800c772:	2b00      	cmp	r3, #0
 800c774:	d002      	beq.n	800c77c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c776:	4b16      	ldr	r3, [pc, #88]	; (800c7d0 <xTaskResumeAll+0x12c>)
 800c778:	2201      	movs	r2, #1
 800c77a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	3b01      	subs	r3, #1
 800c780:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1f1      	bne.n	800c76c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c788:	4b12      	ldr	r3, [pc, #72]	; (800c7d4 <xTaskResumeAll+0x130>)
 800c78a:	2200      	movs	r2, #0
 800c78c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c78e:	4b10      	ldr	r3, [pc, #64]	; (800c7d0 <xTaskResumeAll+0x12c>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d009      	beq.n	800c7aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c796:	2301      	movs	r3, #1
 800c798:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c79a:	4b0f      	ldr	r3, [pc, #60]	; (800c7d8 <xTaskResumeAll+0x134>)
 800c79c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7a0:	601a      	str	r2, [r3, #0]
 800c7a2:	f3bf 8f4f 	dsb	sy
 800c7a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c7aa:	f000 fbcb 	bl	800cf44 <vPortExitCritical>

	return xAlreadyYielded;
 800c7ae:	68bb      	ldr	r3, [r7, #8]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3710      	adds	r7, #16
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	200011d0 	.word	0x200011d0
 800c7bc:	200011a8 	.word	0x200011a8
 800c7c0:	20001168 	.word	0x20001168
 800c7c4:	200011b0 	.word	0x200011b0
 800c7c8:	200010ac 	.word	0x200010ac
 800c7cc:	200010a8 	.word	0x200010a8
 800c7d0:	200011bc 	.word	0x200011bc
 800c7d4:	200011b8 	.word	0x200011b8
 800c7d8:	e000ed04 	.word	0xe000ed04

0800c7dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b086      	sub	sp, #24
 800c7e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7e6:	4b4e      	ldr	r3, [pc, #312]	; (800c920 <xTaskIncrementTick+0x144>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	f040 808e 	bne.w	800c90c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c7f0:	4b4c      	ldr	r3, [pc, #304]	; (800c924 <xTaskIncrementTick+0x148>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c7f8:	4a4a      	ldr	r2, [pc, #296]	; (800c924 <xTaskIncrementTick+0x148>)
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d120      	bne.n	800c846 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c804:	4b48      	ldr	r3, [pc, #288]	; (800c928 <xTaskIncrementTick+0x14c>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00a      	beq.n	800c824 <xTaskIncrementTick+0x48>
	__asm volatile
 800c80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c812:	f383 8811 	msr	BASEPRI, r3
 800c816:	f3bf 8f6f 	isb	sy
 800c81a:	f3bf 8f4f 	dsb	sy
 800c81e:	603b      	str	r3, [r7, #0]
}
 800c820:	bf00      	nop
 800c822:	e7fe      	b.n	800c822 <xTaskIncrementTick+0x46>
 800c824:	4b40      	ldr	r3, [pc, #256]	; (800c928 <xTaskIncrementTick+0x14c>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	60fb      	str	r3, [r7, #12]
 800c82a:	4b40      	ldr	r3, [pc, #256]	; (800c92c <xTaskIncrementTick+0x150>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4a3e      	ldr	r2, [pc, #248]	; (800c928 <xTaskIncrementTick+0x14c>)
 800c830:	6013      	str	r3, [r2, #0]
 800c832:	4a3e      	ldr	r2, [pc, #248]	; (800c92c <xTaskIncrementTick+0x150>)
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	6013      	str	r3, [r2, #0]
 800c838:	4b3d      	ldr	r3, [pc, #244]	; (800c930 <xTaskIncrementTick+0x154>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	3301      	adds	r3, #1
 800c83e:	4a3c      	ldr	r2, [pc, #240]	; (800c930 <xTaskIncrementTick+0x154>)
 800c840:	6013      	str	r3, [r2, #0]
 800c842:	f000 f99f 	bl	800cb84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c846:	4b3b      	ldr	r3, [pc, #236]	; (800c934 <xTaskIncrementTick+0x158>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	693a      	ldr	r2, [r7, #16]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d348      	bcc.n	800c8e2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c850:	4b35      	ldr	r3, [pc, #212]	; (800c928 <xTaskIncrementTick+0x14c>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d104      	bne.n	800c864 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c85a:	4b36      	ldr	r3, [pc, #216]	; (800c934 <xTaskIncrementTick+0x158>)
 800c85c:	f04f 32ff 	mov.w	r2, #4294967295
 800c860:	601a      	str	r2, [r3, #0]
					break;
 800c862:	e03e      	b.n	800c8e2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c864:	4b30      	ldr	r3, [pc, #192]	; (800c928 <xTaskIncrementTick+0x14c>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c874:	693a      	ldr	r2, [r7, #16]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d203      	bcs.n	800c884 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c87c:	4a2d      	ldr	r2, [pc, #180]	; (800c934 <xTaskIncrementTick+0x158>)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c882:	e02e      	b.n	800c8e2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	3304      	adds	r3, #4
 800c888:	4618      	mov	r0, r3
 800c88a:	f7ff fc8a 	bl	800c1a2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c892:	2b00      	cmp	r3, #0
 800c894:	d004      	beq.n	800c8a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	3318      	adds	r3, #24
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7ff fc81 	bl	800c1a2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	409a      	lsls	r2, r3
 800c8a8:	4b23      	ldr	r3, [pc, #140]	; (800c938 <xTaskIncrementTick+0x15c>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	4a22      	ldr	r2, [pc, #136]	; (800c938 <xTaskIncrementTick+0x15c>)
 800c8b0:	6013      	str	r3, [r2, #0]
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	4413      	add	r3, r2
 800c8bc:	009b      	lsls	r3, r3, #2
 800c8be:	4a1f      	ldr	r2, [pc, #124]	; (800c93c <xTaskIncrementTick+0x160>)
 800c8c0:	441a      	add	r2, r3
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	3304      	adds	r3, #4
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	4610      	mov	r0, r2
 800c8ca:	f7ff fc0d 	bl	800c0e8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8d2:	4b1b      	ldr	r3, [pc, #108]	; (800c940 <xTaskIncrementTick+0x164>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d3b9      	bcc.n	800c850 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8e0:	e7b6      	b.n	800c850 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c8e2:	4b17      	ldr	r3, [pc, #92]	; (800c940 <xTaskIncrementTick+0x164>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8e8:	4914      	ldr	r1, [pc, #80]	; (800c93c <xTaskIncrementTick+0x160>)
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	4413      	add	r3, r2
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	440b      	add	r3, r1
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d901      	bls.n	800c8fe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c8fe:	4b11      	ldr	r3, [pc, #68]	; (800c944 <xTaskIncrementTick+0x168>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d007      	beq.n	800c916 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c906:	2301      	movs	r3, #1
 800c908:	617b      	str	r3, [r7, #20]
 800c90a:	e004      	b.n	800c916 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c90c:	4b0e      	ldr	r3, [pc, #56]	; (800c948 <xTaskIncrementTick+0x16c>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	3301      	adds	r3, #1
 800c912:	4a0d      	ldr	r2, [pc, #52]	; (800c948 <xTaskIncrementTick+0x16c>)
 800c914:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c916:	697b      	ldr	r3, [r7, #20]
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3718      	adds	r7, #24
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	200011d0 	.word	0x200011d0
 800c924:	200011ac 	.word	0x200011ac
 800c928:	20001160 	.word	0x20001160
 800c92c:	20001164 	.word	0x20001164
 800c930:	200011c0 	.word	0x200011c0
 800c934:	200011c8 	.word	0x200011c8
 800c938:	200011b0 	.word	0x200011b0
 800c93c:	200010ac 	.word	0x200010ac
 800c940:	200010a8 	.word	0x200010a8
 800c944:	200011bc 	.word	0x200011bc
 800c948:	200011b8 	.word	0x200011b8

0800c94c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c94c:	b480      	push	{r7}
 800c94e:	b087      	sub	sp, #28
 800c950:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c952:	4b29      	ldr	r3, [pc, #164]	; (800c9f8 <vTaskSwitchContext+0xac>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d003      	beq.n	800c962 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c95a:	4b28      	ldr	r3, [pc, #160]	; (800c9fc <vTaskSwitchContext+0xb0>)
 800c95c:	2201      	movs	r2, #1
 800c95e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c960:	e044      	b.n	800c9ec <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c962:	4b26      	ldr	r3, [pc, #152]	; (800c9fc <vTaskSwitchContext+0xb0>)
 800c964:	2200      	movs	r2, #0
 800c966:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c968:	4b25      	ldr	r3, [pc, #148]	; (800ca00 <vTaskSwitchContext+0xb4>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	fab3 f383 	clz	r3, r3
 800c974:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c976:	7afb      	ldrb	r3, [r7, #11]
 800c978:	f1c3 031f 	rsb	r3, r3, #31
 800c97c:	617b      	str	r3, [r7, #20]
 800c97e:	4921      	ldr	r1, [pc, #132]	; (800ca04 <vTaskSwitchContext+0xb8>)
 800c980:	697a      	ldr	r2, [r7, #20]
 800c982:	4613      	mov	r3, r2
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	4413      	add	r3, r2
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	440b      	add	r3, r1
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d10a      	bne.n	800c9a8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c996:	f383 8811 	msr	BASEPRI, r3
 800c99a:	f3bf 8f6f 	isb	sy
 800c99e:	f3bf 8f4f 	dsb	sy
 800c9a2:	607b      	str	r3, [r7, #4]
}
 800c9a4:	bf00      	nop
 800c9a6:	e7fe      	b.n	800c9a6 <vTaskSwitchContext+0x5a>
 800c9a8:	697a      	ldr	r2, [r7, #20]
 800c9aa:	4613      	mov	r3, r2
 800c9ac:	009b      	lsls	r3, r3, #2
 800c9ae:	4413      	add	r3, r2
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	4a14      	ldr	r2, [pc, #80]	; (800ca04 <vTaskSwitchContext+0xb8>)
 800c9b4:	4413      	add	r3, r2
 800c9b6:	613b      	str	r3, [r7, #16]
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	685a      	ldr	r2, [r3, #4]
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	605a      	str	r2, [r3, #4]
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	685a      	ldr	r2, [r3, #4]
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	3308      	adds	r3, #8
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d104      	bne.n	800c9d8 <vTaskSwitchContext+0x8c>
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	685a      	ldr	r2, [r3, #4]
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	605a      	str	r2, [r3, #4]
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	68db      	ldr	r3, [r3, #12]
 800c9de:	4a0a      	ldr	r2, [pc, #40]	; (800ca08 <vTaskSwitchContext+0xbc>)
 800c9e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c9e2:	4b09      	ldr	r3, [pc, #36]	; (800ca08 <vTaskSwitchContext+0xbc>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	334c      	adds	r3, #76	; 0x4c
 800c9e8:	4a08      	ldr	r2, [pc, #32]	; (800ca0c <vTaskSwitchContext+0xc0>)
 800c9ea:	6013      	str	r3, [r2, #0]
}
 800c9ec:	bf00      	nop
 800c9ee:	371c      	adds	r7, #28
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr
 800c9f8:	200011d0 	.word	0x200011d0
 800c9fc:	200011bc 	.word	0x200011bc
 800ca00:	200011b0 	.word	0x200011b0
 800ca04:	200010ac 	.word	0x200010ac
 800ca08:	200010a8 	.word	0x200010a8
 800ca0c:	200000e0 	.word	0x200000e0

0800ca10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ca18:	f000 f852 	bl	800cac0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ca1c:	4b06      	ldr	r3, [pc, #24]	; (800ca38 <prvIdleTask+0x28>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d9f9      	bls.n	800ca18 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ca24:	4b05      	ldr	r3, [pc, #20]	; (800ca3c <prvIdleTask+0x2c>)
 800ca26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca2a:	601a      	str	r2, [r3, #0]
 800ca2c:	f3bf 8f4f 	dsb	sy
 800ca30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ca34:	e7f0      	b.n	800ca18 <prvIdleTask+0x8>
 800ca36:	bf00      	nop
 800ca38:	200010ac 	.word	0x200010ac
 800ca3c:	e000ed04 	.word	0xe000ed04

0800ca40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca46:	2300      	movs	r3, #0
 800ca48:	607b      	str	r3, [r7, #4]
 800ca4a:	e00c      	b.n	800ca66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	4613      	mov	r3, r2
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	4413      	add	r3, r2
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	4a12      	ldr	r2, [pc, #72]	; (800caa0 <prvInitialiseTaskLists+0x60>)
 800ca58:	4413      	add	r3, r2
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7ff fb17 	bl	800c08e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	3301      	adds	r3, #1
 800ca64:	607b      	str	r3, [r7, #4]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2b06      	cmp	r3, #6
 800ca6a:	d9ef      	bls.n	800ca4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ca6c:	480d      	ldr	r0, [pc, #52]	; (800caa4 <prvInitialiseTaskLists+0x64>)
 800ca6e:	f7ff fb0e 	bl	800c08e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ca72:	480d      	ldr	r0, [pc, #52]	; (800caa8 <prvInitialiseTaskLists+0x68>)
 800ca74:	f7ff fb0b 	bl	800c08e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ca78:	480c      	ldr	r0, [pc, #48]	; (800caac <prvInitialiseTaskLists+0x6c>)
 800ca7a:	f7ff fb08 	bl	800c08e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ca7e:	480c      	ldr	r0, [pc, #48]	; (800cab0 <prvInitialiseTaskLists+0x70>)
 800ca80:	f7ff fb05 	bl	800c08e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ca84:	480b      	ldr	r0, [pc, #44]	; (800cab4 <prvInitialiseTaskLists+0x74>)
 800ca86:	f7ff fb02 	bl	800c08e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ca8a:	4b0b      	ldr	r3, [pc, #44]	; (800cab8 <prvInitialiseTaskLists+0x78>)
 800ca8c:	4a05      	ldr	r2, [pc, #20]	; (800caa4 <prvInitialiseTaskLists+0x64>)
 800ca8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ca90:	4b0a      	ldr	r3, [pc, #40]	; (800cabc <prvInitialiseTaskLists+0x7c>)
 800ca92:	4a05      	ldr	r2, [pc, #20]	; (800caa8 <prvInitialiseTaskLists+0x68>)
 800ca94:	601a      	str	r2, [r3, #0]
}
 800ca96:	bf00      	nop
 800ca98:	3708      	adds	r7, #8
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	200010ac 	.word	0x200010ac
 800caa4:	20001138 	.word	0x20001138
 800caa8:	2000114c 	.word	0x2000114c
 800caac:	20001168 	.word	0x20001168
 800cab0:	2000117c 	.word	0x2000117c
 800cab4:	20001194 	.word	0x20001194
 800cab8:	20001160 	.word	0x20001160
 800cabc:	20001164 	.word	0x20001164

0800cac0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cac6:	e019      	b.n	800cafc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cac8:	f000 fa0c 	bl	800cee4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cacc:	4b10      	ldr	r3, [pc, #64]	; (800cb10 <prvCheckTasksWaitingTermination+0x50>)
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	3304      	adds	r3, #4
 800cad8:	4618      	mov	r0, r3
 800cada:	f7ff fb62 	bl	800c1a2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cade:	4b0d      	ldr	r3, [pc, #52]	; (800cb14 <prvCheckTasksWaitingTermination+0x54>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	3b01      	subs	r3, #1
 800cae4:	4a0b      	ldr	r2, [pc, #44]	; (800cb14 <prvCheckTasksWaitingTermination+0x54>)
 800cae6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cae8:	4b0b      	ldr	r3, [pc, #44]	; (800cb18 <prvCheckTasksWaitingTermination+0x58>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	3b01      	subs	r3, #1
 800caee:	4a0a      	ldr	r2, [pc, #40]	; (800cb18 <prvCheckTasksWaitingTermination+0x58>)
 800caf0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800caf2:	f000 fa27 	bl	800cf44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 f810 	bl	800cb1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cafc:	4b06      	ldr	r3, [pc, #24]	; (800cb18 <prvCheckTasksWaitingTermination+0x58>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d1e1      	bne.n	800cac8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cb04:	bf00      	nop
 800cb06:	bf00      	nop
 800cb08:	3708      	adds	r7, #8
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	2000117c 	.word	0x2000117c
 800cb14:	200011a8 	.word	0x200011a8
 800cb18:	20001190 	.word	0x20001190

0800cb1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	334c      	adds	r3, #76	; 0x4c
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f001 fbdb 	bl	800e2e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d108      	bne.n	800cb4a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f000 fb7f 	bl	800d240 <vPortFree>
				vPortFree( pxTCB );
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 fb7c 	bl	800d240 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cb48:	e018      	b.n	800cb7c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d103      	bne.n	800cb5c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 fb73 	bl	800d240 <vPortFree>
	}
 800cb5a:	e00f      	b.n	800cb7c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800cb62:	2b02      	cmp	r3, #2
 800cb64:	d00a      	beq.n	800cb7c <prvDeleteTCB+0x60>
	__asm volatile
 800cb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb6a:	f383 8811 	msr	BASEPRI, r3
 800cb6e:	f3bf 8f6f 	isb	sy
 800cb72:	f3bf 8f4f 	dsb	sy
 800cb76:	60fb      	str	r3, [r7, #12]
}
 800cb78:	bf00      	nop
 800cb7a:	e7fe      	b.n	800cb7a <prvDeleteTCB+0x5e>
	}
 800cb7c:	bf00      	nop
 800cb7e:	3710      	adds	r7, #16
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb8a:	4b0c      	ldr	r3, [pc, #48]	; (800cbbc <prvResetNextTaskUnblockTime+0x38>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d104      	bne.n	800cb9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb94:	4b0a      	ldr	r3, [pc, #40]	; (800cbc0 <prvResetNextTaskUnblockTime+0x3c>)
 800cb96:	f04f 32ff 	mov.w	r2, #4294967295
 800cb9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb9c:	e008      	b.n	800cbb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb9e:	4b07      	ldr	r3, [pc, #28]	; (800cbbc <prvResetNextTaskUnblockTime+0x38>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	4a04      	ldr	r2, [pc, #16]	; (800cbc0 <prvResetNextTaskUnblockTime+0x3c>)
 800cbae:	6013      	str	r3, [r2, #0]
}
 800cbb0:	bf00      	nop
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr
 800cbbc:	20001160 	.word	0x20001160
 800cbc0:	200011c8 	.word	0x200011c8

0800cbc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cbce:	4b29      	ldr	r3, [pc, #164]	; (800cc74 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbd4:	4b28      	ldr	r3, [pc, #160]	; (800cc78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	3304      	adds	r3, #4
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7ff fae1 	bl	800c1a2 <uxListRemove>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d10b      	bne.n	800cbfe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cbe6:	4b24      	ldr	r3, [pc, #144]	; (800cc78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbec:	2201      	movs	r2, #1
 800cbee:	fa02 f303 	lsl.w	r3, r2, r3
 800cbf2:	43da      	mvns	r2, r3
 800cbf4:	4b21      	ldr	r3, [pc, #132]	; (800cc7c <prvAddCurrentTaskToDelayedList+0xb8>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4013      	ands	r3, r2
 800cbfa:	4a20      	ldr	r2, [pc, #128]	; (800cc7c <prvAddCurrentTaskToDelayedList+0xb8>)
 800cbfc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc04:	d10a      	bne.n	800cc1c <prvAddCurrentTaskToDelayedList+0x58>
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d007      	beq.n	800cc1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc0c:	4b1a      	ldr	r3, [pc, #104]	; (800cc78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	3304      	adds	r3, #4
 800cc12:	4619      	mov	r1, r3
 800cc14:	481a      	ldr	r0, [pc, #104]	; (800cc80 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cc16:	f7ff fa67 	bl	800c0e8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cc1a:	e026      	b.n	800cc6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cc1c:	68fa      	ldr	r2, [r7, #12]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	4413      	add	r3, r2
 800cc22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cc24:	4b14      	ldr	r3, [pc, #80]	; (800cc78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	68ba      	ldr	r2, [r7, #8]
 800cc2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cc2c:	68ba      	ldr	r2, [r7, #8]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d209      	bcs.n	800cc48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc34:	4b13      	ldr	r3, [pc, #76]	; (800cc84 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	4b0f      	ldr	r3, [pc, #60]	; (800cc78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	3304      	adds	r3, #4
 800cc3e:	4619      	mov	r1, r3
 800cc40:	4610      	mov	r0, r2
 800cc42:	f7ff fa75 	bl	800c130 <vListInsert>
}
 800cc46:	e010      	b.n	800cc6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc48:	4b0f      	ldr	r3, [pc, #60]	; (800cc88 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	4b0a      	ldr	r3, [pc, #40]	; (800cc78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	3304      	adds	r3, #4
 800cc52:	4619      	mov	r1, r3
 800cc54:	4610      	mov	r0, r2
 800cc56:	f7ff fa6b 	bl	800c130 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cc5a:	4b0c      	ldr	r3, [pc, #48]	; (800cc8c <prvAddCurrentTaskToDelayedList+0xc8>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	68ba      	ldr	r2, [r7, #8]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d202      	bcs.n	800cc6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cc64:	4a09      	ldr	r2, [pc, #36]	; (800cc8c <prvAddCurrentTaskToDelayedList+0xc8>)
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	6013      	str	r3, [r2, #0]
}
 800cc6a:	bf00      	nop
 800cc6c:	3710      	adds	r7, #16
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	200011ac 	.word	0x200011ac
 800cc78:	200010a8 	.word	0x200010a8
 800cc7c:	200011b0 	.word	0x200011b0
 800cc80:	20001194 	.word	0x20001194
 800cc84:	20001164 	.word	0x20001164
 800cc88:	20001160 	.word	0x20001160
 800cc8c:	200011c8 	.word	0x200011c8

0800cc90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc90:	b480      	push	{r7}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	3b04      	subs	r3, #4
 800cca0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cca8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	3b04      	subs	r3, #4
 800ccae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	f023 0201 	bic.w	r2, r3, #1
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	3b04      	subs	r3, #4
 800ccbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ccc0:	4a0c      	ldr	r2, [pc, #48]	; (800ccf4 <pxPortInitialiseStack+0x64>)
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	3b14      	subs	r3, #20
 800ccca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	3b04      	subs	r3, #4
 800ccd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f06f 0202 	mvn.w	r2, #2
 800ccde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	3b20      	subs	r3, #32
 800cce4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cce6:	68fb      	ldr	r3, [r7, #12]
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3714      	adds	r7, #20
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr
 800ccf4:	0800ccf9 	.word	0x0800ccf9

0800ccf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cd02:	4b12      	ldr	r3, [pc, #72]	; (800cd4c <prvTaskExitError+0x54>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd0a:	d00a      	beq.n	800cd22 <prvTaskExitError+0x2a>
	__asm volatile
 800cd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd10:	f383 8811 	msr	BASEPRI, r3
 800cd14:	f3bf 8f6f 	isb	sy
 800cd18:	f3bf 8f4f 	dsb	sy
 800cd1c:	60fb      	str	r3, [r7, #12]
}
 800cd1e:	bf00      	nop
 800cd20:	e7fe      	b.n	800cd20 <prvTaskExitError+0x28>
	__asm volatile
 800cd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd26:	f383 8811 	msr	BASEPRI, r3
 800cd2a:	f3bf 8f6f 	isb	sy
 800cd2e:	f3bf 8f4f 	dsb	sy
 800cd32:	60bb      	str	r3, [r7, #8]
}
 800cd34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cd36:	bf00      	nop
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d0fc      	beq.n	800cd38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cd3e:	bf00      	nop
 800cd40:	bf00      	nop
 800cd42:	3714      	adds	r7, #20
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr
 800cd4c:	20000084 	.word	0x20000084

0800cd50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cd50:	4b07      	ldr	r3, [pc, #28]	; (800cd70 <pxCurrentTCBConst2>)
 800cd52:	6819      	ldr	r1, [r3, #0]
 800cd54:	6808      	ldr	r0, [r1, #0]
 800cd56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5a:	f380 8809 	msr	PSP, r0
 800cd5e:	f3bf 8f6f 	isb	sy
 800cd62:	f04f 0000 	mov.w	r0, #0
 800cd66:	f380 8811 	msr	BASEPRI, r0
 800cd6a:	4770      	bx	lr
 800cd6c:	f3af 8000 	nop.w

0800cd70 <pxCurrentTCBConst2>:
 800cd70:	200010a8 	.word	0x200010a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cd74:	bf00      	nop
 800cd76:	bf00      	nop

0800cd78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cd78:	4808      	ldr	r0, [pc, #32]	; (800cd9c <prvPortStartFirstTask+0x24>)
 800cd7a:	6800      	ldr	r0, [r0, #0]
 800cd7c:	6800      	ldr	r0, [r0, #0]
 800cd7e:	f380 8808 	msr	MSP, r0
 800cd82:	f04f 0000 	mov.w	r0, #0
 800cd86:	f380 8814 	msr	CONTROL, r0
 800cd8a:	b662      	cpsie	i
 800cd8c:	b661      	cpsie	f
 800cd8e:	f3bf 8f4f 	dsb	sy
 800cd92:	f3bf 8f6f 	isb	sy
 800cd96:	df00      	svc	0
 800cd98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cd9a:	bf00      	nop
 800cd9c:	e000ed08 	.word	0xe000ed08

0800cda0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b086      	sub	sp, #24
 800cda4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cda6:	4b46      	ldr	r3, [pc, #280]	; (800cec0 <xPortStartScheduler+0x120>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a46      	ldr	r2, [pc, #280]	; (800cec4 <xPortStartScheduler+0x124>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d10a      	bne.n	800cdc6 <xPortStartScheduler+0x26>
	__asm volatile
 800cdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb4:	f383 8811 	msr	BASEPRI, r3
 800cdb8:	f3bf 8f6f 	isb	sy
 800cdbc:	f3bf 8f4f 	dsb	sy
 800cdc0:	613b      	str	r3, [r7, #16]
}
 800cdc2:	bf00      	nop
 800cdc4:	e7fe      	b.n	800cdc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cdc6:	4b3e      	ldr	r3, [pc, #248]	; (800cec0 <xPortStartScheduler+0x120>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4a3f      	ldr	r2, [pc, #252]	; (800cec8 <xPortStartScheduler+0x128>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d10a      	bne.n	800cde6 <xPortStartScheduler+0x46>
	__asm volatile
 800cdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd4:	f383 8811 	msr	BASEPRI, r3
 800cdd8:	f3bf 8f6f 	isb	sy
 800cddc:	f3bf 8f4f 	dsb	sy
 800cde0:	60fb      	str	r3, [r7, #12]
}
 800cde2:	bf00      	nop
 800cde4:	e7fe      	b.n	800cde4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cde6:	4b39      	ldr	r3, [pc, #228]	; (800cecc <xPortStartScheduler+0x12c>)
 800cde8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	22ff      	movs	r2, #255	; 0xff
 800cdf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	b2db      	uxtb	r3, r3
 800cdfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ce00:	78fb      	ldrb	r3, [r7, #3]
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ce08:	b2da      	uxtb	r2, r3
 800ce0a:	4b31      	ldr	r3, [pc, #196]	; (800ced0 <xPortStartScheduler+0x130>)
 800ce0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ce0e:	4b31      	ldr	r3, [pc, #196]	; (800ced4 <xPortStartScheduler+0x134>)
 800ce10:	2207      	movs	r2, #7
 800ce12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce14:	e009      	b.n	800ce2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ce16:	4b2f      	ldr	r3, [pc, #188]	; (800ced4 <xPortStartScheduler+0x134>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	3b01      	subs	r3, #1
 800ce1c:	4a2d      	ldr	r2, [pc, #180]	; (800ced4 <xPortStartScheduler+0x134>)
 800ce1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ce20:	78fb      	ldrb	r3, [r7, #3]
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	005b      	lsls	r3, r3, #1
 800ce26:	b2db      	uxtb	r3, r3
 800ce28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce2a:	78fb      	ldrb	r3, [r7, #3]
 800ce2c:	b2db      	uxtb	r3, r3
 800ce2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce32:	2b80      	cmp	r3, #128	; 0x80
 800ce34:	d0ef      	beq.n	800ce16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ce36:	4b27      	ldr	r3, [pc, #156]	; (800ced4 <xPortStartScheduler+0x134>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f1c3 0307 	rsb	r3, r3, #7
 800ce3e:	2b04      	cmp	r3, #4
 800ce40:	d00a      	beq.n	800ce58 <xPortStartScheduler+0xb8>
	__asm volatile
 800ce42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce46:	f383 8811 	msr	BASEPRI, r3
 800ce4a:	f3bf 8f6f 	isb	sy
 800ce4e:	f3bf 8f4f 	dsb	sy
 800ce52:	60bb      	str	r3, [r7, #8]
}
 800ce54:	bf00      	nop
 800ce56:	e7fe      	b.n	800ce56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ce58:	4b1e      	ldr	r3, [pc, #120]	; (800ced4 <xPortStartScheduler+0x134>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	021b      	lsls	r3, r3, #8
 800ce5e:	4a1d      	ldr	r2, [pc, #116]	; (800ced4 <xPortStartScheduler+0x134>)
 800ce60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce62:	4b1c      	ldr	r3, [pc, #112]	; (800ced4 <xPortStartScheduler+0x134>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ce6a:	4a1a      	ldr	r2, [pc, #104]	; (800ced4 <xPortStartScheduler+0x134>)
 800ce6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	b2da      	uxtb	r2, r3
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce76:	4b18      	ldr	r3, [pc, #96]	; (800ced8 <xPortStartScheduler+0x138>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4a17      	ldr	r2, [pc, #92]	; (800ced8 <xPortStartScheduler+0x138>)
 800ce7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ce80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce82:	4b15      	ldr	r3, [pc, #84]	; (800ced8 <xPortStartScheduler+0x138>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	4a14      	ldr	r2, [pc, #80]	; (800ced8 <xPortStartScheduler+0x138>)
 800ce88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ce8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce8e:	f000 f8dd 	bl	800d04c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce92:	4b12      	ldr	r3, [pc, #72]	; (800cedc <xPortStartScheduler+0x13c>)
 800ce94:	2200      	movs	r2, #0
 800ce96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ce98:	f000 f8fc 	bl	800d094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ce9c:	4b10      	ldr	r3, [pc, #64]	; (800cee0 <xPortStartScheduler+0x140>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a0f      	ldr	r2, [pc, #60]	; (800cee0 <xPortStartScheduler+0x140>)
 800cea2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cea6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cea8:	f7ff ff66 	bl	800cd78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ceac:	f7ff fd4e 	bl	800c94c <vTaskSwitchContext>
	prvTaskExitError();
 800ceb0:	f7ff ff22 	bl	800ccf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ceb4:	2300      	movs	r3, #0
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3718      	adds	r7, #24
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	e000ed00 	.word	0xe000ed00
 800cec4:	410fc271 	.word	0x410fc271
 800cec8:	410fc270 	.word	0x410fc270
 800cecc:	e000e400 	.word	0xe000e400
 800ced0:	200011d4 	.word	0x200011d4
 800ced4:	200011d8 	.word	0x200011d8
 800ced8:	e000ed20 	.word	0xe000ed20
 800cedc:	20000084 	.word	0x20000084
 800cee0:	e000ef34 	.word	0xe000ef34

0800cee4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
	__asm volatile
 800ceea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceee:	f383 8811 	msr	BASEPRI, r3
 800cef2:	f3bf 8f6f 	isb	sy
 800cef6:	f3bf 8f4f 	dsb	sy
 800cefa:	607b      	str	r3, [r7, #4]
}
 800cefc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cefe:	4b0f      	ldr	r3, [pc, #60]	; (800cf3c <vPortEnterCritical+0x58>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	3301      	adds	r3, #1
 800cf04:	4a0d      	ldr	r2, [pc, #52]	; (800cf3c <vPortEnterCritical+0x58>)
 800cf06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cf08:	4b0c      	ldr	r3, [pc, #48]	; (800cf3c <vPortEnterCritical+0x58>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d10f      	bne.n	800cf30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cf10:	4b0b      	ldr	r3, [pc, #44]	; (800cf40 <vPortEnterCritical+0x5c>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d00a      	beq.n	800cf30 <vPortEnterCritical+0x4c>
	__asm volatile
 800cf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1e:	f383 8811 	msr	BASEPRI, r3
 800cf22:	f3bf 8f6f 	isb	sy
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	603b      	str	r3, [r7, #0]
}
 800cf2c:	bf00      	nop
 800cf2e:	e7fe      	b.n	800cf2e <vPortEnterCritical+0x4a>
	}
}
 800cf30:	bf00      	nop
 800cf32:	370c      	adds	r7, #12
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr
 800cf3c:	20000084 	.word	0x20000084
 800cf40:	e000ed04 	.word	0xe000ed04

0800cf44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cf44:	b480      	push	{r7}
 800cf46:	b083      	sub	sp, #12
 800cf48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cf4a:	4b12      	ldr	r3, [pc, #72]	; (800cf94 <vPortExitCritical+0x50>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d10a      	bne.n	800cf68 <vPortExitCritical+0x24>
	__asm volatile
 800cf52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf56:	f383 8811 	msr	BASEPRI, r3
 800cf5a:	f3bf 8f6f 	isb	sy
 800cf5e:	f3bf 8f4f 	dsb	sy
 800cf62:	607b      	str	r3, [r7, #4]
}
 800cf64:	bf00      	nop
 800cf66:	e7fe      	b.n	800cf66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cf68:	4b0a      	ldr	r3, [pc, #40]	; (800cf94 <vPortExitCritical+0x50>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	4a09      	ldr	r2, [pc, #36]	; (800cf94 <vPortExitCritical+0x50>)
 800cf70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf72:	4b08      	ldr	r3, [pc, #32]	; (800cf94 <vPortExitCritical+0x50>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d105      	bne.n	800cf86 <vPortExitCritical+0x42>
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cf84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cf86:	bf00      	nop
 800cf88:	370c      	adds	r7, #12
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop
 800cf94:	20000084 	.word	0x20000084
	...

0800cfa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cfa0:	f3ef 8009 	mrs	r0, PSP
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	4b15      	ldr	r3, [pc, #84]	; (800d000 <pxCurrentTCBConst>)
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	f01e 0f10 	tst.w	lr, #16
 800cfb0:	bf08      	it	eq
 800cfb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cfb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfba:	6010      	str	r0, [r2, #0]
 800cfbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cfc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cfc4:	f380 8811 	msr	BASEPRI, r0
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	f3bf 8f6f 	isb	sy
 800cfd0:	f7ff fcbc 	bl	800c94c <vTaskSwitchContext>
 800cfd4:	f04f 0000 	mov.w	r0, #0
 800cfd8:	f380 8811 	msr	BASEPRI, r0
 800cfdc:	bc09      	pop	{r0, r3}
 800cfde:	6819      	ldr	r1, [r3, #0]
 800cfe0:	6808      	ldr	r0, [r1, #0]
 800cfe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe6:	f01e 0f10 	tst.w	lr, #16
 800cfea:	bf08      	it	eq
 800cfec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cff0:	f380 8809 	msr	PSP, r0
 800cff4:	f3bf 8f6f 	isb	sy
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop
 800cffc:	f3af 8000 	nop.w

0800d000 <pxCurrentTCBConst>:
 800d000:	200010a8 	.word	0x200010a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d004:	bf00      	nop
 800d006:	bf00      	nop

0800d008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
	__asm volatile
 800d00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d012:	f383 8811 	msr	BASEPRI, r3
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	f3bf 8f4f 	dsb	sy
 800d01e:	607b      	str	r3, [r7, #4]
}
 800d020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d022:	f7ff fbdb 	bl	800c7dc <xTaskIncrementTick>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d003      	beq.n	800d034 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d02c:	4b06      	ldr	r3, [pc, #24]	; (800d048 <SysTick_Handler+0x40>)
 800d02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d032:	601a      	str	r2, [r3, #0]
 800d034:	2300      	movs	r3, #0
 800d036:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	f383 8811 	msr	BASEPRI, r3
}
 800d03e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d040:	bf00      	nop
 800d042:	3708      	adds	r7, #8
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	e000ed04 	.word	0xe000ed04

0800d04c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d04c:	b480      	push	{r7}
 800d04e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d050:	4b0b      	ldr	r3, [pc, #44]	; (800d080 <vPortSetupTimerInterrupt+0x34>)
 800d052:	2200      	movs	r2, #0
 800d054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d056:	4b0b      	ldr	r3, [pc, #44]	; (800d084 <vPortSetupTimerInterrupt+0x38>)
 800d058:	2200      	movs	r2, #0
 800d05a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d05c:	4b0a      	ldr	r3, [pc, #40]	; (800d088 <vPortSetupTimerInterrupt+0x3c>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a0a      	ldr	r2, [pc, #40]	; (800d08c <vPortSetupTimerInterrupt+0x40>)
 800d062:	fba2 2303 	umull	r2, r3, r2, r3
 800d066:	099b      	lsrs	r3, r3, #6
 800d068:	4a09      	ldr	r2, [pc, #36]	; (800d090 <vPortSetupTimerInterrupt+0x44>)
 800d06a:	3b01      	subs	r3, #1
 800d06c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d06e:	4b04      	ldr	r3, [pc, #16]	; (800d080 <vPortSetupTimerInterrupt+0x34>)
 800d070:	2207      	movs	r2, #7
 800d072:	601a      	str	r2, [r3, #0]
}
 800d074:	bf00      	nop
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	e000e010 	.word	0xe000e010
 800d084:	e000e018 	.word	0xe000e018
 800d088:	20000078 	.word	0x20000078
 800d08c:	10624dd3 	.word	0x10624dd3
 800d090:	e000e014 	.word	0xe000e014

0800d094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d094:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d0a4 <vPortEnableVFP+0x10>
 800d098:	6801      	ldr	r1, [r0, #0]
 800d09a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d09e:	6001      	str	r1, [r0, #0]
 800d0a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d0a2:	bf00      	nop
 800d0a4:	e000ed88 	.word	0xe000ed88

0800d0a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b08a      	sub	sp, #40	; 0x28
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d0b4:	f7ff fae8 	bl	800c688 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d0b8:	4b5b      	ldr	r3, [pc, #364]	; (800d228 <pvPortMalloc+0x180>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d101      	bne.n	800d0c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d0c0:	f000 f920 	bl	800d304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d0c4:	4b59      	ldr	r3, [pc, #356]	; (800d22c <pvPortMalloc+0x184>)
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	4013      	ands	r3, r2
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f040 8093 	bne.w	800d1f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d01d      	beq.n	800d114 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d0d8:	2208      	movs	r2, #8
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	4413      	add	r3, r2
 800d0de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f003 0307 	and.w	r3, r3, #7
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d014      	beq.n	800d114 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f023 0307 	bic.w	r3, r3, #7
 800d0f0:	3308      	adds	r3, #8
 800d0f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f003 0307 	and.w	r3, r3, #7
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d00a      	beq.n	800d114 <pvPortMalloc+0x6c>
	__asm volatile
 800d0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d102:	f383 8811 	msr	BASEPRI, r3
 800d106:	f3bf 8f6f 	isb	sy
 800d10a:	f3bf 8f4f 	dsb	sy
 800d10e:	617b      	str	r3, [r7, #20]
}
 800d110:	bf00      	nop
 800d112:	e7fe      	b.n	800d112 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d06e      	beq.n	800d1f8 <pvPortMalloc+0x150>
 800d11a:	4b45      	ldr	r3, [pc, #276]	; (800d230 <pvPortMalloc+0x188>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	429a      	cmp	r2, r3
 800d122:	d869      	bhi.n	800d1f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d124:	4b43      	ldr	r3, [pc, #268]	; (800d234 <pvPortMalloc+0x18c>)
 800d126:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d128:	4b42      	ldr	r3, [pc, #264]	; (800d234 <pvPortMalloc+0x18c>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d12e:	e004      	b.n	800d13a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d132:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	429a      	cmp	r2, r3
 800d142:	d903      	bls.n	800d14c <pvPortMalloc+0xa4>
 800d144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d1f1      	bne.n	800d130 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d14c:	4b36      	ldr	r3, [pc, #216]	; (800d228 <pvPortMalloc+0x180>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d152:	429a      	cmp	r2, r3
 800d154:	d050      	beq.n	800d1f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d156:	6a3b      	ldr	r3, [r7, #32]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2208      	movs	r2, #8
 800d15c:	4413      	add	r3, r2
 800d15e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	6a3b      	ldr	r3, [r7, #32]
 800d166:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16a:	685a      	ldr	r2, [r3, #4]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	1ad2      	subs	r2, r2, r3
 800d170:	2308      	movs	r3, #8
 800d172:	005b      	lsls	r3, r3, #1
 800d174:	429a      	cmp	r2, r3
 800d176:	d91f      	bls.n	800d1b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	4413      	add	r3, r2
 800d17e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d180:	69bb      	ldr	r3, [r7, #24]
 800d182:	f003 0307 	and.w	r3, r3, #7
 800d186:	2b00      	cmp	r3, #0
 800d188:	d00a      	beq.n	800d1a0 <pvPortMalloc+0xf8>
	__asm volatile
 800d18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18e:	f383 8811 	msr	BASEPRI, r3
 800d192:	f3bf 8f6f 	isb	sy
 800d196:	f3bf 8f4f 	dsb	sy
 800d19a:	613b      	str	r3, [r7, #16]
}
 800d19c:	bf00      	nop
 800d19e:	e7fe      	b.n	800d19e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a2:	685a      	ldr	r2, [r3, #4]
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	1ad2      	subs	r2, r2, r3
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d1b2:	69b8      	ldr	r0, [r7, #24]
 800d1b4:	f000 f908 	bl	800d3c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d1b8:	4b1d      	ldr	r3, [pc, #116]	; (800d230 <pvPortMalloc+0x188>)
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	1ad3      	subs	r3, r2, r3
 800d1c2:	4a1b      	ldr	r2, [pc, #108]	; (800d230 <pvPortMalloc+0x188>)
 800d1c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d1c6:	4b1a      	ldr	r3, [pc, #104]	; (800d230 <pvPortMalloc+0x188>)
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	4b1b      	ldr	r3, [pc, #108]	; (800d238 <pvPortMalloc+0x190>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d203      	bcs.n	800d1da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d1d2:	4b17      	ldr	r3, [pc, #92]	; (800d230 <pvPortMalloc+0x188>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	4a18      	ldr	r2, [pc, #96]	; (800d238 <pvPortMalloc+0x190>)
 800d1d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1dc:	685a      	ldr	r2, [r3, #4]
 800d1de:	4b13      	ldr	r3, [pc, #76]	; (800d22c <pvPortMalloc+0x184>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	431a      	orrs	r2, r3
 800d1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d1ee:	4b13      	ldr	r3, [pc, #76]	; (800d23c <pvPortMalloc+0x194>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	4a11      	ldr	r2, [pc, #68]	; (800d23c <pvPortMalloc+0x194>)
 800d1f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d1f8:	f7ff fa54 	bl	800c6a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1fc:	69fb      	ldr	r3, [r7, #28]
 800d1fe:	f003 0307 	and.w	r3, r3, #7
 800d202:	2b00      	cmp	r3, #0
 800d204:	d00a      	beq.n	800d21c <pvPortMalloc+0x174>
	__asm volatile
 800d206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d20a:	f383 8811 	msr	BASEPRI, r3
 800d20e:	f3bf 8f6f 	isb	sy
 800d212:	f3bf 8f4f 	dsb	sy
 800d216:	60fb      	str	r3, [r7, #12]
}
 800d218:	bf00      	nop
 800d21a:	e7fe      	b.n	800d21a <pvPortMalloc+0x172>
	return pvReturn;
 800d21c:	69fb      	ldr	r3, [r7, #28]
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3728      	adds	r7, #40	; 0x28
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	20004de4 	.word	0x20004de4
 800d22c:	20004df8 	.word	0x20004df8
 800d230:	20004de8 	.word	0x20004de8
 800d234:	20004ddc 	.word	0x20004ddc
 800d238:	20004dec 	.word	0x20004dec
 800d23c:	20004df0 	.word	0x20004df0

0800d240 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b086      	sub	sp, #24
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d04d      	beq.n	800d2ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d252:	2308      	movs	r3, #8
 800d254:	425b      	negs	r3, r3
 800d256:	697a      	ldr	r2, [r7, #20]
 800d258:	4413      	add	r3, r2
 800d25a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	685a      	ldr	r2, [r3, #4]
 800d264:	4b24      	ldr	r3, [pc, #144]	; (800d2f8 <vPortFree+0xb8>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4013      	ands	r3, r2
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d10a      	bne.n	800d284 <vPortFree+0x44>
	__asm volatile
 800d26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d272:	f383 8811 	msr	BASEPRI, r3
 800d276:	f3bf 8f6f 	isb	sy
 800d27a:	f3bf 8f4f 	dsb	sy
 800d27e:	60fb      	str	r3, [r7, #12]
}
 800d280:	bf00      	nop
 800d282:	e7fe      	b.n	800d282 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d00a      	beq.n	800d2a2 <vPortFree+0x62>
	__asm volatile
 800d28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d290:	f383 8811 	msr	BASEPRI, r3
 800d294:	f3bf 8f6f 	isb	sy
 800d298:	f3bf 8f4f 	dsb	sy
 800d29c:	60bb      	str	r3, [r7, #8]
}
 800d29e:	bf00      	nop
 800d2a0:	e7fe      	b.n	800d2a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	685a      	ldr	r2, [r3, #4]
 800d2a6:	4b14      	ldr	r3, [pc, #80]	; (800d2f8 <vPortFree+0xb8>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4013      	ands	r3, r2
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d01e      	beq.n	800d2ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d11a      	bne.n	800d2ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	685a      	ldr	r2, [r3, #4]
 800d2bc:	4b0e      	ldr	r3, [pc, #56]	; (800d2f8 <vPortFree+0xb8>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	43db      	mvns	r3, r3
 800d2c2:	401a      	ands	r2, r3
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d2c8:	f7ff f9de 	bl	800c688 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	685a      	ldr	r2, [r3, #4]
 800d2d0:	4b0a      	ldr	r3, [pc, #40]	; (800d2fc <vPortFree+0xbc>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	4a09      	ldr	r2, [pc, #36]	; (800d2fc <vPortFree+0xbc>)
 800d2d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d2da:	6938      	ldr	r0, [r7, #16]
 800d2dc:	f000 f874 	bl	800d3c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d2e0:	4b07      	ldr	r3, [pc, #28]	; (800d300 <vPortFree+0xc0>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	4a06      	ldr	r2, [pc, #24]	; (800d300 <vPortFree+0xc0>)
 800d2e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d2ea:	f7ff f9db 	bl	800c6a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d2ee:	bf00      	nop
 800d2f0:	3718      	adds	r7, #24
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	20004df8 	.word	0x20004df8
 800d2fc:	20004de8 	.word	0x20004de8
 800d300:	20004df4 	.word	0x20004df4

0800d304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d304:	b480      	push	{r7}
 800d306:	b085      	sub	sp, #20
 800d308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d30a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d30e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d310:	4b27      	ldr	r3, [pc, #156]	; (800d3b0 <prvHeapInit+0xac>)
 800d312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f003 0307 	and.w	r3, r3, #7
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d00c      	beq.n	800d338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	3307      	adds	r3, #7
 800d322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f023 0307 	bic.w	r3, r3, #7
 800d32a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d32c:	68ba      	ldr	r2, [r7, #8]
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	1ad3      	subs	r3, r2, r3
 800d332:	4a1f      	ldr	r2, [pc, #124]	; (800d3b0 <prvHeapInit+0xac>)
 800d334:	4413      	add	r3, r2
 800d336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d33c:	4a1d      	ldr	r2, [pc, #116]	; (800d3b4 <prvHeapInit+0xb0>)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d342:	4b1c      	ldr	r3, [pc, #112]	; (800d3b4 <prvHeapInit+0xb0>)
 800d344:	2200      	movs	r2, #0
 800d346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	68ba      	ldr	r2, [r7, #8]
 800d34c:	4413      	add	r3, r2
 800d34e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d350:	2208      	movs	r2, #8
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	1a9b      	subs	r3, r3, r2
 800d356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f023 0307 	bic.w	r3, r3, #7
 800d35e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	4a15      	ldr	r2, [pc, #84]	; (800d3b8 <prvHeapInit+0xb4>)
 800d364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d366:	4b14      	ldr	r3, [pc, #80]	; (800d3b8 <prvHeapInit+0xb4>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	2200      	movs	r2, #0
 800d36c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d36e:	4b12      	ldr	r3, [pc, #72]	; (800d3b8 <prvHeapInit+0xb4>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2200      	movs	r2, #0
 800d374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	68fa      	ldr	r2, [r7, #12]
 800d37e:	1ad2      	subs	r2, r2, r3
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d384:	4b0c      	ldr	r3, [pc, #48]	; (800d3b8 <prvHeapInit+0xb4>)
 800d386:	681a      	ldr	r2, [r3, #0]
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	4a0a      	ldr	r2, [pc, #40]	; (800d3bc <prvHeapInit+0xb8>)
 800d392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	4a09      	ldr	r2, [pc, #36]	; (800d3c0 <prvHeapInit+0xbc>)
 800d39a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d39c:	4b09      	ldr	r3, [pc, #36]	; (800d3c4 <prvHeapInit+0xc0>)
 800d39e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d3a2:	601a      	str	r2, [r3, #0]
}
 800d3a4:	bf00      	nop
 800d3a6:	3714      	adds	r7, #20
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr
 800d3b0:	200011dc 	.word	0x200011dc
 800d3b4:	20004ddc 	.word	0x20004ddc
 800d3b8:	20004de4 	.word	0x20004de4
 800d3bc:	20004dec 	.word	0x20004dec
 800d3c0:	20004de8 	.word	0x20004de8
 800d3c4:	20004df8 	.word	0x20004df8

0800d3c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b085      	sub	sp, #20
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d3d0:	4b28      	ldr	r3, [pc, #160]	; (800d474 <prvInsertBlockIntoFreeList+0xac>)
 800d3d2:	60fb      	str	r3, [r7, #12]
 800d3d4:	e002      	b.n	800d3dc <prvInsertBlockIntoFreeList+0x14>
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	60fb      	str	r3, [r7, #12]
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	687a      	ldr	r2, [r7, #4]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d8f7      	bhi.n	800d3d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	68ba      	ldr	r2, [r7, #8]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d108      	bne.n	800d40a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	685a      	ldr	r2, [r3, #4]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	441a      	add	r2, r3
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	68ba      	ldr	r2, [r7, #8]
 800d414:	441a      	add	r2, r3
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d118      	bne.n	800d450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	4b15      	ldr	r3, [pc, #84]	; (800d478 <prvInsertBlockIntoFreeList+0xb0>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	429a      	cmp	r2, r3
 800d428:	d00d      	beq.n	800d446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	685a      	ldr	r2, [r3, #4]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	441a      	add	r2, r3
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	601a      	str	r2, [r3, #0]
 800d444:	e008      	b.n	800d458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d446:	4b0c      	ldr	r3, [pc, #48]	; (800d478 <prvInsertBlockIntoFreeList+0xb0>)
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	601a      	str	r2, [r3, #0]
 800d44e:	e003      	b.n	800d458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d002      	beq.n	800d466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d466:	bf00      	nop
 800d468:	3714      	adds	r7, #20
 800d46a:	46bd      	mov	sp, r7
 800d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d470:	4770      	bx	lr
 800d472:	bf00      	nop
 800d474:	20004ddc 	.word	0x20004ddc
 800d478:	20004de4 	.word	0x20004de4

0800d47c <atoi>:
 800d47c:	220a      	movs	r2, #10
 800d47e:	2100      	movs	r1, #0
 800d480:	f000 b882 	b.w	800d588 <strtol>

0800d484 <_strtol_l.constprop.0>:
 800d484:	2b01      	cmp	r3, #1
 800d486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d48a:	d001      	beq.n	800d490 <_strtol_l.constprop.0+0xc>
 800d48c:	2b24      	cmp	r3, #36	; 0x24
 800d48e:	d906      	bls.n	800d49e <_strtol_l.constprop.0+0x1a>
 800d490:	f000 ffb4 	bl	800e3fc <__errno>
 800d494:	2316      	movs	r3, #22
 800d496:	6003      	str	r3, [r0, #0]
 800d498:	2000      	movs	r0, #0
 800d49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d49e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d584 <_strtol_l.constprop.0+0x100>
 800d4a2:	460d      	mov	r5, r1
 800d4a4:	462e      	mov	r6, r5
 800d4a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4aa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d4ae:	f017 0708 	ands.w	r7, r7, #8
 800d4b2:	d1f7      	bne.n	800d4a4 <_strtol_l.constprop.0+0x20>
 800d4b4:	2c2d      	cmp	r4, #45	; 0x2d
 800d4b6:	d132      	bne.n	800d51e <_strtol_l.constprop.0+0x9a>
 800d4b8:	782c      	ldrb	r4, [r5, #0]
 800d4ba:	2701      	movs	r7, #1
 800d4bc:	1cb5      	adds	r5, r6, #2
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d05b      	beq.n	800d57a <_strtol_l.constprop.0+0xf6>
 800d4c2:	2b10      	cmp	r3, #16
 800d4c4:	d109      	bne.n	800d4da <_strtol_l.constprop.0+0x56>
 800d4c6:	2c30      	cmp	r4, #48	; 0x30
 800d4c8:	d107      	bne.n	800d4da <_strtol_l.constprop.0+0x56>
 800d4ca:	782c      	ldrb	r4, [r5, #0]
 800d4cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d4d0:	2c58      	cmp	r4, #88	; 0x58
 800d4d2:	d14d      	bne.n	800d570 <_strtol_l.constprop.0+0xec>
 800d4d4:	786c      	ldrb	r4, [r5, #1]
 800d4d6:	2310      	movs	r3, #16
 800d4d8:	3502      	adds	r5, #2
 800d4da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d4de:	f108 38ff 	add.w	r8, r8, #4294967295
 800d4e2:	f04f 0e00 	mov.w	lr, #0
 800d4e6:	fbb8 f9f3 	udiv	r9, r8, r3
 800d4ea:	4676      	mov	r6, lr
 800d4ec:	fb03 8a19 	mls	sl, r3, r9, r8
 800d4f0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d4f4:	f1bc 0f09 	cmp.w	ip, #9
 800d4f8:	d816      	bhi.n	800d528 <_strtol_l.constprop.0+0xa4>
 800d4fa:	4664      	mov	r4, ip
 800d4fc:	42a3      	cmp	r3, r4
 800d4fe:	dd24      	ble.n	800d54a <_strtol_l.constprop.0+0xc6>
 800d500:	f1be 3fff 	cmp.w	lr, #4294967295
 800d504:	d008      	beq.n	800d518 <_strtol_l.constprop.0+0x94>
 800d506:	45b1      	cmp	r9, r6
 800d508:	d31c      	bcc.n	800d544 <_strtol_l.constprop.0+0xc0>
 800d50a:	d101      	bne.n	800d510 <_strtol_l.constprop.0+0x8c>
 800d50c:	45a2      	cmp	sl, r4
 800d50e:	db19      	blt.n	800d544 <_strtol_l.constprop.0+0xc0>
 800d510:	fb06 4603 	mla	r6, r6, r3, r4
 800d514:	f04f 0e01 	mov.w	lr, #1
 800d518:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d51c:	e7e8      	b.n	800d4f0 <_strtol_l.constprop.0+0x6c>
 800d51e:	2c2b      	cmp	r4, #43	; 0x2b
 800d520:	bf04      	itt	eq
 800d522:	782c      	ldrbeq	r4, [r5, #0]
 800d524:	1cb5      	addeq	r5, r6, #2
 800d526:	e7ca      	b.n	800d4be <_strtol_l.constprop.0+0x3a>
 800d528:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d52c:	f1bc 0f19 	cmp.w	ip, #25
 800d530:	d801      	bhi.n	800d536 <_strtol_l.constprop.0+0xb2>
 800d532:	3c37      	subs	r4, #55	; 0x37
 800d534:	e7e2      	b.n	800d4fc <_strtol_l.constprop.0+0x78>
 800d536:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d53a:	f1bc 0f19 	cmp.w	ip, #25
 800d53e:	d804      	bhi.n	800d54a <_strtol_l.constprop.0+0xc6>
 800d540:	3c57      	subs	r4, #87	; 0x57
 800d542:	e7db      	b.n	800d4fc <_strtol_l.constprop.0+0x78>
 800d544:	f04f 3eff 	mov.w	lr, #4294967295
 800d548:	e7e6      	b.n	800d518 <_strtol_l.constprop.0+0x94>
 800d54a:	f1be 3fff 	cmp.w	lr, #4294967295
 800d54e:	d105      	bne.n	800d55c <_strtol_l.constprop.0+0xd8>
 800d550:	2322      	movs	r3, #34	; 0x22
 800d552:	6003      	str	r3, [r0, #0]
 800d554:	4646      	mov	r6, r8
 800d556:	b942      	cbnz	r2, 800d56a <_strtol_l.constprop.0+0xe6>
 800d558:	4630      	mov	r0, r6
 800d55a:	e79e      	b.n	800d49a <_strtol_l.constprop.0+0x16>
 800d55c:	b107      	cbz	r7, 800d560 <_strtol_l.constprop.0+0xdc>
 800d55e:	4276      	negs	r6, r6
 800d560:	2a00      	cmp	r2, #0
 800d562:	d0f9      	beq.n	800d558 <_strtol_l.constprop.0+0xd4>
 800d564:	f1be 0f00 	cmp.w	lr, #0
 800d568:	d000      	beq.n	800d56c <_strtol_l.constprop.0+0xe8>
 800d56a:	1e69      	subs	r1, r5, #1
 800d56c:	6011      	str	r1, [r2, #0]
 800d56e:	e7f3      	b.n	800d558 <_strtol_l.constprop.0+0xd4>
 800d570:	2430      	movs	r4, #48	; 0x30
 800d572:	2b00      	cmp	r3, #0
 800d574:	d1b1      	bne.n	800d4da <_strtol_l.constprop.0+0x56>
 800d576:	2308      	movs	r3, #8
 800d578:	e7af      	b.n	800d4da <_strtol_l.constprop.0+0x56>
 800d57a:	2c30      	cmp	r4, #48	; 0x30
 800d57c:	d0a5      	beq.n	800d4ca <_strtol_l.constprop.0+0x46>
 800d57e:	230a      	movs	r3, #10
 800d580:	e7ab      	b.n	800d4da <_strtol_l.constprop.0+0x56>
 800d582:	bf00      	nop
 800d584:	08011679 	.word	0x08011679

0800d588 <strtol>:
 800d588:	4613      	mov	r3, r2
 800d58a:	460a      	mov	r2, r1
 800d58c:	4601      	mov	r1, r0
 800d58e:	4802      	ldr	r0, [pc, #8]	; (800d598 <strtol+0x10>)
 800d590:	6800      	ldr	r0, [r0, #0]
 800d592:	f7ff bf77 	b.w	800d484 <_strtol_l.constprop.0>
 800d596:	bf00      	nop
 800d598:	200000e0 	.word	0x200000e0

0800d59c <gcvt>:
 800d59c:	b530      	push	{r4, r5, lr}
 800d59e:	2200      	movs	r2, #0
 800d5a0:	b085      	sub	sp, #20
 800d5a2:	460c      	mov	r4, r1
 800d5a4:	4605      	mov	r5, r0
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	ec51 0b10 	vmov	r0, r1, d0
 800d5ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d5b0:	f7f3 fa94 	bl	8000adc <__aeabi_dcmplt>
 800d5b4:	ed9d 0b02 	vldr	d0, [sp, #8]
 800d5b8:	4622      	mov	r2, r4
 800d5ba:	b118      	cbz	r0, 800d5c4 <gcvt+0x28>
 800d5bc:	232d      	movs	r3, #45	; 0x2d
 800d5be:	f802 3b01 	strb.w	r3, [r2], #1
 800d5c2:	3d01      	subs	r5, #1
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	4806      	ldr	r0, [pc, #24]	; (800d5e0 <gcvt+0x44>)
 800d5c8:	9300      	str	r3, [sp, #0]
 800d5ca:	4629      	mov	r1, r5
 800d5cc:	2367      	movs	r3, #103	; 0x67
 800d5ce:	6800      	ldr	r0, [r0, #0]
 800d5d0:	f002 fada 	bl	800fb88 <_gcvt>
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	bf14      	ite	ne
 800d5d8:	4620      	movne	r0, r4
 800d5da:	2000      	moveq	r0, #0
 800d5dc:	b005      	add	sp, #20
 800d5de:	bd30      	pop	{r4, r5, pc}
 800d5e0:	200000e0 	.word	0x200000e0

0800d5e4 <__cvt>:
 800d5e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5e8:	ec55 4b10 	vmov	r4, r5, d0
 800d5ec:	2d00      	cmp	r5, #0
 800d5ee:	460e      	mov	r6, r1
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	462b      	mov	r3, r5
 800d5f4:	bfbb      	ittet	lt
 800d5f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d5fa:	461d      	movlt	r5, r3
 800d5fc:	2300      	movge	r3, #0
 800d5fe:	232d      	movlt	r3, #45	; 0x2d
 800d600:	700b      	strb	r3, [r1, #0]
 800d602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d604:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d608:	4691      	mov	r9, r2
 800d60a:	f023 0820 	bic.w	r8, r3, #32
 800d60e:	bfbc      	itt	lt
 800d610:	4622      	movlt	r2, r4
 800d612:	4614      	movlt	r4, r2
 800d614:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d618:	d005      	beq.n	800d626 <__cvt+0x42>
 800d61a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d61e:	d100      	bne.n	800d622 <__cvt+0x3e>
 800d620:	3601      	adds	r6, #1
 800d622:	2102      	movs	r1, #2
 800d624:	e000      	b.n	800d628 <__cvt+0x44>
 800d626:	2103      	movs	r1, #3
 800d628:	ab03      	add	r3, sp, #12
 800d62a:	9301      	str	r3, [sp, #4]
 800d62c:	ab02      	add	r3, sp, #8
 800d62e:	9300      	str	r3, [sp, #0]
 800d630:	ec45 4b10 	vmov	d0, r4, r5
 800d634:	4653      	mov	r3, sl
 800d636:	4632      	mov	r2, r6
 800d638:	f000 ffa2 	bl	800e580 <_dtoa_r>
 800d63c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d640:	4607      	mov	r7, r0
 800d642:	d102      	bne.n	800d64a <__cvt+0x66>
 800d644:	f019 0f01 	tst.w	r9, #1
 800d648:	d022      	beq.n	800d690 <__cvt+0xac>
 800d64a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d64e:	eb07 0906 	add.w	r9, r7, r6
 800d652:	d110      	bne.n	800d676 <__cvt+0x92>
 800d654:	783b      	ldrb	r3, [r7, #0]
 800d656:	2b30      	cmp	r3, #48	; 0x30
 800d658:	d10a      	bne.n	800d670 <__cvt+0x8c>
 800d65a:	2200      	movs	r2, #0
 800d65c:	2300      	movs	r3, #0
 800d65e:	4620      	mov	r0, r4
 800d660:	4629      	mov	r1, r5
 800d662:	f7f3 fa31 	bl	8000ac8 <__aeabi_dcmpeq>
 800d666:	b918      	cbnz	r0, 800d670 <__cvt+0x8c>
 800d668:	f1c6 0601 	rsb	r6, r6, #1
 800d66c:	f8ca 6000 	str.w	r6, [sl]
 800d670:	f8da 3000 	ldr.w	r3, [sl]
 800d674:	4499      	add	r9, r3
 800d676:	2200      	movs	r2, #0
 800d678:	2300      	movs	r3, #0
 800d67a:	4620      	mov	r0, r4
 800d67c:	4629      	mov	r1, r5
 800d67e:	f7f3 fa23 	bl	8000ac8 <__aeabi_dcmpeq>
 800d682:	b108      	cbz	r0, 800d688 <__cvt+0xa4>
 800d684:	f8cd 900c 	str.w	r9, [sp, #12]
 800d688:	2230      	movs	r2, #48	; 0x30
 800d68a:	9b03      	ldr	r3, [sp, #12]
 800d68c:	454b      	cmp	r3, r9
 800d68e:	d307      	bcc.n	800d6a0 <__cvt+0xbc>
 800d690:	9b03      	ldr	r3, [sp, #12]
 800d692:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d694:	1bdb      	subs	r3, r3, r7
 800d696:	4638      	mov	r0, r7
 800d698:	6013      	str	r3, [r2, #0]
 800d69a:	b004      	add	sp, #16
 800d69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6a0:	1c59      	adds	r1, r3, #1
 800d6a2:	9103      	str	r1, [sp, #12]
 800d6a4:	701a      	strb	r2, [r3, #0]
 800d6a6:	e7f0      	b.n	800d68a <__cvt+0xa6>

0800d6a8 <__exponent>:
 800d6a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2900      	cmp	r1, #0
 800d6ae:	bfb8      	it	lt
 800d6b0:	4249      	neglt	r1, r1
 800d6b2:	f803 2b02 	strb.w	r2, [r3], #2
 800d6b6:	bfb4      	ite	lt
 800d6b8:	222d      	movlt	r2, #45	; 0x2d
 800d6ba:	222b      	movge	r2, #43	; 0x2b
 800d6bc:	2909      	cmp	r1, #9
 800d6be:	7042      	strb	r2, [r0, #1]
 800d6c0:	dd2a      	ble.n	800d718 <__exponent+0x70>
 800d6c2:	f10d 0207 	add.w	r2, sp, #7
 800d6c6:	4617      	mov	r7, r2
 800d6c8:	260a      	movs	r6, #10
 800d6ca:	4694      	mov	ip, r2
 800d6cc:	fb91 f5f6 	sdiv	r5, r1, r6
 800d6d0:	fb06 1415 	mls	r4, r6, r5, r1
 800d6d4:	3430      	adds	r4, #48	; 0x30
 800d6d6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d6da:	460c      	mov	r4, r1
 800d6dc:	2c63      	cmp	r4, #99	; 0x63
 800d6de:	f102 32ff 	add.w	r2, r2, #4294967295
 800d6e2:	4629      	mov	r1, r5
 800d6e4:	dcf1      	bgt.n	800d6ca <__exponent+0x22>
 800d6e6:	3130      	adds	r1, #48	; 0x30
 800d6e8:	f1ac 0402 	sub.w	r4, ip, #2
 800d6ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d6f0:	1c41      	adds	r1, r0, #1
 800d6f2:	4622      	mov	r2, r4
 800d6f4:	42ba      	cmp	r2, r7
 800d6f6:	d30a      	bcc.n	800d70e <__exponent+0x66>
 800d6f8:	f10d 0209 	add.w	r2, sp, #9
 800d6fc:	eba2 020c 	sub.w	r2, r2, ip
 800d700:	42bc      	cmp	r4, r7
 800d702:	bf88      	it	hi
 800d704:	2200      	movhi	r2, #0
 800d706:	4413      	add	r3, r2
 800d708:	1a18      	subs	r0, r3, r0
 800d70a:	b003      	add	sp, #12
 800d70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d70e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d712:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d716:	e7ed      	b.n	800d6f4 <__exponent+0x4c>
 800d718:	2330      	movs	r3, #48	; 0x30
 800d71a:	3130      	adds	r1, #48	; 0x30
 800d71c:	7083      	strb	r3, [r0, #2]
 800d71e:	70c1      	strb	r1, [r0, #3]
 800d720:	1d03      	adds	r3, r0, #4
 800d722:	e7f1      	b.n	800d708 <__exponent+0x60>

0800d724 <_printf_float>:
 800d724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d728:	ed2d 8b02 	vpush	{d8}
 800d72c:	b08d      	sub	sp, #52	; 0x34
 800d72e:	460c      	mov	r4, r1
 800d730:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d734:	4616      	mov	r6, r2
 800d736:	461f      	mov	r7, r3
 800d738:	4605      	mov	r5, r0
 800d73a:	f000 fdbf 	bl	800e2bc <_localeconv_r>
 800d73e:	f8d0 a000 	ldr.w	sl, [r0]
 800d742:	4650      	mov	r0, sl
 800d744:	f7f2 fd94 	bl	8000270 <strlen>
 800d748:	2300      	movs	r3, #0
 800d74a:	930a      	str	r3, [sp, #40]	; 0x28
 800d74c:	6823      	ldr	r3, [r4, #0]
 800d74e:	9305      	str	r3, [sp, #20]
 800d750:	f8d8 3000 	ldr.w	r3, [r8]
 800d754:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d758:	3307      	adds	r3, #7
 800d75a:	f023 0307 	bic.w	r3, r3, #7
 800d75e:	f103 0208 	add.w	r2, r3, #8
 800d762:	f8c8 2000 	str.w	r2, [r8]
 800d766:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d76a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d76e:	9307      	str	r3, [sp, #28]
 800d770:	f8cd 8018 	str.w	r8, [sp, #24]
 800d774:	ee08 0a10 	vmov	s16, r0
 800d778:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d77c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d780:	4b9e      	ldr	r3, [pc, #632]	; (800d9fc <_printf_float+0x2d8>)
 800d782:	f04f 32ff 	mov.w	r2, #4294967295
 800d786:	f7f3 f9d1 	bl	8000b2c <__aeabi_dcmpun>
 800d78a:	bb88      	cbnz	r0, 800d7f0 <_printf_float+0xcc>
 800d78c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d790:	4b9a      	ldr	r3, [pc, #616]	; (800d9fc <_printf_float+0x2d8>)
 800d792:	f04f 32ff 	mov.w	r2, #4294967295
 800d796:	f7f3 f9ab 	bl	8000af0 <__aeabi_dcmple>
 800d79a:	bb48      	cbnz	r0, 800d7f0 <_printf_float+0xcc>
 800d79c:	2200      	movs	r2, #0
 800d79e:	2300      	movs	r3, #0
 800d7a0:	4640      	mov	r0, r8
 800d7a2:	4649      	mov	r1, r9
 800d7a4:	f7f3 f99a 	bl	8000adc <__aeabi_dcmplt>
 800d7a8:	b110      	cbz	r0, 800d7b0 <_printf_float+0x8c>
 800d7aa:	232d      	movs	r3, #45	; 0x2d
 800d7ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7b0:	4a93      	ldr	r2, [pc, #588]	; (800da00 <_printf_float+0x2dc>)
 800d7b2:	4b94      	ldr	r3, [pc, #592]	; (800da04 <_printf_float+0x2e0>)
 800d7b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d7b8:	bf94      	ite	ls
 800d7ba:	4690      	movls	r8, r2
 800d7bc:	4698      	movhi	r8, r3
 800d7be:	2303      	movs	r3, #3
 800d7c0:	6123      	str	r3, [r4, #16]
 800d7c2:	9b05      	ldr	r3, [sp, #20]
 800d7c4:	f023 0304 	bic.w	r3, r3, #4
 800d7c8:	6023      	str	r3, [r4, #0]
 800d7ca:	f04f 0900 	mov.w	r9, #0
 800d7ce:	9700      	str	r7, [sp, #0]
 800d7d0:	4633      	mov	r3, r6
 800d7d2:	aa0b      	add	r2, sp, #44	; 0x2c
 800d7d4:	4621      	mov	r1, r4
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	f000 f9da 	bl	800db90 <_printf_common>
 800d7dc:	3001      	adds	r0, #1
 800d7de:	f040 8090 	bne.w	800d902 <_printf_float+0x1de>
 800d7e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e6:	b00d      	add	sp, #52	; 0x34
 800d7e8:	ecbd 8b02 	vpop	{d8}
 800d7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f0:	4642      	mov	r2, r8
 800d7f2:	464b      	mov	r3, r9
 800d7f4:	4640      	mov	r0, r8
 800d7f6:	4649      	mov	r1, r9
 800d7f8:	f7f3 f998 	bl	8000b2c <__aeabi_dcmpun>
 800d7fc:	b140      	cbz	r0, 800d810 <_printf_float+0xec>
 800d7fe:	464b      	mov	r3, r9
 800d800:	2b00      	cmp	r3, #0
 800d802:	bfbc      	itt	lt
 800d804:	232d      	movlt	r3, #45	; 0x2d
 800d806:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d80a:	4a7f      	ldr	r2, [pc, #508]	; (800da08 <_printf_float+0x2e4>)
 800d80c:	4b7f      	ldr	r3, [pc, #508]	; (800da0c <_printf_float+0x2e8>)
 800d80e:	e7d1      	b.n	800d7b4 <_printf_float+0x90>
 800d810:	6863      	ldr	r3, [r4, #4]
 800d812:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d816:	9206      	str	r2, [sp, #24]
 800d818:	1c5a      	adds	r2, r3, #1
 800d81a:	d13f      	bne.n	800d89c <_printf_float+0x178>
 800d81c:	2306      	movs	r3, #6
 800d81e:	6063      	str	r3, [r4, #4]
 800d820:	9b05      	ldr	r3, [sp, #20]
 800d822:	6861      	ldr	r1, [r4, #4]
 800d824:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d828:	2300      	movs	r3, #0
 800d82a:	9303      	str	r3, [sp, #12]
 800d82c:	ab0a      	add	r3, sp, #40	; 0x28
 800d82e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d832:	ab09      	add	r3, sp, #36	; 0x24
 800d834:	ec49 8b10 	vmov	d0, r8, r9
 800d838:	9300      	str	r3, [sp, #0]
 800d83a:	6022      	str	r2, [r4, #0]
 800d83c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d840:	4628      	mov	r0, r5
 800d842:	f7ff fecf 	bl	800d5e4 <__cvt>
 800d846:	9b06      	ldr	r3, [sp, #24]
 800d848:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d84a:	2b47      	cmp	r3, #71	; 0x47
 800d84c:	4680      	mov	r8, r0
 800d84e:	d108      	bne.n	800d862 <_printf_float+0x13e>
 800d850:	1cc8      	adds	r0, r1, #3
 800d852:	db02      	blt.n	800d85a <_printf_float+0x136>
 800d854:	6863      	ldr	r3, [r4, #4]
 800d856:	4299      	cmp	r1, r3
 800d858:	dd41      	ble.n	800d8de <_printf_float+0x1ba>
 800d85a:	f1ab 0302 	sub.w	r3, fp, #2
 800d85e:	fa5f fb83 	uxtb.w	fp, r3
 800d862:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d866:	d820      	bhi.n	800d8aa <_printf_float+0x186>
 800d868:	3901      	subs	r1, #1
 800d86a:	465a      	mov	r2, fp
 800d86c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d870:	9109      	str	r1, [sp, #36]	; 0x24
 800d872:	f7ff ff19 	bl	800d6a8 <__exponent>
 800d876:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d878:	1813      	adds	r3, r2, r0
 800d87a:	2a01      	cmp	r2, #1
 800d87c:	4681      	mov	r9, r0
 800d87e:	6123      	str	r3, [r4, #16]
 800d880:	dc02      	bgt.n	800d888 <_printf_float+0x164>
 800d882:	6822      	ldr	r2, [r4, #0]
 800d884:	07d2      	lsls	r2, r2, #31
 800d886:	d501      	bpl.n	800d88c <_printf_float+0x168>
 800d888:	3301      	adds	r3, #1
 800d88a:	6123      	str	r3, [r4, #16]
 800d88c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d890:	2b00      	cmp	r3, #0
 800d892:	d09c      	beq.n	800d7ce <_printf_float+0xaa>
 800d894:	232d      	movs	r3, #45	; 0x2d
 800d896:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d89a:	e798      	b.n	800d7ce <_printf_float+0xaa>
 800d89c:	9a06      	ldr	r2, [sp, #24]
 800d89e:	2a47      	cmp	r2, #71	; 0x47
 800d8a0:	d1be      	bne.n	800d820 <_printf_float+0xfc>
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d1bc      	bne.n	800d820 <_printf_float+0xfc>
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	e7b9      	b.n	800d81e <_printf_float+0xfa>
 800d8aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d8ae:	d118      	bne.n	800d8e2 <_printf_float+0x1be>
 800d8b0:	2900      	cmp	r1, #0
 800d8b2:	6863      	ldr	r3, [r4, #4]
 800d8b4:	dd0b      	ble.n	800d8ce <_printf_float+0x1aa>
 800d8b6:	6121      	str	r1, [r4, #16]
 800d8b8:	b913      	cbnz	r3, 800d8c0 <_printf_float+0x19c>
 800d8ba:	6822      	ldr	r2, [r4, #0]
 800d8bc:	07d0      	lsls	r0, r2, #31
 800d8be:	d502      	bpl.n	800d8c6 <_printf_float+0x1a2>
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	440b      	add	r3, r1
 800d8c4:	6123      	str	r3, [r4, #16]
 800d8c6:	65a1      	str	r1, [r4, #88]	; 0x58
 800d8c8:	f04f 0900 	mov.w	r9, #0
 800d8cc:	e7de      	b.n	800d88c <_printf_float+0x168>
 800d8ce:	b913      	cbnz	r3, 800d8d6 <_printf_float+0x1b2>
 800d8d0:	6822      	ldr	r2, [r4, #0]
 800d8d2:	07d2      	lsls	r2, r2, #31
 800d8d4:	d501      	bpl.n	800d8da <_printf_float+0x1b6>
 800d8d6:	3302      	adds	r3, #2
 800d8d8:	e7f4      	b.n	800d8c4 <_printf_float+0x1a0>
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e7f2      	b.n	800d8c4 <_printf_float+0x1a0>
 800d8de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d8e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8e4:	4299      	cmp	r1, r3
 800d8e6:	db05      	blt.n	800d8f4 <_printf_float+0x1d0>
 800d8e8:	6823      	ldr	r3, [r4, #0]
 800d8ea:	6121      	str	r1, [r4, #16]
 800d8ec:	07d8      	lsls	r0, r3, #31
 800d8ee:	d5ea      	bpl.n	800d8c6 <_printf_float+0x1a2>
 800d8f0:	1c4b      	adds	r3, r1, #1
 800d8f2:	e7e7      	b.n	800d8c4 <_printf_float+0x1a0>
 800d8f4:	2900      	cmp	r1, #0
 800d8f6:	bfd4      	ite	le
 800d8f8:	f1c1 0202 	rsble	r2, r1, #2
 800d8fc:	2201      	movgt	r2, #1
 800d8fe:	4413      	add	r3, r2
 800d900:	e7e0      	b.n	800d8c4 <_printf_float+0x1a0>
 800d902:	6823      	ldr	r3, [r4, #0]
 800d904:	055a      	lsls	r2, r3, #21
 800d906:	d407      	bmi.n	800d918 <_printf_float+0x1f4>
 800d908:	6923      	ldr	r3, [r4, #16]
 800d90a:	4642      	mov	r2, r8
 800d90c:	4631      	mov	r1, r6
 800d90e:	4628      	mov	r0, r5
 800d910:	47b8      	blx	r7
 800d912:	3001      	adds	r0, #1
 800d914:	d12c      	bne.n	800d970 <_printf_float+0x24c>
 800d916:	e764      	b.n	800d7e2 <_printf_float+0xbe>
 800d918:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d91c:	f240 80e0 	bls.w	800dae0 <_printf_float+0x3bc>
 800d920:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d924:	2200      	movs	r2, #0
 800d926:	2300      	movs	r3, #0
 800d928:	f7f3 f8ce 	bl	8000ac8 <__aeabi_dcmpeq>
 800d92c:	2800      	cmp	r0, #0
 800d92e:	d034      	beq.n	800d99a <_printf_float+0x276>
 800d930:	4a37      	ldr	r2, [pc, #220]	; (800da10 <_printf_float+0x2ec>)
 800d932:	2301      	movs	r3, #1
 800d934:	4631      	mov	r1, r6
 800d936:	4628      	mov	r0, r5
 800d938:	47b8      	blx	r7
 800d93a:	3001      	adds	r0, #1
 800d93c:	f43f af51 	beq.w	800d7e2 <_printf_float+0xbe>
 800d940:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d944:	429a      	cmp	r2, r3
 800d946:	db02      	blt.n	800d94e <_printf_float+0x22a>
 800d948:	6823      	ldr	r3, [r4, #0]
 800d94a:	07d8      	lsls	r0, r3, #31
 800d94c:	d510      	bpl.n	800d970 <_printf_float+0x24c>
 800d94e:	ee18 3a10 	vmov	r3, s16
 800d952:	4652      	mov	r2, sl
 800d954:	4631      	mov	r1, r6
 800d956:	4628      	mov	r0, r5
 800d958:	47b8      	blx	r7
 800d95a:	3001      	adds	r0, #1
 800d95c:	f43f af41 	beq.w	800d7e2 <_printf_float+0xbe>
 800d960:	f04f 0800 	mov.w	r8, #0
 800d964:	f104 091a 	add.w	r9, r4, #26
 800d968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d96a:	3b01      	subs	r3, #1
 800d96c:	4543      	cmp	r3, r8
 800d96e:	dc09      	bgt.n	800d984 <_printf_float+0x260>
 800d970:	6823      	ldr	r3, [r4, #0]
 800d972:	079b      	lsls	r3, r3, #30
 800d974:	f100 8107 	bmi.w	800db86 <_printf_float+0x462>
 800d978:	68e0      	ldr	r0, [r4, #12]
 800d97a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d97c:	4298      	cmp	r0, r3
 800d97e:	bfb8      	it	lt
 800d980:	4618      	movlt	r0, r3
 800d982:	e730      	b.n	800d7e6 <_printf_float+0xc2>
 800d984:	2301      	movs	r3, #1
 800d986:	464a      	mov	r2, r9
 800d988:	4631      	mov	r1, r6
 800d98a:	4628      	mov	r0, r5
 800d98c:	47b8      	blx	r7
 800d98e:	3001      	adds	r0, #1
 800d990:	f43f af27 	beq.w	800d7e2 <_printf_float+0xbe>
 800d994:	f108 0801 	add.w	r8, r8, #1
 800d998:	e7e6      	b.n	800d968 <_printf_float+0x244>
 800d99a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	dc39      	bgt.n	800da14 <_printf_float+0x2f0>
 800d9a0:	4a1b      	ldr	r2, [pc, #108]	; (800da10 <_printf_float+0x2ec>)
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	4631      	mov	r1, r6
 800d9a6:	4628      	mov	r0, r5
 800d9a8:	47b8      	blx	r7
 800d9aa:	3001      	adds	r0, #1
 800d9ac:	f43f af19 	beq.w	800d7e2 <_printf_float+0xbe>
 800d9b0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	d102      	bne.n	800d9be <_printf_float+0x29a>
 800d9b8:	6823      	ldr	r3, [r4, #0]
 800d9ba:	07d9      	lsls	r1, r3, #31
 800d9bc:	d5d8      	bpl.n	800d970 <_printf_float+0x24c>
 800d9be:	ee18 3a10 	vmov	r3, s16
 800d9c2:	4652      	mov	r2, sl
 800d9c4:	4631      	mov	r1, r6
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	47b8      	blx	r7
 800d9ca:	3001      	adds	r0, #1
 800d9cc:	f43f af09 	beq.w	800d7e2 <_printf_float+0xbe>
 800d9d0:	f04f 0900 	mov.w	r9, #0
 800d9d4:	f104 0a1a 	add.w	sl, r4, #26
 800d9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9da:	425b      	negs	r3, r3
 800d9dc:	454b      	cmp	r3, r9
 800d9de:	dc01      	bgt.n	800d9e4 <_printf_float+0x2c0>
 800d9e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9e2:	e792      	b.n	800d90a <_printf_float+0x1e6>
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	4652      	mov	r2, sl
 800d9e8:	4631      	mov	r1, r6
 800d9ea:	4628      	mov	r0, r5
 800d9ec:	47b8      	blx	r7
 800d9ee:	3001      	adds	r0, #1
 800d9f0:	f43f aef7 	beq.w	800d7e2 <_printf_float+0xbe>
 800d9f4:	f109 0901 	add.w	r9, r9, #1
 800d9f8:	e7ee      	b.n	800d9d8 <_printf_float+0x2b4>
 800d9fa:	bf00      	nop
 800d9fc:	7fefffff 	.word	0x7fefffff
 800da00:	08011779 	.word	0x08011779
 800da04:	0801177d 	.word	0x0801177d
 800da08:	08011781 	.word	0x08011781
 800da0c:	08011785 	.word	0x08011785
 800da10:	08011789 	.word	0x08011789
 800da14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da18:	429a      	cmp	r2, r3
 800da1a:	bfa8      	it	ge
 800da1c:	461a      	movge	r2, r3
 800da1e:	2a00      	cmp	r2, #0
 800da20:	4691      	mov	r9, r2
 800da22:	dc37      	bgt.n	800da94 <_printf_float+0x370>
 800da24:	f04f 0b00 	mov.w	fp, #0
 800da28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da2c:	f104 021a 	add.w	r2, r4, #26
 800da30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da32:	9305      	str	r3, [sp, #20]
 800da34:	eba3 0309 	sub.w	r3, r3, r9
 800da38:	455b      	cmp	r3, fp
 800da3a:	dc33      	bgt.n	800daa4 <_printf_float+0x380>
 800da3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da40:	429a      	cmp	r2, r3
 800da42:	db3b      	blt.n	800dabc <_printf_float+0x398>
 800da44:	6823      	ldr	r3, [r4, #0]
 800da46:	07da      	lsls	r2, r3, #31
 800da48:	d438      	bmi.n	800dabc <_printf_float+0x398>
 800da4a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800da4e:	eba2 0903 	sub.w	r9, r2, r3
 800da52:	9b05      	ldr	r3, [sp, #20]
 800da54:	1ad2      	subs	r2, r2, r3
 800da56:	4591      	cmp	r9, r2
 800da58:	bfa8      	it	ge
 800da5a:	4691      	movge	r9, r2
 800da5c:	f1b9 0f00 	cmp.w	r9, #0
 800da60:	dc35      	bgt.n	800dace <_printf_float+0x3aa>
 800da62:	f04f 0800 	mov.w	r8, #0
 800da66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da6a:	f104 0a1a 	add.w	sl, r4, #26
 800da6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da72:	1a9b      	subs	r3, r3, r2
 800da74:	eba3 0309 	sub.w	r3, r3, r9
 800da78:	4543      	cmp	r3, r8
 800da7a:	f77f af79 	ble.w	800d970 <_printf_float+0x24c>
 800da7e:	2301      	movs	r3, #1
 800da80:	4652      	mov	r2, sl
 800da82:	4631      	mov	r1, r6
 800da84:	4628      	mov	r0, r5
 800da86:	47b8      	blx	r7
 800da88:	3001      	adds	r0, #1
 800da8a:	f43f aeaa 	beq.w	800d7e2 <_printf_float+0xbe>
 800da8e:	f108 0801 	add.w	r8, r8, #1
 800da92:	e7ec      	b.n	800da6e <_printf_float+0x34a>
 800da94:	4613      	mov	r3, r2
 800da96:	4631      	mov	r1, r6
 800da98:	4642      	mov	r2, r8
 800da9a:	4628      	mov	r0, r5
 800da9c:	47b8      	blx	r7
 800da9e:	3001      	adds	r0, #1
 800daa0:	d1c0      	bne.n	800da24 <_printf_float+0x300>
 800daa2:	e69e      	b.n	800d7e2 <_printf_float+0xbe>
 800daa4:	2301      	movs	r3, #1
 800daa6:	4631      	mov	r1, r6
 800daa8:	4628      	mov	r0, r5
 800daaa:	9205      	str	r2, [sp, #20]
 800daac:	47b8      	blx	r7
 800daae:	3001      	adds	r0, #1
 800dab0:	f43f ae97 	beq.w	800d7e2 <_printf_float+0xbe>
 800dab4:	9a05      	ldr	r2, [sp, #20]
 800dab6:	f10b 0b01 	add.w	fp, fp, #1
 800daba:	e7b9      	b.n	800da30 <_printf_float+0x30c>
 800dabc:	ee18 3a10 	vmov	r3, s16
 800dac0:	4652      	mov	r2, sl
 800dac2:	4631      	mov	r1, r6
 800dac4:	4628      	mov	r0, r5
 800dac6:	47b8      	blx	r7
 800dac8:	3001      	adds	r0, #1
 800daca:	d1be      	bne.n	800da4a <_printf_float+0x326>
 800dacc:	e689      	b.n	800d7e2 <_printf_float+0xbe>
 800dace:	9a05      	ldr	r2, [sp, #20]
 800dad0:	464b      	mov	r3, r9
 800dad2:	4442      	add	r2, r8
 800dad4:	4631      	mov	r1, r6
 800dad6:	4628      	mov	r0, r5
 800dad8:	47b8      	blx	r7
 800dada:	3001      	adds	r0, #1
 800dadc:	d1c1      	bne.n	800da62 <_printf_float+0x33e>
 800dade:	e680      	b.n	800d7e2 <_printf_float+0xbe>
 800dae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dae2:	2a01      	cmp	r2, #1
 800dae4:	dc01      	bgt.n	800daea <_printf_float+0x3c6>
 800dae6:	07db      	lsls	r3, r3, #31
 800dae8:	d53a      	bpl.n	800db60 <_printf_float+0x43c>
 800daea:	2301      	movs	r3, #1
 800daec:	4642      	mov	r2, r8
 800daee:	4631      	mov	r1, r6
 800daf0:	4628      	mov	r0, r5
 800daf2:	47b8      	blx	r7
 800daf4:	3001      	adds	r0, #1
 800daf6:	f43f ae74 	beq.w	800d7e2 <_printf_float+0xbe>
 800dafa:	ee18 3a10 	vmov	r3, s16
 800dafe:	4652      	mov	r2, sl
 800db00:	4631      	mov	r1, r6
 800db02:	4628      	mov	r0, r5
 800db04:	47b8      	blx	r7
 800db06:	3001      	adds	r0, #1
 800db08:	f43f ae6b 	beq.w	800d7e2 <_printf_float+0xbe>
 800db0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800db10:	2200      	movs	r2, #0
 800db12:	2300      	movs	r3, #0
 800db14:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800db18:	f7f2 ffd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800db1c:	b9d8      	cbnz	r0, 800db56 <_printf_float+0x432>
 800db1e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800db22:	f108 0201 	add.w	r2, r8, #1
 800db26:	4631      	mov	r1, r6
 800db28:	4628      	mov	r0, r5
 800db2a:	47b8      	blx	r7
 800db2c:	3001      	adds	r0, #1
 800db2e:	d10e      	bne.n	800db4e <_printf_float+0x42a>
 800db30:	e657      	b.n	800d7e2 <_printf_float+0xbe>
 800db32:	2301      	movs	r3, #1
 800db34:	4652      	mov	r2, sl
 800db36:	4631      	mov	r1, r6
 800db38:	4628      	mov	r0, r5
 800db3a:	47b8      	blx	r7
 800db3c:	3001      	adds	r0, #1
 800db3e:	f43f ae50 	beq.w	800d7e2 <_printf_float+0xbe>
 800db42:	f108 0801 	add.w	r8, r8, #1
 800db46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db48:	3b01      	subs	r3, #1
 800db4a:	4543      	cmp	r3, r8
 800db4c:	dcf1      	bgt.n	800db32 <_printf_float+0x40e>
 800db4e:	464b      	mov	r3, r9
 800db50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800db54:	e6da      	b.n	800d90c <_printf_float+0x1e8>
 800db56:	f04f 0800 	mov.w	r8, #0
 800db5a:	f104 0a1a 	add.w	sl, r4, #26
 800db5e:	e7f2      	b.n	800db46 <_printf_float+0x422>
 800db60:	2301      	movs	r3, #1
 800db62:	4642      	mov	r2, r8
 800db64:	e7df      	b.n	800db26 <_printf_float+0x402>
 800db66:	2301      	movs	r3, #1
 800db68:	464a      	mov	r2, r9
 800db6a:	4631      	mov	r1, r6
 800db6c:	4628      	mov	r0, r5
 800db6e:	47b8      	blx	r7
 800db70:	3001      	adds	r0, #1
 800db72:	f43f ae36 	beq.w	800d7e2 <_printf_float+0xbe>
 800db76:	f108 0801 	add.w	r8, r8, #1
 800db7a:	68e3      	ldr	r3, [r4, #12]
 800db7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db7e:	1a5b      	subs	r3, r3, r1
 800db80:	4543      	cmp	r3, r8
 800db82:	dcf0      	bgt.n	800db66 <_printf_float+0x442>
 800db84:	e6f8      	b.n	800d978 <_printf_float+0x254>
 800db86:	f04f 0800 	mov.w	r8, #0
 800db8a:	f104 0919 	add.w	r9, r4, #25
 800db8e:	e7f4      	b.n	800db7a <_printf_float+0x456>

0800db90 <_printf_common>:
 800db90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db94:	4616      	mov	r6, r2
 800db96:	4699      	mov	r9, r3
 800db98:	688a      	ldr	r2, [r1, #8]
 800db9a:	690b      	ldr	r3, [r1, #16]
 800db9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dba0:	4293      	cmp	r3, r2
 800dba2:	bfb8      	it	lt
 800dba4:	4613      	movlt	r3, r2
 800dba6:	6033      	str	r3, [r6, #0]
 800dba8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dbac:	4607      	mov	r7, r0
 800dbae:	460c      	mov	r4, r1
 800dbb0:	b10a      	cbz	r2, 800dbb6 <_printf_common+0x26>
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	6033      	str	r3, [r6, #0]
 800dbb6:	6823      	ldr	r3, [r4, #0]
 800dbb8:	0699      	lsls	r1, r3, #26
 800dbba:	bf42      	ittt	mi
 800dbbc:	6833      	ldrmi	r3, [r6, #0]
 800dbbe:	3302      	addmi	r3, #2
 800dbc0:	6033      	strmi	r3, [r6, #0]
 800dbc2:	6825      	ldr	r5, [r4, #0]
 800dbc4:	f015 0506 	ands.w	r5, r5, #6
 800dbc8:	d106      	bne.n	800dbd8 <_printf_common+0x48>
 800dbca:	f104 0a19 	add.w	sl, r4, #25
 800dbce:	68e3      	ldr	r3, [r4, #12]
 800dbd0:	6832      	ldr	r2, [r6, #0]
 800dbd2:	1a9b      	subs	r3, r3, r2
 800dbd4:	42ab      	cmp	r3, r5
 800dbd6:	dc26      	bgt.n	800dc26 <_printf_common+0x96>
 800dbd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dbdc:	1e13      	subs	r3, r2, #0
 800dbde:	6822      	ldr	r2, [r4, #0]
 800dbe0:	bf18      	it	ne
 800dbe2:	2301      	movne	r3, #1
 800dbe4:	0692      	lsls	r2, r2, #26
 800dbe6:	d42b      	bmi.n	800dc40 <_printf_common+0xb0>
 800dbe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dbec:	4649      	mov	r1, r9
 800dbee:	4638      	mov	r0, r7
 800dbf0:	47c0      	blx	r8
 800dbf2:	3001      	adds	r0, #1
 800dbf4:	d01e      	beq.n	800dc34 <_printf_common+0xa4>
 800dbf6:	6823      	ldr	r3, [r4, #0]
 800dbf8:	6922      	ldr	r2, [r4, #16]
 800dbfa:	f003 0306 	and.w	r3, r3, #6
 800dbfe:	2b04      	cmp	r3, #4
 800dc00:	bf02      	ittt	eq
 800dc02:	68e5      	ldreq	r5, [r4, #12]
 800dc04:	6833      	ldreq	r3, [r6, #0]
 800dc06:	1aed      	subeq	r5, r5, r3
 800dc08:	68a3      	ldr	r3, [r4, #8]
 800dc0a:	bf0c      	ite	eq
 800dc0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc10:	2500      	movne	r5, #0
 800dc12:	4293      	cmp	r3, r2
 800dc14:	bfc4      	itt	gt
 800dc16:	1a9b      	subgt	r3, r3, r2
 800dc18:	18ed      	addgt	r5, r5, r3
 800dc1a:	2600      	movs	r6, #0
 800dc1c:	341a      	adds	r4, #26
 800dc1e:	42b5      	cmp	r5, r6
 800dc20:	d11a      	bne.n	800dc58 <_printf_common+0xc8>
 800dc22:	2000      	movs	r0, #0
 800dc24:	e008      	b.n	800dc38 <_printf_common+0xa8>
 800dc26:	2301      	movs	r3, #1
 800dc28:	4652      	mov	r2, sl
 800dc2a:	4649      	mov	r1, r9
 800dc2c:	4638      	mov	r0, r7
 800dc2e:	47c0      	blx	r8
 800dc30:	3001      	adds	r0, #1
 800dc32:	d103      	bne.n	800dc3c <_printf_common+0xac>
 800dc34:	f04f 30ff 	mov.w	r0, #4294967295
 800dc38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc3c:	3501      	adds	r5, #1
 800dc3e:	e7c6      	b.n	800dbce <_printf_common+0x3e>
 800dc40:	18e1      	adds	r1, r4, r3
 800dc42:	1c5a      	adds	r2, r3, #1
 800dc44:	2030      	movs	r0, #48	; 0x30
 800dc46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dc4a:	4422      	add	r2, r4
 800dc4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dc50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dc54:	3302      	adds	r3, #2
 800dc56:	e7c7      	b.n	800dbe8 <_printf_common+0x58>
 800dc58:	2301      	movs	r3, #1
 800dc5a:	4622      	mov	r2, r4
 800dc5c:	4649      	mov	r1, r9
 800dc5e:	4638      	mov	r0, r7
 800dc60:	47c0      	blx	r8
 800dc62:	3001      	adds	r0, #1
 800dc64:	d0e6      	beq.n	800dc34 <_printf_common+0xa4>
 800dc66:	3601      	adds	r6, #1
 800dc68:	e7d9      	b.n	800dc1e <_printf_common+0x8e>
	...

0800dc6c <_printf_i>:
 800dc6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc70:	7e0f      	ldrb	r7, [r1, #24]
 800dc72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dc74:	2f78      	cmp	r7, #120	; 0x78
 800dc76:	4691      	mov	r9, r2
 800dc78:	4680      	mov	r8, r0
 800dc7a:	460c      	mov	r4, r1
 800dc7c:	469a      	mov	sl, r3
 800dc7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dc82:	d807      	bhi.n	800dc94 <_printf_i+0x28>
 800dc84:	2f62      	cmp	r7, #98	; 0x62
 800dc86:	d80a      	bhi.n	800dc9e <_printf_i+0x32>
 800dc88:	2f00      	cmp	r7, #0
 800dc8a:	f000 80d4 	beq.w	800de36 <_printf_i+0x1ca>
 800dc8e:	2f58      	cmp	r7, #88	; 0x58
 800dc90:	f000 80c0 	beq.w	800de14 <_printf_i+0x1a8>
 800dc94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dc9c:	e03a      	b.n	800dd14 <_printf_i+0xa8>
 800dc9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dca2:	2b15      	cmp	r3, #21
 800dca4:	d8f6      	bhi.n	800dc94 <_printf_i+0x28>
 800dca6:	a101      	add	r1, pc, #4	; (adr r1, 800dcac <_printf_i+0x40>)
 800dca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dcac:	0800dd05 	.word	0x0800dd05
 800dcb0:	0800dd19 	.word	0x0800dd19
 800dcb4:	0800dc95 	.word	0x0800dc95
 800dcb8:	0800dc95 	.word	0x0800dc95
 800dcbc:	0800dc95 	.word	0x0800dc95
 800dcc0:	0800dc95 	.word	0x0800dc95
 800dcc4:	0800dd19 	.word	0x0800dd19
 800dcc8:	0800dc95 	.word	0x0800dc95
 800dccc:	0800dc95 	.word	0x0800dc95
 800dcd0:	0800dc95 	.word	0x0800dc95
 800dcd4:	0800dc95 	.word	0x0800dc95
 800dcd8:	0800de1d 	.word	0x0800de1d
 800dcdc:	0800dd45 	.word	0x0800dd45
 800dce0:	0800ddd7 	.word	0x0800ddd7
 800dce4:	0800dc95 	.word	0x0800dc95
 800dce8:	0800dc95 	.word	0x0800dc95
 800dcec:	0800de3f 	.word	0x0800de3f
 800dcf0:	0800dc95 	.word	0x0800dc95
 800dcf4:	0800dd45 	.word	0x0800dd45
 800dcf8:	0800dc95 	.word	0x0800dc95
 800dcfc:	0800dc95 	.word	0x0800dc95
 800dd00:	0800dddf 	.word	0x0800dddf
 800dd04:	682b      	ldr	r3, [r5, #0]
 800dd06:	1d1a      	adds	r2, r3, #4
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	602a      	str	r2, [r5, #0]
 800dd0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd14:	2301      	movs	r3, #1
 800dd16:	e09f      	b.n	800de58 <_printf_i+0x1ec>
 800dd18:	6820      	ldr	r0, [r4, #0]
 800dd1a:	682b      	ldr	r3, [r5, #0]
 800dd1c:	0607      	lsls	r7, r0, #24
 800dd1e:	f103 0104 	add.w	r1, r3, #4
 800dd22:	6029      	str	r1, [r5, #0]
 800dd24:	d501      	bpl.n	800dd2a <_printf_i+0xbe>
 800dd26:	681e      	ldr	r6, [r3, #0]
 800dd28:	e003      	b.n	800dd32 <_printf_i+0xc6>
 800dd2a:	0646      	lsls	r6, r0, #25
 800dd2c:	d5fb      	bpl.n	800dd26 <_printf_i+0xba>
 800dd2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dd32:	2e00      	cmp	r6, #0
 800dd34:	da03      	bge.n	800dd3e <_printf_i+0xd2>
 800dd36:	232d      	movs	r3, #45	; 0x2d
 800dd38:	4276      	negs	r6, r6
 800dd3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd3e:	485a      	ldr	r0, [pc, #360]	; (800dea8 <_printf_i+0x23c>)
 800dd40:	230a      	movs	r3, #10
 800dd42:	e012      	b.n	800dd6a <_printf_i+0xfe>
 800dd44:	682b      	ldr	r3, [r5, #0]
 800dd46:	6820      	ldr	r0, [r4, #0]
 800dd48:	1d19      	adds	r1, r3, #4
 800dd4a:	6029      	str	r1, [r5, #0]
 800dd4c:	0605      	lsls	r5, r0, #24
 800dd4e:	d501      	bpl.n	800dd54 <_printf_i+0xe8>
 800dd50:	681e      	ldr	r6, [r3, #0]
 800dd52:	e002      	b.n	800dd5a <_printf_i+0xee>
 800dd54:	0641      	lsls	r1, r0, #25
 800dd56:	d5fb      	bpl.n	800dd50 <_printf_i+0xe4>
 800dd58:	881e      	ldrh	r6, [r3, #0]
 800dd5a:	4853      	ldr	r0, [pc, #332]	; (800dea8 <_printf_i+0x23c>)
 800dd5c:	2f6f      	cmp	r7, #111	; 0x6f
 800dd5e:	bf0c      	ite	eq
 800dd60:	2308      	moveq	r3, #8
 800dd62:	230a      	movne	r3, #10
 800dd64:	2100      	movs	r1, #0
 800dd66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dd6a:	6865      	ldr	r5, [r4, #4]
 800dd6c:	60a5      	str	r5, [r4, #8]
 800dd6e:	2d00      	cmp	r5, #0
 800dd70:	bfa2      	ittt	ge
 800dd72:	6821      	ldrge	r1, [r4, #0]
 800dd74:	f021 0104 	bicge.w	r1, r1, #4
 800dd78:	6021      	strge	r1, [r4, #0]
 800dd7a:	b90e      	cbnz	r6, 800dd80 <_printf_i+0x114>
 800dd7c:	2d00      	cmp	r5, #0
 800dd7e:	d04b      	beq.n	800de18 <_printf_i+0x1ac>
 800dd80:	4615      	mov	r5, r2
 800dd82:	fbb6 f1f3 	udiv	r1, r6, r3
 800dd86:	fb03 6711 	mls	r7, r3, r1, r6
 800dd8a:	5dc7      	ldrb	r7, [r0, r7]
 800dd8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dd90:	4637      	mov	r7, r6
 800dd92:	42bb      	cmp	r3, r7
 800dd94:	460e      	mov	r6, r1
 800dd96:	d9f4      	bls.n	800dd82 <_printf_i+0x116>
 800dd98:	2b08      	cmp	r3, #8
 800dd9a:	d10b      	bne.n	800ddb4 <_printf_i+0x148>
 800dd9c:	6823      	ldr	r3, [r4, #0]
 800dd9e:	07de      	lsls	r6, r3, #31
 800dda0:	d508      	bpl.n	800ddb4 <_printf_i+0x148>
 800dda2:	6923      	ldr	r3, [r4, #16]
 800dda4:	6861      	ldr	r1, [r4, #4]
 800dda6:	4299      	cmp	r1, r3
 800dda8:	bfde      	ittt	le
 800ddaa:	2330      	movle	r3, #48	; 0x30
 800ddac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ddb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ddb4:	1b52      	subs	r2, r2, r5
 800ddb6:	6122      	str	r2, [r4, #16]
 800ddb8:	f8cd a000 	str.w	sl, [sp]
 800ddbc:	464b      	mov	r3, r9
 800ddbe:	aa03      	add	r2, sp, #12
 800ddc0:	4621      	mov	r1, r4
 800ddc2:	4640      	mov	r0, r8
 800ddc4:	f7ff fee4 	bl	800db90 <_printf_common>
 800ddc8:	3001      	adds	r0, #1
 800ddca:	d14a      	bne.n	800de62 <_printf_i+0x1f6>
 800ddcc:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd0:	b004      	add	sp, #16
 800ddd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddd6:	6823      	ldr	r3, [r4, #0]
 800ddd8:	f043 0320 	orr.w	r3, r3, #32
 800dddc:	6023      	str	r3, [r4, #0]
 800ddde:	4833      	ldr	r0, [pc, #204]	; (800deac <_printf_i+0x240>)
 800dde0:	2778      	movs	r7, #120	; 0x78
 800dde2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dde6:	6823      	ldr	r3, [r4, #0]
 800dde8:	6829      	ldr	r1, [r5, #0]
 800ddea:	061f      	lsls	r7, r3, #24
 800ddec:	f851 6b04 	ldr.w	r6, [r1], #4
 800ddf0:	d402      	bmi.n	800ddf8 <_printf_i+0x18c>
 800ddf2:	065f      	lsls	r7, r3, #25
 800ddf4:	bf48      	it	mi
 800ddf6:	b2b6      	uxthmi	r6, r6
 800ddf8:	07df      	lsls	r7, r3, #31
 800ddfa:	bf48      	it	mi
 800ddfc:	f043 0320 	orrmi.w	r3, r3, #32
 800de00:	6029      	str	r1, [r5, #0]
 800de02:	bf48      	it	mi
 800de04:	6023      	strmi	r3, [r4, #0]
 800de06:	b91e      	cbnz	r6, 800de10 <_printf_i+0x1a4>
 800de08:	6823      	ldr	r3, [r4, #0]
 800de0a:	f023 0320 	bic.w	r3, r3, #32
 800de0e:	6023      	str	r3, [r4, #0]
 800de10:	2310      	movs	r3, #16
 800de12:	e7a7      	b.n	800dd64 <_printf_i+0xf8>
 800de14:	4824      	ldr	r0, [pc, #144]	; (800dea8 <_printf_i+0x23c>)
 800de16:	e7e4      	b.n	800dde2 <_printf_i+0x176>
 800de18:	4615      	mov	r5, r2
 800de1a:	e7bd      	b.n	800dd98 <_printf_i+0x12c>
 800de1c:	682b      	ldr	r3, [r5, #0]
 800de1e:	6826      	ldr	r6, [r4, #0]
 800de20:	6961      	ldr	r1, [r4, #20]
 800de22:	1d18      	adds	r0, r3, #4
 800de24:	6028      	str	r0, [r5, #0]
 800de26:	0635      	lsls	r5, r6, #24
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	d501      	bpl.n	800de30 <_printf_i+0x1c4>
 800de2c:	6019      	str	r1, [r3, #0]
 800de2e:	e002      	b.n	800de36 <_printf_i+0x1ca>
 800de30:	0670      	lsls	r0, r6, #25
 800de32:	d5fb      	bpl.n	800de2c <_printf_i+0x1c0>
 800de34:	8019      	strh	r1, [r3, #0]
 800de36:	2300      	movs	r3, #0
 800de38:	6123      	str	r3, [r4, #16]
 800de3a:	4615      	mov	r5, r2
 800de3c:	e7bc      	b.n	800ddb8 <_printf_i+0x14c>
 800de3e:	682b      	ldr	r3, [r5, #0]
 800de40:	1d1a      	adds	r2, r3, #4
 800de42:	602a      	str	r2, [r5, #0]
 800de44:	681d      	ldr	r5, [r3, #0]
 800de46:	6862      	ldr	r2, [r4, #4]
 800de48:	2100      	movs	r1, #0
 800de4a:	4628      	mov	r0, r5
 800de4c:	f7f2 f9c0 	bl	80001d0 <memchr>
 800de50:	b108      	cbz	r0, 800de56 <_printf_i+0x1ea>
 800de52:	1b40      	subs	r0, r0, r5
 800de54:	6060      	str	r0, [r4, #4]
 800de56:	6863      	ldr	r3, [r4, #4]
 800de58:	6123      	str	r3, [r4, #16]
 800de5a:	2300      	movs	r3, #0
 800de5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de60:	e7aa      	b.n	800ddb8 <_printf_i+0x14c>
 800de62:	6923      	ldr	r3, [r4, #16]
 800de64:	462a      	mov	r2, r5
 800de66:	4649      	mov	r1, r9
 800de68:	4640      	mov	r0, r8
 800de6a:	47d0      	blx	sl
 800de6c:	3001      	adds	r0, #1
 800de6e:	d0ad      	beq.n	800ddcc <_printf_i+0x160>
 800de70:	6823      	ldr	r3, [r4, #0]
 800de72:	079b      	lsls	r3, r3, #30
 800de74:	d413      	bmi.n	800de9e <_printf_i+0x232>
 800de76:	68e0      	ldr	r0, [r4, #12]
 800de78:	9b03      	ldr	r3, [sp, #12]
 800de7a:	4298      	cmp	r0, r3
 800de7c:	bfb8      	it	lt
 800de7e:	4618      	movlt	r0, r3
 800de80:	e7a6      	b.n	800ddd0 <_printf_i+0x164>
 800de82:	2301      	movs	r3, #1
 800de84:	4632      	mov	r2, r6
 800de86:	4649      	mov	r1, r9
 800de88:	4640      	mov	r0, r8
 800de8a:	47d0      	blx	sl
 800de8c:	3001      	adds	r0, #1
 800de8e:	d09d      	beq.n	800ddcc <_printf_i+0x160>
 800de90:	3501      	adds	r5, #1
 800de92:	68e3      	ldr	r3, [r4, #12]
 800de94:	9903      	ldr	r1, [sp, #12]
 800de96:	1a5b      	subs	r3, r3, r1
 800de98:	42ab      	cmp	r3, r5
 800de9a:	dcf2      	bgt.n	800de82 <_printf_i+0x216>
 800de9c:	e7eb      	b.n	800de76 <_printf_i+0x20a>
 800de9e:	2500      	movs	r5, #0
 800dea0:	f104 0619 	add.w	r6, r4, #25
 800dea4:	e7f5      	b.n	800de92 <_printf_i+0x226>
 800dea6:	bf00      	nop
 800dea8:	0801178b 	.word	0x0801178b
 800deac:	0801179c 	.word	0x0801179c

0800deb0 <std>:
 800deb0:	2300      	movs	r3, #0
 800deb2:	b510      	push	{r4, lr}
 800deb4:	4604      	mov	r4, r0
 800deb6:	e9c0 3300 	strd	r3, r3, [r0]
 800deba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800debe:	6083      	str	r3, [r0, #8]
 800dec0:	8181      	strh	r1, [r0, #12]
 800dec2:	6643      	str	r3, [r0, #100]	; 0x64
 800dec4:	81c2      	strh	r2, [r0, #14]
 800dec6:	6183      	str	r3, [r0, #24]
 800dec8:	4619      	mov	r1, r3
 800deca:	2208      	movs	r2, #8
 800decc:	305c      	adds	r0, #92	; 0x5c
 800dece:	f000 f9ed 	bl	800e2ac <memset>
 800ded2:	4b05      	ldr	r3, [pc, #20]	; (800dee8 <std+0x38>)
 800ded4:	6263      	str	r3, [r4, #36]	; 0x24
 800ded6:	4b05      	ldr	r3, [pc, #20]	; (800deec <std+0x3c>)
 800ded8:	62a3      	str	r3, [r4, #40]	; 0x28
 800deda:	4b05      	ldr	r3, [pc, #20]	; (800def0 <std+0x40>)
 800dedc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dede:	4b05      	ldr	r3, [pc, #20]	; (800def4 <std+0x44>)
 800dee0:	6224      	str	r4, [r4, #32]
 800dee2:	6323      	str	r3, [r4, #48]	; 0x30
 800dee4:	bd10      	pop	{r4, pc}
 800dee6:	bf00      	nop
 800dee8:	0800e0fd 	.word	0x0800e0fd
 800deec:	0800e11f 	.word	0x0800e11f
 800def0:	0800e157 	.word	0x0800e157
 800def4:	0800e17b 	.word	0x0800e17b

0800def8 <stdio_exit_handler>:
 800def8:	4a02      	ldr	r2, [pc, #8]	; (800df04 <stdio_exit_handler+0xc>)
 800defa:	4903      	ldr	r1, [pc, #12]	; (800df08 <stdio_exit_handler+0x10>)
 800defc:	4803      	ldr	r0, [pc, #12]	; (800df0c <stdio_exit_handler+0x14>)
 800defe:	f000 b869 	b.w	800dfd4 <_fwalk_sglue>
 800df02:	bf00      	nop
 800df04:	20000088 	.word	0x20000088
 800df08:	0801009d 	.word	0x0801009d
 800df0c:	20000094 	.word	0x20000094

0800df10 <cleanup_stdio>:
 800df10:	6841      	ldr	r1, [r0, #4]
 800df12:	4b0c      	ldr	r3, [pc, #48]	; (800df44 <cleanup_stdio+0x34>)
 800df14:	4299      	cmp	r1, r3
 800df16:	b510      	push	{r4, lr}
 800df18:	4604      	mov	r4, r0
 800df1a:	d001      	beq.n	800df20 <cleanup_stdio+0x10>
 800df1c:	f002 f8be 	bl	801009c <_fflush_r>
 800df20:	68a1      	ldr	r1, [r4, #8]
 800df22:	4b09      	ldr	r3, [pc, #36]	; (800df48 <cleanup_stdio+0x38>)
 800df24:	4299      	cmp	r1, r3
 800df26:	d002      	beq.n	800df2e <cleanup_stdio+0x1e>
 800df28:	4620      	mov	r0, r4
 800df2a:	f002 f8b7 	bl	801009c <_fflush_r>
 800df2e:	68e1      	ldr	r1, [r4, #12]
 800df30:	4b06      	ldr	r3, [pc, #24]	; (800df4c <cleanup_stdio+0x3c>)
 800df32:	4299      	cmp	r1, r3
 800df34:	d004      	beq.n	800df40 <cleanup_stdio+0x30>
 800df36:	4620      	mov	r0, r4
 800df38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df3c:	f002 b8ae 	b.w	801009c <_fflush_r>
 800df40:	bd10      	pop	{r4, pc}
 800df42:	bf00      	nop
 800df44:	20004dfc 	.word	0x20004dfc
 800df48:	20004e64 	.word	0x20004e64
 800df4c:	20004ecc 	.word	0x20004ecc

0800df50 <global_stdio_init.part.0>:
 800df50:	b510      	push	{r4, lr}
 800df52:	4b0b      	ldr	r3, [pc, #44]	; (800df80 <global_stdio_init.part.0+0x30>)
 800df54:	4c0b      	ldr	r4, [pc, #44]	; (800df84 <global_stdio_init.part.0+0x34>)
 800df56:	4a0c      	ldr	r2, [pc, #48]	; (800df88 <global_stdio_init.part.0+0x38>)
 800df58:	601a      	str	r2, [r3, #0]
 800df5a:	4620      	mov	r0, r4
 800df5c:	2200      	movs	r2, #0
 800df5e:	2104      	movs	r1, #4
 800df60:	f7ff ffa6 	bl	800deb0 <std>
 800df64:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800df68:	2201      	movs	r2, #1
 800df6a:	2109      	movs	r1, #9
 800df6c:	f7ff ffa0 	bl	800deb0 <std>
 800df70:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800df74:	2202      	movs	r2, #2
 800df76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df7a:	2112      	movs	r1, #18
 800df7c:	f7ff bf98 	b.w	800deb0 <std>
 800df80:	20004f34 	.word	0x20004f34
 800df84:	20004dfc 	.word	0x20004dfc
 800df88:	0800def9 	.word	0x0800def9

0800df8c <__sfp_lock_acquire>:
 800df8c:	4801      	ldr	r0, [pc, #4]	; (800df94 <__sfp_lock_acquire+0x8>)
 800df8e:	f000 ba5f 	b.w	800e450 <__retarget_lock_acquire_recursive>
 800df92:	bf00      	nop
 800df94:	20004f3d 	.word	0x20004f3d

0800df98 <__sfp_lock_release>:
 800df98:	4801      	ldr	r0, [pc, #4]	; (800dfa0 <__sfp_lock_release+0x8>)
 800df9a:	f000 ba5a 	b.w	800e452 <__retarget_lock_release_recursive>
 800df9e:	bf00      	nop
 800dfa0:	20004f3d 	.word	0x20004f3d

0800dfa4 <__sinit>:
 800dfa4:	b510      	push	{r4, lr}
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	f7ff fff0 	bl	800df8c <__sfp_lock_acquire>
 800dfac:	6a23      	ldr	r3, [r4, #32]
 800dfae:	b11b      	cbz	r3, 800dfb8 <__sinit+0x14>
 800dfb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfb4:	f7ff bff0 	b.w	800df98 <__sfp_lock_release>
 800dfb8:	4b04      	ldr	r3, [pc, #16]	; (800dfcc <__sinit+0x28>)
 800dfba:	6223      	str	r3, [r4, #32]
 800dfbc:	4b04      	ldr	r3, [pc, #16]	; (800dfd0 <__sinit+0x2c>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d1f5      	bne.n	800dfb0 <__sinit+0xc>
 800dfc4:	f7ff ffc4 	bl	800df50 <global_stdio_init.part.0>
 800dfc8:	e7f2      	b.n	800dfb0 <__sinit+0xc>
 800dfca:	bf00      	nop
 800dfcc:	0800df11 	.word	0x0800df11
 800dfd0:	20004f34 	.word	0x20004f34

0800dfd4 <_fwalk_sglue>:
 800dfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfd8:	4607      	mov	r7, r0
 800dfda:	4688      	mov	r8, r1
 800dfdc:	4614      	mov	r4, r2
 800dfde:	2600      	movs	r6, #0
 800dfe0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dfe4:	f1b9 0901 	subs.w	r9, r9, #1
 800dfe8:	d505      	bpl.n	800dff6 <_fwalk_sglue+0x22>
 800dfea:	6824      	ldr	r4, [r4, #0]
 800dfec:	2c00      	cmp	r4, #0
 800dfee:	d1f7      	bne.n	800dfe0 <_fwalk_sglue+0xc>
 800dff0:	4630      	mov	r0, r6
 800dff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dff6:	89ab      	ldrh	r3, [r5, #12]
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d907      	bls.n	800e00c <_fwalk_sglue+0x38>
 800dffc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e000:	3301      	adds	r3, #1
 800e002:	d003      	beq.n	800e00c <_fwalk_sglue+0x38>
 800e004:	4629      	mov	r1, r5
 800e006:	4638      	mov	r0, r7
 800e008:	47c0      	blx	r8
 800e00a:	4306      	orrs	r6, r0
 800e00c:	3568      	adds	r5, #104	; 0x68
 800e00e:	e7e9      	b.n	800dfe4 <_fwalk_sglue+0x10>

0800e010 <iprintf>:
 800e010:	b40f      	push	{r0, r1, r2, r3}
 800e012:	b507      	push	{r0, r1, r2, lr}
 800e014:	4906      	ldr	r1, [pc, #24]	; (800e030 <iprintf+0x20>)
 800e016:	ab04      	add	r3, sp, #16
 800e018:	6808      	ldr	r0, [r1, #0]
 800e01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e01e:	6881      	ldr	r1, [r0, #8]
 800e020:	9301      	str	r3, [sp, #4]
 800e022:	f001 fe9b 	bl	800fd5c <_vfiprintf_r>
 800e026:	b003      	add	sp, #12
 800e028:	f85d eb04 	ldr.w	lr, [sp], #4
 800e02c:	b004      	add	sp, #16
 800e02e:	4770      	bx	lr
 800e030:	200000e0 	.word	0x200000e0

0800e034 <putchar>:
 800e034:	4b02      	ldr	r3, [pc, #8]	; (800e040 <putchar+0xc>)
 800e036:	4601      	mov	r1, r0
 800e038:	6818      	ldr	r0, [r3, #0]
 800e03a:	6882      	ldr	r2, [r0, #8]
 800e03c:	f002 b8b8 	b.w	80101b0 <_putc_r>
 800e040:	200000e0 	.word	0x200000e0

0800e044 <_puts_r>:
 800e044:	6a03      	ldr	r3, [r0, #32]
 800e046:	b570      	push	{r4, r5, r6, lr}
 800e048:	6884      	ldr	r4, [r0, #8]
 800e04a:	4605      	mov	r5, r0
 800e04c:	460e      	mov	r6, r1
 800e04e:	b90b      	cbnz	r3, 800e054 <_puts_r+0x10>
 800e050:	f7ff ffa8 	bl	800dfa4 <__sinit>
 800e054:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e056:	07db      	lsls	r3, r3, #31
 800e058:	d405      	bmi.n	800e066 <_puts_r+0x22>
 800e05a:	89a3      	ldrh	r3, [r4, #12]
 800e05c:	0598      	lsls	r0, r3, #22
 800e05e:	d402      	bmi.n	800e066 <_puts_r+0x22>
 800e060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e062:	f000 f9f5 	bl	800e450 <__retarget_lock_acquire_recursive>
 800e066:	89a3      	ldrh	r3, [r4, #12]
 800e068:	0719      	lsls	r1, r3, #28
 800e06a:	d513      	bpl.n	800e094 <_puts_r+0x50>
 800e06c:	6923      	ldr	r3, [r4, #16]
 800e06e:	b18b      	cbz	r3, 800e094 <_puts_r+0x50>
 800e070:	3e01      	subs	r6, #1
 800e072:	68a3      	ldr	r3, [r4, #8]
 800e074:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e078:	3b01      	subs	r3, #1
 800e07a:	60a3      	str	r3, [r4, #8]
 800e07c:	b9e9      	cbnz	r1, 800e0ba <_puts_r+0x76>
 800e07e:	2b00      	cmp	r3, #0
 800e080:	da2e      	bge.n	800e0e0 <_puts_r+0x9c>
 800e082:	4622      	mov	r2, r4
 800e084:	210a      	movs	r1, #10
 800e086:	4628      	mov	r0, r5
 800e088:	f000 f87b 	bl	800e182 <__swbuf_r>
 800e08c:	3001      	adds	r0, #1
 800e08e:	d007      	beq.n	800e0a0 <_puts_r+0x5c>
 800e090:	250a      	movs	r5, #10
 800e092:	e007      	b.n	800e0a4 <_puts_r+0x60>
 800e094:	4621      	mov	r1, r4
 800e096:	4628      	mov	r0, r5
 800e098:	f000 f8b0 	bl	800e1fc <__swsetup_r>
 800e09c:	2800      	cmp	r0, #0
 800e09e:	d0e7      	beq.n	800e070 <_puts_r+0x2c>
 800e0a0:	f04f 35ff 	mov.w	r5, #4294967295
 800e0a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0a6:	07da      	lsls	r2, r3, #31
 800e0a8:	d405      	bmi.n	800e0b6 <_puts_r+0x72>
 800e0aa:	89a3      	ldrh	r3, [r4, #12]
 800e0ac:	059b      	lsls	r3, r3, #22
 800e0ae:	d402      	bmi.n	800e0b6 <_puts_r+0x72>
 800e0b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0b2:	f000 f9ce 	bl	800e452 <__retarget_lock_release_recursive>
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	bd70      	pop	{r4, r5, r6, pc}
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	da04      	bge.n	800e0c8 <_puts_r+0x84>
 800e0be:	69a2      	ldr	r2, [r4, #24]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	dc06      	bgt.n	800e0d2 <_puts_r+0x8e>
 800e0c4:	290a      	cmp	r1, #10
 800e0c6:	d004      	beq.n	800e0d2 <_puts_r+0x8e>
 800e0c8:	6823      	ldr	r3, [r4, #0]
 800e0ca:	1c5a      	adds	r2, r3, #1
 800e0cc:	6022      	str	r2, [r4, #0]
 800e0ce:	7019      	strb	r1, [r3, #0]
 800e0d0:	e7cf      	b.n	800e072 <_puts_r+0x2e>
 800e0d2:	4622      	mov	r2, r4
 800e0d4:	4628      	mov	r0, r5
 800e0d6:	f000 f854 	bl	800e182 <__swbuf_r>
 800e0da:	3001      	adds	r0, #1
 800e0dc:	d1c9      	bne.n	800e072 <_puts_r+0x2e>
 800e0de:	e7df      	b.n	800e0a0 <_puts_r+0x5c>
 800e0e0:	6823      	ldr	r3, [r4, #0]
 800e0e2:	250a      	movs	r5, #10
 800e0e4:	1c5a      	adds	r2, r3, #1
 800e0e6:	6022      	str	r2, [r4, #0]
 800e0e8:	701d      	strb	r5, [r3, #0]
 800e0ea:	e7db      	b.n	800e0a4 <_puts_r+0x60>

0800e0ec <puts>:
 800e0ec:	4b02      	ldr	r3, [pc, #8]	; (800e0f8 <puts+0xc>)
 800e0ee:	4601      	mov	r1, r0
 800e0f0:	6818      	ldr	r0, [r3, #0]
 800e0f2:	f7ff bfa7 	b.w	800e044 <_puts_r>
 800e0f6:	bf00      	nop
 800e0f8:	200000e0 	.word	0x200000e0

0800e0fc <__sread>:
 800e0fc:	b510      	push	{r4, lr}
 800e0fe:	460c      	mov	r4, r1
 800e100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e104:	f000 f956 	bl	800e3b4 <_read_r>
 800e108:	2800      	cmp	r0, #0
 800e10a:	bfab      	itete	ge
 800e10c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e10e:	89a3      	ldrhlt	r3, [r4, #12]
 800e110:	181b      	addge	r3, r3, r0
 800e112:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e116:	bfac      	ite	ge
 800e118:	6563      	strge	r3, [r4, #84]	; 0x54
 800e11a:	81a3      	strhlt	r3, [r4, #12]
 800e11c:	bd10      	pop	{r4, pc}

0800e11e <__swrite>:
 800e11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e122:	461f      	mov	r7, r3
 800e124:	898b      	ldrh	r3, [r1, #12]
 800e126:	05db      	lsls	r3, r3, #23
 800e128:	4605      	mov	r5, r0
 800e12a:	460c      	mov	r4, r1
 800e12c:	4616      	mov	r6, r2
 800e12e:	d505      	bpl.n	800e13c <__swrite+0x1e>
 800e130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e134:	2302      	movs	r3, #2
 800e136:	2200      	movs	r2, #0
 800e138:	f000 f92a 	bl	800e390 <_lseek_r>
 800e13c:	89a3      	ldrh	r3, [r4, #12]
 800e13e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e142:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e146:	81a3      	strh	r3, [r4, #12]
 800e148:	4632      	mov	r2, r6
 800e14a:	463b      	mov	r3, r7
 800e14c:	4628      	mov	r0, r5
 800e14e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e152:	f000 b941 	b.w	800e3d8 <_write_r>

0800e156 <__sseek>:
 800e156:	b510      	push	{r4, lr}
 800e158:	460c      	mov	r4, r1
 800e15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e15e:	f000 f917 	bl	800e390 <_lseek_r>
 800e162:	1c43      	adds	r3, r0, #1
 800e164:	89a3      	ldrh	r3, [r4, #12]
 800e166:	bf15      	itete	ne
 800e168:	6560      	strne	r0, [r4, #84]	; 0x54
 800e16a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e16e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e172:	81a3      	strheq	r3, [r4, #12]
 800e174:	bf18      	it	ne
 800e176:	81a3      	strhne	r3, [r4, #12]
 800e178:	bd10      	pop	{r4, pc}

0800e17a <__sclose>:
 800e17a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e17e:	f000 b8a1 	b.w	800e2c4 <_close_r>

0800e182 <__swbuf_r>:
 800e182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e184:	460e      	mov	r6, r1
 800e186:	4614      	mov	r4, r2
 800e188:	4605      	mov	r5, r0
 800e18a:	b118      	cbz	r0, 800e194 <__swbuf_r+0x12>
 800e18c:	6a03      	ldr	r3, [r0, #32]
 800e18e:	b90b      	cbnz	r3, 800e194 <__swbuf_r+0x12>
 800e190:	f7ff ff08 	bl	800dfa4 <__sinit>
 800e194:	69a3      	ldr	r3, [r4, #24]
 800e196:	60a3      	str	r3, [r4, #8]
 800e198:	89a3      	ldrh	r3, [r4, #12]
 800e19a:	071a      	lsls	r2, r3, #28
 800e19c:	d525      	bpl.n	800e1ea <__swbuf_r+0x68>
 800e19e:	6923      	ldr	r3, [r4, #16]
 800e1a0:	b31b      	cbz	r3, 800e1ea <__swbuf_r+0x68>
 800e1a2:	6823      	ldr	r3, [r4, #0]
 800e1a4:	6922      	ldr	r2, [r4, #16]
 800e1a6:	1a98      	subs	r0, r3, r2
 800e1a8:	6963      	ldr	r3, [r4, #20]
 800e1aa:	b2f6      	uxtb	r6, r6
 800e1ac:	4283      	cmp	r3, r0
 800e1ae:	4637      	mov	r7, r6
 800e1b0:	dc04      	bgt.n	800e1bc <__swbuf_r+0x3a>
 800e1b2:	4621      	mov	r1, r4
 800e1b4:	4628      	mov	r0, r5
 800e1b6:	f001 ff71 	bl	801009c <_fflush_r>
 800e1ba:	b9e0      	cbnz	r0, 800e1f6 <__swbuf_r+0x74>
 800e1bc:	68a3      	ldr	r3, [r4, #8]
 800e1be:	3b01      	subs	r3, #1
 800e1c0:	60a3      	str	r3, [r4, #8]
 800e1c2:	6823      	ldr	r3, [r4, #0]
 800e1c4:	1c5a      	adds	r2, r3, #1
 800e1c6:	6022      	str	r2, [r4, #0]
 800e1c8:	701e      	strb	r6, [r3, #0]
 800e1ca:	6962      	ldr	r2, [r4, #20]
 800e1cc:	1c43      	adds	r3, r0, #1
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d004      	beq.n	800e1dc <__swbuf_r+0x5a>
 800e1d2:	89a3      	ldrh	r3, [r4, #12]
 800e1d4:	07db      	lsls	r3, r3, #31
 800e1d6:	d506      	bpl.n	800e1e6 <__swbuf_r+0x64>
 800e1d8:	2e0a      	cmp	r6, #10
 800e1da:	d104      	bne.n	800e1e6 <__swbuf_r+0x64>
 800e1dc:	4621      	mov	r1, r4
 800e1de:	4628      	mov	r0, r5
 800e1e0:	f001 ff5c 	bl	801009c <_fflush_r>
 800e1e4:	b938      	cbnz	r0, 800e1f6 <__swbuf_r+0x74>
 800e1e6:	4638      	mov	r0, r7
 800e1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1ea:	4621      	mov	r1, r4
 800e1ec:	4628      	mov	r0, r5
 800e1ee:	f000 f805 	bl	800e1fc <__swsetup_r>
 800e1f2:	2800      	cmp	r0, #0
 800e1f4:	d0d5      	beq.n	800e1a2 <__swbuf_r+0x20>
 800e1f6:	f04f 37ff 	mov.w	r7, #4294967295
 800e1fa:	e7f4      	b.n	800e1e6 <__swbuf_r+0x64>

0800e1fc <__swsetup_r>:
 800e1fc:	b538      	push	{r3, r4, r5, lr}
 800e1fe:	4b2a      	ldr	r3, [pc, #168]	; (800e2a8 <__swsetup_r+0xac>)
 800e200:	4605      	mov	r5, r0
 800e202:	6818      	ldr	r0, [r3, #0]
 800e204:	460c      	mov	r4, r1
 800e206:	b118      	cbz	r0, 800e210 <__swsetup_r+0x14>
 800e208:	6a03      	ldr	r3, [r0, #32]
 800e20a:	b90b      	cbnz	r3, 800e210 <__swsetup_r+0x14>
 800e20c:	f7ff feca 	bl	800dfa4 <__sinit>
 800e210:	89a3      	ldrh	r3, [r4, #12]
 800e212:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e216:	0718      	lsls	r0, r3, #28
 800e218:	d422      	bmi.n	800e260 <__swsetup_r+0x64>
 800e21a:	06d9      	lsls	r1, r3, #27
 800e21c:	d407      	bmi.n	800e22e <__swsetup_r+0x32>
 800e21e:	2309      	movs	r3, #9
 800e220:	602b      	str	r3, [r5, #0]
 800e222:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e226:	81a3      	strh	r3, [r4, #12]
 800e228:	f04f 30ff 	mov.w	r0, #4294967295
 800e22c:	e034      	b.n	800e298 <__swsetup_r+0x9c>
 800e22e:	0758      	lsls	r0, r3, #29
 800e230:	d512      	bpl.n	800e258 <__swsetup_r+0x5c>
 800e232:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e234:	b141      	cbz	r1, 800e248 <__swsetup_r+0x4c>
 800e236:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e23a:	4299      	cmp	r1, r3
 800e23c:	d002      	beq.n	800e244 <__swsetup_r+0x48>
 800e23e:	4628      	mov	r0, r5
 800e240:	f000 ff90 	bl	800f164 <_free_r>
 800e244:	2300      	movs	r3, #0
 800e246:	6363      	str	r3, [r4, #52]	; 0x34
 800e248:	89a3      	ldrh	r3, [r4, #12]
 800e24a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e24e:	81a3      	strh	r3, [r4, #12]
 800e250:	2300      	movs	r3, #0
 800e252:	6063      	str	r3, [r4, #4]
 800e254:	6923      	ldr	r3, [r4, #16]
 800e256:	6023      	str	r3, [r4, #0]
 800e258:	89a3      	ldrh	r3, [r4, #12]
 800e25a:	f043 0308 	orr.w	r3, r3, #8
 800e25e:	81a3      	strh	r3, [r4, #12]
 800e260:	6923      	ldr	r3, [r4, #16]
 800e262:	b94b      	cbnz	r3, 800e278 <__swsetup_r+0x7c>
 800e264:	89a3      	ldrh	r3, [r4, #12]
 800e266:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e26a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e26e:	d003      	beq.n	800e278 <__swsetup_r+0x7c>
 800e270:	4621      	mov	r1, r4
 800e272:	4628      	mov	r0, r5
 800e274:	f001 ff60 	bl	8010138 <__smakebuf_r>
 800e278:	89a0      	ldrh	r0, [r4, #12]
 800e27a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e27e:	f010 0301 	ands.w	r3, r0, #1
 800e282:	d00a      	beq.n	800e29a <__swsetup_r+0x9e>
 800e284:	2300      	movs	r3, #0
 800e286:	60a3      	str	r3, [r4, #8]
 800e288:	6963      	ldr	r3, [r4, #20]
 800e28a:	425b      	negs	r3, r3
 800e28c:	61a3      	str	r3, [r4, #24]
 800e28e:	6923      	ldr	r3, [r4, #16]
 800e290:	b943      	cbnz	r3, 800e2a4 <__swsetup_r+0xa8>
 800e292:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e296:	d1c4      	bne.n	800e222 <__swsetup_r+0x26>
 800e298:	bd38      	pop	{r3, r4, r5, pc}
 800e29a:	0781      	lsls	r1, r0, #30
 800e29c:	bf58      	it	pl
 800e29e:	6963      	ldrpl	r3, [r4, #20]
 800e2a0:	60a3      	str	r3, [r4, #8]
 800e2a2:	e7f4      	b.n	800e28e <__swsetup_r+0x92>
 800e2a4:	2000      	movs	r0, #0
 800e2a6:	e7f7      	b.n	800e298 <__swsetup_r+0x9c>
 800e2a8:	200000e0 	.word	0x200000e0

0800e2ac <memset>:
 800e2ac:	4402      	add	r2, r0
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d100      	bne.n	800e2b6 <memset+0xa>
 800e2b4:	4770      	bx	lr
 800e2b6:	f803 1b01 	strb.w	r1, [r3], #1
 800e2ba:	e7f9      	b.n	800e2b0 <memset+0x4>

0800e2bc <_localeconv_r>:
 800e2bc:	4800      	ldr	r0, [pc, #0]	; (800e2c0 <_localeconv_r+0x4>)
 800e2be:	4770      	bx	lr
 800e2c0:	200001d4 	.word	0x200001d4

0800e2c4 <_close_r>:
 800e2c4:	b538      	push	{r3, r4, r5, lr}
 800e2c6:	4d06      	ldr	r5, [pc, #24]	; (800e2e0 <_close_r+0x1c>)
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	4608      	mov	r0, r1
 800e2ce:	602b      	str	r3, [r5, #0]
 800e2d0:	f7f6 fd05 	bl	8004cde <_close>
 800e2d4:	1c43      	adds	r3, r0, #1
 800e2d6:	d102      	bne.n	800e2de <_close_r+0x1a>
 800e2d8:	682b      	ldr	r3, [r5, #0]
 800e2da:	b103      	cbz	r3, 800e2de <_close_r+0x1a>
 800e2dc:	6023      	str	r3, [r4, #0]
 800e2de:	bd38      	pop	{r3, r4, r5, pc}
 800e2e0:	20004f38 	.word	0x20004f38

0800e2e4 <_reclaim_reent>:
 800e2e4:	4b29      	ldr	r3, [pc, #164]	; (800e38c <_reclaim_reent+0xa8>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	4283      	cmp	r3, r0
 800e2ea:	b570      	push	{r4, r5, r6, lr}
 800e2ec:	4604      	mov	r4, r0
 800e2ee:	d04b      	beq.n	800e388 <_reclaim_reent+0xa4>
 800e2f0:	69c3      	ldr	r3, [r0, #28]
 800e2f2:	b143      	cbz	r3, 800e306 <_reclaim_reent+0x22>
 800e2f4:	68db      	ldr	r3, [r3, #12]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d144      	bne.n	800e384 <_reclaim_reent+0xa0>
 800e2fa:	69e3      	ldr	r3, [r4, #28]
 800e2fc:	6819      	ldr	r1, [r3, #0]
 800e2fe:	b111      	cbz	r1, 800e306 <_reclaim_reent+0x22>
 800e300:	4620      	mov	r0, r4
 800e302:	f000 ff2f 	bl	800f164 <_free_r>
 800e306:	6961      	ldr	r1, [r4, #20]
 800e308:	b111      	cbz	r1, 800e310 <_reclaim_reent+0x2c>
 800e30a:	4620      	mov	r0, r4
 800e30c:	f000 ff2a 	bl	800f164 <_free_r>
 800e310:	69e1      	ldr	r1, [r4, #28]
 800e312:	b111      	cbz	r1, 800e31a <_reclaim_reent+0x36>
 800e314:	4620      	mov	r0, r4
 800e316:	f000 ff25 	bl	800f164 <_free_r>
 800e31a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e31c:	b111      	cbz	r1, 800e324 <_reclaim_reent+0x40>
 800e31e:	4620      	mov	r0, r4
 800e320:	f000 ff20 	bl	800f164 <_free_r>
 800e324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e326:	b111      	cbz	r1, 800e32e <_reclaim_reent+0x4a>
 800e328:	4620      	mov	r0, r4
 800e32a:	f000 ff1b 	bl	800f164 <_free_r>
 800e32e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e330:	b111      	cbz	r1, 800e338 <_reclaim_reent+0x54>
 800e332:	4620      	mov	r0, r4
 800e334:	f000 ff16 	bl	800f164 <_free_r>
 800e338:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e33a:	b111      	cbz	r1, 800e342 <_reclaim_reent+0x5e>
 800e33c:	4620      	mov	r0, r4
 800e33e:	f000 ff11 	bl	800f164 <_free_r>
 800e342:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e344:	b111      	cbz	r1, 800e34c <_reclaim_reent+0x68>
 800e346:	4620      	mov	r0, r4
 800e348:	f000 ff0c 	bl	800f164 <_free_r>
 800e34c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e34e:	b111      	cbz	r1, 800e356 <_reclaim_reent+0x72>
 800e350:	4620      	mov	r0, r4
 800e352:	f000 ff07 	bl	800f164 <_free_r>
 800e356:	6a23      	ldr	r3, [r4, #32]
 800e358:	b1b3      	cbz	r3, 800e388 <_reclaim_reent+0xa4>
 800e35a:	4620      	mov	r0, r4
 800e35c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e360:	4718      	bx	r3
 800e362:	5949      	ldr	r1, [r1, r5]
 800e364:	b941      	cbnz	r1, 800e378 <_reclaim_reent+0x94>
 800e366:	3504      	adds	r5, #4
 800e368:	69e3      	ldr	r3, [r4, #28]
 800e36a:	2d80      	cmp	r5, #128	; 0x80
 800e36c:	68d9      	ldr	r1, [r3, #12]
 800e36e:	d1f8      	bne.n	800e362 <_reclaim_reent+0x7e>
 800e370:	4620      	mov	r0, r4
 800e372:	f000 fef7 	bl	800f164 <_free_r>
 800e376:	e7c0      	b.n	800e2fa <_reclaim_reent+0x16>
 800e378:	680e      	ldr	r6, [r1, #0]
 800e37a:	4620      	mov	r0, r4
 800e37c:	f000 fef2 	bl	800f164 <_free_r>
 800e380:	4631      	mov	r1, r6
 800e382:	e7ef      	b.n	800e364 <_reclaim_reent+0x80>
 800e384:	2500      	movs	r5, #0
 800e386:	e7ef      	b.n	800e368 <_reclaim_reent+0x84>
 800e388:	bd70      	pop	{r4, r5, r6, pc}
 800e38a:	bf00      	nop
 800e38c:	200000e0 	.word	0x200000e0

0800e390 <_lseek_r>:
 800e390:	b538      	push	{r3, r4, r5, lr}
 800e392:	4d07      	ldr	r5, [pc, #28]	; (800e3b0 <_lseek_r+0x20>)
 800e394:	4604      	mov	r4, r0
 800e396:	4608      	mov	r0, r1
 800e398:	4611      	mov	r1, r2
 800e39a:	2200      	movs	r2, #0
 800e39c:	602a      	str	r2, [r5, #0]
 800e39e:	461a      	mov	r2, r3
 800e3a0:	f7f6 fcc4 	bl	8004d2c <_lseek>
 800e3a4:	1c43      	adds	r3, r0, #1
 800e3a6:	d102      	bne.n	800e3ae <_lseek_r+0x1e>
 800e3a8:	682b      	ldr	r3, [r5, #0]
 800e3aa:	b103      	cbz	r3, 800e3ae <_lseek_r+0x1e>
 800e3ac:	6023      	str	r3, [r4, #0]
 800e3ae:	bd38      	pop	{r3, r4, r5, pc}
 800e3b0:	20004f38 	.word	0x20004f38

0800e3b4 <_read_r>:
 800e3b4:	b538      	push	{r3, r4, r5, lr}
 800e3b6:	4d07      	ldr	r5, [pc, #28]	; (800e3d4 <_read_r+0x20>)
 800e3b8:	4604      	mov	r4, r0
 800e3ba:	4608      	mov	r0, r1
 800e3bc:	4611      	mov	r1, r2
 800e3be:	2200      	movs	r2, #0
 800e3c0:	602a      	str	r2, [r5, #0]
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	f7f6 fc6e 	bl	8004ca4 <_read>
 800e3c8:	1c43      	adds	r3, r0, #1
 800e3ca:	d102      	bne.n	800e3d2 <_read_r+0x1e>
 800e3cc:	682b      	ldr	r3, [r5, #0]
 800e3ce:	b103      	cbz	r3, 800e3d2 <_read_r+0x1e>
 800e3d0:	6023      	str	r3, [r4, #0]
 800e3d2:	bd38      	pop	{r3, r4, r5, pc}
 800e3d4:	20004f38 	.word	0x20004f38

0800e3d8 <_write_r>:
 800e3d8:	b538      	push	{r3, r4, r5, lr}
 800e3da:	4d07      	ldr	r5, [pc, #28]	; (800e3f8 <_write_r+0x20>)
 800e3dc:	4604      	mov	r4, r0
 800e3de:	4608      	mov	r0, r1
 800e3e0:	4611      	mov	r1, r2
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	602a      	str	r2, [r5, #0]
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	f7f6 f84e 	bl	8004488 <_write>
 800e3ec:	1c43      	adds	r3, r0, #1
 800e3ee:	d102      	bne.n	800e3f6 <_write_r+0x1e>
 800e3f0:	682b      	ldr	r3, [r5, #0]
 800e3f2:	b103      	cbz	r3, 800e3f6 <_write_r+0x1e>
 800e3f4:	6023      	str	r3, [r4, #0]
 800e3f6:	bd38      	pop	{r3, r4, r5, pc}
 800e3f8:	20004f38 	.word	0x20004f38

0800e3fc <__errno>:
 800e3fc:	4b01      	ldr	r3, [pc, #4]	; (800e404 <__errno+0x8>)
 800e3fe:	6818      	ldr	r0, [r3, #0]
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop
 800e404:	200000e0 	.word	0x200000e0

0800e408 <__libc_init_array>:
 800e408:	b570      	push	{r4, r5, r6, lr}
 800e40a:	4d0d      	ldr	r5, [pc, #52]	; (800e440 <__libc_init_array+0x38>)
 800e40c:	4c0d      	ldr	r4, [pc, #52]	; (800e444 <__libc_init_array+0x3c>)
 800e40e:	1b64      	subs	r4, r4, r5
 800e410:	10a4      	asrs	r4, r4, #2
 800e412:	2600      	movs	r6, #0
 800e414:	42a6      	cmp	r6, r4
 800e416:	d109      	bne.n	800e42c <__libc_init_array+0x24>
 800e418:	4d0b      	ldr	r5, [pc, #44]	; (800e448 <__libc_init_array+0x40>)
 800e41a:	4c0c      	ldr	r4, [pc, #48]	; (800e44c <__libc_init_array+0x44>)
 800e41c:	f002 ff20 	bl	8011260 <_init>
 800e420:	1b64      	subs	r4, r4, r5
 800e422:	10a4      	asrs	r4, r4, #2
 800e424:	2600      	movs	r6, #0
 800e426:	42a6      	cmp	r6, r4
 800e428:	d105      	bne.n	800e436 <__libc_init_array+0x2e>
 800e42a:	bd70      	pop	{r4, r5, r6, pc}
 800e42c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e430:	4798      	blx	r3
 800e432:	3601      	adds	r6, #1
 800e434:	e7ee      	b.n	800e414 <__libc_init_array+0xc>
 800e436:	f855 3b04 	ldr.w	r3, [r5], #4
 800e43a:	4798      	blx	r3
 800e43c:	3601      	adds	r6, #1
 800e43e:	e7f2      	b.n	800e426 <__libc_init_array+0x1e>
 800e440:	08011a28 	.word	0x08011a28
 800e444:	08011a28 	.word	0x08011a28
 800e448:	08011a28 	.word	0x08011a28
 800e44c:	08011a2c 	.word	0x08011a2c

0800e450 <__retarget_lock_acquire_recursive>:
 800e450:	4770      	bx	lr

0800e452 <__retarget_lock_release_recursive>:
 800e452:	4770      	bx	lr

0800e454 <memcpy>:
 800e454:	440a      	add	r2, r1
 800e456:	4291      	cmp	r1, r2
 800e458:	f100 33ff 	add.w	r3, r0, #4294967295
 800e45c:	d100      	bne.n	800e460 <memcpy+0xc>
 800e45e:	4770      	bx	lr
 800e460:	b510      	push	{r4, lr}
 800e462:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e46a:	4291      	cmp	r1, r2
 800e46c:	d1f9      	bne.n	800e462 <memcpy+0xe>
 800e46e:	bd10      	pop	{r4, pc}

0800e470 <quorem>:
 800e470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e474:	6903      	ldr	r3, [r0, #16]
 800e476:	690c      	ldr	r4, [r1, #16]
 800e478:	42a3      	cmp	r3, r4
 800e47a:	4607      	mov	r7, r0
 800e47c:	db7e      	blt.n	800e57c <quorem+0x10c>
 800e47e:	3c01      	subs	r4, #1
 800e480:	f101 0814 	add.w	r8, r1, #20
 800e484:	f100 0514 	add.w	r5, r0, #20
 800e488:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e48c:	9301      	str	r3, [sp, #4]
 800e48e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e492:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e496:	3301      	adds	r3, #1
 800e498:	429a      	cmp	r2, r3
 800e49a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e49e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e4a2:	fbb2 f6f3 	udiv	r6, r2, r3
 800e4a6:	d331      	bcc.n	800e50c <quorem+0x9c>
 800e4a8:	f04f 0e00 	mov.w	lr, #0
 800e4ac:	4640      	mov	r0, r8
 800e4ae:	46ac      	mov	ip, r5
 800e4b0:	46f2      	mov	sl, lr
 800e4b2:	f850 2b04 	ldr.w	r2, [r0], #4
 800e4b6:	b293      	uxth	r3, r2
 800e4b8:	fb06 e303 	mla	r3, r6, r3, lr
 800e4bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e4c0:	0c1a      	lsrs	r2, r3, #16
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	ebaa 0303 	sub.w	r3, sl, r3
 800e4c8:	f8dc a000 	ldr.w	sl, [ip]
 800e4cc:	fa13 f38a 	uxtah	r3, r3, sl
 800e4d0:	fb06 220e 	mla	r2, r6, lr, r2
 800e4d4:	9300      	str	r3, [sp, #0]
 800e4d6:	9b00      	ldr	r3, [sp, #0]
 800e4d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e4dc:	b292      	uxth	r2, r2
 800e4de:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e4e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e4e6:	f8bd 3000 	ldrh.w	r3, [sp]
 800e4ea:	4581      	cmp	r9, r0
 800e4ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4f0:	f84c 3b04 	str.w	r3, [ip], #4
 800e4f4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e4f8:	d2db      	bcs.n	800e4b2 <quorem+0x42>
 800e4fa:	f855 300b 	ldr.w	r3, [r5, fp]
 800e4fe:	b92b      	cbnz	r3, 800e50c <quorem+0x9c>
 800e500:	9b01      	ldr	r3, [sp, #4]
 800e502:	3b04      	subs	r3, #4
 800e504:	429d      	cmp	r5, r3
 800e506:	461a      	mov	r2, r3
 800e508:	d32c      	bcc.n	800e564 <quorem+0xf4>
 800e50a:	613c      	str	r4, [r7, #16]
 800e50c:	4638      	mov	r0, r7
 800e50e:	f001 f9a5 	bl	800f85c <__mcmp>
 800e512:	2800      	cmp	r0, #0
 800e514:	db22      	blt.n	800e55c <quorem+0xec>
 800e516:	3601      	adds	r6, #1
 800e518:	4629      	mov	r1, r5
 800e51a:	2000      	movs	r0, #0
 800e51c:	f858 2b04 	ldr.w	r2, [r8], #4
 800e520:	f8d1 c000 	ldr.w	ip, [r1]
 800e524:	b293      	uxth	r3, r2
 800e526:	1ac3      	subs	r3, r0, r3
 800e528:	0c12      	lsrs	r2, r2, #16
 800e52a:	fa13 f38c 	uxtah	r3, r3, ip
 800e52e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e532:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e536:	b29b      	uxth	r3, r3
 800e538:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e53c:	45c1      	cmp	r9, r8
 800e53e:	f841 3b04 	str.w	r3, [r1], #4
 800e542:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e546:	d2e9      	bcs.n	800e51c <quorem+0xac>
 800e548:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e54c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e550:	b922      	cbnz	r2, 800e55c <quorem+0xec>
 800e552:	3b04      	subs	r3, #4
 800e554:	429d      	cmp	r5, r3
 800e556:	461a      	mov	r2, r3
 800e558:	d30a      	bcc.n	800e570 <quorem+0x100>
 800e55a:	613c      	str	r4, [r7, #16]
 800e55c:	4630      	mov	r0, r6
 800e55e:	b003      	add	sp, #12
 800e560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e564:	6812      	ldr	r2, [r2, #0]
 800e566:	3b04      	subs	r3, #4
 800e568:	2a00      	cmp	r2, #0
 800e56a:	d1ce      	bne.n	800e50a <quorem+0x9a>
 800e56c:	3c01      	subs	r4, #1
 800e56e:	e7c9      	b.n	800e504 <quorem+0x94>
 800e570:	6812      	ldr	r2, [r2, #0]
 800e572:	3b04      	subs	r3, #4
 800e574:	2a00      	cmp	r2, #0
 800e576:	d1f0      	bne.n	800e55a <quorem+0xea>
 800e578:	3c01      	subs	r4, #1
 800e57a:	e7eb      	b.n	800e554 <quorem+0xe4>
 800e57c:	2000      	movs	r0, #0
 800e57e:	e7ee      	b.n	800e55e <quorem+0xee>

0800e580 <_dtoa_r>:
 800e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e584:	ed2d 8b04 	vpush	{d8-d9}
 800e588:	69c5      	ldr	r5, [r0, #28]
 800e58a:	b093      	sub	sp, #76	; 0x4c
 800e58c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e590:	ec57 6b10 	vmov	r6, r7, d0
 800e594:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e598:	9107      	str	r1, [sp, #28]
 800e59a:	4604      	mov	r4, r0
 800e59c:	920a      	str	r2, [sp, #40]	; 0x28
 800e59e:	930d      	str	r3, [sp, #52]	; 0x34
 800e5a0:	b975      	cbnz	r5, 800e5c0 <_dtoa_r+0x40>
 800e5a2:	2010      	movs	r0, #16
 800e5a4:	f000 fe2a 	bl	800f1fc <malloc>
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	61e0      	str	r0, [r4, #28]
 800e5ac:	b920      	cbnz	r0, 800e5b8 <_dtoa_r+0x38>
 800e5ae:	4bae      	ldr	r3, [pc, #696]	; (800e868 <_dtoa_r+0x2e8>)
 800e5b0:	21ef      	movs	r1, #239	; 0xef
 800e5b2:	48ae      	ldr	r0, [pc, #696]	; (800e86c <_dtoa_r+0x2ec>)
 800e5b4:	f001 fe6a 	bl	801028c <__assert_func>
 800e5b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e5bc:	6005      	str	r5, [r0, #0]
 800e5be:	60c5      	str	r5, [r0, #12]
 800e5c0:	69e3      	ldr	r3, [r4, #28]
 800e5c2:	6819      	ldr	r1, [r3, #0]
 800e5c4:	b151      	cbz	r1, 800e5dc <_dtoa_r+0x5c>
 800e5c6:	685a      	ldr	r2, [r3, #4]
 800e5c8:	604a      	str	r2, [r1, #4]
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	4093      	lsls	r3, r2
 800e5ce:	608b      	str	r3, [r1, #8]
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f000 ff07 	bl	800f3e4 <_Bfree>
 800e5d6:	69e3      	ldr	r3, [r4, #28]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	601a      	str	r2, [r3, #0]
 800e5dc:	1e3b      	subs	r3, r7, #0
 800e5de:	bfbb      	ittet	lt
 800e5e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e5e4:	9303      	strlt	r3, [sp, #12]
 800e5e6:	2300      	movge	r3, #0
 800e5e8:	2201      	movlt	r2, #1
 800e5ea:	bfac      	ite	ge
 800e5ec:	f8c8 3000 	strge.w	r3, [r8]
 800e5f0:	f8c8 2000 	strlt.w	r2, [r8]
 800e5f4:	4b9e      	ldr	r3, [pc, #632]	; (800e870 <_dtoa_r+0x2f0>)
 800e5f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e5fa:	ea33 0308 	bics.w	r3, r3, r8
 800e5fe:	d11b      	bne.n	800e638 <_dtoa_r+0xb8>
 800e600:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e602:	f242 730f 	movw	r3, #9999	; 0x270f
 800e606:	6013      	str	r3, [r2, #0]
 800e608:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e60c:	4333      	orrs	r3, r6
 800e60e:	f000 8593 	beq.w	800f138 <_dtoa_r+0xbb8>
 800e612:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e614:	b963      	cbnz	r3, 800e630 <_dtoa_r+0xb0>
 800e616:	4b97      	ldr	r3, [pc, #604]	; (800e874 <_dtoa_r+0x2f4>)
 800e618:	e027      	b.n	800e66a <_dtoa_r+0xea>
 800e61a:	4b97      	ldr	r3, [pc, #604]	; (800e878 <_dtoa_r+0x2f8>)
 800e61c:	9300      	str	r3, [sp, #0]
 800e61e:	3308      	adds	r3, #8
 800e620:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e622:	6013      	str	r3, [r2, #0]
 800e624:	9800      	ldr	r0, [sp, #0]
 800e626:	b013      	add	sp, #76	; 0x4c
 800e628:	ecbd 8b04 	vpop	{d8-d9}
 800e62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e630:	4b90      	ldr	r3, [pc, #576]	; (800e874 <_dtoa_r+0x2f4>)
 800e632:	9300      	str	r3, [sp, #0]
 800e634:	3303      	adds	r3, #3
 800e636:	e7f3      	b.n	800e620 <_dtoa_r+0xa0>
 800e638:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e63c:	2200      	movs	r2, #0
 800e63e:	ec51 0b17 	vmov	r0, r1, d7
 800e642:	eeb0 8a47 	vmov.f32	s16, s14
 800e646:	eef0 8a67 	vmov.f32	s17, s15
 800e64a:	2300      	movs	r3, #0
 800e64c:	f7f2 fa3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800e650:	4681      	mov	r9, r0
 800e652:	b160      	cbz	r0, 800e66e <_dtoa_r+0xee>
 800e654:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e656:	2301      	movs	r3, #1
 800e658:	6013      	str	r3, [r2, #0]
 800e65a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	f000 8568 	beq.w	800f132 <_dtoa_r+0xbb2>
 800e662:	4b86      	ldr	r3, [pc, #536]	; (800e87c <_dtoa_r+0x2fc>)
 800e664:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e666:	6013      	str	r3, [r2, #0]
 800e668:	3b01      	subs	r3, #1
 800e66a:	9300      	str	r3, [sp, #0]
 800e66c:	e7da      	b.n	800e624 <_dtoa_r+0xa4>
 800e66e:	aa10      	add	r2, sp, #64	; 0x40
 800e670:	a911      	add	r1, sp, #68	; 0x44
 800e672:	4620      	mov	r0, r4
 800e674:	eeb0 0a48 	vmov.f32	s0, s16
 800e678:	eef0 0a68 	vmov.f32	s1, s17
 800e67c:	f001 f994 	bl	800f9a8 <__d2b>
 800e680:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e684:	4682      	mov	sl, r0
 800e686:	2d00      	cmp	r5, #0
 800e688:	d07f      	beq.n	800e78a <_dtoa_r+0x20a>
 800e68a:	ee18 3a90 	vmov	r3, s17
 800e68e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e692:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e696:	ec51 0b18 	vmov	r0, r1, d8
 800e69a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e69e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e6a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	4b75      	ldr	r3, [pc, #468]	; (800e880 <_dtoa_r+0x300>)
 800e6ac:	f7f1 fdec 	bl	8000288 <__aeabi_dsub>
 800e6b0:	a367      	add	r3, pc, #412	; (adr r3, 800e850 <_dtoa_r+0x2d0>)
 800e6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b6:	f7f1 ff9f 	bl	80005f8 <__aeabi_dmul>
 800e6ba:	a367      	add	r3, pc, #412	; (adr r3, 800e858 <_dtoa_r+0x2d8>)
 800e6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c0:	f7f1 fde4 	bl	800028c <__adddf3>
 800e6c4:	4606      	mov	r6, r0
 800e6c6:	4628      	mov	r0, r5
 800e6c8:	460f      	mov	r7, r1
 800e6ca:	f7f1 ff2b 	bl	8000524 <__aeabi_i2d>
 800e6ce:	a364      	add	r3, pc, #400	; (adr r3, 800e860 <_dtoa_r+0x2e0>)
 800e6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d4:	f7f1 ff90 	bl	80005f8 <__aeabi_dmul>
 800e6d8:	4602      	mov	r2, r0
 800e6da:	460b      	mov	r3, r1
 800e6dc:	4630      	mov	r0, r6
 800e6de:	4639      	mov	r1, r7
 800e6e0:	f7f1 fdd4 	bl	800028c <__adddf3>
 800e6e4:	4606      	mov	r6, r0
 800e6e6:	460f      	mov	r7, r1
 800e6e8:	f7f2 fa36 	bl	8000b58 <__aeabi_d2iz>
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	4683      	mov	fp, r0
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	4630      	mov	r0, r6
 800e6f4:	4639      	mov	r1, r7
 800e6f6:	f7f2 f9f1 	bl	8000adc <__aeabi_dcmplt>
 800e6fa:	b148      	cbz	r0, 800e710 <_dtoa_r+0x190>
 800e6fc:	4658      	mov	r0, fp
 800e6fe:	f7f1 ff11 	bl	8000524 <__aeabi_i2d>
 800e702:	4632      	mov	r2, r6
 800e704:	463b      	mov	r3, r7
 800e706:	f7f2 f9df 	bl	8000ac8 <__aeabi_dcmpeq>
 800e70a:	b908      	cbnz	r0, 800e710 <_dtoa_r+0x190>
 800e70c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e710:	f1bb 0f16 	cmp.w	fp, #22
 800e714:	d857      	bhi.n	800e7c6 <_dtoa_r+0x246>
 800e716:	4b5b      	ldr	r3, [pc, #364]	; (800e884 <_dtoa_r+0x304>)
 800e718:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e720:	ec51 0b18 	vmov	r0, r1, d8
 800e724:	f7f2 f9da 	bl	8000adc <__aeabi_dcmplt>
 800e728:	2800      	cmp	r0, #0
 800e72a:	d04e      	beq.n	800e7ca <_dtoa_r+0x24a>
 800e72c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e730:	2300      	movs	r3, #0
 800e732:	930c      	str	r3, [sp, #48]	; 0x30
 800e734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e736:	1b5b      	subs	r3, r3, r5
 800e738:	1e5a      	subs	r2, r3, #1
 800e73a:	bf45      	ittet	mi
 800e73c:	f1c3 0301 	rsbmi	r3, r3, #1
 800e740:	9305      	strmi	r3, [sp, #20]
 800e742:	2300      	movpl	r3, #0
 800e744:	2300      	movmi	r3, #0
 800e746:	9206      	str	r2, [sp, #24]
 800e748:	bf54      	ite	pl
 800e74a:	9305      	strpl	r3, [sp, #20]
 800e74c:	9306      	strmi	r3, [sp, #24]
 800e74e:	f1bb 0f00 	cmp.w	fp, #0
 800e752:	db3c      	blt.n	800e7ce <_dtoa_r+0x24e>
 800e754:	9b06      	ldr	r3, [sp, #24]
 800e756:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e75a:	445b      	add	r3, fp
 800e75c:	9306      	str	r3, [sp, #24]
 800e75e:	2300      	movs	r3, #0
 800e760:	9308      	str	r3, [sp, #32]
 800e762:	9b07      	ldr	r3, [sp, #28]
 800e764:	2b09      	cmp	r3, #9
 800e766:	d868      	bhi.n	800e83a <_dtoa_r+0x2ba>
 800e768:	2b05      	cmp	r3, #5
 800e76a:	bfc4      	itt	gt
 800e76c:	3b04      	subgt	r3, #4
 800e76e:	9307      	strgt	r3, [sp, #28]
 800e770:	9b07      	ldr	r3, [sp, #28]
 800e772:	f1a3 0302 	sub.w	r3, r3, #2
 800e776:	bfcc      	ite	gt
 800e778:	2500      	movgt	r5, #0
 800e77a:	2501      	movle	r5, #1
 800e77c:	2b03      	cmp	r3, #3
 800e77e:	f200 8085 	bhi.w	800e88c <_dtoa_r+0x30c>
 800e782:	e8df f003 	tbb	[pc, r3]
 800e786:	3b2e      	.short	0x3b2e
 800e788:	5839      	.short	0x5839
 800e78a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e78e:	441d      	add	r5, r3
 800e790:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e794:	2b20      	cmp	r3, #32
 800e796:	bfc1      	itttt	gt
 800e798:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e79c:	fa08 f803 	lslgt.w	r8, r8, r3
 800e7a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e7a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e7a8:	bfd6      	itet	le
 800e7aa:	f1c3 0320 	rsble	r3, r3, #32
 800e7ae:	ea48 0003 	orrgt.w	r0, r8, r3
 800e7b2:	fa06 f003 	lslle.w	r0, r6, r3
 800e7b6:	f7f1 fea5 	bl	8000504 <__aeabi_ui2d>
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e7c0:	3d01      	subs	r5, #1
 800e7c2:	920e      	str	r2, [sp, #56]	; 0x38
 800e7c4:	e76f      	b.n	800e6a6 <_dtoa_r+0x126>
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	e7b3      	b.n	800e732 <_dtoa_r+0x1b2>
 800e7ca:	900c      	str	r0, [sp, #48]	; 0x30
 800e7cc:	e7b2      	b.n	800e734 <_dtoa_r+0x1b4>
 800e7ce:	9b05      	ldr	r3, [sp, #20]
 800e7d0:	eba3 030b 	sub.w	r3, r3, fp
 800e7d4:	9305      	str	r3, [sp, #20]
 800e7d6:	f1cb 0300 	rsb	r3, fp, #0
 800e7da:	9308      	str	r3, [sp, #32]
 800e7dc:	2300      	movs	r3, #0
 800e7de:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7e0:	e7bf      	b.n	800e762 <_dtoa_r+0x1e2>
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	9309      	str	r3, [sp, #36]	; 0x24
 800e7e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	dc52      	bgt.n	800e892 <_dtoa_r+0x312>
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	9301      	str	r3, [sp, #4]
 800e7f0:	9304      	str	r3, [sp, #16]
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	920a      	str	r2, [sp, #40]	; 0x28
 800e7f6:	e00b      	b.n	800e810 <_dtoa_r+0x290>
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	e7f3      	b.n	800e7e4 <_dtoa_r+0x264>
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	9309      	str	r3, [sp, #36]	; 0x24
 800e800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e802:	445b      	add	r3, fp
 800e804:	9301      	str	r3, [sp, #4]
 800e806:	3301      	adds	r3, #1
 800e808:	2b01      	cmp	r3, #1
 800e80a:	9304      	str	r3, [sp, #16]
 800e80c:	bfb8      	it	lt
 800e80e:	2301      	movlt	r3, #1
 800e810:	69e0      	ldr	r0, [r4, #28]
 800e812:	2100      	movs	r1, #0
 800e814:	2204      	movs	r2, #4
 800e816:	f102 0614 	add.w	r6, r2, #20
 800e81a:	429e      	cmp	r6, r3
 800e81c:	d93d      	bls.n	800e89a <_dtoa_r+0x31a>
 800e81e:	6041      	str	r1, [r0, #4]
 800e820:	4620      	mov	r0, r4
 800e822:	f000 fd9f 	bl	800f364 <_Balloc>
 800e826:	9000      	str	r0, [sp, #0]
 800e828:	2800      	cmp	r0, #0
 800e82a:	d139      	bne.n	800e8a0 <_dtoa_r+0x320>
 800e82c:	4b16      	ldr	r3, [pc, #88]	; (800e888 <_dtoa_r+0x308>)
 800e82e:	4602      	mov	r2, r0
 800e830:	f240 11af 	movw	r1, #431	; 0x1af
 800e834:	e6bd      	b.n	800e5b2 <_dtoa_r+0x32>
 800e836:	2301      	movs	r3, #1
 800e838:	e7e1      	b.n	800e7fe <_dtoa_r+0x27e>
 800e83a:	2501      	movs	r5, #1
 800e83c:	2300      	movs	r3, #0
 800e83e:	9307      	str	r3, [sp, #28]
 800e840:	9509      	str	r5, [sp, #36]	; 0x24
 800e842:	f04f 33ff 	mov.w	r3, #4294967295
 800e846:	9301      	str	r3, [sp, #4]
 800e848:	9304      	str	r3, [sp, #16]
 800e84a:	2200      	movs	r2, #0
 800e84c:	2312      	movs	r3, #18
 800e84e:	e7d1      	b.n	800e7f4 <_dtoa_r+0x274>
 800e850:	636f4361 	.word	0x636f4361
 800e854:	3fd287a7 	.word	0x3fd287a7
 800e858:	8b60c8b3 	.word	0x8b60c8b3
 800e85c:	3fc68a28 	.word	0x3fc68a28
 800e860:	509f79fb 	.word	0x509f79fb
 800e864:	3fd34413 	.word	0x3fd34413
 800e868:	080117ba 	.word	0x080117ba
 800e86c:	080117d1 	.word	0x080117d1
 800e870:	7ff00000 	.word	0x7ff00000
 800e874:	080117b6 	.word	0x080117b6
 800e878:	080117ad 	.word	0x080117ad
 800e87c:	0801178a 	.word	0x0801178a
 800e880:	3ff80000 	.word	0x3ff80000
 800e884:	080118c0 	.word	0x080118c0
 800e888:	08011829 	.word	0x08011829
 800e88c:	2301      	movs	r3, #1
 800e88e:	9309      	str	r3, [sp, #36]	; 0x24
 800e890:	e7d7      	b.n	800e842 <_dtoa_r+0x2c2>
 800e892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e894:	9301      	str	r3, [sp, #4]
 800e896:	9304      	str	r3, [sp, #16]
 800e898:	e7ba      	b.n	800e810 <_dtoa_r+0x290>
 800e89a:	3101      	adds	r1, #1
 800e89c:	0052      	lsls	r2, r2, #1
 800e89e:	e7ba      	b.n	800e816 <_dtoa_r+0x296>
 800e8a0:	69e3      	ldr	r3, [r4, #28]
 800e8a2:	9a00      	ldr	r2, [sp, #0]
 800e8a4:	601a      	str	r2, [r3, #0]
 800e8a6:	9b04      	ldr	r3, [sp, #16]
 800e8a8:	2b0e      	cmp	r3, #14
 800e8aa:	f200 80a8 	bhi.w	800e9fe <_dtoa_r+0x47e>
 800e8ae:	2d00      	cmp	r5, #0
 800e8b0:	f000 80a5 	beq.w	800e9fe <_dtoa_r+0x47e>
 800e8b4:	f1bb 0f00 	cmp.w	fp, #0
 800e8b8:	dd38      	ble.n	800e92c <_dtoa_r+0x3ac>
 800e8ba:	4bc0      	ldr	r3, [pc, #768]	; (800ebbc <_dtoa_r+0x63c>)
 800e8bc:	f00b 020f 	and.w	r2, fp, #15
 800e8c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e8c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e8cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e8d0:	d019      	beq.n	800e906 <_dtoa_r+0x386>
 800e8d2:	4bbb      	ldr	r3, [pc, #748]	; (800ebc0 <_dtoa_r+0x640>)
 800e8d4:	ec51 0b18 	vmov	r0, r1, d8
 800e8d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e8dc:	f7f1 ffb6 	bl	800084c <__aeabi_ddiv>
 800e8e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8e4:	f008 080f 	and.w	r8, r8, #15
 800e8e8:	2503      	movs	r5, #3
 800e8ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ebc0 <_dtoa_r+0x640>
 800e8ee:	f1b8 0f00 	cmp.w	r8, #0
 800e8f2:	d10a      	bne.n	800e90a <_dtoa_r+0x38a>
 800e8f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8f8:	4632      	mov	r2, r6
 800e8fa:	463b      	mov	r3, r7
 800e8fc:	f7f1 ffa6 	bl	800084c <__aeabi_ddiv>
 800e900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e904:	e02b      	b.n	800e95e <_dtoa_r+0x3de>
 800e906:	2502      	movs	r5, #2
 800e908:	e7ef      	b.n	800e8ea <_dtoa_r+0x36a>
 800e90a:	f018 0f01 	tst.w	r8, #1
 800e90e:	d008      	beq.n	800e922 <_dtoa_r+0x3a2>
 800e910:	4630      	mov	r0, r6
 800e912:	4639      	mov	r1, r7
 800e914:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e918:	f7f1 fe6e 	bl	80005f8 <__aeabi_dmul>
 800e91c:	3501      	adds	r5, #1
 800e91e:	4606      	mov	r6, r0
 800e920:	460f      	mov	r7, r1
 800e922:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e926:	f109 0908 	add.w	r9, r9, #8
 800e92a:	e7e0      	b.n	800e8ee <_dtoa_r+0x36e>
 800e92c:	f000 809f 	beq.w	800ea6e <_dtoa_r+0x4ee>
 800e930:	f1cb 0600 	rsb	r6, fp, #0
 800e934:	4ba1      	ldr	r3, [pc, #644]	; (800ebbc <_dtoa_r+0x63c>)
 800e936:	4fa2      	ldr	r7, [pc, #648]	; (800ebc0 <_dtoa_r+0x640>)
 800e938:	f006 020f 	and.w	r2, r6, #15
 800e93c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e944:	ec51 0b18 	vmov	r0, r1, d8
 800e948:	f7f1 fe56 	bl	80005f8 <__aeabi_dmul>
 800e94c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e950:	1136      	asrs	r6, r6, #4
 800e952:	2300      	movs	r3, #0
 800e954:	2502      	movs	r5, #2
 800e956:	2e00      	cmp	r6, #0
 800e958:	d17e      	bne.n	800ea58 <_dtoa_r+0x4d8>
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d1d0      	bne.n	800e900 <_dtoa_r+0x380>
 800e95e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e960:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e964:	2b00      	cmp	r3, #0
 800e966:	f000 8084 	beq.w	800ea72 <_dtoa_r+0x4f2>
 800e96a:	4b96      	ldr	r3, [pc, #600]	; (800ebc4 <_dtoa_r+0x644>)
 800e96c:	2200      	movs	r2, #0
 800e96e:	4640      	mov	r0, r8
 800e970:	4649      	mov	r1, r9
 800e972:	f7f2 f8b3 	bl	8000adc <__aeabi_dcmplt>
 800e976:	2800      	cmp	r0, #0
 800e978:	d07b      	beq.n	800ea72 <_dtoa_r+0x4f2>
 800e97a:	9b04      	ldr	r3, [sp, #16]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d078      	beq.n	800ea72 <_dtoa_r+0x4f2>
 800e980:	9b01      	ldr	r3, [sp, #4]
 800e982:	2b00      	cmp	r3, #0
 800e984:	dd39      	ble.n	800e9fa <_dtoa_r+0x47a>
 800e986:	4b90      	ldr	r3, [pc, #576]	; (800ebc8 <_dtoa_r+0x648>)
 800e988:	2200      	movs	r2, #0
 800e98a:	4640      	mov	r0, r8
 800e98c:	4649      	mov	r1, r9
 800e98e:	f7f1 fe33 	bl	80005f8 <__aeabi_dmul>
 800e992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e996:	9e01      	ldr	r6, [sp, #4]
 800e998:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e99c:	3501      	adds	r5, #1
 800e99e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e9a2:	4628      	mov	r0, r5
 800e9a4:	f7f1 fdbe 	bl	8000524 <__aeabi_i2d>
 800e9a8:	4642      	mov	r2, r8
 800e9aa:	464b      	mov	r3, r9
 800e9ac:	f7f1 fe24 	bl	80005f8 <__aeabi_dmul>
 800e9b0:	4b86      	ldr	r3, [pc, #536]	; (800ebcc <_dtoa_r+0x64c>)
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f7f1 fc6a 	bl	800028c <__adddf3>
 800e9b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e9bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9c0:	9303      	str	r3, [sp, #12]
 800e9c2:	2e00      	cmp	r6, #0
 800e9c4:	d158      	bne.n	800ea78 <_dtoa_r+0x4f8>
 800e9c6:	4b82      	ldr	r3, [pc, #520]	; (800ebd0 <_dtoa_r+0x650>)
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	4640      	mov	r0, r8
 800e9cc:	4649      	mov	r1, r9
 800e9ce:	f7f1 fc5b 	bl	8000288 <__aeabi_dsub>
 800e9d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e9d6:	4680      	mov	r8, r0
 800e9d8:	4689      	mov	r9, r1
 800e9da:	f7f2 f89d 	bl	8000b18 <__aeabi_dcmpgt>
 800e9de:	2800      	cmp	r0, #0
 800e9e0:	f040 8296 	bne.w	800ef10 <_dtoa_r+0x990>
 800e9e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e9e8:	4640      	mov	r0, r8
 800e9ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9ee:	4649      	mov	r1, r9
 800e9f0:	f7f2 f874 	bl	8000adc <__aeabi_dcmplt>
 800e9f4:	2800      	cmp	r0, #0
 800e9f6:	f040 8289 	bne.w	800ef0c <_dtoa_r+0x98c>
 800e9fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e9fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f2c0 814e 	blt.w	800eca2 <_dtoa_r+0x722>
 800ea06:	f1bb 0f0e 	cmp.w	fp, #14
 800ea0a:	f300 814a 	bgt.w	800eca2 <_dtoa_r+0x722>
 800ea0e:	4b6b      	ldr	r3, [pc, #428]	; (800ebbc <_dtoa_r+0x63c>)
 800ea10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ea14:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	f280 80dc 	bge.w	800ebd8 <_dtoa_r+0x658>
 800ea20:	9b04      	ldr	r3, [sp, #16]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	f300 80d8 	bgt.w	800ebd8 <_dtoa_r+0x658>
 800ea28:	f040 826f 	bne.w	800ef0a <_dtoa_r+0x98a>
 800ea2c:	4b68      	ldr	r3, [pc, #416]	; (800ebd0 <_dtoa_r+0x650>)
 800ea2e:	2200      	movs	r2, #0
 800ea30:	4640      	mov	r0, r8
 800ea32:	4649      	mov	r1, r9
 800ea34:	f7f1 fde0 	bl	80005f8 <__aeabi_dmul>
 800ea38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea3c:	f7f2 f862 	bl	8000b04 <__aeabi_dcmpge>
 800ea40:	9e04      	ldr	r6, [sp, #16]
 800ea42:	4637      	mov	r7, r6
 800ea44:	2800      	cmp	r0, #0
 800ea46:	f040 8245 	bne.w	800eed4 <_dtoa_r+0x954>
 800ea4a:	9d00      	ldr	r5, [sp, #0]
 800ea4c:	2331      	movs	r3, #49	; 0x31
 800ea4e:	f805 3b01 	strb.w	r3, [r5], #1
 800ea52:	f10b 0b01 	add.w	fp, fp, #1
 800ea56:	e241      	b.n	800eedc <_dtoa_r+0x95c>
 800ea58:	07f2      	lsls	r2, r6, #31
 800ea5a:	d505      	bpl.n	800ea68 <_dtoa_r+0x4e8>
 800ea5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea60:	f7f1 fdca 	bl	80005f8 <__aeabi_dmul>
 800ea64:	3501      	adds	r5, #1
 800ea66:	2301      	movs	r3, #1
 800ea68:	1076      	asrs	r6, r6, #1
 800ea6a:	3708      	adds	r7, #8
 800ea6c:	e773      	b.n	800e956 <_dtoa_r+0x3d6>
 800ea6e:	2502      	movs	r5, #2
 800ea70:	e775      	b.n	800e95e <_dtoa_r+0x3de>
 800ea72:	9e04      	ldr	r6, [sp, #16]
 800ea74:	465f      	mov	r7, fp
 800ea76:	e792      	b.n	800e99e <_dtoa_r+0x41e>
 800ea78:	9900      	ldr	r1, [sp, #0]
 800ea7a:	4b50      	ldr	r3, [pc, #320]	; (800ebbc <_dtoa_r+0x63c>)
 800ea7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea80:	4431      	add	r1, r6
 800ea82:	9102      	str	r1, [sp, #8]
 800ea84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea86:	eeb0 9a47 	vmov.f32	s18, s14
 800ea8a:	eef0 9a67 	vmov.f32	s19, s15
 800ea8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ea92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ea96:	2900      	cmp	r1, #0
 800ea98:	d044      	beq.n	800eb24 <_dtoa_r+0x5a4>
 800ea9a:	494e      	ldr	r1, [pc, #312]	; (800ebd4 <_dtoa_r+0x654>)
 800ea9c:	2000      	movs	r0, #0
 800ea9e:	f7f1 fed5 	bl	800084c <__aeabi_ddiv>
 800eaa2:	ec53 2b19 	vmov	r2, r3, d9
 800eaa6:	f7f1 fbef 	bl	8000288 <__aeabi_dsub>
 800eaaa:	9d00      	ldr	r5, [sp, #0]
 800eaac:	ec41 0b19 	vmov	d9, r0, r1
 800eab0:	4649      	mov	r1, r9
 800eab2:	4640      	mov	r0, r8
 800eab4:	f7f2 f850 	bl	8000b58 <__aeabi_d2iz>
 800eab8:	4606      	mov	r6, r0
 800eaba:	f7f1 fd33 	bl	8000524 <__aeabi_i2d>
 800eabe:	4602      	mov	r2, r0
 800eac0:	460b      	mov	r3, r1
 800eac2:	4640      	mov	r0, r8
 800eac4:	4649      	mov	r1, r9
 800eac6:	f7f1 fbdf 	bl	8000288 <__aeabi_dsub>
 800eaca:	3630      	adds	r6, #48	; 0x30
 800eacc:	f805 6b01 	strb.w	r6, [r5], #1
 800ead0:	ec53 2b19 	vmov	r2, r3, d9
 800ead4:	4680      	mov	r8, r0
 800ead6:	4689      	mov	r9, r1
 800ead8:	f7f2 f800 	bl	8000adc <__aeabi_dcmplt>
 800eadc:	2800      	cmp	r0, #0
 800eade:	d164      	bne.n	800ebaa <_dtoa_r+0x62a>
 800eae0:	4642      	mov	r2, r8
 800eae2:	464b      	mov	r3, r9
 800eae4:	4937      	ldr	r1, [pc, #220]	; (800ebc4 <_dtoa_r+0x644>)
 800eae6:	2000      	movs	r0, #0
 800eae8:	f7f1 fbce 	bl	8000288 <__aeabi_dsub>
 800eaec:	ec53 2b19 	vmov	r2, r3, d9
 800eaf0:	f7f1 fff4 	bl	8000adc <__aeabi_dcmplt>
 800eaf4:	2800      	cmp	r0, #0
 800eaf6:	f040 80b6 	bne.w	800ec66 <_dtoa_r+0x6e6>
 800eafa:	9b02      	ldr	r3, [sp, #8]
 800eafc:	429d      	cmp	r5, r3
 800eafe:	f43f af7c 	beq.w	800e9fa <_dtoa_r+0x47a>
 800eb02:	4b31      	ldr	r3, [pc, #196]	; (800ebc8 <_dtoa_r+0x648>)
 800eb04:	ec51 0b19 	vmov	r0, r1, d9
 800eb08:	2200      	movs	r2, #0
 800eb0a:	f7f1 fd75 	bl	80005f8 <__aeabi_dmul>
 800eb0e:	4b2e      	ldr	r3, [pc, #184]	; (800ebc8 <_dtoa_r+0x648>)
 800eb10:	ec41 0b19 	vmov	d9, r0, r1
 800eb14:	2200      	movs	r2, #0
 800eb16:	4640      	mov	r0, r8
 800eb18:	4649      	mov	r1, r9
 800eb1a:	f7f1 fd6d 	bl	80005f8 <__aeabi_dmul>
 800eb1e:	4680      	mov	r8, r0
 800eb20:	4689      	mov	r9, r1
 800eb22:	e7c5      	b.n	800eab0 <_dtoa_r+0x530>
 800eb24:	ec51 0b17 	vmov	r0, r1, d7
 800eb28:	f7f1 fd66 	bl	80005f8 <__aeabi_dmul>
 800eb2c:	9b02      	ldr	r3, [sp, #8]
 800eb2e:	9d00      	ldr	r5, [sp, #0]
 800eb30:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb32:	ec41 0b19 	vmov	d9, r0, r1
 800eb36:	4649      	mov	r1, r9
 800eb38:	4640      	mov	r0, r8
 800eb3a:	f7f2 f80d 	bl	8000b58 <__aeabi_d2iz>
 800eb3e:	4606      	mov	r6, r0
 800eb40:	f7f1 fcf0 	bl	8000524 <__aeabi_i2d>
 800eb44:	3630      	adds	r6, #48	; 0x30
 800eb46:	4602      	mov	r2, r0
 800eb48:	460b      	mov	r3, r1
 800eb4a:	4640      	mov	r0, r8
 800eb4c:	4649      	mov	r1, r9
 800eb4e:	f7f1 fb9b 	bl	8000288 <__aeabi_dsub>
 800eb52:	f805 6b01 	strb.w	r6, [r5], #1
 800eb56:	9b02      	ldr	r3, [sp, #8]
 800eb58:	429d      	cmp	r5, r3
 800eb5a:	4680      	mov	r8, r0
 800eb5c:	4689      	mov	r9, r1
 800eb5e:	f04f 0200 	mov.w	r2, #0
 800eb62:	d124      	bne.n	800ebae <_dtoa_r+0x62e>
 800eb64:	4b1b      	ldr	r3, [pc, #108]	; (800ebd4 <_dtoa_r+0x654>)
 800eb66:	ec51 0b19 	vmov	r0, r1, d9
 800eb6a:	f7f1 fb8f 	bl	800028c <__adddf3>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	460b      	mov	r3, r1
 800eb72:	4640      	mov	r0, r8
 800eb74:	4649      	mov	r1, r9
 800eb76:	f7f1 ffcf 	bl	8000b18 <__aeabi_dcmpgt>
 800eb7a:	2800      	cmp	r0, #0
 800eb7c:	d173      	bne.n	800ec66 <_dtoa_r+0x6e6>
 800eb7e:	ec53 2b19 	vmov	r2, r3, d9
 800eb82:	4914      	ldr	r1, [pc, #80]	; (800ebd4 <_dtoa_r+0x654>)
 800eb84:	2000      	movs	r0, #0
 800eb86:	f7f1 fb7f 	bl	8000288 <__aeabi_dsub>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	460b      	mov	r3, r1
 800eb8e:	4640      	mov	r0, r8
 800eb90:	4649      	mov	r1, r9
 800eb92:	f7f1 ffa3 	bl	8000adc <__aeabi_dcmplt>
 800eb96:	2800      	cmp	r0, #0
 800eb98:	f43f af2f 	beq.w	800e9fa <_dtoa_r+0x47a>
 800eb9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800eb9e:	1e6b      	subs	r3, r5, #1
 800eba0:	930f      	str	r3, [sp, #60]	; 0x3c
 800eba2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eba6:	2b30      	cmp	r3, #48	; 0x30
 800eba8:	d0f8      	beq.n	800eb9c <_dtoa_r+0x61c>
 800ebaa:	46bb      	mov	fp, r7
 800ebac:	e04a      	b.n	800ec44 <_dtoa_r+0x6c4>
 800ebae:	4b06      	ldr	r3, [pc, #24]	; (800ebc8 <_dtoa_r+0x648>)
 800ebb0:	f7f1 fd22 	bl	80005f8 <__aeabi_dmul>
 800ebb4:	4680      	mov	r8, r0
 800ebb6:	4689      	mov	r9, r1
 800ebb8:	e7bd      	b.n	800eb36 <_dtoa_r+0x5b6>
 800ebba:	bf00      	nop
 800ebbc:	080118c0 	.word	0x080118c0
 800ebc0:	08011898 	.word	0x08011898
 800ebc4:	3ff00000 	.word	0x3ff00000
 800ebc8:	40240000 	.word	0x40240000
 800ebcc:	401c0000 	.word	0x401c0000
 800ebd0:	40140000 	.word	0x40140000
 800ebd4:	3fe00000 	.word	0x3fe00000
 800ebd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ebdc:	9d00      	ldr	r5, [sp, #0]
 800ebde:	4642      	mov	r2, r8
 800ebe0:	464b      	mov	r3, r9
 800ebe2:	4630      	mov	r0, r6
 800ebe4:	4639      	mov	r1, r7
 800ebe6:	f7f1 fe31 	bl	800084c <__aeabi_ddiv>
 800ebea:	f7f1 ffb5 	bl	8000b58 <__aeabi_d2iz>
 800ebee:	9001      	str	r0, [sp, #4]
 800ebf0:	f7f1 fc98 	bl	8000524 <__aeabi_i2d>
 800ebf4:	4642      	mov	r2, r8
 800ebf6:	464b      	mov	r3, r9
 800ebf8:	f7f1 fcfe 	bl	80005f8 <__aeabi_dmul>
 800ebfc:	4602      	mov	r2, r0
 800ebfe:	460b      	mov	r3, r1
 800ec00:	4630      	mov	r0, r6
 800ec02:	4639      	mov	r1, r7
 800ec04:	f7f1 fb40 	bl	8000288 <__aeabi_dsub>
 800ec08:	9e01      	ldr	r6, [sp, #4]
 800ec0a:	9f04      	ldr	r7, [sp, #16]
 800ec0c:	3630      	adds	r6, #48	; 0x30
 800ec0e:	f805 6b01 	strb.w	r6, [r5], #1
 800ec12:	9e00      	ldr	r6, [sp, #0]
 800ec14:	1bae      	subs	r6, r5, r6
 800ec16:	42b7      	cmp	r7, r6
 800ec18:	4602      	mov	r2, r0
 800ec1a:	460b      	mov	r3, r1
 800ec1c:	d134      	bne.n	800ec88 <_dtoa_r+0x708>
 800ec1e:	f7f1 fb35 	bl	800028c <__adddf3>
 800ec22:	4642      	mov	r2, r8
 800ec24:	464b      	mov	r3, r9
 800ec26:	4606      	mov	r6, r0
 800ec28:	460f      	mov	r7, r1
 800ec2a:	f7f1 ff75 	bl	8000b18 <__aeabi_dcmpgt>
 800ec2e:	b9c8      	cbnz	r0, 800ec64 <_dtoa_r+0x6e4>
 800ec30:	4642      	mov	r2, r8
 800ec32:	464b      	mov	r3, r9
 800ec34:	4630      	mov	r0, r6
 800ec36:	4639      	mov	r1, r7
 800ec38:	f7f1 ff46 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec3c:	b110      	cbz	r0, 800ec44 <_dtoa_r+0x6c4>
 800ec3e:	9b01      	ldr	r3, [sp, #4]
 800ec40:	07db      	lsls	r3, r3, #31
 800ec42:	d40f      	bmi.n	800ec64 <_dtoa_r+0x6e4>
 800ec44:	4651      	mov	r1, sl
 800ec46:	4620      	mov	r0, r4
 800ec48:	f000 fbcc 	bl	800f3e4 <_Bfree>
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec50:	702b      	strb	r3, [r5, #0]
 800ec52:	f10b 0301 	add.w	r3, fp, #1
 800ec56:	6013      	str	r3, [r2, #0]
 800ec58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	f43f ace2 	beq.w	800e624 <_dtoa_r+0xa4>
 800ec60:	601d      	str	r5, [r3, #0]
 800ec62:	e4df      	b.n	800e624 <_dtoa_r+0xa4>
 800ec64:	465f      	mov	r7, fp
 800ec66:	462b      	mov	r3, r5
 800ec68:	461d      	mov	r5, r3
 800ec6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec6e:	2a39      	cmp	r2, #57	; 0x39
 800ec70:	d106      	bne.n	800ec80 <_dtoa_r+0x700>
 800ec72:	9a00      	ldr	r2, [sp, #0]
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d1f7      	bne.n	800ec68 <_dtoa_r+0x6e8>
 800ec78:	9900      	ldr	r1, [sp, #0]
 800ec7a:	2230      	movs	r2, #48	; 0x30
 800ec7c:	3701      	adds	r7, #1
 800ec7e:	700a      	strb	r2, [r1, #0]
 800ec80:	781a      	ldrb	r2, [r3, #0]
 800ec82:	3201      	adds	r2, #1
 800ec84:	701a      	strb	r2, [r3, #0]
 800ec86:	e790      	b.n	800ebaa <_dtoa_r+0x62a>
 800ec88:	4ba3      	ldr	r3, [pc, #652]	; (800ef18 <_dtoa_r+0x998>)
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	f7f1 fcb4 	bl	80005f8 <__aeabi_dmul>
 800ec90:	2200      	movs	r2, #0
 800ec92:	2300      	movs	r3, #0
 800ec94:	4606      	mov	r6, r0
 800ec96:	460f      	mov	r7, r1
 800ec98:	f7f1 ff16 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	d09e      	beq.n	800ebde <_dtoa_r+0x65e>
 800eca0:	e7d0      	b.n	800ec44 <_dtoa_r+0x6c4>
 800eca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eca4:	2a00      	cmp	r2, #0
 800eca6:	f000 80ca 	beq.w	800ee3e <_dtoa_r+0x8be>
 800ecaa:	9a07      	ldr	r2, [sp, #28]
 800ecac:	2a01      	cmp	r2, #1
 800ecae:	f300 80ad 	bgt.w	800ee0c <_dtoa_r+0x88c>
 800ecb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecb4:	2a00      	cmp	r2, #0
 800ecb6:	f000 80a5 	beq.w	800ee04 <_dtoa_r+0x884>
 800ecba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ecbe:	9e08      	ldr	r6, [sp, #32]
 800ecc0:	9d05      	ldr	r5, [sp, #20]
 800ecc2:	9a05      	ldr	r2, [sp, #20]
 800ecc4:	441a      	add	r2, r3
 800ecc6:	9205      	str	r2, [sp, #20]
 800ecc8:	9a06      	ldr	r2, [sp, #24]
 800ecca:	2101      	movs	r1, #1
 800eccc:	441a      	add	r2, r3
 800ecce:	4620      	mov	r0, r4
 800ecd0:	9206      	str	r2, [sp, #24]
 800ecd2:	f000 fc3d 	bl	800f550 <__i2b>
 800ecd6:	4607      	mov	r7, r0
 800ecd8:	b165      	cbz	r5, 800ecf4 <_dtoa_r+0x774>
 800ecda:	9b06      	ldr	r3, [sp, #24]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	dd09      	ble.n	800ecf4 <_dtoa_r+0x774>
 800ece0:	42ab      	cmp	r3, r5
 800ece2:	9a05      	ldr	r2, [sp, #20]
 800ece4:	bfa8      	it	ge
 800ece6:	462b      	movge	r3, r5
 800ece8:	1ad2      	subs	r2, r2, r3
 800ecea:	9205      	str	r2, [sp, #20]
 800ecec:	9a06      	ldr	r2, [sp, #24]
 800ecee:	1aed      	subs	r5, r5, r3
 800ecf0:	1ad3      	subs	r3, r2, r3
 800ecf2:	9306      	str	r3, [sp, #24]
 800ecf4:	9b08      	ldr	r3, [sp, #32]
 800ecf6:	b1f3      	cbz	r3, 800ed36 <_dtoa_r+0x7b6>
 800ecf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	f000 80a3 	beq.w	800ee46 <_dtoa_r+0x8c6>
 800ed00:	2e00      	cmp	r6, #0
 800ed02:	dd10      	ble.n	800ed26 <_dtoa_r+0x7a6>
 800ed04:	4639      	mov	r1, r7
 800ed06:	4632      	mov	r2, r6
 800ed08:	4620      	mov	r0, r4
 800ed0a:	f000 fce1 	bl	800f6d0 <__pow5mult>
 800ed0e:	4652      	mov	r2, sl
 800ed10:	4601      	mov	r1, r0
 800ed12:	4607      	mov	r7, r0
 800ed14:	4620      	mov	r0, r4
 800ed16:	f000 fc31 	bl	800f57c <__multiply>
 800ed1a:	4651      	mov	r1, sl
 800ed1c:	4680      	mov	r8, r0
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f000 fb60 	bl	800f3e4 <_Bfree>
 800ed24:	46c2      	mov	sl, r8
 800ed26:	9b08      	ldr	r3, [sp, #32]
 800ed28:	1b9a      	subs	r2, r3, r6
 800ed2a:	d004      	beq.n	800ed36 <_dtoa_r+0x7b6>
 800ed2c:	4651      	mov	r1, sl
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f000 fcce 	bl	800f6d0 <__pow5mult>
 800ed34:	4682      	mov	sl, r0
 800ed36:	2101      	movs	r1, #1
 800ed38:	4620      	mov	r0, r4
 800ed3a:	f000 fc09 	bl	800f550 <__i2b>
 800ed3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	4606      	mov	r6, r0
 800ed44:	f340 8081 	ble.w	800ee4a <_dtoa_r+0x8ca>
 800ed48:	461a      	mov	r2, r3
 800ed4a:	4601      	mov	r1, r0
 800ed4c:	4620      	mov	r0, r4
 800ed4e:	f000 fcbf 	bl	800f6d0 <__pow5mult>
 800ed52:	9b07      	ldr	r3, [sp, #28]
 800ed54:	2b01      	cmp	r3, #1
 800ed56:	4606      	mov	r6, r0
 800ed58:	dd7a      	ble.n	800ee50 <_dtoa_r+0x8d0>
 800ed5a:	f04f 0800 	mov.w	r8, #0
 800ed5e:	6933      	ldr	r3, [r6, #16]
 800ed60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ed64:	6918      	ldr	r0, [r3, #16]
 800ed66:	f000 fba5 	bl	800f4b4 <__hi0bits>
 800ed6a:	f1c0 0020 	rsb	r0, r0, #32
 800ed6e:	9b06      	ldr	r3, [sp, #24]
 800ed70:	4418      	add	r0, r3
 800ed72:	f010 001f 	ands.w	r0, r0, #31
 800ed76:	f000 8094 	beq.w	800eea2 <_dtoa_r+0x922>
 800ed7a:	f1c0 0320 	rsb	r3, r0, #32
 800ed7e:	2b04      	cmp	r3, #4
 800ed80:	f340 8085 	ble.w	800ee8e <_dtoa_r+0x90e>
 800ed84:	9b05      	ldr	r3, [sp, #20]
 800ed86:	f1c0 001c 	rsb	r0, r0, #28
 800ed8a:	4403      	add	r3, r0
 800ed8c:	9305      	str	r3, [sp, #20]
 800ed8e:	9b06      	ldr	r3, [sp, #24]
 800ed90:	4403      	add	r3, r0
 800ed92:	4405      	add	r5, r0
 800ed94:	9306      	str	r3, [sp, #24]
 800ed96:	9b05      	ldr	r3, [sp, #20]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	dd05      	ble.n	800eda8 <_dtoa_r+0x828>
 800ed9c:	4651      	mov	r1, sl
 800ed9e:	461a      	mov	r2, r3
 800eda0:	4620      	mov	r0, r4
 800eda2:	f000 fcef 	bl	800f784 <__lshift>
 800eda6:	4682      	mov	sl, r0
 800eda8:	9b06      	ldr	r3, [sp, #24]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	dd05      	ble.n	800edba <_dtoa_r+0x83a>
 800edae:	4631      	mov	r1, r6
 800edb0:	461a      	mov	r2, r3
 800edb2:	4620      	mov	r0, r4
 800edb4:	f000 fce6 	bl	800f784 <__lshift>
 800edb8:	4606      	mov	r6, r0
 800edba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d072      	beq.n	800eea6 <_dtoa_r+0x926>
 800edc0:	4631      	mov	r1, r6
 800edc2:	4650      	mov	r0, sl
 800edc4:	f000 fd4a 	bl	800f85c <__mcmp>
 800edc8:	2800      	cmp	r0, #0
 800edca:	da6c      	bge.n	800eea6 <_dtoa_r+0x926>
 800edcc:	2300      	movs	r3, #0
 800edce:	4651      	mov	r1, sl
 800edd0:	220a      	movs	r2, #10
 800edd2:	4620      	mov	r0, r4
 800edd4:	f000 fb28 	bl	800f428 <__multadd>
 800edd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edda:	f10b 3bff 	add.w	fp, fp, #4294967295
 800edde:	4682      	mov	sl, r0
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	f000 81b0 	beq.w	800f146 <_dtoa_r+0xbc6>
 800ede6:	2300      	movs	r3, #0
 800ede8:	4639      	mov	r1, r7
 800edea:	220a      	movs	r2, #10
 800edec:	4620      	mov	r0, r4
 800edee:	f000 fb1b 	bl	800f428 <__multadd>
 800edf2:	9b01      	ldr	r3, [sp, #4]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	4607      	mov	r7, r0
 800edf8:	f300 8096 	bgt.w	800ef28 <_dtoa_r+0x9a8>
 800edfc:	9b07      	ldr	r3, [sp, #28]
 800edfe:	2b02      	cmp	r3, #2
 800ee00:	dc59      	bgt.n	800eeb6 <_dtoa_r+0x936>
 800ee02:	e091      	b.n	800ef28 <_dtoa_r+0x9a8>
 800ee04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ee0a:	e758      	b.n	800ecbe <_dtoa_r+0x73e>
 800ee0c:	9b04      	ldr	r3, [sp, #16]
 800ee0e:	1e5e      	subs	r6, r3, #1
 800ee10:	9b08      	ldr	r3, [sp, #32]
 800ee12:	42b3      	cmp	r3, r6
 800ee14:	bfbf      	itttt	lt
 800ee16:	9b08      	ldrlt	r3, [sp, #32]
 800ee18:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ee1a:	9608      	strlt	r6, [sp, #32]
 800ee1c:	1af3      	sublt	r3, r6, r3
 800ee1e:	bfb4      	ite	lt
 800ee20:	18d2      	addlt	r2, r2, r3
 800ee22:	1b9e      	subge	r6, r3, r6
 800ee24:	9b04      	ldr	r3, [sp, #16]
 800ee26:	bfbc      	itt	lt
 800ee28:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ee2a:	2600      	movlt	r6, #0
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	bfb7      	itett	lt
 800ee30:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ee34:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ee38:	1a9d      	sublt	r5, r3, r2
 800ee3a:	2300      	movlt	r3, #0
 800ee3c:	e741      	b.n	800ecc2 <_dtoa_r+0x742>
 800ee3e:	9e08      	ldr	r6, [sp, #32]
 800ee40:	9d05      	ldr	r5, [sp, #20]
 800ee42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ee44:	e748      	b.n	800ecd8 <_dtoa_r+0x758>
 800ee46:	9a08      	ldr	r2, [sp, #32]
 800ee48:	e770      	b.n	800ed2c <_dtoa_r+0x7ac>
 800ee4a:	9b07      	ldr	r3, [sp, #28]
 800ee4c:	2b01      	cmp	r3, #1
 800ee4e:	dc19      	bgt.n	800ee84 <_dtoa_r+0x904>
 800ee50:	9b02      	ldr	r3, [sp, #8]
 800ee52:	b9bb      	cbnz	r3, 800ee84 <_dtoa_r+0x904>
 800ee54:	9b03      	ldr	r3, [sp, #12]
 800ee56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee5a:	b99b      	cbnz	r3, 800ee84 <_dtoa_r+0x904>
 800ee5c:	9b03      	ldr	r3, [sp, #12]
 800ee5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee62:	0d1b      	lsrs	r3, r3, #20
 800ee64:	051b      	lsls	r3, r3, #20
 800ee66:	b183      	cbz	r3, 800ee8a <_dtoa_r+0x90a>
 800ee68:	9b05      	ldr	r3, [sp, #20]
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	9305      	str	r3, [sp, #20]
 800ee6e:	9b06      	ldr	r3, [sp, #24]
 800ee70:	3301      	adds	r3, #1
 800ee72:	9306      	str	r3, [sp, #24]
 800ee74:	f04f 0801 	mov.w	r8, #1
 800ee78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	f47f af6f 	bne.w	800ed5e <_dtoa_r+0x7de>
 800ee80:	2001      	movs	r0, #1
 800ee82:	e774      	b.n	800ed6e <_dtoa_r+0x7ee>
 800ee84:	f04f 0800 	mov.w	r8, #0
 800ee88:	e7f6      	b.n	800ee78 <_dtoa_r+0x8f8>
 800ee8a:	4698      	mov	r8, r3
 800ee8c:	e7f4      	b.n	800ee78 <_dtoa_r+0x8f8>
 800ee8e:	d082      	beq.n	800ed96 <_dtoa_r+0x816>
 800ee90:	9a05      	ldr	r2, [sp, #20]
 800ee92:	331c      	adds	r3, #28
 800ee94:	441a      	add	r2, r3
 800ee96:	9205      	str	r2, [sp, #20]
 800ee98:	9a06      	ldr	r2, [sp, #24]
 800ee9a:	441a      	add	r2, r3
 800ee9c:	441d      	add	r5, r3
 800ee9e:	9206      	str	r2, [sp, #24]
 800eea0:	e779      	b.n	800ed96 <_dtoa_r+0x816>
 800eea2:	4603      	mov	r3, r0
 800eea4:	e7f4      	b.n	800ee90 <_dtoa_r+0x910>
 800eea6:	9b04      	ldr	r3, [sp, #16]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	dc37      	bgt.n	800ef1c <_dtoa_r+0x99c>
 800eeac:	9b07      	ldr	r3, [sp, #28]
 800eeae:	2b02      	cmp	r3, #2
 800eeb0:	dd34      	ble.n	800ef1c <_dtoa_r+0x99c>
 800eeb2:	9b04      	ldr	r3, [sp, #16]
 800eeb4:	9301      	str	r3, [sp, #4]
 800eeb6:	9b01      	ldr	r3, [sp, #4]
 800eeb8:	b963      	cbnz	r3, 800eed4 <_dtoa_r+0x954>
 800eeba:	4631      	mov	r1, r6
 800eebc:	2205      	movs	r2, #5
 800eebe:	4620      	mov	r0, r4
 800eec0:	f000 fab2 	bl	800f428 <__multadd>
 800eec4:	4601      	mov	r1, r0
 800eec6:	4606      	mov	r6, r0
 800eec8:	4650      	mov	r0, sl
 800eeca:	f000 fcc7 	bl	800f85c <__mcmp>
 800eece:	2800      	cmp	r0, #0
 800eed0:	f73f adbb 	bgt.w	800ea4a <_dtoa_r+0x4ca>
 800eed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eed6:	9d00      	ldr	r5, [sp, #0]
 800eed8:	ea6f 0b03 	mvn.w	fp, r3
 800eedc:	f04f 0800 	mov.w	r8, #0
 800eee0:	4631      	mov	r1, r6
 800eee2:	4620      	mov	r0, r4
 800eee4:	f000 fa7e 	bl	800f3e4 <_Bfree>
 800eee8:	2f00      	cmp	r7, #0
 800eeea:	f43f aeab 	beq.w	800ec44 <_dtoa_r+0x6c4>
 800eeee:	f1b8 0f00 	cmp.w	r8, #0
 800eef2:	d005      	beq.n	800ef00 <_dtoa_r+0x980>
 800eef4:	45b8      	cmp	r8, r7
 800eef6:	d003      	beq.n	800ef00 <_dtoa_r+0x980>
 800eef8:	4641      	mov	r1, r8
 800eefa:	4620      	mov	r0, r4
 800eefc:	f000 fa72 	bl	800f3e4 <_Bfree>
 800ef00:	4639      	mov	r1, r7
 800ef02:	4620      	mov	r0, r4
 800ef04:	f000 fa6e 	bl	800f3e4 <_Bfree>
 800ef08:	e69c      	b.n	800ec44 <_dtoa_r+0x6c4>
 800ef0a:	2600      	movs	r6, #0
 800ef0c:	4637      	mov	r7, r6
 800ef0e:	e7e1      	b.n	800eed4 <_dtoa_r+0x954>
 800ef10:	46bb      	mov	fp, r7
 800ef12:	4637      	mov	r7, r6
 800ef14:	e599      	b.n	800ea4a <_dtoa_r+0x4ca>
 800ef16:	bf00      	nop
 800ef18:	40240000 	.word	0x40240000
 800ef1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	f000 80c8 	beq.w	800f0b4 <_dtoa_r+0xb34>
 800ef24:	9b04      	ldr	r3, [sp, #16]
 800ef26:	9301      	str	r3, [sp, #4]
 800ef28:	2d00      	cmp	r5, #0
 800ef2a:	dd05      	ble.n	800ef38 <_dtoa_r+0x9b8>
 800ef2c:	4639      	mov	r1, r7
 800ef2e:	462a      	mov	r2, r5
 800ef30:	4620      	mov	r0, r4
 800ef32:	f000 fc27 	bl	800f784 <__lshift>
 800ef36:	4607      	mov	r7, r0
 800ef38:	f1b8 0f00 	cmp.w	r8, #0
 800ef3c:	d05b      	beq.n	800eff6 <_dtoa_r+0xa76>
 800ef3e:	6879      	ldr	r1, [r7, #4]
 800ef40:	4620      	mov	r0, r4
 800ef42:	f000 fa0f 	bl	800f364 <_Balloc>
 800ef46:	4605      	mov	r5, r0
 800ef48:	b928      	cbnz	r0, 800ef56 <_dtoa_r+0x9d6>
 800ef4a:	4b83      	ldr	r3, [pc, #524]	; (800f158 <_dtoa_r+0xbd8>)
 800ef4c:	4602      	mov	r2, r0
 800ef4e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ef52:	f7ff bb2e 	b.w	800e5b2 <_dtoa_r+0x32>
 800ef56:	693a      	ldr	r2, [r7, #16]
 800ef58:	3202      	adds	r2, #2
 800ef5a:	0092      	lsls	r2, r2, #2
 800ef5c:	f107 010c 	add.w	r1, r7, #12
 800ef60:	300c      	adds	r0, #12
 800ef62:	f7ff fa77 	bl	800e454 <memcpy>
 800ef66:	2201      	movs	r2, #1
 800ef68:	4629      	mov	r1, r5
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f000 fc0a 	bl	800f784 <__lshift>
 800ef70:	9b00      	ldr	r3, [sp, #0]
 800ef72:	3301      	adds	r3, #1
 800ef74:	9304      	str	r3, [sp, #16]
 800ef76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef7a:	4413      	add	r3, r2
 800ef7c:	9308      	str	r3, [sp, #32]
 800ef7e:	9b02      	ldr	r3, [sp, #8]
 800ef80:	f003 0301 	and.w	r3, r3, #1
 800ef84:	46b8      	mov	r8, r7
 800ef86:	9306      	str	r3, [sp, #24]
 800ef88:	4607      	mov	r7, r0
 800ef8a:	9b04      	ldr	r3, [sp, #16]
 800ef8c:	4631      	mov	r1, r6
 800ef8e:	3b01      	subs	r3, #1
 800ef90:	4650      	mov	r0, sl
 800ef92:	9301      	str	r3, [sp, #4]
 800ef94:	f7ff fa6c 	bl	800e470 <quorem>
 800ef98:	4641      	mov	r1, r8
 800ef9a:	9002      	str	r0, [sp, #8]
 800ef9c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800efa0:	4650      	mov	r0, sl
 800efa2:	f000 fc5b 	bl	800f85c <__mcmp>
 800efa6:	463a      	mov	r2, r7
 800efa8:	9005      	str	r0, [sp, #20]
 800efaa:	4631      	mov	r1, r6
 800efac:	4620      	mov	r0, r4
 800efae:	f000 fc71 	bl	800f894 <__mdiff>
 800efb2:	68c2      	ldr	r2, [r0, #12]
 800efb4:	4605      	mov	r5, r0
 800efb6:	bb02      	cbnz	r2, 800effa <_dtoa_r+0xa7a>
 800efb8:	4601      	mov	r1, r0
 800efba:	4650      	mov	r0, sl
 800efbc:	f000 fc4e 	bl	800f85c <__mcmp>
 800efc0:	4602      	mov	r2, r0
 800efc2:	4629      	mov	r1, r5
 800efc4:	4620      	mov	r0, r4
 800efc6:	9209      	str	r2, [sp, #36]	; 0x24
 800efc8:	f000 fa0c 	bl	800f3e4 <_Bfree>
 800efcc:	9b07      	ldr	r3, [sp, #28]
 800efce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efd0:	9d04      	ldr	r5, [sp, #16]
 800efd2:	ea43 0102 	orr.w	r1, r3, r2
 800efd6:	9b06      	ldr	r3, [sp, #24]
 800efd8:	4319      	orrs	r1, r3
 800efda:	d110      	bne.n	800effe <_dtoa_r+0xa7e>
 800efdc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800efe0:	d029      	beq.n	800f036 <_dtoa_r+0xab6>
 800efe2:	9b05      	ldr	r3, [sp, #20]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	dd02      	ble.n	800efee <_dtoa_r+0xa6e>
 800efe8:	9b02      	ldr	r3, [sp, #8]
 800efea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800efee:	9b01      	ldr	r3, [sp, #4]
 800eff0:	f883 9000 	strb.w	r9, [r3]
 800eff4:	e774      	b.n	800eee0 <_dtoa_r+0x960>
 800eff6:	4638      	mov	r0, r7
 800eff8:	e7ba      	b.n	800ef70 <_dtoa_r+0x9f0>
 800effa:	2201      	movs	r2, #1
 800effc:	e7e1      	b.n	800efc2 <_dtoa_r+0xa42>
 800effe:	9b05      	ldr	r3, [sp, #20]
 800f000:	2b00      	cmp	r3, #0
 800f002:	db04      	blt.n	800f00e <_dtoa_r+0xa8e>
 800f004:	9907      	ldr	r1, [sp, #28]
 800f006:	430b      	orrs	r3, r1
 800f008:	9906      	ldr	r1, [sp, #24]
 800f00a:	430b      	orrs	r3, r1
 800f00c:	d120      	bne.n	800f050 <_dtoa_r+0xad0>
 800f00e:	2a00      	cmp	r2, #0
 800f010:	dded      	ble.n	800efee <_dtoa_r+0xa6e>
 800f012:	4651      	mov	r1, sl
 800f014:	2201      	movs	r2, #1
 800f016:	4620      	mov	r0, r4
 800f018:	f000 fbb4 	bl	800f784 <__lshift>
 800f01c:	4631      	mov	r1, r6
 800f01e:	4682      	mov	sl, r0
 800f020:	f000 fc1c 	bl	800f85c <__mcmp>
 800f024:	2800      	cmp	r0, #0
 800f026:	dc03      	bgt.n	800f030 <_dtoa_r+0xab0>
 800f028:	d1e1      	bne.n	800efee <_dtoa_r+0xa6e>
 800f02a:	f019 0f01 	tst.w	r9, #1
 800f02e:	d0de      	beq.n	800efee <_dtoa_r+0xa6e>
 800f030:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f034:	d1d8      	bne.n	800efe8 <_dtoa_r+0xa68>
 800f036:	9a01      	ldr	r2, [sp, #4]
 800f038:	2339      	movs	r3, #57	; 0x39
 800f03a:	7013      	strb	r3, [r2, #0]
 800f03c:	462b      	mov	r3, r5
 800f03e:	461d      	mov	r5, r3
 800f040:	3b01      	subs	r3, #1
 800f042:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f046:	2a39      	cmp	r2, #57	; 0x39
 800f048:	d06c      	beq.n	800f124 <_dtoa_r+0xba4>
 800f04a:	3201      	adds	r2, #1
 800f04c:	701a      	strb	r2, [r3, #0]
 800f04e:	e747      	b.n	800eee0 <_dtoa_r+0x960>
 800f050:	2a00      	cmp	r2, #0
 800f052:	dd07      	ble.n	800f064 <_dtoa_r+0xae4>
 800f054:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f058:	d0ed      	beq.n	800f036 <_dtoa_r+0xab6>
 800f05a:	9a01      	ldr	r2, [sp, #4]
 800f05c:	f109 0301 	add.w	r3, r9, #1
 800f060:	7013      	strb	r3, [r2, #0]
 800f062:	e73d      	b.n	800eee0 <_dtoa_r+0x960>
 800f064:	9b04      	ldr	r3, [sp, #16]
 800f066:	9a08      	ldr	r2, [sp, #32]
 800f068:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d043      	beq.n	800f0f8 <_dtoa_r+0xb78>
 800f070:	4651      	mov	r1, sl
 800f072:	2300      	movs	r3, #0
 800f074:	220a      	movs	r2, #10
 800f076:	4620      	mov	r0, r4
 800f078:	f000 f9d6 	bl	800f428 <__multadd>
 800f07c:	45b8      	cmp	r8, r7
 800f07e:	4682      	mov	sl, r0
 800f080:	f04f 0300 	mov.w	r3, #0
 800f084:	f04f 020a 	mov.w	r2, #10
 800f088:	4641      	mov	r1, r8
 800f08a:	4620      	mov	r0, r4
 800f08c:	d107      	bne.n	800f09e <_dtoa_r+0xb1e>
 800f08e:	f000 f9cb 	bl	800f428 <__multadd>
 800f092:	4680      	mov	r8, r0
 800f094:	4607      	mov	r7, r0
 800f096:	9b04      	ldr	r3, [sp, #16]
 800f098:	3301      	adds	r3, #1
 800f09a:	9304      	str	r3, [sp, #16]
 800f09c:	e775      	b.n	800ef8a <_dtoa_r+0xa0a>
 800f09e:	f000 f9c3 	bl	800f428 <__multadd>
 800f0a2:	4639      	mov	r1, r7
 800f0a4:	4680      	mov	r8, r0
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	220a      	movs	r2, #10
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	f000 f9bc 	bl	800f428 <__multadd>
 800f0b0:	4607      	mov	r7, r0
 800f0b2:	e7f0      	b.n	800f096 <_dtoa_r+0xb16>
 800f0b4:	9b04      	ldr	r3, [sp, #16]
 800f0b6:	9301      	str	r3, [sp, #4]
 800f0b8:	9d00      	ldr	r5, [sp, #0]
 800f0ba:	4631      	mov	r1, r6
 800f0bc:	4650      	mov	r0, sl
 800f0be:	f7ff f9d7 	bl	800e470 <quorem>
 800f0c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f0c6:	9b00      	ldr	r3, [sp, #0]
 800f0c8:	f805 9b01 	strb.w	r9, [r5], #1
 800f0cc:	1aea      	subs	r2, r5, r3
 800f0ce:	9b01      	ldr	r3, [sp, #4]
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	dd07      	ble.n	800f0e4 <_dtoa_r+0xb64>
 800f0d4:	4651      	mov	r1, sl
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	220a      	movs	r2, #10
 800f0da:	4620      	mov	r0, r4
 800f0dc:	f000 f9a4 	bl	800f428 <__multadd>
 800f0e0:	4682      	mov	sl, r0
 800f0e2:	e7ea      	b.n	800f0ba <_dtoa_r+0xb3a>
 800f0e4:	9b01      	ldr	r3, [sp, #4]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	bfc8      	it	gt
 800f0ea:	461d      	movgt	r5, r3
 800f0ec:	9b00      	ldr	r3, [sp, #0]
 800f0ee:	bfd8      	it	le
 800f0f0:	2501      	movle	r5, #1
 800f0f2:	441d      	add	r5, r3
 800f0f4:	f04f 0800 	mov.w	r8, #0
 800f0f8:	4651      	mov	r1, sl
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	4620      	mov	r0, r4
 800f0fe:	f000 fb41 	bl	800f784 <__lshift>
 800f102:	4631      	mov	r1, r6
 800f104:	4682      	mov	sl, r0
 800f106:	f000 fba9 	bl	800f85c <__mcmp>
 800f10a:	2800      	cmp	r0, #0
 800f10c:	dc96      	bgt.n	800f03c <_dtoa_r+0xabc>
 800f10e:	d102      	bne.n	800f116 <_dtoa_r+0xb96>
 800f110:	f019 0f01 	tst.w	r9, #1
 800f114:	d192      	bne.n	800f03c <_dtoa_r+0xabc>
 800f116:	462b      	mov	r3, r5
 800f118:	461d      	mov	r5, r3
 800f11a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f11e:	2a30      	cmp	r2, #48	; 0x30
 800f120:	d0fa      	beq.n	800f118 <_dtoa_r+0xb98>
 800f122:	e6dd      	b.n	800eee0 <_dtoa_r+0x960>
 800f124:	9a00      	ldr	r2, [sp, #0]
 800f126:	429a      	cmp	r2, r3
 800f128:	d189      	bne.n	800f03e <_dtoa_r+0xabe>
 800f12a:	f10b 0b01 	add.w	fp, fp, #1
 800f12e:	2331      	movs	r3, #49	; 0x31
 800f130:	e796      	b.n	800f060 <_dtoa_r+0xae0>
 800f132:	4b0a      	ldr	r3, [pc, #40]	; (800f15c <_dtoa_r+0xbdc>)
 800f134:	f7ff ba99 	b.w	800e66a <_dtoa_r+0xea>
 800f138:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	f47f aa6d 	bne.w	800e61a <_dtoa_r+0x9a>
 800f140:	4b07      	ldr	r3, [pc, #28]	; (800f160 <_dtoa_r+0xbe0>)
 800f142:	f7ff ba92 	b.w	800e66a <_dtoa_r+0xea>
 800f146:	9b01      	ldr	r3, [sp, #4]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	dcb5      	bgt.n	800f0b8 <_dtoa_r+0xb38>
 800f14c:	9b07      	ldr	r3, [sp, #28]
 800f14e:	2b02      	cmp	r3, #2
 800f150:	f73f aeb1 	bgt.w	800eeb6 <_dtoa_r+0x936>
 800f154:	e7b0      	b.n	800f0b8 <_dtoa_r+0xb38>
 800f156:	bf00      	nop
 800f158:	08011829 	.word	0x08011829
 800f15c:	08011789 	.word	0x08011789
 800f160:	080117ad 	.word	0x080117ad

0800f164 <_free_r>:
 800f164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f166:	2900      	cmp	r1, #0
 800f168:	d044      	beq.n	800f1f4 <_free_r+0x90>
 800f16a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f16e:	9001      	str	r0, [sp, #4]
 800f170:	2b00      	cmp	r3, #0
 800f172:	f1a1 0404 	sub.w	r4, r1, #4
 800f176:	bfb8      	it	lt
 800f178:	18e4      	addlt	r4, r4, r3
 800f17a:	f000 f8e7 	bl	800f34c <__malloc_lock>
 800f17e:	4a1e      	ldr	r2, [pc, #120]	; (800f1f8 <_free_r+0x94>)
 800f180:	9801      	ldr	r0, [sp, #4]
 800f182:	6813      	ldr	r3, [r2, #0]
 800f184:	b933      	cbnz	r3, 800f194 <_free_r+0x30>
 800f186:	6063      	str	r3, [r4, #4]
 800f188:	6014      	str	r4, [r2, #0]
 800f18a:	b003      	add	sp, #12
 800f18c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f190:	f000 b8e2 	b.w	800f358 <__malloc_unlock>
 800f194:	42a3      	cmp	r3, r4
 800f196:	d908      	bls.n	800f1aa <_free_r+0x46>
 800f198:	6825      	ldr	r5, [r4, #0]
 800f19a:	1961      	adds	r1, r4, r5
 800f19c:	428b      	cmp	r3, r1
 800f19e:	bf01      	itttt	eq
 800f1a0:	6819      	ldreq	r1, [r3, #0]
 800f1a2:	685b      	ldreq	r3, [r3, #4]
 800f1a4:	1949      	addeq	r1, r1, r5
 800f1a6:	6021      	streq	r1, [r4, #0]
 800f1a8:	e7ed      	b.n	800f186 <_free_r+0x22>
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	b10b      	cbz	r3, 800f1b4 <_free_r+0x50>
 800f1b0:	42a3      	cmp	r3, r4
 800f1b2:	d9fa      	bls.n	800f1aa <_free_r+0x46>
 800f1b4:	6811      	ldr	r1, [r2, #0]
 800f1b6:	1855      	adds	r5, r2, r1
 800f1b8:	42a5      	cmp	r5, r4
 800f1ba:	d10b      	bne.n	800f1d4 <_free_r+0x70>
 800f1bc:	6824      	ldr	r4, [r4, #0]
 800f1be:	4421      	add	r1, r4
 800f1c0:	1854      	adds	r4, r2, r1
 800f1c2:	42a3      	cmp	r3, r4
 800f1c4:	6011      	str	r1, [r2, #0]
 800f1c6:	d1e0      	bne.n	800f18a <_free_r+0x26>
 800f1c8:	681c      	ldr	r4, [r3, #0]
 800f1ca:	685b      	ldr	r3, [r3, #4]
 800f1cc:	6053      	str	r3, [r2, #4]
 800f1ce:	440c      	add	r4, r1
 800f1d0:	6014      	str	r4, [r2, #0]
 800f1d2:	e7da      	b.n	800f18a <_free_r+0x26>
 800f1d4:	d902      	bls.n	800f1dc <_free_r+0x78>
 800f1d6:	230c      	movs	r3, #12
 800f1d8:	6003      	str	r3, [r0, #0]
 800f1da:	e7d6      	b.n	800f18a <_free_r+0x26>
 800f1dc:	6825      	ldr	r5, [r4, #0]
 800f1de:	1961      	adds	r1, r4, r5
 800f1e0:	428b      	cmp	r3, r1
 800f1e2:	bf04      	itt	eq
 800f1e4:	6819      	ldreq	r1, [r3, #0]
 800f1e6:	685b      	ldreq	r3, [r3, #4]
 800f1e8:	6063      	str	r3, [r4, #4]
 800f1ea:	bf04      	itt	eq
 800f1ec:	1949      	addeq	r1, r1, r5
 800f1ee:	6021      	streq	r1, [r4, #0]
 800f1f0:	6054      	str	r4, [r2, #4]
 800f1f2:	e7ca      	b.n	800f18a <_free_r+0x26>
 800f1f4:	b003      	add	sp, #12
 800f1f6:	bd30      	pop	{r4, r5, pc}
 800f1f8:	20004f40 	.word	0x20004f40

0800f1fc <malloc>:
 800f1fc:	4b02      	ldr	r3, [pc, #8]	; (800f208 <malloc+0xc>)
 800f1fe:	4601      	mov	r1, r0
 800f200:	6818      	ldr	r0, [r3, #0]
 800f202:	f000 b823 	b.w	800f24c <_malloc_r>
 800f206:	bf00      	nop
 800f208:	200000e0 	.word	0x200000e0

0800f20c <sbrk_aligned>:
 800f20c:	b570      	push	{r4, r5, r6, lr}
 800f20e:	4e0e      	ldr	r6, [pc, #56]	; (800f248 <sbrk_aligned+0x3c>)
 800f210:	460c      	mov	r4, r1
 800f212:	6831      	ldr	r1, [r6, #0]
 800f214:	4605      	mov	r5, r0
 800f216:	b911      	cbnz	r1, 800f21e <sbrk_aligned+0x12>
 800f218:	f001 f820 	bl	801025c <_sbrk_r>
 800f21c:	6030      	str	r0, [r6, #0]
 800f21e:	4621      	mov	r1, r4
 800f220:	4628      	mov	r0, r5
 800f222:	f001 f81b 	bl	801025c <_sbrk_r>
 800f226:	1c43      	adds	r3, r0, #1
 800f228:	d00a      	beq.n	800f240 <sbrk_aligned+0x34>
 800f22a:	1cc4      	adds	r4, r0, #3
 800f22c:	f024 0403 	bic.w	r4, r4, #3
 800f230:	42a0      	cmp	r0, r4
 800f232:	d007      	beq.n	800f244 <sbrk_aligned+0x38>
 800f234:	1a21      	subs	r1, r4, r0
 800f236:	4628      	mov	r0, r5
 800f238:	f001 f810 	bl	801025c <_sbrk_r>
 800f23c:	3001      	adds	r0, #1
 800f23e:	d101      	bne.n	800f244 <sbrk_aligned+0x38>
 800f240:	f04f 34ff 	mov.w	r4, #4294967295
 800f244:	4620      	mov	r0, r4
 800f246:	bd70      	pop	{r4, r5, r6, pc}
 800f248:	20004f44 	.word	0x20004f44

0800f24c <_malloc_r>:
 800f24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f250:	1ccd      	adds	r5, r1, #3
 800f252:	f025 0503 	bic.w	r5, r5, #3
 800f256:	3508      	adds	r5, #8
 800f258:	2d0c      	cmp	r5, #12
 800f25a:	bf38      	it	cc
 800f25c:	250c      	movcc	r5, #12
 800f25e:	2d00      	cmp	r5, #0
 800f260:	4607      	mov	r7, r0
 800f262:	db01      	blt.n	800f268 <_malloc_r+0x1c>
 800f264:	42a9      	cmp	r1, r5
 800f266:	d905      	bls.n	800f274 <_malloc_r+0x28>
 800f268:	230c      	movs	r3, #12
 800f26a:	603b      	str	r3, [r7, #0]
 800f26c:	2600      	movs	r6, #0
 800f26e:	4630      	mov	r0, r6
 800f270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f274:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f348 <_malloc_r+0xfc>
 800f278:	f000 f868 	bl	800f34c <__malloc_lock>
 800f27c:	f8d8 3000 	ldr.w	r3, [r8]
 800f280:	461c      	mov	r4, r3
 800f282:	bb5c      	cbnz	r4, 800f2dc <_malloc_r+0x90>
 800f284:	4629      	mov	r1, r5
 800f286:	4638      	mov	r0, r7
 800f288:	f7ff ffc0 	bl	800f20c <sbrk_aligned>
 800f28c:	1c43      	adds	r3, r0, #1
 800f28e:	4604      	mov	r4, r0
 800f290:	d155      	bne.n	800f33e <_malloc_r+0xf2>
 800f292:	f8d8 4000 	ldr.w	r4, [r8]
 800f296:	4626      	mov	r6, r4
 800f298:	2e00      	cmp	r6, #0
 800f29a:	d145      	bne.n	800f328 <_malloc_r+0xdc>
 800f29c:	2c00      	cmp	r4, #0
 800f29e:	d048      	beq.n	800f332 <_malloc_r+0xe6>
 800f2a0:	6823      	ldr	r3, [r4, #0]
 800f2a2:	4631      	mov	r1, r6
 800f2a4:	4638      	mov	r0, r7
 800f2a6:	eb04 0903 	add.w	r9, r4, r3
 800f2aa:	f000 ffd7 	bl	801025c <_sbrk_r>
 800f2ae:	4581      	cmp	r9, r0
 800f2b0:	d13f      	bne.n	800f332 <_malloc_r+0xe6>
 800f2b2:	6821      	ldr	r1, [r4, #0]
 800f2b4:	1a6d      	subs	r5, r5, r1
 800f2b6:	4629      	mov	r1, r5
 800f2b8:	4638      	mov	r0, r7
 800f2ba:	f7ff ffa7 	bl	800f20c <sbrk_aligned>
 800f2be:	3001      	adds	r0, #1
 800f2c0:	d037      	beq.n	800f332 <_malloc_r+0xe6>
 800f2c2:	6823      	ldr	r3, [r4, #0]
 800f2c4:	442b      	add	r3, r5
 800f2c6:	6023      	str	r3, [r4, #0]
 800f2c8:	f8d8 3000 	ldr.w	r3, [r8]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d038      	beq.n	800f342 <_malloc_r+0xf6>
 800f2d0:	685a      	ldr	r2, [r3, #4]
 800f2d2:	42a2      	cmp	r2, r4
 800f2d4:	d12b      	bne.n	800f32e <_malloc_r+0xe2>
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	605a      	str	r2, [r3, #4]
 800f2da:	e00f      	b.n	800f2fc <_malloc_r+0xb0>
 800f2dc:	6822      	ldr	r2, [r4, #0]
 800f2de:	1b52      	subs	r2, r2, r5
 800f2e0:	d41f      	bmi.n	800f322 <_malloc_r+0xd6>
 800f2e2:	2a0b      	cmp	r2, #11
 800f2e4:	d917      	bls.n	800f316 <_malloc_r+0xca>
 800f2e6:	1961      	adds	r1, r4, r5
 800f2e8:	42a3      	cmp	r3, r4
 800f2ea:	6025      	str	r5, [r4, #0]
 800f2ec:	bf18      	it	ne
 800f2ee:	6059      	strne	r1, [r3, #4]
 800f2f0:	6863      	ldr	r3, [r4, #4]
 800f2f2:	bf08      	it	eq
 800f2f4:	f8c8 1000 	streq.w	r1, [r8]
 800f2f8:	5162      	str	r2, [r4, r5]
 800f2fa:	604b      	str	r3, [r1, #4]
 800f2fc:	4638      	mov	r0, r7
 800f2fe:	f104 060b 	add.w	r6, r4, #11
 800f302:	f000 f829 	bl	800f358 <__malloc_unlock>
 800f306:	f026 0607 	bic.w	r6, r6, #7
 800f30a:	1d23      	adds	r3, r4, #4
 800f30c:	1af2      	subs	r2, r6, r3
 800f30e:	d0ae      	beq.n	800f26e <_malloc_r+0x22>
 800f310:	1b9b      	subs	r3, r3, r6
 800f312:	50a3      	str	r3, [r4, r2]
 800f314:	e7ab      	b.n	800f26e <_malloc_r+0x22>
 800f316:	42a3      	cmp	r3, r4
 800f318:	6862      	ldr	r2, [r4, #4]
 800f31a:	d1dd      	bne.n	800f2d8 <_malloc_r+0x8c>
 800f31c:	f8c8 2000 	str.w	r2, [r8]
 800f320:	e7ec      	b.n	800f2fc <_malloc_r+0xb0>
 800f322:	4623      	mov	r3, r4
 800f324:	6864      	ldr	r4, [r4, #4]
 800f326:	e7ac      	b.n	800f282 <_malloc_r+0x36>
 800f328:	4634      	mov	r4, r6
 800f32a:	6876      	ldr	r6, [r6, #4]
 800f32c:	e7b4      	b.n	800f298 <_malloc_r+0x4c>
 800f32e:	4613      	mov	r3, r2
 800f330:	e7cc      	b.n	800f2cc <_malloc_r+0x80>
 800f332:	230c      	movs	r3, #12
 800f334:	603b      	str	r3, [r7, #0]
 800f336:	4638      	mov	r0, r7
 800f338:	f000 f80e 	bl	800f358 <__malloc_unlock>
 800f33c:	e797      	b.n	800f26e <_malloc_r+0x22>
 800f33e:	6025      	str	r5, [r4, #0]
 800f340:	e7dc      	b.n	800f2fc <_malloc_r+0xb0>
 800f342:	605b      	str	r3, [r3, #4]
 800f344:	deff      	udf	#255	; 0xff
 800f346:	bf00      	nop
 800f348:	20004f40 	.word	0x20004f40

0800f34c <__malloc_lock>:
 800f34c:	4801      	ldr	r0, [pc, #4]	; (800f354 <__malloc_lock+0x8>)
 800f34e:	f7ff b87f 	b.w	800e450 <__retarget_lock_acquire_recursive>
 800f352:	bf00      	nop
 800f354:	20004f3c 	.word	0x20004f3c

0800f358 <__malloc_unlock>:
 800f358:	4801      	ldr	r0, [pc, #4]	; (800f360 <__malloc_unlock+0x8>)
 800f35a:	f7ff b87a 	b.w	800e452 <__retarget_lock_release_recursive>
 800f35e:	bf00      	nop
 800f360:	20004f3c 	.word	0x20004f3c

0800f364 <_Balloc>:
 800f364:	b570      	push	{r4, r5, r6, lr}
 800f366:	69c6      	ldr	r6, [r0, #28]
 800f368:	4604      	mov	r4, r0
 800f36a:	460d      	mov	r5, r1
 800f36c:	b976      	cbnz	r6, 800f38c <_Balloc+0x28>
 800f36e:	2010      	movs	r0, #16
 800f370:	f7ff ff44 	bl	800f1fc <malloc>
 800f374:	4602      	mov	r2, r0
 800f376:	61e0      	str	r0, [r4, #28]
 800f378:	b920      	cbnz	r0, 800f384 <_Balloc+0x20>
 800f37a:	4b18      	ldr	r3, [pc, #96]	; (800f3dc <_Balloc+0x78>)
 800f37c:	4818      	ldr	r0, [pc, #96]	; (800f3e0 <_Balloc+0x7c>)
 800f37e:	216b      	movs	r1, #107	; 0x6b
 800f380:	f000 ff84 	bl	801028c <__assert_func>
 800f384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f388:	6006      	str	r6, [r0, #0]
 800f38a:	60c6      	str	r6, [r0, #12]
 800f38c:	69e6      	ldr	r6, [r4, #28]
 800f38e:	68f3      	ldr	r3, [r6, #12]
 800f390:	b183      	cbz	r3, 800f3b4 <_Balloc+0x50>
 800f392:	69e3      	ldr	r3, [r4, #28]
 800f394:	68db      	ldr	r3, [r3, #12]
 800f396:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f39a:	b9b8      	cbnz	r0, 800f3cc <_Balloc+0x68>
 800f39c:	2101      	movs	r1, #1
 800f39e:	fa01 f605 	lsl.w	r6, r1, r5
 800f3a2:	1d72      	adds	r2, r6, #5
 800f3a4:	0092      	lsls	r2, r2, #2
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	f000 ff8e 	bl	80102c8 <_calloc_r>
 800f3ac:	b160      	cbz	r0, 800f3c8 <_Balloc+0x64>
 800f3ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f3b2:	e00e      	b.n	800f3d2 <_Balloc+0x6e>
 800f3b4:	2221      	movs	r2, #33	; 0x21
 800f3b6:	2104      	movs	r1, #4
 800f3b8:	4620      	mov	r0, r4
 800f3ba:	f000 ff85 	bl	80102c8 <_calloc_r>
 800f3be:	69e3      	ldr	r3, [r4, #28]
 800f3c0:	60f0      	str	r0, [r6, #12]
 800f3c2:	68db      	ldr	r3, [r3, #12]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d1e4      	bne.n	800f392 <_Balloc+0x2e>
 800f3c8:	2000      	movs	r0, #0
 800f3ca:	bd70      	pop	{r4, r5, r6, pc}
 800f3cc:	6802      	ldr	r2, [r0, #0]
 800f3ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f3d8:	e7f7      	b.n	800f3ca <_Balloc+0x66>
 800f3da:	bf00      	nop
 800f3dc:	080117ba 	.word	0x080117ba
 800f3e0:	0801183a 	.word	0x0801183a

0800f3e4 <_Bfree>:
 800f3e4:	b570      	push	{r4, r5, r6, lr}
 800f3e6:	69c6      	ldr	r6, [r0, #28]
 800f3e8:	4605      	mov	r5, r0
 800f3ea:	460c      	mov	r4, r1
 800f3ec:	b976      	cbnz	r6, 800f40c <_Bfree+0x28>
 800f3ee:	2010      	movs	r0, #16
 800f3f0:	f7ff ff04 	bl	800f1fc <malloc>
 800f3f4:	4602      	mov	r2, r0
 800f3f6:	61e8      	str	r0, [r5, #28]
 800f3f8:	b920      	cbnz	r0, 800f404 <_Bfree+0x20>
 800f3fa:	4b09      	ldr	r3, [pc, #36]	; (800f420 <_Bfree+0x3c>)
 800f3fc:	4809      	ldr	r0, [pc, #36]	; (800f424 <_Bfree+0x40>)
 800f3fe:	218f      	movs	r1, #143	; 0x8f
 800f400:	f000 ff44 	bl	801028c <__assert_func>
 800f404:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f408:	6006      	str	r6, [r0, #0]
 800f40a:	60c6      	str	r6, [r0, #12]
 800f40c:	b13c      	cbz	r4, 800f41e <_Bfree+0x3a>
 800f40e:	69eb      	ldr	r3, [r5, #28]
 800f410:	6862      	ldr	r2, [r4, #4]
 800f412:	68db      	ldr	r3, [r3, #12]
 800f414:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f418:	6021      	str	r1, [r4, #0]
 800f41a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f41e:	bd70      	pop	{r4, r5, r6, pc}
 800f420:	080117ba 	.word	0x080117ba
 800f424:	0801183a 	.word	0x0801183a

0800f428 <__multadd>:
 800f428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f42c:	690d      	ldr	r5, [r1, #16]
 800f42e:	4607      	mov	r7, r0
 800f430:	460c      	mov	r4, r1
 800f432:	461e      	mov	r6, r3
 800f434:	f101 0c14 	add.w	ip, r1, #20
 800f438:	2000      	movs	r0, #0
 800f43a:	f8dc 3000 	ldr.w	r3, [ip]
 800f43e:	b299      	uxth	r1, r3
 800f440:	fb02 6101 	mla	r1, r2, r1, r6
 800f444:	0c1e      	lsrs	r6, r3, #16
 800f446:	0c0b      	lsrs	r3, r1, #16
 800f448:	fb02 3306 	mla	r3, r2, r6, r3
 800f44c:	b289      	uxth	r1, r1
 800f44e:	3001      	adds	r0, #1
 800f450:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f454:	4285      	cmp	r5, r0
 800f456:	f84c 1b04 	str.w	r1, [ip], #4
 800f45a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f45e:	dcec      	bgt.n	800f43a <__multadd+0x12>
 800f460:	b30e      	cbz	r6, 800f4a6 <__multadd+0x7e>
 800f462:	68a3      	ldr	r3, [r4, #8]
 800f464:	42ab      	cmp	r3, r5
 800f466:	dc19      	bgt.n	800f49c <__multadd+0x74>
 800f468:	6861      	ldr	r1, [r4, #4]
 800f46a:	4638      	mov	r0, r7
 800f46c:	3101      	adds	r1, #1
 800f46e:	f7ff ff79 	bl	800f364 <_Balloc>
 800f472:	4680      	mov	r8, r0
 800f474:	b928      	cbnz	r0, 800f482 <__multadd+0x5a>
 800f476:	4602      	mov	r2, r0
 800f478:	4b0c      	ldr	r3, [pc, #48]	; (800f4ac <__multadd+0x84>)
 800f47a:	480d      	ldr	r0, [pc, #52]	; (800f4b0 <__multadd+0x88>)
 800f47c:	21ba      	movs	r1, #186	; 0xba
 800f47e:	f000 ff05 	bl	801028c <__assert_func>
 800f482:	6922      	ldr	r2, [r4, #16]
 800f484:	3202      	adds	r2, #2
 800f486:	f104 010c 	add.w	r1, r4, #12
 800f48a:	0092      	lsls	r2, r2, #2
 800f48c:	300c      	adds	r0, #12
 800f48e:	f7fe ffe1 	bl	800e454 <memcpy>
 800f492:	4621      	mov	r1, r4
 800f494:	4638      	mov	r0, r7
 800f496:	f7ff ffa5 	bl	800f3e4 <_Bfree>
 800f49a:	4644      	mov	r4, r8
 800f49c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f4a0:	3501      	adds	r5, #1
 800f4a2:	615e      	str	r6, [r3, #20]
 800f4a4:	6125      	str	r5, [r4, #16]
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4ac:	08011829 	.word	0x08011829
 800f4b0:	0801183a 	.word	0x0801183a

0800f4b4 <__hi0bits>:
 800f4b4:	0c03      	lsrs	r3, r0, #16
 800f4b6:	041b      	lsls	r3, r3, #16
 800f4b8:	b9d3      	cbnz	r3, 800f4f0 <__hi0bits+0x3c>
 800f4ba:	0400      	lsls	r0, r0, #16
 800f4bc:	2310      	movs	r3, #16
 800f4be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f4c2:	bf04      	itt	eq
 800f4c4:	0200      	lsleq	r0, r0, #8
 800f4c6:	3308      	addeq	r3, #8
 800f4c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f4cc:	bf04      	itt	eq
 800f4ce:	0100      	lsleq	r0, r0, #4
 800f4d0:	3304      	addeq	r3, #4
 800f4d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f4d6:	bf04      	itt	eq
 800f4d8:	0080      	lsleq	r0, r0, #2
 800f4da:	3302      	addeq	r3, #2
 800f4dc:	2800      	cmp	r0, #0
 800f4de:	db05      	blt.n	800f4ec <__hi0bits+0x38>
 800f4e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f4e4:	f103 0301 	add.w	r3, r3, #1
 800f4e8:	bf08      	it	eq
 800f4ea:	2320      	moveq	r3, #32
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	4770      	bx	lr
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	e7e4      	b.n	800f4be <__hi0bits+0xa>

0800f4f4 <__lo0bits>:
 800f4f4:	6803      	ldr	r3, [r0, #0]
 800f4f6:	f013 0207 	ands.w	r2, r3, #7
 800f4fa:	d00c      	beq.n	800f516 <__lo0bits+0x22>
 800f4fc:	07d9      	lsls	r1, r3, #31
 800f4fe:	d422      	bmi.n	800f546 <__lo0bits+0x52>
 800f500:	079a      	lsls	r2, r3, #30
 800f502:	bf49      	itett	mi
 800f504:	085b      	lsrmi	r3, r3, #1
 800f506:	089b      	lsrpl	r3, r3, #2
 800f508:	6003      	strmi	r3, [r0, #0]
 800f50a:	2201      	movmi	r2, #1
 800f50c:	bf5c      	itt	pl
 800f50e:	6003      	strpl	r3, [r0, #0]
 800f510:	2202      	movpl	r2, #2
 800f512:	4610      	mov	r0, r2
 800f514:	4770      	bx	lr
 800f516:	b299      	uxth	r1, r3
 800f518:	b909      	cbnz	r1, 800f51e <__lo0bits+0x2a>
 800f51a:	0c1b      	lsrs	r3, r3, #16
 800f51c:	2210      	movs	r2, #16
 800f51e:	b2d9      	uxtb	r1, r3
 800f520:	b909      	cbnz	r1, 800f526 <__lo0bits+0x32>
 800f522:	3208      	adds	r2, #8
 800f524:	0a1b      	lsrs	r3, r3, #8
 800f526:	0719      	lsls	r1, r3, #28
 800f528:	bf04      	itt	eq
 800f52a:	091b      	lsreq	r3, r3, #4
 800f52c:	3204      	addeq	r2, #4
 800f52e:	0799      	lsls	r1, r3, #30
 800f530:	bf04      	itt	eq
 800f532:	089b      	lsreq	r3, r3, #2
 800f534:	3202      	addeq	r2, #2
 800f536:	07d9      	lsls	r1, r3, #31
 800f538:	d403      	bmi.n	800f542 <__lo0bits+0x4e>
 800f53a:	085b      	lsrs	r3, r3, #1
 800f53c:	f102 0201 	add.w	r2, r2, #1
 800f540:	d003      	beq.n	800f54a <__lo0bits+0x56>
 800f542:	6003      	str	r3, [r0, #0]
 800f544:	e7e5      	b.n	800f512 <__lo0bits+0x1e>
 800f546:	2200      	movs	r2, #0
 800f548:	e7e3      	b.n	800f512 <__lo0bits+0x1e>
 800f54a:	2220      	movs	r2, #32
 800f54c:	e7e1      	b.n	800f512 <__lo0bits+0x1e>
	...

0800f550 <__i2b>:
 800f550:	b510      	push	{r4, lr}
 800f552:	460c      	mov	r4, r1
 800f554:	2101      	movs	r1, #1
 800f556:	f7ff ff05 	bl	800f364 <_Balloc>
 800f55a:	4602      	mov	r2, r0
 800f55c:	b928      	cbnz	r0, 800f56a <__i2b+0x1a>
 800f55e:	4b05      	ldr	r3, [pc, #20]	; (800f574 <__i2b+0x24>)
 800f560:	4805      	ldr	r0, [pc, #20]	; (800f578 <__i2b+0x28>)
 800f562:	f240 1145 	movw	r1, #325	; 0x145
 800f566:	f000 fe91 	bl	801028c <__assert_func>
 800f56a:	2301      	movs	r3, #1
 800f56c:	6144      	str	r4, [r0, #20]
 800f56e:	6103      	str	r3, [r0, #16]
 800f570:	bd10      	pop	{r4, pc}
 800f572:	bf00      	nop
 800f574:	08011829 	.word	0x08011829
 800f578:	0801183a 	.word	0x0801183a

0800f57c <__multiply>:
 800f57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f580:	4691      	mov	r9, r2
 800f582:	690a      	ldr	r2, [r1, #16]
 800f584:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f588:	429a      	cmp	r2, r3
 800f58a:	bfb8      	it	lt
 800f58c:	460b      	movlt	r3, r1
 800f58e:	460c      	mov	r4, r1
 800f590:	bfbc      	itt	lt
 800f592:	464c      	movlt	r4, r9
 800f594:	4699      	movlt	r9, r3
 800f596:	6927      	ldr	r7, [r4, #16]
 800f598:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f59c:	68a3      	ldr	r3, [r4, #8]
 800f59e:	6861      	ldr	r1, [r4, #4]
 800f5a0:	eb07 060a 	add.w	r6, r7, sl
 800f5a4:	42b3      	cmp	r3, r6
 800f5a6:	b085      	sub	sp, #20
 800f5a8:	bfb8      	it	lt
 800f5aa:	3101      	addlt	r1, #1
 800f5ac:	f7ff feda 	bl	800f364 <_Balloc>
 800f5b0:	b930      	cbnz	r0, 800f5c0 <__multiply+0x44>
 800f5b2:	4602      	mov	r2, r0
 800f5b4:	4b44      	ldr	r3, [pc, #272]	; (800f6c8 <__multiply+0x14c>)
 800f5b6:	4845      	ldr	r0, [pc, #276]	; (800f6cc <__multiply+0x150>)
 800f5b8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f5bc:	f000 fe66 	bl	801028c <__assert_func>
 800f5c0:	f100 0514 	add.w	r5, r0, #20
 800f5c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f5c8:	462b      	mov	r3, r5
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	4543      	cmp	r3, r8
 800f5ce:	d321      	bcc.n	800f614 <__multiply+0x98>
 800f5d0:	f104 0314 	add.w	r3, r4, #20
 800f5d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f5d8:	f109 0314 	add.w	r3, r9, #20
 800f5dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f5e0:	9202      	str	r2, [sp, #8]
 800f5e2:	1b3a      	subs	r2, r7, r4
 800f5e4:	3a15      	subs	r2, #21
 800f5e6:	f022 0203 	bic.w	r2, r2, #3
 800f5ea:	3204      	adds	r2, #4
 800f5ec:	f104 0115 	add.w	r1, r4, #21
 800f5f0:	428f      	cmp	r7, r1
 800f5f2:	bf38      	it	cc
 800f5f4:	2204      	movcc	r2, #4
 800f5f6:	9201      	str	r2, [sp, #4]
 800f5f8:	9a02      	ldr	r2, [sp, #8]
 800f5fa:	9303      	str	r3, [sp, #12]
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d80c      	bhi.n	800f61a <__multiply+0x9e>
 800f600:	2e00      	cmp	r6, #0
 800f602:	dd03      	ble.n	800f60c <__multiply+0x90>
 800f604:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d05b      	beq.n	800f6c4 <__multiply+0x148>
 800f60c:	6106      	str	r6, [r0, #16]
 800f60e:	b005      	add	sp, #20
 800f610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f614:	f843 2b04 	str.w	r2, [r3], #4
 800f618:	e7d8      	b.n	800f5cc <__multiply+0x50>
 800f61a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f61e:	f1ba 0f00 	cmp.w	sl, #0
 800f622:	d024      	beq.n	800f66e <__multiply+0xf2>
 800f624:	f104 0e14 	add.w	lr, r4, #20
 800f628:	46a9      	mov	r9, r5
 800f62a:	f04f 0c00 	mov.w	ip, #0
 800f62e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f632:	f8d9 1000 	ldr.w	r1, [r9]
 800f636:	fa1f fb82 	uxth.w	fp, r2
 800f63a:	b289      	uxth	r1, r1
 800f63c:	fb0a 110b 	mla	r1, sl, fp, r1
 800f640:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f644:	f8d9 2000 	ldr.w	r2, [r9]
 800f648:	4461      	add	r1, ip
 800f64a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f64e:	fb0a c20b 	mla	r2, sl, fp, ip
 800f652:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f656:	b289      	uxth	r1, r1
 800f658:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f65c:	4577      	cmp	r7, lr
 800f65e:	f849 1b04 	str.w	r1, [r9], #4
 800f662:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f666:	d8e2      	bhi.n	800f62e <__multiply+0xb2>
 800f668:	9a01      	ldr	r2, [sp, #4]
 800f66a:	f845 c002 	str.w	ip, [r5, r2]
 800f66e:	9a03      	ldr	r2, [sp, #12]
 800f670:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f674:	3304      	adds	r3, #4
 800f676:	f1b9 0f00 	cmp.w	r9, #0
 800f67a:	d021      	beq.n	800f6c0 <__multiply+0x144>
 800f67c:	6829      	ldr	r1, [r5, #0]
 800f67e:	f104 0c14 	add.w	ip, r4, #20
 800f682:	46ae      	mov	lr, r5
 800f684:	f04f 0a00 	mov.w	sl, #0
 800f688:	f8bc b000 	ldrh.w	fp, [ip]
 800f68c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f690:	fb09 220b 	mla	r2, r9, fp, r2
 800f694:	4452      	add	r2, sl
 800f696:	b289      	uxth	r1, r1
 800f698:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f69c:	f84e 1b04 	str.w	r1, [lr], #4
 800f6a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f6a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f6a8:	f8be 1000 	ldrh.w	r1, [lr]
 800f6ac:	fb09 110a 	mla	r1, r9, sl, r1
 800f6b0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f6b4:	4567      	cmp	r7, ip
 800f6b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f6ba:	d8e5      	bhi.n	800f688 <__multiply+0x10c>
 800f6bc:	9a01      	ldr	r2, [sp, #4]
 800f6be:	50a9      	str	r1, [r5, r2]
 800f6c0:	3504      	adds	r5, #4
 800f6c2:	e799      	b.n	800f5f8 <__multiply+0x7c>
 800f6c4:	3e01      	subs	r6, #1
 800f6c6:	e79b      	b.n	800f600 <__multiply+0x84>
 800f6c8:	08011829 	.word	0x08011829
 800f6cc:	0801183a 	.word	0x0801183a

0800f6d0 <__pow5mult>:
 800f6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6d4:	4615      	mov	r5, r2
 800f6d6:	f012 0203 	ands.w	r2, r2, #3
 800f6da:	4606      	mov	r6, r0
 800f6dc:	460f      	mov	r7, r1
 800f6de:	d007      	beq.n	800f6f0 <__pow5mult+0x20>
 800f6e0:	4c25      	ldr	r4, [pc, #148]	; (800f778 <__pow5mult+0xa8>)
 800f6e2:	3a01      	subs	r2, #1
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f6ea:	f7ff fe9d 	bl	800f428 <__multadd>
 800f6ee:	4607      	mov	r7, r0
 800f6f0:	10ad      	asrs	r5, r5, #2
 800f6f2:	d03d      	beq.n	800f770 <__pow5mult+0xa0>
 800f6f4:	69f4      	ldr	r4, [r6, #28]
 800f6f6:	b97c      	cbnz	r4, 800f718 <__pow5mult+0x48>
 800f6f8:	2010      	movs	r0, #16
 800f6fa:	f7ff fd7f 	bl	800f1fc <malloc>
 800f6fe:	4602      	mov	r2, r0
 800f700:	61f0      	str	r0, [r6, #28]
 800f702:	b928      	cbnz	r0, 800f710 <__pow5mult+0x40>
 800f704:	4b1d      	ldr	r3, [pc, #116]	; (800f77c <__pow5mult+0xac>)
 800f706:	481e      	ldr	r0, [pc, #120]	; (800f780 <__pow5mult+0xb0>)
 800f708:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f70c:	f000 fdbe 	bl	801028c <__assert_func>
 800f710:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f714:	6004      	str	r4, [r0, #0]
 800f716:	60c4      	str	r4, [r0, #12]
 800f718:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f71c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f720:	b94c      	cbnz	r4, 800f736 <__pow5mult+0x66>
 800f722:	f240 2171 	movw	r1, #625	; 0x271
 800f726:	4630      	mov	r0, r6
 800f728:	f7ff ff12 	bl	800f550 <__i2b>
 800f72c:	2300      	movs	r3, #0
 800f72e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f732:	4604      	mov	r4, r0
 800f734:	6003      	str	r3, [r0, #0]
 800f736:	f04f 0900 	mov.w	r9, #0
 800f73a:	07eb      	lsls	r3, r5, #31
 800f73c:	d50a      	bpl.n	800f754 <__pow5mult+0x84>
 800f73e:	4639      	mov	r1, r7
 800f740:	4622      	mov	r2, r4
 800f742:	4630      	mov	r0, r6
 800f744:	f7ff ff1a 	bl	800f57c <__multiply>
 800f748:	4639      	mov	r1, r7
 800f74a:	4680      	mov	r8, r0
 800f74c:	4630      	mov	r0, r6
 800f74e:	f7ff fe49 	bl	800f3e4 <_Bfree>
 800f752:	4647      	mov	r7, r8
 800f754:	106d      	asrs	r5, r5, #1
 800f756:	d00b      	beq.n	800f770 <__pow5mult+0xa0>
 800f758:	6820      	ldr	r0, [r4, #0]
 800f75a:	b938      	cbnz	r0, 800f76c <__pow5mult+0x9c>
 800f75c:	4622      	mov	r2, r4
 800f75e:	4621      	mov	r1, r4
 800f760:	4630      	mov	r0, r6
 800f762:	f7ff ff0b 	bl	800f57c <__multiply>
 800f766:	6020      	str	r0, [r4, #0]
 800f768:	f8c0 9000 	str.w	r9, [r0]
 800f76c:	4604      	mov	r4, r0
 800f76e:	e7e4      	b.n	800f73a <__pow5mult+0x6a>
 800f770:	4638      	mov	r0, r7
 800f772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f776:	bf00      	nop
 800f778:	08011988 	.word	0x08011988
 800f77c:	080117ba 	.word	0x080117ba
 800f780:	0801183a 	.word	0x0801183a

0800f784 <__lshift>:
 800f784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f788:	460c      	mov	r4, r1
 800f78a:	6849      	ldr	r1, [r1, #4]
 800f78c:	6923      	ldr	r3, [r4, #16]
 800f78e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f792:	68a3      	ldr	r3, [r4, #8]
 800f794:	4607      	mov	r7, r0
 800f796:	4691      	mov	r9, r2
 800f798:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f79c:	f108 0601 	add.w	r6, r8, #1
 800f7a0:	42b3      	cmp	r3, r6
 800f7a2:	db0b      	blt.n	800f7bc <__lshift+0x38>
 800f7a4:	4638      	mov	r0, r7
 800f7a6:	f7ff fddd 	bl	800f364 <_Balloc>
 800f7aa:	4605      	mov	r5, r0
 800f7ac:	b948      	cbnz	r0, 800f7c2 <__lshift+0x3e>
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	4b28      	ldr	r3, [pc, #160]	; (800f854 <__lshift+0xd0>)
 800f7b2:	4829      	ldr	r0, [pc, #164]	; (800f858 <__lshift+0xd4>)
 800f7b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f7b8:	f000 fd68 	bl	801028c <__assert_func>
 800f7bc:	3101      	adds	r1, #1
 800f7be:	005b      	lsls	r3, r3, #1
 800f7c0:	e7ee      	b.n	800f7a0 <__lshift+0x1c>
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	f100 0114 	add.w	r1, r0, #20
 800f7c8:	f100 0210 	add.w	r2, r0, #16
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	4553      	cmp	r3, sl
 800f7d0:	db33      	blt.n	800f83a <__lshift+0xb6>
 800f7d2:	6920      	ldr	r0, [r4, #16]
 800f7d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f7d8:	f104 0314 	add.w	r3, r4, #20
 800f7dc:	f019 091f 	ands.w	r9, r9, #31
 800f7e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f7e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f7e8:	d02b      	beq.n	800f842 <__lshift+0xbe>
 800f7ea:	f1c9 0e20 	rsb	lr, r9, #32
 800f7ee:	468a      	mov	sl, r1
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	6818      	ldr	r0, [r3, #0]
 800f7f4:	fa00 f009 	lsl.w	r0, r0, r9
 800f7f8:	4310      	orrs	r0, r2
 800f7fa:	f84a 0b04 	str.w	r0, [sl], #4
 800f7fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800f802:	459c      	cmp	ip, r3
 800f804:	fa22 f20e 	lsr.w	r2, r2, lr
 800f808:	d8f3      	bhi.n	800f7f2 <__lshift+0x6e>
 800f80a:	ebac 0304 	sub.w	r3, ip, r4
 800f80e:	3b15      	subs	r3, #21
 800f810:	f023 0303 	bic.w	r3, r3, #3
 800f814:	3304      	adds	r3, #4
 800f816:	f104 0015 	add.w	r0, r4, #21
 800f81a:	4584      	cmp	ip, r0
 800f81c:	bf38      	it	cc
 800f81e:	2304      	movcc	r3, #4
 800f820:	50ca      	str	r2, [r1, r3]
 800f822:	b10a      	cbz	r2, 800f828 <__lshift+0xa4>
 800f824:	f108 0602 	add.w	r6, r8, #2
 800f828:	3e01      	subs	r6, #1
 800f82a:	4638      	mov	r0, r7
 800f82c:	612e      	str	r6, [r5, #16]
 800f82e:	4621      	mov	r1, r4
 800f830:	f7ff fdd8 	bl	800f3e4 <_Bfree>
 800f834:	4628      	mov	r0, r5
 800f836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f83a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f83e:	3301      	adds	r3, #1
 800f840:	e7c5      	b.n	800f7ce <__lshift+0x4a>
 800f842:	3904      	subs	r1, #4
 800f844:	f853 2b04 	ldr.w	r2, [r3], #4
 800f848:	f841 2f04 	str.w	r2, [r1, #4]!
 800f84c:	459c      	cmp	ip, r3
 800f84e:	d8f9      	bhi.n	800f844 <__lshift+0xc0>
 800f850:	e7ea      	b.n	800f828 <__lshift+0xa4>
 800f852:	bf00      	nop
 800f854:	08011829 	.word	0x08011829
 800f858:	0801183a 	.word	0x0801183a

0800f85c <__mcmp>:
 800f85c:	b530      	push	{r4, r5, lr}
 800f85e:	6902      	ldr	r2, [r0, #16]
 800f860:	690c      	ldr	r4, [r1, #16]
 800f862:	1b12      	subs	r2, r2, r4
 800f864:	d10e      	bne.n	800f884 <__mcmp+0x28>
 800f866:	f100 0314 	add.w	r3, r0, #20
 800f86a:	3114      	adds	r1, #20
 800f86c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f870:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f874:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f878:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f87c:	42a5      	cmp	r5, r4
 800f87e:	d003      	beq.n	800f888 <__mcmp+0x2c>
 800f880:	d305      	bcc.n	800f88e <__mcmp+0x32>
 800f882:	2201      	movs	r2, #1
 800f884:	4610      	mov	r0, r2
 800f886:	bd30      	pop	{r4, r5, pc}
 800f888:	4283      	cmp	r3, r0
 800f88a:	d3f3      	bcc.n	800f874 <__mcmp+0x18>
 800f88c:	e7fa      	b.n	800f884 <__mcmp+0x28>
 800f88e:	f04f 32ff 	mov.w	r2, #4294967295
 800f892:	e7f7      	b.n	800f884 <__mcmp+0x28>

0800f894 <__mdiff>:
 800f894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f898:	460c      	mov	r4, r1
 800f89a:	4606      	mov	r6, r0
 800f89c:	4611      	mov	r1, r2
 800f89e:	4620      	mov	r0, r4
 800f8a0:	4690      	mov	r8, r2
 800f8a2:	f7ff ffdb 	bl	800f85c <__mcmp>
 800f8a6:	1e05      	subs	r5, r0, #0
 800f8a8:	d110      	bne.n	800f8cc <__mdiff+0x38>
 800f8aa:	4629      	mov	r1, r5
 800f8ac:	4630      	mov	r0, r6
 800f8ae:	f7ff fd59 	bl	800f364 <_Balloc>
 800f8b2:	b930      	cbnz	r0, 800f8c2 <__mdiff+0x2e>
 800f8b4:	4b3a      	ldr	r3, [pc, #232]	; (800f9a0 <__mdiff+0x10c>)
 800f8b6:	4602      	mov	r2, r0
 800f8b8:	f240 2137 	movw	r1, #567	; 0x237
 800f8bc:	4839      	ldr	r0, [pc, #228]	; (800f9a4 <__mdiff+0x110>)
 800f8be:	f000 fce5 	bl	801028c <__assert_func>
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f8c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8cc:	bfa4      	itt	ge
 800f8ce:	4643      	movge	r3, r8
 800f8d0:	46a0      	movge	r8, r4
 800f8d2:	4630      	mov	r0, r6
 800f8d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f8d8:	bfa6      	itte	ge
 800f8da:	461c      	movge	r4, r3
 800f8dc:	2500      	movge	r5, #0
 800f8de:	2501      	movlt	r5, #1
 800f8e0:	f7ff fd40 	bl	800f364 <_Balloc>
 800f8e4:	b920      	cbnz	r0, 800f8f0 <__mdiff+0x5c>
 800f8e6:	4b2e      	ldr	r3, [pc, #184]	; (800f9a0 <__mdiff+0x10c>)
 800f8e8:	4602      	mov	r2, r0
 800f8ea:	f240 2145 	movw	r1, #581	; 0x245
 800f8ee:	e7e5      	b.n	800f8bc <__mdiff+0x28>
 800f8f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f8f4:	6926      	ldr	r6, [r4, #16]
 800f8f6:	60c5      	str	r5, [r0, #12]
 800f8f8:	f104 0914 	add.w	r9, r4, #20
 800f8fc:	f108 0514 	add.w	r5, r8, #20
 800f900:	f100 0e14 	add.w	lr, r0, #20
 800f904:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f908:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f90c:	f108 0210 	add.w	r2, r8, #16
 800f910:	46f2      	mov	sl, lr
 800f912:	2100      	movs	r1, #0
 800f914:	f859 3b04 	ldr.w	r3, [r9], #4
 800f918:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f91c:	fa11 f88b 	uxtah	r8, r1, fp
 800f920:	b299      	uxth	r1, r3
 800f922:	0c1b      	lsrs	r3, r3, #16
 800f924:	eba8 0801 	sub.w	r8, r8, r1
 800f928:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f92c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f930:	fa1f f888 	uxth.w	r8, r8
 800f934:	1419      	asrs	r1, r3, #16
 800f936:	454e      	cmp	r6, r9
 800f938:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f93c:	f84a 3b04 	str.w	r3, [sl], #4
 800f940:	d8e8      	bhi.n	800f914 <__mdiff+0x80>
 800f942:	1b33      	subs	r3, r6, r4
 800f944:	3b15      	subs	r3, #21
 800f946:	f023 0303 	bic.w	r3, r3, #3
 800f94a:	3304      	adds	r3, #4
 800f94c:	3415      	adds	r4, #21
 800f94e:	42a6      	cmp	r6, r4
 800f950:	bf38      	it	cc
 800f952:	2304      	movcc	r3, #4
 800f954:	441d      	add	r5, r3
 800f956:	4473      	add	r3, lr
 800f958:	469e      	mov	lr, r3
 800f95a:	462e      	mov	r6, r5
 800f95c:	4566      	cmp	r6, ip
 800f95e:	d30e      	bcc.n	800f97e <__mdiff+0xea>
 800f960:	f10c 0203 	add.w	r2, ip, #3
 800f964:	1b52      	subs	r2, r2, r5
 800f966:	f022 0203 	bic.w	r2, r2, #3
 800f96a:	3d03      	subs	r5, #3
 800f96c:	45ac      	cmp	ip, r5
 800f96e:	bf38      	it	cc
 800f970:	2200      	movcc	r2, #0
 800f972:	4413      	add	r3, r2
 800f974:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f978:	b17a      	cbz	r2, 800f99a <__mdiff+0x106>
 800f97a:	6107      	str	r7, [r0, #16]
 800f97c:	e7a4      	b.n	800f8c8 <__mdiff+0x34>
 800f97e:	f856 8b04 	ldr.w	r8, [r6], #4
 800f982:	fa11 f288 	uxtah	r2, r1, r8
 800f986:	1414      	asrs	r4, r2, #16
 800f988:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f98c:	b292      	uxth	r2, r2
 800f98e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f992:	f84e 2b04 	str.w	r2, [lr], #4
 800f996:	1421      	asrs	r1, r4, #16
 800f998:	e7e0      	b.n	800f95c <__mdiff+0xc8>
 800f99a:	3f01      	subs	r7, #1
 800f99c:	e7ea      	b.n	800f974 <__mdiff+0xe0>
 800f99e:	bf00      	nop
 800f9a0:	08011829 	.word	0x08011829
 800f9a4:	0801183a 	.word	0x0801183a

0800f9a8 <__d2b>:
 800f9a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f9ac:	460f      	mov	r7, r1
 800f9ae:	2101      	movs	r1, #1
 800f9b0:	ec59 8b10 	vmov	r8, r9, d0
 800f9b4:	4616      	mov	r6, r2
 800f9b6:	f7ff fcd5 	bl	800f364 <_Balloc>
 800f9ba:	4604      	mov	r4, r0
 800f9bc:	b930      	cbnz	r0, 800f9cc <__d2b+0x24>
 800f9be:	4602      	mov	r2, r0
 800f9c0:	4b24      	ldr	r3, [pc, #144]	; (800fa54 <__d2b+0xac>)
 800f9c2:	4825      	ldr	r0, [pc, #148]	; (800fa58 <__d2b+0xb0>)
 800f9c4:	f240 310f 	movw	r1, #783	; 0x30f
 800f9c8:	f000 fc60 	bl	801028c <__assert_func>
 800f9cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f9d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f9d4:	bb2d      	cbnz	r5, 800fa22 <__d2b+0x7a>
 800f9d6:	9301      	str	r3, [sp, #4]
 800f9d8:	f1b8 0300 	subs.w	r3, r8, #0
 800f9dc:	d026      	beq.n	800fa2c <__d2b+0x84>
 800f9de:	4668      	mov	r0, sp
 800f9e0:	9300      	str	r3, [sp, #0]
 800f9e2:	f7ff fd87 	bl	800f4f4 <__lo0bits>
 800f9e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f9ea:	b1e8      	cbz	r0, 800fa28 <__d2b+0x80>
 800f9ec:	f1c0 0320 	rsb	r3, r0, #32
 800f9f0:	fa02 f303 	lsl.w	r3, r2, r3
 800f9f4:	430b      	orrs	r3, r1
 800f9f6:	40c2      	lsrs	r2, r0
 800f9f8:	6163      	str	r3, [r4, #20]
 800f9fa:	9201      	str	r2, [sp, #4]
 800f9fc:	9b01      	ldr	r3, [sp, #4]
 800f9fe:	61a3      	str	r3, [r4, #24]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	bf14      	ite	ne
 800fa04:	2202      	movne	r2, #2
 800fa06:	2201      	moveq	r2, #1
 800fa08:	6122      	str	r2, [r4, #16]
 800fa0a:	b1bd      	cbz	r5, 800fa3c <__d2b+0x94>
 800fa0c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fa10:	4405      	add	r5, r0
 800fa12:	603d      	str	r5, [r7, #0]
 800fa14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fa18:	6030      	str	r0, [r6, #0]
 800fa1a:	4620      	mov	r0, r4
 800fa1c:	b003      	add	sp, #12
 800fa1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fa26:	e7d6      	b.n	800f9d6 <__d2b+0x2e>
 800fa28:	6161      	str	r1, [r4, #20]
 800fa2a:	e7e7      	b.n	800f9fc <__d2b+0x54>
 800fa2c:	a801      	add	r0, sp, #4
 800fa2e:	f7ff fd61 	bl	800f4f4 <__lo0bits>
 800fa32:	9b01      	ldr	r3, [sp, #4]
 800fa34:	6163      	str	r3, [r4, #20]
 800fa36:	3020      	adds	r0, #32
 800fa38:	2201      	movs	r2, #1
 800fa3a:	e7e5      	b.n	800fa08 <__d2b+0x60>
 800fa3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fa40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fa44:	6038      	str	r0, [r7, #0]
 800fa46:	6918      	ldr	r0, [r3, #16]
 800fa48:	f7ff fd34 	bl	800f4b4 <__hi0bits>
 800fa4c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fa50:	e7e2      	b.n	800fa18 <__d2b+0x70>
 800fa52:	bf00      	nop
 800fa54:	08011829 	.word	0x08011829
 800fa58:	0801183a 	.word	0x0801183a

0800fa5c <_mprec_log10>:
 800fa5c:	2817      	cmp	r0, #23
 800fa5e:	b5d0      	push	{r4, r6, r7, lr}
 800fa60:	4604      	mov	r4, r0
 800fa62:	dc07      	bgt.n	800fa74 <_mprec_log10+0x18>
 800fa64:	4b09      	ldr	r3, [pc, #36]	; (800fa8c <_mprec_log10+0x30>)
 800fa66:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800fa6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fa6e:	ec41 0b10 	vmov	d0, r0, r1
 800fa72:	bdd0      	pop	{r4, r6, r7, pc}
 800fa74:	4906      	ldr	r1, [pc, #24]	; (800fa90 <_mprec_log10+0x34>)
 800fa76:	4f07      	ldr	r7, [pc, #28]	; (800fa94 <_mprec_log10+0x38>)
 800fa78:	2000      	movs	r0, #0
 800fa7a:	2600      	movs	r6, #0
 800fa7c:	4632      	mov	r2, r6
 800fa7e:	463b      	mov	r3, r7
 800fa80:	f7f0 fdba 	bl	80005f8 <__aeabi_dmul>
 800fa84:	3c01      	subs	r4, #1
 800fa86:	d1f9      	bne.n	800fa7c <_mprec_log10+0x20>
 800fa88:	e7f1      	b.n	800fa6e <_mprec_log10+0x12>
 800fa8a:	bf00      	nop
 800fa8c:	080118c0 	.word	0x080118c0
 800fa90:	3ff00000 	.word	0x3ff00000
 800fa94:	40240000 	.word	0x40240000

0800fa98 <print_e>:
 800fa98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa9a:	b087      	sub	sp, #28
 800fa9c:	ec43 2b10 	vmov	d0, r2, r3
 800faa0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800faa2:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800faa6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800faa8:	ab04      	add	r3, sp, #16
 800faaa:	9301      	str	r3, [sp, #4]
 800faac:	ab03      	add	r3, sp, #12
 800faae:	9300      	str	r3, [sp, #0]
 800fab0:	1c62      	adds	r2, r4, #1
 800fab2:	ab05      	add	r3, sp, #20
 800fab4:	460f      	mov	r7, r1
 800fab6:	2102      	movs	r1, #2
 800fab8:	f7fe fd62 	bl	800e580 <_dtoa_r>
 800fabc:	9a05      	ldr	r2, [sp, #20]
 800fabe:	f242 730f 	movw	r3, #9999	; 0x270f
 800fac2:	429a      	cmp	r2, r3
 800fac4:	d105      	bne.n	800fad2 <print_e+0x3a>
 800fac6:	4601      	mov	r1, r0
 800fac8:	4638      	mov	r0, r7
 800faca:	f000 fbd7 	bl	801027c <strcpy>
 800face:	b007      	add	sp, #28
 800fad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fad2:	463b      	mov	r3, r7
 800fad4:	7801      	ldrb	r1, [r0, #0]
 800fad6:	f803 1b01 	strb.w	r1, [r3], #1
 800fada:	2c00      	cmp	r4, #0
 800fadc:	bfc8      	it	gt
 800fade:	2501      	movgt	r5, #1
 800fae0:	212e      	movs	r1, #46	; 0x2e
 800fae2:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800fae6:	b10f      	cbz	r7, 800faec <print_e+0x54>
 800fae8:	2c00      	cmp	r4, #0
 800faea:	dc37      	bgt.n	800fb5c <print_e+0xc4>
 800faec:	2e67      	cmp	r6, #103	; 0x67
 800faee:	d046      	beq.n	800fb7e <print_e+0xe6>
 800faf0:	2e47      	cmp	r6, #71	; 0x47
 800faf2:	d046      	beq.n	800fb82 <print_e+0xea>
 800faf4:	212e      	movs	r1, #46	; 0x2e
 800faf6:	2030      	movs	r0, #48	; 0x30
 800faf8:	2c00      	cmp	r4, #0
 800fafa:	dc38      	bgt.n	800fb6e <print_e+0xd6>
 800fafc:	1e51      	subs	r1, r2, #1
 800fafe:	2900      	cmp	r1, #0
 800fb00:	bfb8      	it	lt
 800fb02:	f1c2 0201 	rsblt	r2, r2, #1
 800fb06:	4618      	mov	r0, r3
 800fb08:	9105      	str	r1, [sp, #20]
 800fb0a:	bfac      	ite	ge
 800fb0c:	222b      	movge	r2, #43	; 0x2b
 800fb0e:	9205      	strlt	r2, [sp, #20]
 800fb10:	f800 6b02 	strb.w	r6, [r0], #2
 800fb14:	bfa8      	it	ge
 800fb16:	705a      	strbge	r2, [r3, #1]
 800fb18:	9a05      	ldr	r2, [sp, #20]
 800fb1a:	bfbc      	itt	lt
 800fb1c:	212d      	movlt	r1, #45	; 0x2d
 800fb1e:	7059      	strblt	r1, [r3, #1]
 800fb20:	2a63      	cmp	r2, #99	; 0x63
 800fb22:	dd0b      	ble.n	800fb3c <print_e+0xa4>
 800fb24:	2164      	movs	r1, #100	; 0x64
 800fb26:	fb92 f1f1 	sdiv	r1, r2, r1
 800fb2a:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800fb2e:	1cd8      	adds	r0, r3, #3
 800fb30:	709c      	strb	r4, [r3, #2]
 800fb32:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800fb36:	fb03 2201 	mla	r2, r3, r1, r2
 800fb3a:	9205      	str	r2, [sp, #20]
 800fb3c:	9b05      	ldr	r3, [sp, #20]
 800fb3e:	220a      	movs	r2, #10
 800fb40:	fb93 f2f2 	sdiv	r2, r3, r2
 800fb44:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800fb48:	7001      	strb	r1, [r0, #0]
 800fb4a:	f06f 0109 	mvn.w	r1, #9
 800fb4e:	fb01 3302 	mla	r3, r1, r2, r3
 800fb52:	3330      	adds	r3, #48	; 0x30
 800fb54:	7043      	strb	r3, [r0, #1]
 800fb56:	2300      	movs	r3, #0
 800fb58:	7083      	strb	r3, [r0, #2]
 800fb5a:	e7b8      	b.n	800face <print_e+0x36>
 800fb5c:	b10d      	cbz	r5, 800fb62 <print_e+0xca>
 800fb5e:	f803 1b01 	strb.w	r1, [r3], #1
 800fb62:	7805      	ldrb	r5, [r0, #0]
 800fb64:	f803 5b01 	strb.w	r5, [r3], #1
 800fb68:	3c01      	subs	r4, #1
 800fb6a:	2500      	movs	r5, #0
 800fb6c:	e7b9      	b.n	800fae2 <print_e+0x4a>
 800fb6e:	b10d      	cbz	r5, 800fb74 <print_e+0xdc>
 800fb70:	f803 1b01 	strb.w	r1, [r3], #1
 800fb74:	f803 0b01 	strb.w	r0, [r3], #1
 800fb78:	3c01      	subs	r4, #1
 800fb7a:	2500      	movs	r5, #0
 800fb7c:	e7bc      	b.n	800faf8 <print_e+0x60>
 800fb7e:	2665      	movs	r6, #101	; 0x65
 800fb80:	e7bc      	b.n	800fafc <print_e+0x64>
 800fb82:	2645      	movs	r6, #69	; 0x45
 800fb84:	e7ba      	b.n	800fafc <print_e+0x64>
	...

0800fb88 <_gcvt>:
 800fb88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb8c:	ec55 4b10 	vmov	r4, r5, d0
 800fb90:	b088      	sub	sp, #32
 800fb92:	4681      	mov	r9, r0
 800fb94:	4688      	mov	r8, r1
 800fb96:	4616      	mov	r6, r2
 800fb98:	469a      	mov	sl, r3
 800fb9a:	ee10 0a10 	vmov	r0, s0
 800fb9e:	2200      	movs	r2, #0
 800fba0:	2300      	movs	r3, #0
 800fba2:	4629      	mov	r1, r5
 800fba4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800fba6:	f7f0 ff99 	bl	8000adc <__aeabi_dcmplt>
 800fbaa:	b110      	cbz	r0, 800fbb2 <_gcvt+0x2a>
 800fbac:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800fbb0:	461d      	mov	r5, r3
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	4629      	mov	r1, r5
 800fbba:	f7f0 ff85 	bl	8000ac8 <__aeabi_dcmpeq>
 800fbbe:	b138      	cbz	r0, 800fbd0 <_gcvt+0x48>
 800fbc0:	2330      	movs	r3, #48	; 0x30
 800fbc2:	7033      	strb	r3, [r6, #0]
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	7073      	strb	r3, [r6, #1]
 800fbc8:	4630      	mov	r0, r6
 800fbca:	b008      	add	sp, #32
 800fbcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbd0:	a34b      	add	r3, pc, #300	; (adr r3, 800fd00 <_gcvt+0x178>)
 800fbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	4629      	mov	r1, r5
 800fbda:	f7f0 ff89 	bl	8000af0 <__aeabi_dcmple>
 800fbde:	b158      	cbz	r0, 800fbf8 <_gcvt+0x70>
 800fbe0:	f108 33ff 	add.w	r3, r8, #4294967295
 800fbe4:	9300      	str	r3, [sp, #0]
 800fbe6:	e9cd a701 	strd	sl, r7, [sp, #4]
 800fbea:	4622      	mov	r2, r4
 800fbec:	462b      	mov	r3, r5
 800fbee:	4631      	mov	r1, r6
 800fbf0:	4648      	mov	r0, r9
 800fbf2:	f7ff ff51 	bl	800fa98 <print_e>
 800fbf6:	e7e7      	b.n	800fbc8 <_gcvt+0x40>
 800fbf8:	4640      	mov	r0, r8
 800fbfa:	f7ff ff2f 	bl	800fa5c <_mprec_log10>
 800fbfe:	4622      	mov	r2, r4
 800fc00:	ec51 0b10 	vmov	r0, r1, d0
 800fc04:	462b      	mov	r3, r5
 800fc06:	f7f0 ff73 	bl	8000af0 <__aeabi_dcmple>
 800fc0a:	2800      	cmp	r0, #0
 800fc0c:	d1e8      	bne.n	800fbe0 <_gcvt+0x58>
 800fc0e:	ab07      	add	r3, sp, #28
 800fc10:	9301      	str	r3, [sp, #4]
 800fc12:	ab06      	add	r3, sp, #24
 800fc14:	9300      	str	r3, [sp, #0]
 800fc16:	4642      	mov	r2, r8
 800fc18:	ab05      	add	r3, sp, #20
 800fc1a:	ec45 4b10 	vmov	d0, r4, r5
 800fc1e:	2102      	movs	r1, #2
 800fc20:	4648      	mov	r0, r9
 800fc22:	f7fe fcad 	bl	800e580 <_dtoa_r>
 800fc26:	9a05      	ldr	r2, [sp, #20]
 800fc28:	f242 730f 	movw	r3, #9999	; 0x270f
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d00e      	beq.n	800fc4e <_gcvt+0xc6>
 800fc30:	4633      	mov	r3, r6
 800fc32:	44b0      	add	r8, r6
 800fc34:	4605      	mov	r5, r0
 800fc36:	f810 1b01 	ldrb.w	r1, [r0], #1
 800fc3a:	9c05      	ldr	r4, [sp, #20]
 800fc3c:	eba8 0203 	sub.w	r2, r8, r3
 800fc40:	b109      	cbz	r1, 800fc46 <_gcvt+0xbe>
 800fc42:	2c00      	cmp	r4, #0
 800fc44:	dc08      	bgt.n	800fc58 <_gcvt+0xd0>
 800fc46:	2100      	movs	r1, #0
 800fc48:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800fc4c:	e00d      	b.n	800fc6a <_gcvt+0xe2>
 800fc4e:	4601      	mov	r1, r0
 800fc50:	4630      	mov	r0, r6
 800fc52:	f000 fb13 	bl	801027c <strcpy>
 800fc56:	e7b7      	b.n	800fbc8 <_gcvt+0x40>
 800fc58:	3c01      	subs	r4, #1
 800fc5a:	f803 1b01 	strb.w	r1, [r3], #1
 800fc5e:	9405      	str	r4, [sp, #20]
 800fc60:	e7e8      	b.n	800fc34 <_gcvt+0xac>
 800fc62:	f803 cb01 	strb.w	ip, [r3], #1
 800fc66:	3a01      	subs	r2, #1
 800fc68:	2101      	movs	r1, #1
 800fc6a:	2c00      	cmp	r4, #0
 800fc6c:	4620      	mov	r0, r4
 800fc6e:	dc2a      	bgt.n	800fcc6 <_gcvt+0x13e>
 800fc70:	b101      	cbz	r1, 800fc74 <_gcvt+0xec>
 800fc72:	9405      	str	r4, [sp, #20]
 800fc74:	b90f      	cbnz	r7, 800fc7a <_gcvt+0xf2>
 800fc76:	7829      	ldrb	r1, [r5, #0]
 800fc78:	b311      	cbz	r1, 800fcc0 <_gcvt+0x138>
 800fc7a:	42b3      	cmp	r3, r6
 800fc7c:	bf04      	itt	eq
 800fc7e:	2130      	moveq	r1, #48	; 0x30
 800fc80:	f803 1b01 	strbeq.w	r1, [r3], #1
 800fc84:	212e      	movs	r1, #46	; 0x2e
 800fc86:	7019      	strb	r1, [r3, #0]
 800fc88:	9905      	ldr	r1, [sp, #20]
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	2400      	movs	r4, #0
 800fc8e:	eba1 0c03 	sub.w	ip, r1, r3
 800fc92:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800fc96:	eb1c 0f00 	cmn.w	ip, r0
 800fc9a:	d41c      	bmi.n	800fcd6 <_gcvt+0x14e>
 800fc9c:	2900      	cmp	r1, #0
 800fc9e:	f1c1 0000 	rsb	r0, r1, #0
 800fca2:	bfc8      	it	gt
 800fca4:	2000      	movgt	r0, #0
 800fca6:	f100 0c01 	add.w	ip, r0, #1
 800fcaa:	4463      	add	r3, ip
 800fcac:	4401      	add	r1, r0
 800fcae:	b104      	cbz	r4, 800fcb2 <_gcvt+0x12a>
 800fcb0:	9105      	str	r1, [sp, #20]
 800fcb2:	1e69      	subs	r1, r5, #1
 800fcb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fcb8:	b108      	cbz	r0, 800fcbe <_gcvt+0x136>
 800fcba:	2a00      	cmp	r2, #0
 800fcbc:	dc0f      	bgt.n	800fcde <_gcvt+0x156>
 800fcbe:	b9df      	cbnz	r7, 800fcf8 <_gcvt+0x170>
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	701a      	strb	r2, [r3, #0]
 800fcc4:	e780      	b.n	800fbc8 <_gcvt+0x40>
 800fcc6:	2a00      	cmp	r2, #0
 800fcc8:	f104 34ff 	add.w	r4, r4, #4294967295
 800fccc:	dcc9      	bgt.n	800fc62 <_gcvt+0xda>
 800fcce:	2900      	cmp	r1, #0
 800fcd0:	d0d0      	beq.n	800fc74 <_gcvt+0xec>
 800fcd2:	9005      	str	r0, [sp, #20]
 800fcd4:	e7ce      	b.n	800fc74 <_gcvt+0xec>
 800fcd6:	f800 ef01 	strb.w	lr, [r0, #1]!
 800fcda:	2401      	movs	r4, #1
 800fcdc:	e7db      	b.n	800fc96 <_gcvt+0x10e>
 800fcde:	f803 0b01 	strb.w	r0, [r3], #1
 800fce2:	3a01      	subs	r2, #1
 800fce4:	e7e6      	b.n	800fcb4 <_gcvt+0x12c>
 800fce6:	f801 5b01 	strb.w	r5, [r1], #1
 800fcea:	1a60      	subs	r0, r4, r1
 800fcec:	2800      	cmp	r0, #0
 800fcee:	dcfa      	bgt.n	800fce6 <_gcvt+0x15e>
 800fcf0:	2a00      	cmp	r2, #0
 800fcf2:	bfa8      	it	ge
 800fcf4:	189b      	addge	r3, r3, r2
 800fcf6:	e7e3      	b.n	800fcc0 <_gcvt+0x138>
 800fcf8:	4619      	mov	r1, r3
 800fcfa:	189c      	adds	r4, r3, r2
 800fcfc:	2530      	movs	r5, #48	; 0x30
 800fcfe:	e7f4      	b.n	800fcea <_gcvt+0x162>
 800fd00:	eb1c432d 	.word	0xeb1c432d
 800fd04:	3f1a36e2 	.word	0x3f1a36e2

0800fd08 <__sfputc_r>:
 800fd08:	6893      	ldr	r3, [r2, #8]
 800fd0a:	3b01      	subs	r3, #1
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	b410      	push	{r4}
 800fd10:	6093      	str	r3, [r2, #8]
 800fd12:	da08      	bge.n	800fd26 <__sfputc_r+0x1e>
 800fd14:	6994      	ldr	r4, [r2, #24]
 800fd16:	42a3      	cmp	r3, r4
 800fd18:	db01      	blt.n	800fd1e <__sfputc_r+0x16>
 800fd1a:	290a      	cmp	r1, #10
 800fd1c:	d103      	bne.n	800fd26 <__sfputc_r+0x1e>
 800fd1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd22:	f7fe ba2e 	b.w	800e182 <__swbuf_r>
 800fd26:	6813      	ldr	r3, [r2, #0]
 800fd28:	1c58      	adds	r0, r3, #1
 800fd2a:	6010      	str	r0, [r2, #0]
 800fd2c:	7019      	strb	r1, [r3, #0]
 800fd2e:	4608      	mov	r0, r1
 800fd30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd34:	4770      	bx	lr

0800fd36 <__sfputs_r>:
 800fd36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd38:	4606      	mov	r6, r0
 800fd3a:	460f      	mov	r7, r1
 800fd3c:	4614      	mov	r4, r2
 800fd3e:	18d5      	adds	r5, r2, r3
 800fd40:	42ac      	cmp	r4, r5
 800fd42:	d101      	bne.n	800fd48 <__sfputs_r+0x12>
 800fd44:	2000      	movs	r0, #0
 800fd46:	e007      	b.n	800fd58 <__sfputs_r+0x22>
 800fd48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd4c:	463a      	mov	r2, r7
 800fd4e:	4630      	mov	r0, r6
 800fd50:	f7ff ffda 	bl	800fd08 <__sfputc_r>
 800fd54:	1c43      	adds	r3, r0, #1
 800fd56:	d1f3      	bne.n	800fd40 <__sfputs_r+0xa>
 800fd58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd5c <_vfiprintf_r>:
 800fd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd60:	460d      	mov	r5, r1
 800fd62:	b09d      	sub	sp, #116	; 0x74
 800fd64:	4614      	mov	r4, r2
 800fd66:	4698      	mov	r8, r3
 800fd68:	4606      	mov	r6, r0
 800fd6a:	b118      	cbz	r0, 800fd74 <_vfiprintf_r+0x18>
 800fd6c:	6a03      	ldr	r3, [r0, #32]
 800fd6e:	b90b      	cbnz	r3, 800fd74 <_vfiprintf_r+0x18>
 800fd70:	f7fe f918 	bl	800dfa4 <__sinit>
 800fd74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd76:	07d9      	lsls	r1, r3, #31
 800fd78:	d405      	bmi.n	800fd86 <_vfiprintf_r+0x2a>
 800fd7a:	89ab      	ldrh	r3, [r5, #12]
 800fd7c:	059a      	lsls	r2, r3, #22
 800fd7e:	d402      	bmi.n	800fd86 <_vfiprintf_r+0x2a>
 800fd80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd82:	f7fe fb65 	bl	800e450 <__retarget_lock_acquire_recursive>
 800fd86:	89ab      	ldrh	r3, [r5, #12]
 800fd88:	071b      	lsls	r3, r3, #28
 800fd8a:	d501      	bpl.n	800fd90 <_vfiprintf_r+0x34>
 800fd8c:	692b      	ldr	r3, [r5, #16]
 800fd8e:	b99b      	cbnz	r3, 800fdb8 <_vfiprintf_r+0x5c>
 800fd90:	4629      	mov	r1, r5
 800fd92:	4630      	mov	r0, r6
 800fd94:	f7fe fa32 	bl	800e1fc <__swsetup_r>
 800fd98:	b170      	cbz	r0, 800fdb8 <_vfiprintf_r+0x5c>
 800fd9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd9c:	07dc      	lsls	r4, r3, #31
 800fd9e:	d504      	bpl.n	800fdaa <_vfiprintf_r+0x4e>
 800fda0:	f04f 30ff 	mov.w	r0, #4294967295
 800fda4:	b01d      	add	sp, #116	; 0x74
 800fda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdaa:	89ab      	ldrh	r3, [r5, #12]
 800fdac:	0598      	lsls	r0, r3, #22
 800fdae:	d4f7      	bmi.n	800fda0 <_vfiprintf_r+0x44>
 800fdb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fdb2:	f7fe fb4e 	bl	800e452 <__retarget_lock_release_recursive>
 800fdb6:	e7f3      	b.n	800fda0 <_vfiprintf_r+0x44>
 800fdb8:	2300      	movs	r3, #0
 800fdba:	9309      	str	r3, [sp, #36]	; 0x24
 800fdbc:	2320      	movs	r3, #32
 800fdbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fdc2:	f8cd 800c 	str.w	r8, [sp, #12]
 800fdc6:	2330      	movs	r3, #48	; 0x30
 800fdc8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ff7c <_vfiprintf_r+0x220>
 800fdcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fdd0:	f04f 0901 	mov.w	r9, #1
 800fdd4:	4623      	mov	r3, r4
 800fdd6:	469a      	mov	sl, r3
 800fdd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fddc:	b10a      	cbz	r2, 800fde2 <_vfiprintf_r+0x86>
 800fdde:	2a25      	cmp	r2, #37	; 0x25
 800fde0:	d1f9      	bne.n	800fdd6 <_vfiprintf_r+0x7a>
 800fde2:	ebba 0b04 	subs.w	fp, sl, r4
 800fde6:	d00b      	beq.n	800fe00 <_vfiprintf_r+0xa4>
 800fde8:	465b      	mov	r3, fp
 800fdea:	4622      	mov	r2, r4
 800fdec:	4629      	mov	r1, r5
 800fdee:	4630      	mov	r0, r6
 800fdf0:	f7ff ffa1 	bl	800fd36 <__sfputs_r>
 800fdf4:	3001      	adds	r0, #1
 800fdf6:	f000 80a9 	beq.w	800ff4c <_vfiprintf_r+0x1f0>
 800fdfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fdfc:	445a      	add	r2, fp
 800fdfe:	9209      	str	r2, [sp, #36]	; 0x24
 800fe00:	f89a 3000 	ldrb.w	r3, [sl]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	f000 80a1 	beq.w	800ff4c <_vfiprintf_r+0x1f0>
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	f04f 32ff 	mov.w	r2, #4294967295
 800fe10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe14:	f10a 0a01 	add.w	sl, sl, #1
 800fe18:	9304      	str	r3, [sp, #16]
 800fe1a:	9307      	str	r3, [sp, #28]
 800fe1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe20:	931a      	str	r3, [sp, #104]	; 0x68
 800fe22:	4654      	mov	r4, sl
 800fe24:	2205      	movs	r2, #5
 800fe26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe2a:	4854      	ldr	r0, [pc, #336]	; (800ff7c <_vfiprintf_r+0x220>)
 800fe2c:	f7f0 f9d0 	bl	80001d0 <memchr>
 800fe30:	9a04      	ldr	r2, [sp, #16]
 800fe32:	b9d8      	cbnz	r0, 800fe6c <_vfiprintf_r+0x110>
 800fe34:	06d1      	lsls	r1, r2, #27
 800fe36:	bf44      	itt	mi
 800fe38:	2320      	movmi	r3, #32
 800fe3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe3e:	0713      	lsls	r3, r2, #28
 800fe40:	bf44      	itt	mi
 800fe42:	232b      	movmi	r3, #43	; 0x2b
 800fe44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe48:	f89a 3000 	ldrb.w	r3, [sl]
 800fe4c:	2b2a      	cmp	r3, #42	; 0x2a
 800fe4e:	d015      	beq.n	800fe7c <_vfiprintf_r+0x120>
 800fe50:	9a07      	ldr	r2, [sp, #28]
 800fe52:	4654      	mov	r4, sl
 800fe54:	2000      	movs	r0, #0
 800fe56:	f04f 0c0a 	mov.w	ip, #10
 800fe5a:	4621      	mov	r1, r4
 800fe5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe60:	3b30      	subs	r3, #48	; 0x30
 800fe62:	2b09      	cmp	r3, #9
 800fe64:	d94d      	bls.n	800ff02 <_vfiprintf_r+0x1a6>
 800fe66:	b1b0      	cbz	r0, 800fe96 <_vfiprintf_r+0x13a>
 800fe68:	9207      	str	r2, [sp, #28]
 800fe6a:	e014      	b.n	800fe96 <_vfiprintf_r+0x13a>
 800fe6c:	eba0 0308 	sub.w	r3, r0, r8
 800fe70:	fa09 f303 	lsl.w	r3, r9, r3
 800fe74:	4313      	orrs	r3, r2
 800fe76:	9304      	str	r3, [sp, #16]
 800fe78:	46a2      	mov	sl, r4
 800fe7a:	e7d2      	b.n	800fe22 <_vfiprintf_r+0xc6>
 800fe7c:	9b03      	ldr	r3, [sp, #12]
 800fe7e:	1d19      	adds	r1, r3, #4
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	9103      	str	r1, [sp, #12]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	bfbb      	ittet	lt
 800fe88:	425b      	neglt	r3, r3
 800fe8a:	f042 0202 	orrlt.w	r2, r2, #2
 800fe8e:	9307      	strge	r3, [sp, #28]
 800fe90:	9307      	strlt	r3, [sp, #28]
 800fe92:	bfb8      	it	lt
 800fe94:	9204      	strlt	r2, [sp, #16]
 800fe96:	7823      	ldrb	r3, [r4, #0]
 800fe98:	2b2e      	cmp	r3, #46	; 0x2e
 800fe9a:	d10c      	bne.n	800feb6 <_vfiprintf_r+0x15a>
 800fe9c:	7863      	ldrb	r3, [r4, #1]
 800fe9e:	2b2a      	cmp	r3, #42	; 0x2a
 800fea0:	d134      	bne.n	800ff0c <_vfiprintf_r+0x1b0>
 800fea2:	9b03      	ldr	r3, [sp, #12]
 800fea4:	1d1a      	adds	r2, r3, #4
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	9203      	str	r2, [sp, #12]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	bfb8      	it	lt
 800feae:	f04f 33ff 	movlt.w	r3, #4294967295
 800feb2:	3402      	adds	r4, #2
 800feb4:	9305      	str	r3, [sp, #20]
 800feb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ff8c <_vfiprintf_r+0x230>
 800feba:	7821      	ldrb	r1, [r4, #0]
 800febc:	2203      	movs	r2, #3
 800febe:	4650      	mov	r0, sl
 800fec0:	f7f0 f986 	bl	80001d0 <memchr>
 800fec4:	b138      	cbz	r0, 800fed6 <_vfiprintf_r+0x17a>
 800fec6:	9b04      	ldr	r3, [sp, #16]
 800fec8:	eba0 000a 	sub.w	r0, r0, sl
 800fecc:	2240      	movs	r2, #64	; 0x40
 800fece:	4082      	lsls	r2, r0
 800fed0:	4313      	orrs	r3, r2
 800fed2:	3401      	adds	r4, #1
 800fed4:	9304      	str	r3, [sp, #16]
 800fed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800feda:	4829      	ldr	r0, [pc, #164]	; (800ff80 <_vfiprintf_r+0x224>)
 800fedc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fee0:	2206      	movs	r2, #6
 800fee2:	f7f0 f975 	bl	80001d0 <memchr>
 800fee6:	2800      	cmp	r0, #0
 800fee8:	d03f      	beq.n	800ff6a <_vfiprintf_r+0x20e>
 800feea:	4b26      	ldr	r3, [pc, #152]	; (800ff84 <_vfiprintf_r+0x228>)
 800feec:	bb1b      	cbnz	r3, 800ff36 <_vfiprintf_r+0x1da>
 800feee:	9b03      	ldr	r3, [sp, #12]
 800fef0:	3307      	adds	r3, #7
 800fef2:	f023 0307 	bic.w	r3, r3, #7
 800fef6:	3308      	adds	r3, #8
 800fef8:	9303      	str	r3, [sp, #12]
 800fefa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fefc:	443b      	add	r3, r7
 800fefe:	9309      	str	r3, [sp, #36]	; 0x24
 800ff00:	e768      	b.n	800fdd4 <_vfiprintf_r+0x78>
 800ff02:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff06:	460c      	mov	r4, r1
 800ff08:	2001      	movs	r0, #1
 800ff0a:	e7a6      	b.n	800fe5a <_vfiprintf_r+0xfe>
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	3401      	adds	r4, #1
 800ff10:	9305      	str	r3, [sp, #20]
 800ff12:	4619      	mov	r1, r3
 800ff14:	f04f 0c0a 	mov.w	ip, #10
 800ff18:	4620      	mov	r0, r4
 800ff1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff1e:	3a30      	subs	r2, #48	; 0x30
 800ff20:	2a09      	cmp	r2, #9
 800ff22:	d903      	bls.n	800ff2c <_vfiprintf_r+0x1d0>
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d0c6      	beq.n	800feb6 <_vfiprintf_r+0x15a>
 800ff28:	9105      	str	r1, [sp, #20]
 800ff2a:	e7c4      	b.n	800feb6 <_vfiprintf_r+0x15a>
 800ff2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff30:	4604      	mov	r4, r0
 800ff32:	2301      	movs	r3, #1
 800ff34:	e7f0      	b.n	800ff18 <_vfiprintf_r+0x1bc>
 800ff36:	ab03      	add	r3, sp, #12
 800ff38:	9300      	str	r3, [sp, #0]
 800ff3a:	462a      	mov	r2, r5
 800ff3c:	4b12      	ldr	r3, [pc, #72]	; (800ff88 <_vfiprintf_r+0x22c>)
 800ff3e:	a904      	add	r1, sp, #16
 800ff40:	4630      	mov	r0, r6
 800ff42:	f7fd fbef 	bl	800d724 <_printf_float>
 800ff46:	4607      	mov	r7, r0
 800ff48:	1c78      	adds	r0, r7, #1
 800ff4a:	d1d6      	bne.n	800fefa <_vfiprintf_r+0x19e>
 800ff4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff4e:	07d9      	lsls	r1, r3, #31
 800ff50:	d405      	bmi.n	800ff5e <_vfiprintf_r+0x202>
 800ff52:	89ab      	ldrh	r3, [r5, #12]
 800ff54:	059a      	lsls	r2, r3, #22
 800ff56:	d402      	bmi.n	800ff5e <_vfiprintf_r+0x202>
 800ff58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff5a:	f7fe fa7a 	bl	800e452 <__retarget_lock_release_recursive>
 800ff5e:	89ab      	ldrh	r3, [r5, #12]
 800ff60:	065b      	lsls	r3, r3, #25
 800ff62:	f53f af1d 	bmi.w	800fda0 <_vfiprintf_r+0x44>
 800ff66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff68:	e71c      	b.n	800fda4 <_vfiprintf_r+0x48>
 800ff6a:	ab03      	add	r3, sp, #12
 800ff6c:	9300      	str	r3, [sp, #0]
 800ff6e:	462a      	mov	r2, r5
 800ff70:	4b05      	ldr	r3, [pc, #20]	; (800ff88 <_vfiprintf_r+0x22c>)
 800ff72:	a904      	add	r1, sp, #16
 800ff74:	4630      	mov	r0, r6
 800ff76:	f7fd fe79 	bl	800dc6c <_printf_i>
 800ff7a:	e7e4      	b.n	800ff46 <_vfiprintf_r+0x1ea>
 800ff7c:	08011994 	.word	0x08011994
 800ff80:	0801199e 	.word	0x0801199e
 800ff84:	0800d725 	.word	0x0800d725
 800ff88:	0800fd37 	.word	0x0800fd37
 800ff8c:	0801199a 	.word	0x0801199a

0800ff90 <__sflush_r>:
 800ff90:	898a      	ldrh	r2, [r1, #12]
 800ff92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff96:	4605      	mov	r5, r0
 800ff98:	0710      	lsls	r0, r2, #28
 800ff9a:	460c      	mov	r4, r1
 800ff9c:	d458      	bmi.n	8010050 <__sflush_r+0xc0>
 800ff9e:	684b      	ldr	r3, [r1, #4]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	dc05      	bgt.n	800ffb0 <__sflush_r+0x20>
 800ffa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	dc02      	bgt.n	800ffb0 <__sflush_r+0x20>
 800ffaa:	2000      	movs	r0, #0
 800ffac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ffb2:	2e00      	cmp	r6, #0
 800ffb4:	d0f9      	beq.n	800ffaa <__sflush_r+0x1a>
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ffbc:	682f      	ldr	r7, [r5, #0]
 800ffbe:	6a21      	ldr	r1, [r4, #32]
 800ffc0:	602b      	str	r3, [r5, #0]
 800ffc2:	d032      	beq.n	801002a <__sflush_r+0x9a>
 800ffc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ffc6:	89a3      	ldrh	r3, [r4, #12]
 800ffc8:	075a      	lsls	r2, r3, #29
 800ffca:	d505      	bpl.n	800ffd8 <__sflush_r+0x48>
 800ffcc:	6863      	ldr	r3, [r4, #4]
 800ffce:	1ac0      	subs	r0, r0, r3
 800ffd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ffd2:	b10b      	cbz	r3, 800ffd8 <__sflush_r+0x48>
 800ffd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ffd6:	1ac0      	subs	r0, r0, r3
 800ffd8:	2300      	movs	r3, #0
 800ffda:	4602      	mov	r2, r0
 800ffdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ffde:	6a21      	ldr	r1, [r4, #32]
 800ffe0:	4628      	mov	r0, r5
 800ffe2:	47b0      	blx	r6
 800ffe4:	1c43      	adds	r3, r0, #1
 800ffe6:	89a3      	ldrh	r3, [r4, #12]
 800ffe8:	d106      	bne.n	800fff8 <__sflush_r+0x68>
 800ffea:	6829      	ldr	r1, [r5, #0]
 800ffec:	291d      	cmp	r1, #29
 800ffee:	d82b      	bhi.n	8010048 <__sflush_r+0xb8>
 800fff0:	4a29      	ldr	r2, [pc, #164]	; (8010098 <__sflush_r+0x108>)
 800fff2:	410a      	asrs	r2, r1
 800fff4:	07d6      	lsls	r6, r2, #31
 800fff6:	d427      	bmi.n	8010048 <__sflush_r+0xb8>
 800fff8:	2200      	movs	r2, #0
 800fffa:	6062      	str	r2, [r4, #4]
 800fffc:	04d9      	lsls	r1, r3, #19
 800fffe:	6922      	ldr	r2, [r4, #16]
 8010000:	6022      	str	r2, [r4, #0]
 8010002:	d504      	bpl.n	801000e <__sflush_r+0x7e>
 8010004:	1c42      	adds	r2, r0, #1
 8010006:	d101      	bne.n	801000c <__sflush_r+0x7c>
 8010008:	682b      	ldr	r3, [r5, #0]
 801000a:	b903      	cbnz	r3, 801000e <__sflush_r+0x7e>
 801000c:	6560      	str	r0, [r4, #84]	; 0x54
 801000e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010010:	602f      	str	r7, [r5, #0]
 8010012:	2900      	cmp	r1, #0
 8010014:	d0c9      	beq.n	800ffaa <__sflush_r+0x1a>
 8010016:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801001a:	4299      	cmp	r1, r3
 801001c:	d002      	beq.n	8010024 <__sflush_r+0x94>
 801001e:	4628      	mov	r0, r5
 8010020:	f7ff f8a0 	bl	800f164 <_free_r>
 8010024:	2000      	movs	r0, #0
 8010026:	6360      	str	r0, [r4, #52]	; 0x34
 8010028:	e7c0      	b.n	800ffac <__sflush_r+0x1c>
 801002a:	2301      	movs	r3, #1
 801002c:	4628      	mov	r0, r5
 801002e:	47b0      	blx	r6
 8010030:	1c41      	adds	r1, r0, #1
 8010032:	d1c8      	bne.n	800ffc6 <__sflush_r+0x36>
 8010034:	682b      	ldr	r3, [r5, #0]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d0c5      	beq.n	800ffc6 <__sflush_r+0x36>
 801003a:	2b1d      	cmp	r3, #29
 801003c:	d001      	beq.n	8010042 <__sflush_r+0xb2>
 801003e:	2b16      	cmp	r3, #22
 8010040:	d101      	bne.n	8010046 <__sflush_r+0xb6>
 8010042:	602f      	str	r7, [r5, #0]
 8010044:	e7b1      	b.n	800ffaa <__sflush_r+0x1a>
 8010046:	89a3      	ldrh	r3, [r4, #12]
 8010048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801004c:	81a3      	strh	r3, [r4, #12]
 801004e:	e7ad      	b.n	800ffac <__sflush_r+0x1c>
 8010050:	690f      	ldr	r7, [r1, #16]
 8010052:	2f00      	cmp	r7, #0
 8010054:	d0a9      	beq.n	800ffaa <__sflush_r+0x1a>
 8010056:	0793      	lsls	r3, r2, #30
 8010058:	680e      	ldr	r6, [r1, #0]
 801005a:	bf08      	it	eq
 801005c:	694b      	ldreq	r3, [r1, #20]
 801005e:	600f      	str	r7, [r1, #0]
 8010060:	bf18      	it	ne
 8010062:	2300      	movne	r3, #0
 8010064:	eba6 0807 	sub.w	r8, r6, r7
 8010068:	608b      	str	r3, [r1, #8]
 801006a:	f1b8 0f00 	cmp.w	r8, #0
 801006e:	dd9c      	ble.n	800ffaa <__sflush_r+0x1a>
 8010070:	6a21      	ldr	r1, [r4, #32]
 8010072:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010074:	4643      	mov	r3, r8
 8010076:	463a      	mov	r2, r7
 8010078:	4628      	mov	r0, r5
 801007a:	47b0      	blx	r6
 801007c:	2800      	cmp	r0, #0
 801007e:	dc06      	bgt.n	801008e <__sflush_r+0xfe>
 8010080:	89a3      	ldrh	r3, [r4, #12]
 8010082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010086:	81a3      	strh	r3, [r4, #12]
 8010088:	f04f 30ff 	mov.w	r0, #4294967295
 801008c:	e78e      	b.n	800ffac <__sflush_r+0x1c>
 801008e:	4407      	add	r7, r0
 8010090:	eba8 0800 	sub.w	r8, r8, r0
 8010094:	e7e9      	b.n	801006a <__sflush_r+0xda>
 8010096:	bf00      	nop
 8010098:	dfbffffe 	.word	0xdfbffffe

0801009c <_fflush_r>:
 801009c:	b538      	push	{r3, r4, r5, lr}
 801009e:	690b      	ldr	r3, [r1, #16]
 80100a0:	4605      	mov	r5, r0
 80100a2:	460c      	mov	r4, r1
 80100a4:	b913      	cbnz	r3, 80100ac <_fflush_r+0x10>
 80100a6:	2500      	movs	r5, #0
 80100a8:	4628      	mov	r0, r5
 80100aa:	bd38      	pop	{r3, r4, r5, pc}
 80100ac:	b118      	cbz	r0, 80100b6 <_fflush_r+0x1a>
 80100ae:	6a03      	ldr	r3, [r0, #32]
 80100b0:	b90b      	cbnz	r3, 80100b6 <_fflush_r+0x1a>
 80100b2:	f7fd ff77 	bl	800dfa4 <__sinit>
 80100b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d0f3      	beq.n	80100a6 <_fflush_r+0xa>
 80100be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80100c0:	07d0      	lsls	r0, r2, #31
 80100c2:	d404      	bmi.n	80100ce <_fflush_r+0x32>
 80100c4:	0599      	lsls	r1, r3, #22
 80100c6:	d402      	bmi.n	80100ce <_fflush_r+0x32>
 80100c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100ca:	f7fe f9c1 	bl	800e450 <__retarget_lock_acquire_recursive>
 80100ce:	4628      	mov	r0, r5
 80100d0:	4621      	mov	r1, r4
 80100d2:	f7ff ff5d 	bl	800ff90 <__sflush_r>
 80100d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100d8:	07da      	lsls	r2, r3, #31
 80100da:	4605      	mov	r5, r0
 80100dc:	d4e4      	bmi.n	80100a8 <_fflush_r+0xc>
 80100de:	89a3      	ldrh	r3, [r4, #12]
 80100e0:	059b      	lsls	r3, r3, #22
 80100e2:	d4e1      	bmi.n	80100a8 <_fflush_r+0xc>
 80100e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100e6:	f7fe f9b4 	bl	800e452 <__retarget_lock_release_recursive>
 80100ea:	e7dd      	b.n	80100a8 <_fflush_r+0xc>

080100ec <__swhatbuf_r>:
 80100ec:	b570      	push	{r4, r5, r6, lr}
 80100ee:	460c      	mov	r4, r1
 80100f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100f4:	2900      	cmp	r1, #0
 80100f6:	b096      	sub	sp, #88	; 0x58
 80100f8:	4615      	mov	r5, r2
 80100fa:	461e      	mov	r6, r3
 80100fc:	da0d      	bge.n	801011a <__swhatbuf_r+0x2e>
 80100fe:	89a3      	ldrh	r3, [r4, #12]
 8010100:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010104:	f04f 0100 	mov.w	r1, #0
 8010108:	bf0c      	ite	eq
 801010a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801010e:	2340      	movne	r3, #64	; 0x40
 8010110:	2000      	movs	r0, #0
 8010112:	6031      	str	r1, [r6, #0]
 8010114:	602b      	str	r3, [r5, #0]
 8010116:	b016      	add	sp, #88	; 0x58
 8010118:	bd70      	pop	{r4, r5, r6, pc}
 801011a:	466a      	mov	r2, sp
 801011c:	f000 f87c 	bl	8010218 <_fstat_r>
 8010120:	2800      	cmp	r0, #0
 8010122:	dbec      	blt.n	80100fe <__swhatbuf_r+0x12>
 8010124:	9901      	ldr	r1, [sp, #4]
 8010126:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801012a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801012e:	4259      	negs	r1, r3
 8010130:	4159      	adcs	r1, r3
 8010132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010136:	e7eb      	b.n	8010110 <__swhatbuf_r+0x24>

08010138 <__smakebuf_r>:
 8010138:	898b      	ldrh	r3, [r1, #12]
 801013a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801013c:	079d      	lsls	r5, r3, #30
 801013e:	4606      	mov	r6, r0
 8010140:	460c      	mov	r4, r1
 8010142:	d507      	bpl.n	8010154 <__smakebuf_r+0x1c>
 8010144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010148:	6023      	str	r3, [r4, #0]
 801014a:	6123      	str	r3, [r4, #16]
 801014c:	2301      	movs	r3, #1
 801014e:	6163      	str	r3, [r4, #20]
 8010150:	b002      	add	sp, #8
 8010152:	bd70      	pop	{r4, r5, r6, pc}
 8010154:	ab01      	add	r3, sp, #4
 8010156:	466a      	mov	r2, sp
 8010158:	f7ff ffc8 	bl	80100ec <__swhatbuf_r>
 801015c:	9900      	ldr	r1, [sp, #0]
 801015e:	4605      	mov	r5, r0
 8010160:	4630      	mov	r0, r6
 8010162:	f7ff f873 	bl	800f24c <_malloc_r>
 8010166:	b948      	cbnz	r0, 801017c <__smakebuf_r+0x44>
 8010168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801016c:	059a      	lsls	r2, r3, #22
 801016e:	d4ef      	bmi.n	8010150 <__smakebuf_r+0x18>
 8010170:	f023 0303 	bic.w	r3, r3, #3
 8010174:	f043 0302 	orr.w	r3, r3, #2
 8010178:	81a3      	strh	r3, [r4, #12]
 801017a:	e7e3      	b.n	8010144 <__smakebuf_r+0xc>
 801017c:	89a3      	ldrh	r3, [r4, #12]
 801017e:	6020      	str	r0, [r4, #0]
 8010180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010184:	81a3      	strh	r3, [r4, #12]
 8010186:	9b00      	ldr	r3, [sp, #0]
 8010188:	6163      	str	r3, [r4, #20]
 801018a:	9b01      	ldr	r3, [sp, #4]
 801018c:	6120      	str	r0, [r4, #16]
 801018e:	b15b      	cbz	r3, 80101a8 <__smakebuf_r+0x70>
 8010190:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010194:	4630      	mov	r0, r6
 8010196:	f000 f851 	bl	801023c <_isatty_r>
 801019a:	b128      	cbz	r0, 80101a8 <__smakebuf_r+0x70>
 801019c:	89a3      	ldrh	r3, [r4, #12]
 801019e:	f023 0303 	bic.w	r3, r3, #3
 80101a2:	f043 0301 	orr.w	r3, r3, #1
 80101a6:	81a3      	strh	r3, [r4, #12]
 80101a8:	89a3      	ldrh	r3, [r4, #12]
 80101aa:	431d      	orrs	r5, r3
 80101ac:	81a5      	strh	r5, [r4, #12]
 80101ae:	e7cf      	b.n	8010150 <__smakebuf_r+0x18>

080101b0 <_putc_r>:
 80101b0:	b570      	push	{r4, r5, r6, lr}
 80101b2:	460d      	mov	r5, r1
 80101b4:	4614      	mov	r4, r2
 80101b6:	4606      	mov	r6, r0
 80101b8:	b118      	cbz	r0, 80101c2 <_putc_r+0x12>
 80101ba:	6a03      	ldr	r3, [r0, #32]
 80101bc:	b90b      	cbnz	r3, 80101c2 <_putc_r+0x12>
 80101be:	f7fd fef1 	bl	800dfa4 <__sinit>
 80101c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80101c4:	07d8      	lsls	r0, r3, #31
 80101c6:	d405      	bmi.n	80101d4 <_putc_r+0x24>
 80101c8:	89a3      	ldrh	r3, [r4, #12]
 80101ca:	0599      	lsls	r1, r3, #22
 80101cc:	d402      	bmi.n	80101d4 <_putc_r+0x24>
 80101ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80101d0:	f7fe f93e 	bl	800e450 <__retarget_lock_acquire_recursive>
 80101d4:	68a3      	ldr	r3, [r4, #8]
 80101d6:	3b01      	subs	r3, #1
 80101d8:	2b00      	cmp	r3, #0
 80101da:	60a3      	str	r3, [r4, #8]
 80101dc:	da05      	bge.n	80101ea <_putc_r+0x3a>
 80101de:	69a2      	ldr	r2, [r4, #24]
 80101e0:	4293      	cmp	r3, r2
 80101e2:	db12      	blt.n	801020a <_putc_r+0x5a>
 80101e4:	b2eb      	uxtb	r3, r5
 80101e6:	2b0a      	cmp	r3, #10
 80101e8:	d00f      	beq.n	801020a <_putc_r+0x5a>
 80101ea:	6823      	ldr	r3, [r4, #0]
 80101ec:	1c5a      	adds	r2, r3, #1
 80101ee:	6022      	str	r2, [r4, #0]
 80101f0:	701d      	strb	r5, [r3, #0]
 80101f2:	b2ed      	uxtb	r5, r5
 80101f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80101f6:	07da      	lsls	r2, r3, #31
 80101f8:	d405      	bmi.n	8010206 <_putc_r+0x56>
 80101fa:	89a3      	ldrh	r3, [r4, #12]
 80101fc:	059b      	lsls	r3, r3, #22
 80101fe:	d402      	bmi.n	8010206 <_putc_r+0x56>
 8010200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010202:	f7fe f926 	bl	800e452 <__retarget_lock_release_recursive>
 8010206:	4628      	mov	r0, r5
 8010208:	bd70      	pop	{r4, r5, r6, pc}
 801020a:	4629      	mov	r1, r5
 801020c:	4622      	mov	r2, r4
 801020e:	4630      	mov	r0, r6
 8010210:	f7fd ffb7 	bl	800e182 <__swbuf_r>
 8010214:	4605      	mov	r5, r0
 8010216:	e7ed      	b.n	80101f4 <_putc_r+0x44>

08010218 <_fstat_r>:
 8010218:	b538      	push	{r3, r4, r5, lr}
 801021a:	4d07      	ldr	r5, [pc, #28]	; (8010238 <_fstat_r+0x20>)
 801021c:	2300      	movs	r3, #0
 801021e:	4604      	mov	r4, r0
 8010220:	4608      	mov	r0, r1
 8010222:	4611      	mov	r1, r2
 8010224:	602b      	str	r3, [r5, #0]
 8010226:	f7f4 fd66 	bl	8004cf6 <_fstat>
 801022a:	1c43      	adds	r3, r0, #1
 801022c:	d102      	bne.n	8010234 <_fstat_r+0x1c>
 801022e:	682b      	ldr	r3, [r5, #0]
 8010230:	b103      	cbz	r3, 8010234 <_fstat_r+0x1c>
 8010232:	6023      	str	r3, [r4, #0]
 8010234:	bd38      	pop	{r3, r4, r5, pc}
 8010236:	bf00      	nop
 8010238:	20004f38 	.word	0x20004f38

0801023c <_isatty_r>:
 801023c:	b538      	push	{r3, r4, r5, lr}
 801023e:	4d06      	ldr	r5, [pc, #24]	; (8010258 <_isatty_r+0x1c>)
 8010240:	2300      	movs	r3, #0
 8010242:	4604      	mov	r4, r0
 8010244:	4608      	mov	r0, r1
 8010246:	602b      	str	r3, [r5, #0]
 8010248:	f7f4 fd65 	bl	8004d16 <_isatty>
 801024c:	1c43      	adds	r3, r0, #1
 801024e:	d102      	bne.n	8010256 <_isatty_r+0x1a>
 8010250:	682b      	ldr	r3, [r5, #0]
 8010252:	b103      	cbz	r3, 8010256 <_isatty_r+0x1a>
 8010254:	6023      	str	r3, [r4, #0]
 8010256:	bd38      	pop	{r3, r4, r5, pc}
 8010258:	20004f38 	.word	0x20004f38

0801025c <_sbrk_r>:
 801025c:	b538      	push	{r3, r4, r5, lr}
 801025e:	4d06      	ldr	r5, [pc, #24]	; (8010278 <_sbrk_r+0x1c>)
 8010260:	2300      	movs	r3, #0
 8010262:	4604      	mov	r4, r0
 8010264:	4608      	mov	r0, r1
 8010266:	602b      	str	r3, [r5, #0]
 8010268:	f7f4 fd6e 	bl	8004d48 <_sbrk>
 801026c:	1c43      	adds	r3, r0, #1
 801026e:	d102      	bne.n	8010276 <_sbrk_r+0x1a>
 8010270:	682b      	ldr	r3, [r5, #0]
 8010272:	b103      	cbz	r3, 8010276 <_sbrk_r+0x1a>
 8010274:	6023      	str	r3, [r4, #0]
 8010276:	bd38      	pop	{r3, r4, r5, pc}
 8010278:	20004f38 	.word	0x20004f38

0801027c <strcpy>:
 801027c:	4603      	mov	r3, r0
 801027e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010282:	f803 2b01 	strb.w	r2, [r3], #1
 8010286:	2a00      	cmp	r2, #0
 8010288:	d1f9      	bne.n	801027e <strcpy+0x2>
 801028a:	4770      	bx	lr

0801028c <__assert_func>:
 801028c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801028e:	4614      	mov	r4, r2
 8010290:	461a      	mov	r2, r3
 8010292:	4b09      	ldr	r3, [pc, #36]	; (80102b8 <__assert_func+0x2c>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	4605      	mov	r5, r0
 8010298:	68d8      	ldr	r0, [r3, #12]
 801029a:	b14c      	cbz	r4, 80102b0 <__assert_func+0x24>
 801029c:	4b07      	ldr	r3, [pc, #28]	; (80102bc <__assert_func+0x30>)
 801029e:	9100      	str	r1, [sp, #0]
 80102a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80102a4:	4906      	ldr	r1, [pc, #24]	; (80102c0 <__assert_func+0x34>)
 80102a6:	462b      	mov	r3, r5
 80102a8:	f000 f844 	bl	8010334 <fiprintf>
 80102ac:	f000 f854 	bl	8010358 <abort>
 80102b0:	4b04      	ldr	r3, [pc, #16]	; (80102c4 <__assert_func+0x38>)
 80102b2:	461c      	mov	r4, r3
 80102b4:	e7f3      	b.n	801029e <__assert_func+0x12>
 80102b6:	bf00      	nop
 80102b8:	200000e0 	.word	0x200000e0
 80102bc:	080119af 	.word	0x080119af
 80102c0:	080119bc 	.word	0x080119bc
 80102c4:	080119ea 	.word	0x080119ea

080102c8 <_calloc_r>:
 80102c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80102ca:	fba1 2402 	umull	r2, r4, r1, r2
 80102ce:	b94c      	cbnz	r4, 80102e4 <_calloc_r+0x1c>
 80102d0:	4611      	mov	r1, r2
 80102d2:	9201      	str	r2, [sp, #4]
 80102d4:	f7fe ffba 	bl	800f24c <_malloc_r>
 80102d8:	9a01      	ldr	r2, [sp, #4]
 80102da:	4605      	mov	r5, r0
 80102dc:	b930      	cbnz	r0, 80102ec <_calloc_r+0x24>
 80102de:	4628      	mov	r0, r5
 80102e0:	b003      	add	sp, #12
 80102e2:	bd30      	pop	{r4, r5, pc}
 80102e4:	220c      	movs	r2, #12
 80102e6:	6002      	str	r2, [r0, #0]
 80102e8:	2500      	movs	r5, #0
 80102ea:	e7f8      	b.n	80102de <_calloc_r+0x16>
 80102ec:	4621      	mov	r1, r4
 80102ee:	f7fd ffdd 	bl	800e2ac <memset>
 80102f2:	e7f4      	b.n	80102de <_calloc_r+0x16>

080102f4 <__ascii_mbtowc>:
 80102f4:	b082      	sub	sp, #8
 80102f6:	b901      	cbnz	r1, 80102fa <__ascii_mbtowc+0x6>
 80102f8:	a901      	add	r1, sp, #4
 80102fa:	b142      	cbz	r2, 801030e <__ascii_mbtowc+0x1a>
 80102fc:	b14b      	cbz	r3, 8010312 <__ascii_mbtowc+0x1e>
 80102fe:	7813      	ldrb	r3, [r2, #0]
 8010300:	600b      	str	r3, [r1, #0]
 8010302:	7812      	ldrb	r2, [r2, #0]
 8010304:	1e10      	subs	r0, r2, #0
 8010306:	bf18      	it	ne
 8010308:	2001      	movne	r0, #1
 801030a:	b002      	add	sp, #8
 801030c:	4770      	bx	lr
 801030e:	4610      	mov	r0, r2
 8010310:	e7fb      	b.n	801030a <__ascii_mbtowc+0x16>
 8010312:	f06f 0001 	mvn.w	r0, #1
 8010316:	e7f8      	b.n	801030a <__ascii_mbtowc+0x16>

08010318 <__ascii_wctomb>:
 8010318:	b149      	cbz	r1, 801032e <__ascii_wctomb+0x16>
 801031a:	2aff      	cmp	r2, #255	; 0xff
 801031c:	bf85      	ittet	hi
 801031e:	238a      	movhi	r3, #138	; 0x8a
 8010320:	6003      	strhi	r3, [r0, #0]
 8010322:	700a      	strbls	r2, [r1, #0]
 8010324:	f04f 30ff 	movhi.w	r0, #4294967295
 8010328:	bf98      	it	ls
 801032a:	2001      	movls	r0, #1
 801032c:	4770      	bx	lr
 801032e:	4608      	mov	r0, r1
 8010330:	4770      	bx	lr
	...

08010334 <fiprintf>:
 8010334:	b40e      	push	{r1, r2, r3}
 8010336:	b503      	push	{r0, r1, lr}
 8010338:	4601      	mov	r1, r0
 801033a:	ab03      	add	r3, sp, #12
 801033c:	4805      	ldr	r0, [pc, #20]	; (8010354 <fiprintf+0x20>)
 801033e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010342:	6800      	ldr	r0, [r0, #0]
 8010344:	9301      	str	r3, [sp, #4]
 8010346:	f7ff fd09 	bl	800fd5c <_vfiprintf_r>
 801034a:	b002      	add	sp, #8
 801034c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010350:	b003      	add	sp, #12
 8010352:	4770      	bx	lr
 8010354:	200000e0 	.word	0x200000e0

08010358 <abort>:
 8010358:	b508      	push	{r3, lr}
 801035a:	2006      	movs	r0, #6
 801035c:	f000 f82c 	bl	80103b8 <raise>
 8010360:	2001      	movs	r0, #1
 8010362:	f7f4 fc95 	bl	8004c90 <_exit>

08010366 <_raise_r>:
 8010366:	291f      	cmp	r1, #31
 8010368:	b538      	push	{r3, r4, r5, lr}
 801036a:	4604      	mov	r4, r0
 801036c:	460d      	mov	r5, r1
 801036e:	d904      	bls.n	801037a <_raise_r+0x14>
 8010370:	2316      	movs	r3, #22
 8010372:	6003      	str	r3, [r0, #0]
 8010374:	f04f 30ff 	mov.w	r0, #4294967295
 8010378:	bd38      	pop	{r3, r4, r5, pc}
 801037a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801037c:	b112      	cbz	r2, 8010384 <_raise_r+0x1e>
 801037e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010382:	b94b      	cbnz	r3, 8010398 <_raise_r+0x32>
 8010384:	4620      	mov	r0, r4
 8010386:	f000 f831 	bl	80103ec <_getpid_r>
 801038a:	462a      	mov	r2, r5
 801038c:	4601      	mov	r1, r0
 801038e:	4620      	mov	r0, r4
 8010390:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010394:	f000 b818 	b.w	80103c8 <_kill_r>
 8010398:	2b01      	cmp	r3, #1
 801039a:	d00a      	beq.n	80103b2 <_raise_r+0x4c>
 801039c:	1c59      	adds	r1, r3, #1
 801039e:	d103      	bne.n	80103a8 <_raise_r+0x42>
 80103a0:	2316      	movs	r3, #22
 80103a2:	6003      	str	r3, [r0, #0]
 80103a4:	2001      	movs	r0, #1
 80103a6:	e7e7      	b.n	8010378 <_raise_r+0x12>
 80103a8:	2400      	movs	r4, #0
 80103aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80103ae:	4628      	mov	r0, r5
 80103b0:	4798      	blx	r3
 80103b2:	2000      	movs	r0, #0
 80103b4:	e7e0      	b.n	8010378 <_raise_r+0x12>
	...

080103b8 <raise>:
 80103b8:	4b02      	ldr	r3, [pc, #8]	; (80103c4 <raise+0xc>)
 80103ba:	4601      	mov	r1, r0
 80103bc:	6818      	ldr	r0, [r3, #0]
 80103be:	f7ff bfd2 	b.w	8010366 <_raise_r>
 80103c2:	bf00      	nop
 80103c4:	200000e0 	.word	0x200000e0

080103c8 <_kill_r>:
 80103c8:	b538      	push	{r3, r4, r5, lr}
 80103ca:	4d07      	ldr	r5, [pc, #28]	; (80103e8 <_kill_r+0x20>)
 80103cc:	2300      	movs	r3, #0
 80103ce:	4604      	mov	r4, r0
 80103d0:	4608      	mov	r0, r1
 80103d2:	4611      	mov	r1, r2
 80103d4:	602b      	str	r3, [r5, #0]
 80103d6:	f7f4 fc4b 	bl	8004c70 <_kill>
 80103da:	1c43      	adds	r3, r0, #1
 80103dc:	d102      	bne.n	80103e4 <_kill_r+0x1c>
 80103de:	682b      	ldr	r3, [r5, #0]
 80103e0:	b103      	cbz	r3, 80103e4 <_kill_r+0x1c>
 80103e2:	6023      	str	r3, [r4, #0]
 80103e4:	bd38      	pop	{r3, r4, r5, pc}
 80103e6:	bf00      	nop
 80103e8:	20004f38 	.word	0x20004f38

080103ec <_getpid_r>:
 80103ec:	f7f4 bc38 	b.w	8004c60 <_getpid>

080103f0 <pow>:
 80103f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103f2:	ed2d 8b02 	vpush	{d8}
 80103f6:	eeb0 8a40 	vmov.f32	s16, s0
 80103fa:	eef0 8a60 	vmov.f32	s17, s1
 80103fe:	ec55 4b11 	vmov	r4, r5, d1
 8010402:	f000 f871 	bl	80104e8 <__ieee754_pow>
 8010406:	4622      	mov	r2, r4
 8010408:	462b      	mov	r3, r5
 801040a:	4620      	mov	r0, r4
 801040c:	4629      	mov	r1, r5
 801040e:	ec57 6b10 	vmov	r6, r7, d0
 8010412:	f7f0 fb8b 	bl	8000b2c <__aeabi_dcmpun>
 8010416:	2800      	cmp	r0, #0
 8010418:	d13b      	bne.n	8010492 <pow+0xa2>
 801041a:	ec51 0b18 	vmov	r0, r1, d8
 801041e:	2200      	movs	r2, #0
 8010420:	2300      	movs	r3, #0
 8010422:	f7f0 fb51 	bl	8000ac8 <__aeabi_dcmpeq>
 8010426:	b1b8      	cbz	r0, 8010458 <pow+0x68>
 8010428:	2200      	movs	r2, #0
 801042a:	2300      	movs	r3, #0
 801042c:	4620      	mov	r0, r4
 801042e:	4629      	mov	r1, r5
 8010430:	f7f0 fb4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010434:	2800      	cmp	r0, #0
 8010436:	d146      	bne.n	80104c6 <pow+0xd6>
 8010438:	ec45 4b10 	vmov	d0, r4, r5
 801043c:	f000 f848 	bl	80104d0 <finite>
 8010440:	b338      	cbz	r0, 8010492 <pow+0xa2>
 8010442:	2200      	movs	r2, #0
 8010444:	2300      	movs	r3, #0
 8010446:	4620      	mov	r0, r4
 8010448:	4629      	mov	r1, r5
 801044a:	f7f0 fb47 	bl	8000adc <__aeabi_dcmplt>
 801044e:	b300      	cbz	r0, 8010492 <pow+0xa2>
 8010450:	f7fd ffd4 	bl	800e3fc <__errno>
 8010454:	2322      	movs	r3, #34	; 0x22
 8010456:	e01b      	b.n	8010490 <pow+0xa0>
 8010458:	ec47 6b10 	vmov	d0, r6, r7
 801045c:	f000 f838 	bl	80104d0 <finite>
 8010460:	b9e0      	cbnz	r0, 801049c <pow+0xac>
 8010462:	eeb0 0a48 	vmov.f32	s0, s16
 8010466:	eef0 0a68 	vmov.f32	s1, s17
 801046a:	f000 f831 	bl	80104d0 <finite>
 801046e:	b1a8      	cbz	r0, 801049c <pow+0xac>
 8010470:	ec45 4b10 	vmov	d0, r4, r5
 8010474:	f000 f82c 	bl	80104d0 <finite>
 8010478:	b180      	cbz	r0, 801049c <pow+0xac>
 801047a:	4632      	mov	r2, r6
 801047c:	463b      	mov	r3, r7
 801047e:	4630      	mov	r0, r6
 8010480:	4639      	mov	r1, r7
 8010482:	f7f0 fb53 	bl	8000b2c <__aeabi_dcmpun>
 8010486:	2800      	cmp	r0, #0
 8010488:	d0e2      	beq.n	8010450 <pow+0x60>
 801048a:	f7fd ffb7 	bl	800e3fc <__errno>
 801048e:	2321      	movs	r3, #33	; 0x21
 8010490:	6003      	str	r3, [r0, #0]
 8010492:	ecbd 8b02 	vpop	{d8}
 8010496:	ec47 6b10 	vmov	d0, r6, r7
 801049a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801049c:	2200      	movs	r2, #0
 801049e:	2300      	movs	r3, #0
 80104a0:	4630      	mov	r0, r6
 80104a2:	4639      	mov	r1, r7
 80104a4:	f7f0 fb10 	bl	8000ac8 <__aeabi_dcmpeq>
 80104a8:	2800      	cmp	r0, #0
 80104aa:	d0f2      	beq.n	8010492 <pow+0xa2>
 80104ac:	eeb0 0a48 	vmov.f32	s0, s16
 80104b0:	eef0 0a68 	vmov.f32	s1, s17
 80104b4:	f000 f80c 	bl	80104d0 <finite>
 80104b8:	2800      	cmp	r0, #0
 80104ba:	d0ea      	beq.n	8010492 <pow+0xa2>
 80104bc:	ec45 4b10 	vmov	d0, r4, r5
 80104c0:	f000 f806 	bl	80104d0 <finite>
 80104c4:	e7c3      	b.n	801044e <pow+0x5e>
 80104c6:	4f01      	ldr	r7, [pc, #4]	; (80104cc <pow+0xdc>)
 80104c8:	2600      	movs	r6, #0
 80104ca:	e7e2      	b.n	8010492 <pow+0xa2>
 80104cc:	3ff00000 	.word	0x3ff00000

080104d0 <finite>:
 80104d0:	b082      	sub	sp, #8
 80104d2:	ed8d 0b00 	vstr	d0, [sp]
 80104d6:	9801      	ldr	r0, [sp, #4]
 80104d8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80104dc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80104e0:	0fc0      	lsrs	r0, r0, #31
 80104e2:	b002      	add	sp, #8
 80104e4:	4770      	bx	lr
	...

080104e8 <__ieee754_pow>:
 80104e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ec:	ed2d 8b06 	vpush	{d8-d10}
 80104f0:	b089      	sub	sp, #36	; 0x24
 80104f2:	ed8d 1b00 	vstr	d1, [sp]
 80104f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80104fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80104fe:	ea58 0102 	orrs.w	r1, r8, r2
 8010502:	ec57 6b10 	vmov	r6, r7, d0
 8010506:	d115      	bne.n	8010534 <__ieee754_pow+0x4c>
 8010508:	19b3      	adds	r3, r6, r6
 801050a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801050e:	4152      	adcs	r2, r2
 8010510:	4299      	cmp	r1, r3
 8010512:	4b89      	ldr	r3, [pc, #548]	; (8010738 <__ieee754_pow+0x250>)
 8010514:	4193      	sbcs	r3, r2
 8010516:	f080 84d1 	bcs.w	8010ebc <__ieee754_pow+0x9d4>
 801051a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801051e:	4630      	mov	r0, r6
 8010520:	4639      	mov	r1, r7
 8010522:	f7ef feb3 	bl	800028c <__adddf3>
 8010526:	ec41 0b10 	vmov	d0, r0, r1
 801052a:	b009      	add	sp, #36	; 0x24
 801052c:	ecbd 8b06 	vpop	{d8-d10}
 8010530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010534:	4b81      	ldr	r3, [pc, #516]	; (801073c <__ieee754_pow+0x254>)
 8010536:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801053a:	429c      	cmp	r4, r3
 801053c:	ee10 aa10 	vmov	sl, s0
 8010540:	463d      	mov	r5, r7
 8010542:	dc06      	bgt.n	8010552 <__ieee754_pow+0x6a>
 8010544:	d101      	bne.n	801054a <__ieee754_pow+0x62>
 8010546:	2e00      	cmp	r6, #0
 8010548:	d1e7      	bne.n	801051a <__ieee754_pow+0x32>
 801054a:	4598      	cmp	r8, r3
 801054c:	dc01      	bgt.n	8010552 <__ieee754_pow+0x6a>
 801054e:	d10f      	bne.n	8010570 <__ieee754_pow+0x88>
 8010550:	b172      	cbz	r2, 8010570 <__ieee754_pow+0x88>
 8010552:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010556:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801055a:	ea55 050a 	orrs.w	r5, r5, sl
 801055e:	d1dc      	bne.n	801051a <__ieee754_pow+0x32>
 8010560:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010564:	18db      	adds	r3, r3, r3
 8010566:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801056a:	4152      	adcs	r2, r2
 801056c:	429d      	cmp	r5, r3
 801056e:	e7d0      	b.n	8010512 <__ieee754_pow+0x2a>
 8010570:	2d00      	cmp	r5, #0
 8010572:	da3b      	bge.n	80105ec <__ieee754_pow+0x104>
 8010574:	4b72      	ldr	r3, [pc, #456]	; (8010740 <__ieee754_pow+0x258>)
 8010576:	4598      	cmp	r8, r3
 8010578:	dc51      	bgt.n	801061e <__ieee754_pow+0x136>
 801057a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801057e:	4598      	cmp	r8, r3
 8010580:	f340 84ab 	ble.w	8010eda <__ieee754_pow+0x9f2>
 8010584:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010588:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801058c:	2b14      	cmp	r3, #20
 801058e:	dd0f      	ble.n	80105b0 <__ieee754_pow+0xc8>
 8010590:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010594:	fa22 f103 	lsr.w	r1, r2, r3
 8010598:	fa01 f303 	lsl.w	r3, r1, r3
 801059c:	4293      	cmp	r3, r2
 801059e:	f040 849c 	bne.w	8010eda <__ieee754_pow+0x9f2>
 80105a2:	f001 0101 	and.w	r1, r1, #1
 80105a6:	f1c1 0302 	rsb	r3, r1, #2
 80105aa:	9304      	str	r3, [sp, #16]
 80105ac:	b182      	cbz	r2, 80105d0 <__ieee754_pow+0xe8>
 80105ae:	e05f      	b.n	8010670 <__ieee754_pow+0x188>
 80105b0:	2a00      	cmp	r2, #0
 80105b2:	d15b      	bne.n	801066c <__ieee754_pow+0x184>
 80105b4:	f1c3 0314 	rsb	r3, r3, #20
 80105b8:	fa48 f103 	asr.w	r1, r8, r3
 80105bc:	fa01 f303 	lsl.w	r3, r1, r3
 80105c0:	4543      	cmp	r3, r8
 80105c2:	f040 8487 	bne.w	8010ed4 <__ieee754_pow+0x9ec>
 80105c6:	f001 0101 	and.w	r1, r1, #1
 80105ca:	f1c1 0302 	rsb	r3, r1, #2
 80105ce:	9304      	str	r3, [sp, #16]
 80105d0:	4b5c      	ldr	r3, [pc, #368]	; (8010744 <__ieee754_pow+0x25c>)
 80105d2:	4598      	cmp	r8, r3
 80105d4:	d132      	bne.n	801063c <__ieee754_pow+0x154>
 80105d6:	f1b9 0f00 	cmp.w	r9, #0
 80105da:	f280 8477 	bge.w	8010ecc <__ieee754_pow+0x9e4>
 80105de:	4959      	ldr	r1, [pc, #356]	; (8010744 <__ieee754_pow+0x25c>)
 80105e0:	4632      	mov	r2, r6
 80105e2:	463b      	mov	r3, r7
 80105e4:	2000      	movs	r0, #0
 80105e6:	f7f0 f931 	bl	800084c <__aeabi_ddiv>
 80105ea:	e79c      	b.n	8010526 <__ieee754_pow+0x3e>
 80105ec:	2300      	movs	r3, #0
 80105ee:	9304      	str	r3, [sp, #16]
 80105f0:	2a00      	cmp	r2, #0
 80105f2:	d13d      	bne.n	8010670 <__ieee754_pow+0x188>
 80105f4:	4b51      	ldr	r3, [pc, #324]	; (801073c <__ieee754_pow+0x254>)
 80105f6:	4598      	cmp	r8, r3
 80105f8:	d1ea      	bne.n	80105d0 <__ieee754_pow+0xe8>
 80105fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80105fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010602:	ea53 030a 	orrs.w	r3, r3, sl
 8010606:	f000 8459 	beq.w	8010ebc <__ieee754_pow+0x9d4>
 801060a:	4b4f      	ldr	r3, [pc, #316]	; (8010748 <__ieee754_pow+0x260>)
 801060c:	429c      	cmp	r4, r3
 801060e:	dd08      	ble.n	8010622 <__ieee754_pow+0x13a>
 8010610:	f1b9 0f00 	cmp.w	r9, #0
 8010614:	f2c0 8456 	blt.w	8010ec4 <__ieee754_pow+0x9dc>
 8010618:	e9dd 0100 	ldrd	r0, r1, [sp]
 801061c:	e783      	b.n	8010526 <__ieee754_pow+0x3e>
 801061e:	2302      	movs	r3, #2
 8010620:	e7e5      	b.n	80105ee <__ieee754_pow+0x106>
 8010622:	f1b9 0f00 	cmp.w	r9, #0
 8010626:	f04f 0000 	mov.w	r0, #0
 801062a:	f04f 0100 	mov.w	r1, #0
 801062e:	f6bf af7a 	bge.w	8010526 <__ieee754_pow+0x3e>
 8010632:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010636:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801063a:	e774      	b.n	8010526 <__ieee754_pow+0x3e>
 801063c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010640:	d106      	bne.n	8010650 <__ieee754_pow+0x168>
 8010642:	4632      	mov	r2, r6
 8010644:	463b      	mov	r3, r7
 8010646:	4630      	mov	r0, r6
 8010648:	4639      	mov	r1, r7
 801064a:	f7ef ffd5 	bl	80005f8 <__aeabi_dmul>
 801064e:	e76a      	b.n	8010526 <__ieee754_pow+0x3e>
 8010650:	4b3e      	ldr	r3, [pc, #248]	; (801074c <__ieee754_pow+0x264>)
 8010652:	4599      	cmp	r9, r3
 8010654:	d10c      	bne.n	8010670 <__ieee754_pow+0x188>
 8010656:	2d00      	cmp	r5, #0
 8010658:	db0a      	blt.n	8010670 <__ieee754_pow+0x188>
 801065a:	ec47 6b10 	vmov	d0, r6, r7
 801065e:	b009      	add	sp, #36	; 0x24
 8010660:	ecbd 8b06 	vpop	{d8-d10}
 8010664:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010668:	f000 bd20 	b.w	80110ac <__ieee754_sqrt>
 801066c:	2300      	movs	r3, #0
 801066e:	9304      	str	r3, [sp, #16]
 8010670:	ec47 6b10 	vmov	d0, r6, r7
 8010674:	f000 fc62 	bl	8010f3c <fabs>
 8010678:	ec51 0b10 	vmov	r0, r1, d0
 801067c:	f1ba 0f00 	cmp.w	sl, #0
 8010680:	d129      	bne.n	80106d6 <__ieee754_pow+0x1ee>
 8010682:	b124      	cbz	r4, 801068e <__ieee754_pow+0x1a6>
 8010684:	4b2f      	ldr	r3, [pc, #188]	; (8010744 <__ieee754_pow+0x25c>)
 8010686:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801068a:	429a      	cmp	r2, r3
 801068c:	d123      	bne.n	80106d6 <__ieee754_pow+0x1ee>
 801068e:	f1b9 0f00 	cmp.w	r9, #0
 8010692:	da05      	bge.n	80106a0 <__ieee754_pow+0x1b8>
 8010694:	4602      	mov	r2, r0
 8010696:	460b      	mov	r3, r1
 8010698:	2000      	movs	r0, #0
 801069a:	492a      	ldr	r1, [pc, #168]	; (8010744 <__ieee754_pow+0x25c>)
 801069c:	f7f0 f8d6 	bl	800084c <__aeabi_ddiv>
 80106a0:	2d00      	cmp	r5, #0
 80106a2:	f6bf af40 	bge.w	8010526 <__ieee754_pow+0x3e>
 80106a6:	9b04      	ldr	r3, [sp, #16]
 80106a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80106ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80106b0:	431c      	orrs	r4, r3
 80106b2:	d108      	bne.n	80106c6 <__ieee754_pow+0x1de>
 80106b4:	4602      	mov	r2, r0
 80106b6:	460b      	mov	r3, r1
 80106b8:	4610      	mov	r0, r2
 80106ba:	4619      	mov	r1, r3
 80106bc:	f7ef fde4 	bl	8000288 <__aeabi_dsub>
 80106c0:	4602      	mov	r2, r0
 80106c2:	460b      	mov	r3, r1
 80106c4:	e78f      	b.n	80105e6 <__ieee754_pow+0xfe>
 80106c6:	9b04      	ldr	r3, [sp, #16]
 80106c8:	2b01      	cmp	r3, #1
 80106ca:	f47f af2c 	bne.w	8010526 <__ieee754_pow+0x3e>
 80106ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80106d2:	4619      	mov	r1, r3
 80106d4:	e727      	b.n	8010526 <__ieee754_pow+0x3e>
 80106d6:	0feb      	lsrs	r3, r5, #31
 80106d8:	3b01      	subs	r3, #1
 80106da:	9306      	str	r3, [sp, #24]
 80106dc:	9a06      	ldr	r2, [sp, #24]
 80106de:	9b04      	ldr	r3, [sp, #16]
 80106e0:	4313      	orrs	r3, r2
 80106e2:	d102      	bne.n	80106ea <__ieee754_pow+0x202>
 80106e4:	4632      	mov	r2, r6
 80106e6:	463b      	mov	r3, r7
 80106e8:	e7e6      	b.n	80106b8 <__ieee754_pow+0x1d0>
 80106ea:	4b19      	ldr	r3, [pc, #100]	; (8010750 <__ieee754_pow+0x268>)
 80106ec:	4598      	cmp	r8, r3
 80106ee:	f340 80fb 	ble.w	80108e8 <__ieee754_pow+0x400>
 80106f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80106f6:	4598      	cmp	r8, r3
 80106f8:	4b13      	ldr	r3, [pc, #76]	; (8010748 <__ieee754_pow+0x260>)
 80106fa:	dd0c      	ble.n	8010716 <__ieee754_pow+0x22e>
 80106fc:	429c      	cmp	r4, r3
 80106fe:	dc0f      	bgt.n	8010720 <__ieee754_pow+0x238>
 8010700:	f1b9 0f00 	cmp.w	r9, #0
 8010704:	da0f      	bge.n	8010726 <__ieee754_pow+0x23e>
 8010706:	2000      	movs	r0, #0
 8010708:	b009      	add	sp, #36	; 0x24
 801070a:	ecbd 8b06 	vpop	{d8-d10}
 801070e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010712:	f000 bcc2 	b.w	801109a <__math_oflow>
 8010716:	429c      	cmp	r4, r3
 8010718:	dbf2      	blt.n	8010700 <__ieee754_pow+0x218>
 801071a:	4b0a      	ldr	r3, [pc, #40]	; (8010744 <__ieee754_pow+0x25c>)
 801071c:	429c      	cmp	r4, r3
 801071e:	dd19      	ble.n	8010754 <__ieee754_pow+0x26c>
 8010720:	f1b9 0f00 	cmp.w	r9, #0
 8010724:	dcef      	bgt.n	8010706 <__ieee754_pow+0x21e>
 8010726:	2000      	movs	r0, #0
 8010728:	b009      	add	sp, #36	; 0x24
 801072a:	ecbd 8b06 	vpop	{d8-d10}
 801072e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010732:	f000 bca9 	b.w	8011088 <__math_uflow>
 8010736:	bf00      	nop
 8010738:	fff00000 	.word	0xfff00000
 801073c:	7ff00000 	.word	0x7ff00000
 8010740:	433fffff 	.word	0x433fffff
 8010744:	3ff00000 	.word	0x3ff00000
 8010748:	3fefffff 	.word	0x3fefffff
 801074c:	3fe00000 	.word	0x3fe00000
 8010750:	41e00000 	.word	0x41e00000
 8010754:	4b60      	ldr	r3, [pc, #384]	; (80108d8 <__ieee754_pow+0x3f0>)
 8010756:	2200      	movs	r2, #0
 8010758:	f7ef fd96 	bl	8000288 <__aeabi_dsub>
 801075c:	a354      	add	r3, pc, #336	; (adr r3, 80108b0 <__ieee754_pow+0x3c8>)
 801075e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010762:	4604      	mov	r4, r0
 8010764:	460d      	mov	r5, r1
 8010766:	f7ef ff47 	bl	80005f8 <__aeabi_dmul>
 801076a:	a353      	add	r3, pc, #332	; (adr r3, 80108b8 <__ieee754_pow+0x3d0>)
 801076c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010770:	4606      	mov	r6, r0
 8010772:	460f      	mov	r7, r1
 8010774:	4620      	mov	r0, r4
 8010776:	4629      	mov	r1, r5
 8010778:	f7ef ff3e 	bl	80005f8 <__aeabi_dmul>
 801077c:	4b57      	ldr	r3, [pc, #348]	; (80108dc <__ieee754_pow+0x3f4>)
 801077e:	4682      	mov	sl, r0
 8010780:	468b      	mov	fp, r1
 8010782:	2200      	movs	r2, #0
 8010784:	4620      	mov	r0, r4
 8010786:	4629      	mov	r1, r5
 8010788:	f7ef ff36 	bl	80005f8 <__aeabi_dmul>
 801078c:	4602      	mov	r2, r0
 801078e:	460b      	mov	r3, r1
 8010790:	a14b      	add	r1, pc, #300	; (adr r1, 80108c0 <__ieee754_pow+0x3d8>)
 8010792:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010796:	f7ef fd77 	bl	8000288 <__aeabi_dsub>
 801079a:	4622      	mov	r2, r4
 801079c:	462b      	mov	r3, r5
 801079e:	f7ef ff2b 	bl	80005f8 <__aeabi_dmul>
 80107a2:	4602      	mov	r2, r0
 80107a4:	460b      	mov	r3, r1
 80107a6:	2000      	movs	r0, #0
 80107a8:	494d      	ldr	r1, [pc, #308]	; (80108e0 <__ieee754_pow+0x3f8>)
 80107aa:	f7ef fd6d 	bl	8000288 <__aeabi_dsub>
 80107ae:	4622      	mov	r2, r4
 80107b0:	4680      	mov	r8, r0
 80107b2:	4689      	mov	r9, r1
 80107b4:	462b      	mov	r3, r5
 80107b6:	4620      	mov	r0, r4
 80107b8:	4629      	mov	r1, r5
 80107ba:	f7ef ff1d 	bl	80005f8 <__aeabi_dmul>
 80107be:	4602      	mov	r2, r0
 80107c0:	460b      	mov	r3, r1
 80107c2:	4640      	mov	r0, r8
 80107c4:	4649      	mov	r1, r9
 80107c6:	f7ef ff17 	bl	80005f8 <__aeabi_dmul>
 80107ca:	a33f      	add	r3, pc, #252	; (adr r3, 80108c8 <__ieee754_pow+0x3e0>)
 80107cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d0:	f7ef ff12 	bl	80005f8 <__aeabi_dmul>
 80107d4:	4602      	mov	r2, r0
 80107d6:	460b      	mov	r3, r1
 80107d8:	4650      	mov	r0, sl
 80107da:	4659      	mov	r1, fp
 80107dc:	f7ef fd54 	bl	8000288 <__aeabi_dsub>
 80107e0:	4602      	mov	r2, r0
 80107e2:	460b      	mov	r3, r1
 80107e4:	4680      	mov	r8, r0
 80107e6:	4689      	mov	r9, r1
 80107e8:	4630      	mov	r0, r6
 80107ea:	4639      	mov	r1, r7
 80107ec:	f7ef fd4e 	bl	800028c <__adddf3>
 80107f0:	2000      	movs	r0, #0
 80107f2:	4632      	mov	r2, r6
 80107f4:	463b      	mov	r3, r7
 80107f6:	4604      	mov	r4, r0
 80107f8:	460d      	mov	r5, r1
 80107fa:	f7ef fd45 	bl	8000288 <__aeabi_dsub>
 80107fe:	4602      	mov	r2, r0
 8010800:	460b      	mov	r3, r1
 8010802:	4640      	mov	r0, r8
 8010804:	4649      	mov	r1, r9
 8010806:	f7ef fd3f 	bl	8000288 <__aeabi_dsub>
 801080a:	9b04      	ldr	r3, [sp, #16]
 801080c:	9a06      	ldr	r2, [sp, #24]
 801080e:	3b01      	subs	r3, #1
 8010810:	4313      	orrs	r3, r2
 8010812:	4682      	mov	sl, r0
 8010814:	468b      	mov	fp, r1
 8010816:	f040 81e7 	bne.w	8010be8 <__ieee754_pow+0x700>
 801081a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80108d0 <__ieee754_pow+0x3e8>
 801081e:	eeb0 8a47 	vmov.f32	s16, s14
 8010822:	eef0 8a67 	vmov.f32	s17, s15
 8010826:	e9dd 6700 	ldrd	r6, r7, [sp]
 801082a:	2600      	movs	r6, #0
 801082c:	4632      	mov	r2, r6
 801082e:	463b      	mov	r3, r7
 8010830:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010834:	f7ef fd28 	bl	8000288 <__aeabi_dsub>
 8010838:	4622      	mov	r2, r4
 801083a:	462b      	mov	r3, r5
 801083c:	f7ef fedc 	bl	80005f8 <__aeabi_dmul>
 8010840:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010844:	4680      	mov	r8, r0
 8010846:	4689      	mov	r9, r1
 8010848:	4650      	mov	r0, sl
 801084a:	4659      	mov	r1, fp
 801084c:	f7ef fed4 	bl	80005f8 <__aeabi_dmul>
 8010850:	4602      	mov	r2, r0
 8010852:	460b      	mov	r3, r1
 8010854:	4640      	mov	r0, r8
 8010856:	4649      	mov	r1, r9
 8010858:	f7ef fd18 	bl	800028c <__adddf3>
 801085c:	4632      	mov	r2, r6
 801085e:	463b      	mov	r3, r7
 8010860:	4680      	mov	r8, r0
 8010862:	4689      	mov	r9, r1
 8010864:	4620      	mov	r0, r4
 8010866:	4629      	mov	r1, r5
 8010868:	f7ef fec6 	bl	80005f8 <__aeabi_dmul>
 801086c:	460b      	mov	r3, r1
 801086e:	4604      	mov	r4, r0
 8010870:	460d      	mov	r5, r1
 8010872:	4602      	mov	r2, r0
 8010874:	4649      	mov	r1, r9
 8010876:	4640      	mov	r0, r8
 8010878:	f7ef fd08 	bl	800028c <__adddf3>
 801087c:	4b19      	ldr	r3, [pc, #100]	; (80108e4 <__ieee754_pow+0x3fc>)
 801087e:	4299      	cmp	r1, r3
 8010880:	ec45 4b19 	vmov	d9, r4, r5
 8010884:	4606      	mov	r6, r0
 8010886:	460f      	mov	r7, r1
 8010888:	468b      	mov	fp, r1
 801088a:	f340 82f0 	ble.w	8010e6e <__ieee754_pow+0x986>
 801088e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010892:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010896:	4303      	orrs	r3, r0
 8010898:	f000 81e4 	beq.w	8010c64 <__ieee754_pow+0x77c>
 801089c:	ec51 0b18 	vmov	r0, r1, d8
 80108a0:	2200      	movs	r2, #0
 80108a2:	2300      	movs	r3, #0
 80108a4:	f7f0 f91a 	bl	8000adc <__aeabi_dcmplt>
 80108a8:	3800      	subs	r0, #0
 80108aa:	bf18      	it	ne
 80108ac:	2001      	movne	r0, #1
 80108ae:	e72b      	b.n	8010708 <__ieee754_pow+0x220>
 80108b0:	60000000 	.word	0x60000000
 80108b4:	3ff71547 	.word	0x3ff71547
 80108b8:	f85ddf44 	.word	0xf85ddf44
 80108bc:	3e54ae0b 	.word	0x3e54ae0b
 80108c0:	55555555 	.word	0x55555555
 80108c4:	3fd55555 	.word	0x3fd55555
 80108c8:	652b82fe 	.word	0x652b82fe
 80108cc:	3ff71547 	.word	0x3ff71547
 80108d0:	00000000 	.word	0x00000000
 80108d4:	bff00000 	.word	0xbff00000
 80108d8:	3ff00000 	.word	0x3ff00000
 80108dc:	3fd00000 	.word	0x3fd00000
 80108e0:	3fe00000 	.word	0x3fe00000
 80108e4:	408fffff 	.word	0x408fffff
 80108e8:	4bd5      	ldr	r3, [pc, #852]	; (8010c40 <__ieee754_pow+0x758>)
 80108ea:	402b      	ands	r3, r5
 80108ec:	2200      	movs	r2, #0
 80108ee:	b92b      	cbnz	r3, 80108fc <__ieee754_pow+0x414>
 80108f0:	4bd4      	ldr	r3, [pc, #848]	; (8010c44 <__ieee754_pow+0x75c>)
 80108f2:	f7ef fe81 	bl	80005f8 <__aeabi_dmul>
 80108f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80108fa:	460c      	mov	r4, r1
 80108fc:	1523      	asrs	r3, r4, #20
 80108fe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010902:	4413      	add	r3, r2
 8010904:	9305      	str	r3, [sp, #20]
 8010906:	4bd0      	ldr	r3, [pc, #832]	; (8010c48 <__ieee754_pow+0x760>)
 8010908:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801090c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010910:	429c      	cmp	r4, r3
 8010912:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010916:	dd08      	ble.n	801092a <__ieee754_pow+0x442>
 8010918:	4bcc      	ldr	r3, [pc, #816]	; (8010c4c <__ieee754_pow+0x764>)
 801091a:	429c      	cmp	r4, r3
 801091c:	f340 8162 	ble.w	8010be4 <__ieee754_pow+0x6fc>
 8010920:	9b05      	ldr	r3, [sp, #20]
 8010922:	3301      	adds	r3, #1
 8010924:	9305      	str	r3, [sp, #20]
 8010926:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801092a:	2400      	movs	r4, #0
 801092c:	00e3      	lsls	r3, r4, #3
 801092e:	9307      	str	r3, [sp, #28]
 8010930:	4bc7      	ldr	r3, [pc, #796]	; (8010c50 <__ieee754_pow+0x768>)
 8010932:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010936:	ed93 7b00 	vldr	d7, [r3]
 801093a:	4629      	mov	r1, r5
 801093c:	ec53 2b17 	vmov	r2, r3, d7
 8010940:	eeb0 9a47 	vmov.f32	s18, s14
 8010944:	eef0 9a67 	vmov.f32	s19, s15
 8010948:	4682      	mov	sl, r0
 801094a:	f7ef fc9d 	bl	8000288 <__aeabi_dsub>
 801094e:	4652      	mov	r2, sl
 8010950:	4606      	mov	r6, r0
 8010952:	460f      	mov	r7, r1
 8010954:	462b      	mov	r3, r5
 8010956:	ec51 0b19 	vmov	r0, r1, d9
 801095a:	f7ef fc97 	bl	800028c <__adddf3>
 801095e:	4602      	mov	r2, r0
 8010960:	460b      	mov	r3, r1
 8010962:	2000      	movs	r0, #0
 8010964:	49bb      	ldr	r1, [pc, #748]	; (8010c54 <__ieee754_pow+0x76c>)
 8010966:	f7ef ff71 	bl	800084c <__aeabi_ddiv>
 801096a:	ec41 0b1a 	vmov	d10, r0, r1
 801096e:	4602      	mov	r2, r0
 8010970:	460b      	mov	r3, r1
 8010972:	4630      	mov	r0, r6
 8010974:	4639      	mov	r1, r7
 8010976:	f7ef fe3f 	bl	80005f8 <__aeabi_dmul>
 801097a:	2300      	movs	r3, #0
 801097c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010980:	9302      	str	r3, [sp, #8]
 8010982:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010986:	46ab      	mov	fp, r5
 8010988:	106d      	asrs	r5, r5, #1
 801098a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801098e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010992:	ec41 0b18 	vmov	d8, r0, r1
 8010996:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801099a:	2200      	movs	r2, #0
 801099c:	4640      	mov	r0, r8
 801099e:	4649      	mov	r1, r9
 80109a0:	4614      	mov	r4, r2
 80109a2:	461d      	mov	r5, r3
 80109a4:	f7ef fe28 	bl	80005f8 <__aeabi_dmul>
 80109a8:	4602      	mov	r2, r0
 80109aa:	460b      	mov	r3, r1
 80109ac:	4630      	mov	r0, r6
 80109ae:	4639      	mov	r1, r7
 80109b0:	f7ef fc6a 	bl	8000288 <__aeabi_dsub>
 80109b4:	ec53 2b19 	vmov	r2, r3, d9
 80109b8:	4606      	mov	r6, r0
 80109ba:	460f      	mov	r7, r1
 80109bc:	4620      	mov	r0, r4
 80109be:	4629      	mov	r1, r5
 80109c0:	f7ef fc62 	bl	8000288 <__aeabi_dsub>
 80109c4:	4602      	mov	r2, r0
 80109c6:	460b      	mov	r3, r1
 80109c8:	4650      	mov	r0, sl
 80109ca:	4659      	mov	r1, fp
 80109cc:	f7ef fc5c 	bl	8000288 <__aeabi_dsub>
 80109d0:	4642      	mov	r2, r8
 80109d2:	464b      	mov	r3, r9
 80109d4:	f7ef fe10 	bl	80005f8 <__aeabi_dmul>
 80109d8:	4602      	mov	r2, r0
 80109da:	460b      	mov	r3, r1
 80109dc:	4630      	mov	r0, r6
 80109de:	4639      	mov	r1, r7
 80109e0:	f7ef fc52 	bl	8000288 <__aeabi_dsub>
 80109e4:	ec53 2b1a 	vmov	r2, r3, d10
 80109e8:	f7ef fe06 	bl	80005f8 <__aeabi_dmul>
 80109ec:	ec53 2b18 	vmov	r2, r3, d8
 80109f0:	ec41 0b19 	vmov	d9, r0, r1
 80109f4:	ec51 0b18 	vmov	r0, r1, d8
 80109f8:	f7ef fdfe 	bl	80005f8 <__aeabi_dmul>
 80109fc:	a37c      	add	r3, pc, #496	; (adr r3, 8010bf0 <__ieee754_pow+0x708>)
 80109fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a02:	4604      	mov	r4, r0
 8010a04:	460d      	mov	r5, r1
 8010a06:	f7ef fdf7 	bl	80005f8 <__aeabi_dmul>
 8010a0a:	a37b      	add	r3, pc, #492	; (adr r3, 8010bf8 <__ieee754_pow+0x710>)
 8010a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a10:	f7ef fc3c 	bl	800028c <__adddf3>
 8010a14:	4622      	mov	r2, r4
 8010a16:	462b      	mov	r3, r5
 8010a18:	f7ef fdee 	bl	80005f8 <__aeabi_dmul>
 8010a1c:	a378      	add	r3, pc, #480	; (adr r3, 8010c00 <__ieee754_pow+0x718>)
 8010a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a22:	f7ef fc33 	bl	800028c <__adddf3>
 8010a26:	4622      	mov	r2, r4
 8010a28:	462b      	mov	r3, r5
 8010a2a:	f7ef fde5 	bl	80005f8 <__aeabi_dmul>
 8010a2e:	a376      	add	r3, pc, #472	; (adr r3, 8010c08 <__ieee754_pow+0x720>)
 8010a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a34:	f7ef fc2a 	bl	800028c <__adddf3>
 8010a38:	4622      	mov	r2, r4
 8010a3a:	462b      	mov	r3, r5
 8010a3c:	f7ef fddc 	bl	80005f8 <__aeabi_dmul>
 8010a40:	a373      	add	r3, pc, #460	; (adr r3, 8010c10 <__ieee754_pow+0x728>)
 8010a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a46:	f7ef fc21 	bl	800028c <__adddf3>
 8010a4a:	4622      	mov	r2, r4
 8010a4c:	462b      	mov	r3, r5
 8010a4e:	f7ef fdd3 	bl	80005f8 <__aeabi_dmul>
 8010a52:	a371      	add	r3, pc, #452	; (adr r3, 8010c18 <__ieee754_pow+0x730>)
 8010a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a58:	f7ef fc18 	bl	800028c <__adddf3>
 8010a5c:	4622      	mov	r2, r4
 8010a5e:	4606      	mov	r6, r0
 8010a60:	460f      	mov	r7, r1
 8010a62:	462b      	mov	r3, r5
 8010a64:	4620      	mov	r0, r4
 8010a66:	4629      	mov	r1, r5
 8010a68:	f7ef fdc6 	bl	80005f8 <__aeabi_dmul>
 8010a6c:	4602      	mov	r2, r0
 8010a6e:	460b      	mov	r3, r1
 8010a70:	4630      	mov	r0, r6
 8010a72:	4639      	mov	r1, r7
 8010a74:	f7ef fdc0 	bl	80005f8 <__aeabi_dmul>
 8010a78:	4642      	mov	r2, r8
 8010a7a:	4604      	mov	r4, r0
 8010a7c:	460d      	mov	r5, r1
 8010a7e:	464b      	mov	r3, r9
 8010a80:	ec51 0b18 	vmov	r0, r1, d8
 8010a84:	f7ef fc02 	bl	800028c <__adddf3>
 8010a88:	ec53 2b19 	vmov	r2, r3, d9
 8010a8c:	f7ef fdb4 	bl	80005f8 <__aeabi_dmul>
 8010a90:	4622      	mov	r2, r4
 8010a92:	462b      	mov	r3, r5
 8010a94:	f7ef fbfa 	bl	800028c <__adddf3>
 8010a98:	4642      	mov	r2, r8
 8010a9a:	4682      	mov	sl, r0
 8010a9c:	468b      	mov	fp, r1
 8010a9e:	464b      	mov	r3, r9
 8010aa0:	4640      	mov	r0, r8
 8010aa2:	4649      	mov	r1, r9
 8010aa4:	f7ef fda8 	bl	80005f8 <__aeabi_dmul>
 8010aa8:	4b6b      	ldr	r3, [pc, #428]	; (8010c58 <__ieee754_pow+0x770>)
 8010aaa:	2200      	movs	r2, #0
 8010aac:	4606      	mov	r6, r0
 8010aae:	460f      	mov	r7, r1
 8010ab0:	f7ef fbec 	bl	800028c <__adddf3>
 8010ab4:	4652      	mov	r2, sl
 8010ab6:	465b      	mov	r3, fp
 8010ab8:	f7ef fbe8 	bl	800028c <__adddf3>
 8010abc:	2000      	movs	r0, #0
 8010abe:	4604      	mov	r4, r0
 8010ac0:	460d      	mov	r5, r1
 8010ac2:	4602      	mov	r2, r0
 8010ac4:	460b      	mov	r3, r1
 8010ac6:	4640      	mov	r0, r8
 8010ac8:	4649      	mov	r1, r9
 8010aca:	f7ef fd95 	bl	80005f8 <__aeabi_dmul>
 8010ace:	4b62      	ldr	r3, [pc, #392]	; (8010c58 <__ieee754_pow+0x770>)
 8010ad0:	4680      	mov	r8, r0
 8010ad2:	4689      	mov	r9, r1
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	4629      	mov	r1, r5
 8010ada:	f7ef fbd5 	bl	8000288 <__aeabi_dsub>
 8010ade:	4632      	mov	r2, r6
 8010ae0:	463b      	mov	r3, r7
 8010ae2:	f7ef fbd1 	bl	8000288 <__aeabi_dsub>
 8010ae6:	4602      	mov	r2, r0
 8010ae8:	460b      	mov	r3, r1
 8010aea:	4650      	mov	r0, sl
 8010aec:	4659      	mov	r1, fp
 8010aee:	f7ef fbcb 	bl	8000288 <__aeabi_dsub>
 8010af2:	ec53 2b18 	vmov	r2, r3, d8
 8010af6:	f7ef fd7f 	bl	80005f8 <__aeabi_dmul>
 8010afa:	4622      	mov	r2, r4
 8010afc:	4606      	mov	r6, r0
 8010afe:	460f      	mov	r7, r1
 8010b00:	462b      	mov	r3, r5
 8010b02:	ec51 0b19 	vmov	r0, r1, d9
 8010b06:	f7ef fd77 	bl	80005f8 <__aeabi_dmul>
 8010b0a:	4602      	mov	r2, r0
 8010b0c:	460b      	mov	r3, r1
 8010b0e:	4630      	mov	r0, r6
 8010b10:	4639      	mov	r1, r7
 8010b12:	f7ef fbbb 	bl	800028c <__adddf3>
 8010b16:	4606      	mov	r6, r0
 8010b18:	460f      	mov	r7, r1
 8010b1a:	4602      	mov	r2, r0
 8010b1c:	460b      	mov	r3, r1
 8010b1e:	4640      	mov	r0, r8
 8010b20:	4649      	mov	r1, r9
 8010b22:	f7ef fbb3 	bl	800028c <__adddf3>
 8010b26:	a33e      	add	r3, pc, #248	; (adr r3, 8010c20 <__ieee754_pow+0x738>)
 8010b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b2c:	2000      	movs	r0, #0
 8010b2e:	4604      	mov	r4, r0
 8010b30:	460d      	mov	r5, r1
 8010b32:	f7ef fd61 	bl	80005f8 <__aeabi_dmul>
 8010b36:	4642      	mov	r2, r8
 8010b38:	ec41 0b18 	vmov	d8, r0, r1
 8010b3c:	464b      	mov	r3, r9
 8010b3e:	4620      	mov	r0, r4
 8010b40:	4629      	mov	r1, r5
 8010b42:	f7ef fba1 	bl	8000288 <__aeabi_dsub>
 8010b46:	4602      	mov	r2, r0
 8010b48:	460b      	mov	r3, r1
 8010b4a:	4630      	mov	r0, r6
 8010b4c:	4639      	mov	r1, r7
 8010b4e:	f7ef fb9b 	bl	8000288 <__aeabi_dsub>
 8010b52:	a335      	add	r3, pc, #212	; (adr r3, 8010c28 <__ieee754_pow+0x740>)
 8010b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b58:	f7ef fd4e 	bl	80005f8 <__aeabi_dmul>
 8010b5c:	a334      	add	r3, pc, #208	; (adr r3, 8010c30 <__ieee754_pow+0x748>)
 8010b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b62:	4606      	mov	r6, r0
 8010b64:	460f      	mov	r7, r1
 8010b66:	4620      	mov	r0, r4
 8010b68:	4629      	mov	r1, r5
 8010b6a:	f7ef fd45 	bl	80005f8 <__aeabi_dmul>
 8010b6e:	4602      	mov	r2, r0
 8010b70:	460b      	mov	r3, r1
 8010b72:	4630      	mov	r0, r6
 8010b74:	4639      	mov	r1, r7
 8010b76:	f7ef fb89 	bl	800028c <__adddf3>
 8010b7a:	9a07      	ldr	r2, [sp, #28]
 8010b7c:	4b37      	ldr	r3, [pc, #220]	; (8010c5c <__ieee754_pow+0x774>)
 8010b7e:	4413      	add	r3, r2
 8010b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b84:	f7ef fb82 	bl	800028c <__adddf3>
 8010b88:	4682      	mov	sl, r0
 8010b8a:	9805      	ldr	r0, [sp, #20]
 8010b8c:	468b      	mov	fp, r1
 8010b8e:	f7ef fcc9 	bl	8000524 <__aeabi_i2d>
 8010b92:	9a07      	ldr	r2, [sp, #28]
 8010b94:	4b32      	ldr	r3, [pc, #200]	; (8010c60 <__ieee754_pow+0x778>)
 8010b96:	4413      	add	r3, r2
 8010b98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010b9c:	4606      	mov	r6, r0
 8010b9e:	460f      	mov	r7, r1
 8010ba0:	4652      	mov	r2, sl
 8010ba2:	465b      	mov	r3, fp
 8010ba4:	ec51 0b18 	vmov	r0, r1, d8
 8010ba8:	f7ef fb70 	bl	800028c <__adddf3>
 8010bac:	4642      	mov	r2, r8
 8010bae:	464b      	mov	r3, r9
 8010bb0:	f7ef fb6c 	bl	800028c <__adddf3>
 8010bb4:	4632      	mov	r2, r6
 8010bb6:	463b      	mov	r3, r7
 8010bb8:	f7ef fb68 	bl	800028c <__adddf3>
 8010bbc:	2000      	movs	r0, #0
 8010bbe:	4632      	mov	r2, r6
 8010bc0:	463b      	mov	r3, r7
 8010bc2:	4604      	mov	r4, r0
 8010bc4:	460d      	mov	r5, r1
 8010bc6:	f7ef fb5f 	bl	8000288 <__aeabi_dsub>
 8010bca:	4642      	mov	r2, r8
 8010bcc:	464b      	mov	r3, r9
 8010bce:	f7ef fb5b 	bl	8000288 <__aeabi_dsub>
 8010bd2:	ec53 2b18 	vmov	r2, r3, d8
 8010bd6:	f7ef fb57 	bl	8000288 <__aeabi_dsub>
 8010bda:	4602      	mov	r2, r0
 8010bdc:	460b      	mov	r3, r1
 8010bde:	4650      	mov	r0, sl
 8010be0:	4659      	mov	r1, fp
 8010be2:	e610      	b.n	8010806 <__ieee754_pow+0x31e>
 8010be4:	2401      	movs	r4, #1
 8010be6:	e6a1      	b.n	801092c <__ieee754_pow+0x444>
 8010be8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010c38 <__ieee754_pow+0x750>
 8010bec:	e617      	b.n	801081e <__ieee754_pow+0x336>
 8010bee:	bf00      	nop
 8010bf0:	4a454eef 	.word	0x4a454eef
 8010bf4:	3fca7e28 	.word	0x3fca7e28
 8010bf8:	93c9db65 	.word	0x93c9db65
 8010bfc:	3fcd864a 	.word	0x3fcd864a
 8010c00:	a91d4101 	.word	0xa91d4101
 8010c04:	3fd17460 	.word	0x3fd17460
 8010c08:	518f264d 	.word	0x518f264d
 8010c0c:	3fd55555 	.word	0x3fd55555
 8010c10:	db6fabff 	.word	0xdb6fabff
 8010c14:	3fdb6db6 	.word	0x3fdb6db6
 8010c18:	33333303 	.word	0x33333303
 8010c1c:	3fe33333 	.word	0x3fe33333
 8010c20:	e0000000 	.word	0xe0000000
 8010c24:	3feec709 	.word	0x3feec709
 8010c28:	dc3a03fd 	.word	0xdc3a03fd
 8010c2c:	3feec709 	.word	0x3feec709
 8010c30:	145b01f5 	.word	0x145b01f5
 8010c34:	be3e2fe0 	.word	0xbe3e2fe0
 8010c38:	00000000 	.word	0x00000000
 8010c3c:	3ff00000 	.word	0x3ff00000
 8010c40:	7ff00000 	.word	0x7ff00000
 8010c44:	43400000 	.word	0x43400000
 8010c48:	0003988e 	.word	0x0003988e
 8010c4c:	000bb679 	.word	0x000bb679
 8010c50:	080119f0 	.word	0x080119f0
 8010c54:	3ff00000 	.word	0x3ff00000
 8010c58:	40080000 	.word	0x40080000
 8010c5c:	08011a10 	.word	0x08011a10
 8010c60:	08011a00 	.word	0x08011a00
 8010c64:	a3b3      	add	r3, pc, #716	; (adr r3, 8010f34 <__ieee754_pow+0xa4c>)
 8010c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c6a:	4640      	mov	r0, r8
 8010c6c:	4649      	mov	r1, r9
 8010c6e:	f7ef fb0d 	bl	800028c <__adddf3>
 8010c72:	4622      	mov	r2, r4
 8010c74:	ec41 0b1a 	vmov	d10, r0, r1
 8010c78:	462b      	mov	r3, r5
 8010c7a:	4630      	mov	r0, r6
 8010c7c:	4639      	mov	r1, r7
 8010c7e:	f7ef fb03 	bl	8000288 <__aeabi_dsub>
 8010c82:	4602      	mov	r2, r0
 8010c84:	460b      	mov	r3, r1
 8010c86:	ec51 0b1a 	vmov	r0, r1, d10
 8010c8a:	f7ef ff45 	bl	8000b18 <__aeabi_dcmpgt>
 8010c8e:	2800      	cmp	r0, #0
 8010c90:	f47f ae04 	bne.w	801089c <__ieee754_pow+0x3b4>
 8010c94:	4aa2      	ldr	r2, [pc, #648]	; (8010f20 <__ieee754_pow+0xa38>)
 8010c96:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010c9a:	4293      	cmp	r3, r2
 8010c9c:	f340 8107 	ble.w	8010eae <__ieee754_pow+0x9c6>
 8010ca0:	151b      	asrs	r3, r3, #20
 8010ca2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010ca6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010caa:	fa4a fa03 	asr.w	sl, sl, r3
 8010cae:	44da      	add	sl, fp
 8010cb0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010cb4:	489b      	ldr	r0, [pc, #620]	; (8010f24 <__ieee754_pow+0xa3c>)
 8010cb6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010cba:	4108      	asrs	r0, r1
 8010cbc:	ea00 030a 	and.w	r3, r0, sl
 8010cc0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010cc4:	f1c1 0114 	rsb	r1, r1, #20
 8010cc8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010ccc:	fa4a fa01 	asr.w	sl, sl, r1
 8010cd0:	f1bb 0f00 	cmp.w	fp, #0
 8010cd4:	f04f 0200 	mov.w	r2, #0
 8010cd8:	4620      	mov	r0, r4
 8010cda:	4629      	mov	r1, r5
 8010cdc:	bfb8      	it	lt
 8010cde:	f1ca 0a00 	rsblt	sl, sl, #0
 8010ce2:	f7ef fad1 	bl	8000288 <__aeabi_dsub>
 8010ce6:	ec41 0b19 	vmov	d9, r0, r1
 8010cea:	4642      	mov	r2, r8
 8010cec:	464b      	mov	r3, r9
 8010cee:	ec51 0b19 	vmov	r0, r1, d9
 8010cf2:	f7ef facb 	bl	800028c <__adddf3>
 8010cf6:	a37a      	add	r3, pc, #488	; (adr r3, 8010ee0 <__ieee754_pow+0x9f8>)
 8010cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cfc:	2000      	movs	r0, #0
 8010cfe:	4604      	mov	r4, r0
 8010d00:	460d      	mov	r5, r1
 8010d02:	f7ef fc79 	bl	80005f8 <__aeabi_dmul>
 8010d06:	ec53 2b19 	vmov	r2, r3, d9
 8010d0a:	4606      	mov	r6, r0
 8010d0c:	460f      	mov	r7, r1
 8010d0e:	4620      	mov	r0, r4
 8010d10:	4629      	mov	r1, r5
 8010d12:	f7ef fab9 	bl	8000288 <__aeabi_dsub>
 8010d16:	4602      	mov	r2, r0
 8010d18:	460b      	mov	r3, r1
 8010d1a:	4640      	mov	r0, r8
 8010d1c:	4649      	mov	r1, r9
 8010d1e:	f7ef fab3 	bl	8000288 <__aeabi_dsub>
 8010d22:	a371      	add	r3, pc, #452	; (adr r3, 8010ee8 <__ieee754_pow+0xa00>)
 8010d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d28:	f7ef fc66 	bl	80005f8 <__aeabi_dmul>
 8010d2c:	a370      	add	r3, pc, #448	; (adr r3, 8010ef0 <__ieee754_pow+0xa08>)
 8010d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d32:	4680      	mov	r8, r0
 8010d34:	4689      	mov	r9, r1
 8010d36:	4620      	mov	r0, r4
 8010d38:	4629      	mov	r1, r5
 8010d3a:	f7ef fc5d 	bl	80005f8 <__aeabi_dmul>
 8010d3e:	4602      	mov	r2, r0
 8010d40:	460b      	mov	r3, r1
 8010d42:	4640      	mov	r0, r8
 8010d44:	4649      	mov	r1, r9
 8010d46:	f7ef faa1 	bl	800028c <__adddf3>
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	460d      	mov	r5, r1
 8010d4e:	4602      	mov	r2, r0
 8010d50:	460b      	mov	r3, r1
 8010d52:	4630      	mov	r0, r6
 8010d54:	4639      	mov	r1, r7
 8010d56:	f7ef fa99 	bl	800028c <__adddf3>
 8010d5a:	4632      	mov	r2, r6
 8010d5c:	463b      	mov	r3, r7
 8010d5e:	4680      	mov	r8, r0
 8010d60:	4689      	mov	r9, r1
 8010d62:	f7ef fa91 	bl	8000288 <__aeabi_dsub>
 8010d66:	4602      	mov	r2, r0
 8010d68:	460b      	mov	r3, r1
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	4629      	mov	r1, r5
 8010d6e:	f7ef fa8b 	bl	8000288 <__aeabi_dsub>
 8010d72:	4642      	mov	r2, r8
 8010d74:	4606      	mov	r6, r0
 8010d76:	460f      	mov	r7, r1
 8010d78:	464b      	mov	r3, r9
 8010d7a:	4640      	mov	r0, r8
 8010d7c:	4649      	mov	r1, r9
 8010d7e:	f7ef fc3b 	bl	80005f8 <__aeabi_dmul>
 8010d82:	a35d      	add	r3, pc, #372	; (adr r3, 8010ef8 <__ieee754_pow+0xa10>)
 8010d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d88:	4604      	mov	r4, r0
 8010d8a:	460d      	mov	r5, r1
 8010d8c:	f7ef fc34 	bl	80005f8 <__aeabi_dmul>
 8010d90:	a35b      	add	r3, pc, #364	; (adr r3, 8010f00 <__ieee754_pow+0xa18>)
 8010d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d96:	f7ef fa77 	bl	8000288 <__aeabi_dsub>
 8010d9a:	4622      	mov	r2, r4
 8010d9c:	462b      	mov	r3, r5
 8010d9e:	f7ef fc2b 	bl	80005f8 <__aeabi_dmul>
 8010da2:	a359      	add	r3, pc, #356	; (adr r3, 8010f08 <__ieee754_pow+0xa20>)
 8010da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da8:	f7ef fa70 	bl	800028c <__adddf3>
 8010dac:	4622      	mov	r2, r4
 8010dae:	462b      	mov	r3, r5
 8010db0:	f7ef fc22 	bl	80005f8 <__aeabi_dmul>
 8010db4:	a356      	add	r3, pc, #344	; (adr r3, 8010f10 <__ieee754_pow+0xa28>)
 8010db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dba:	f7ef fa65 	bl	8000288 <__aeabi_dsub>
 8010dbe:	4622      	mov	r2, r4
 8010dc0:	462b      	mov	r3, r5
 8010dc2:	f7ef fc19 	bl	80005f8 <__aeabi_dmul>
 8010dc6:	a354      	add	r3, pc, #336	; (adr r3, 8010f18 <__ieee754_pow+0xa30>)
 8010dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dcc:	f7ef fa5e 	bl	800028c <__adddf3>
 8010dd0:	4622      	mov	r2, r4
 8010dd2:	462b      	mov	r3, r5
 8010dd4:	f7ef fc10 	bl	80005f8 <__aeabi_dmul>
 8010dd8:	4602      	mov	r2, r0
 8010dda:	460b      	mov	r3, r1
 8010ddc:	4640      	mov	r0, r8
 8010dde:	4649      	mov	r1, r9
 8010de0:	f7ef fa52 	bl	8000288 <__aeabi_dsub>
 8010de4:	4604      	mov	r4, r0
 8010de6:	460d      	mov	r5, r1
 8010de8:	4602      	mov	r2, r0
 8010dea:	460b      	mov	r3, r1
 8010dec:	4640      	mov	r0, r8
 8010dee:	4649      	mov	r1, r9
 8010df0:	f7ef fc02 	bl	80005f8 <__aeabi_dmul>
 8010df4:	2200      	movs	r2, #0
 8010df6:	ec41 0b19 	vmov	d9, r0, r1
 8010dfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010dfe:	4620      	mov	r0, r4
 8010e00:	4629      	mov	r1, r5
 8010e02:	f7ef fa41 	bl	8000288 <__aeabi_dsub>
 8010e06:	4602      	mov	r2, r0
 8010e08:	460b      	mov	r3, r1
 8010e0a:	ec51 0b19 	vmov	r0, r1, d9
 8010e0e:	f7ef fd1d 	bl	800084c <__aeabi_ddiv>
 8010e12:	4632      	mov	r2, r6
 8010e14:	4604      	mov	r4, r0
 8010e16:	460d      	mov	r5, r1
 8010e18:	463b      	mov	r3, r7
 8010e1a:	4640      	mov	r0, r8
 8010e1c:	4649      	mov	r1, r9
 8010e1e:	f7ef fbeb 	bl	80005f8 <__aeabi_dmul>
 8010e22:	4632      	mov	r2, r6
 8010e24:	463b      	mov	r3, r7
 8010e26:	f7ef fa31 	bl	800028c <__adddf3>
 8010e2a:	4602      	mov	r2, r0
 8010e2c:	460b      	mov	r3, r1
 8010e2e:	4620      	mov	r0, r4
 8010e30:	4629      	mov	r1, r5
 8010e32:	f7ef fa29 	bl	8000288 <__aeabi_dsub>
 8010e36:	4642      	mov	r2, r8
 8010e38:	464b      	mov	r3, r9
 8010e3a:	f7ef fa25 	bl	8000288 <__aeabi_dsub>
 8010e3e:	460b      	mov	r3, r1
 8010e40:	4602      	mov	r2, r0
 8010e42:	4939      	ldr	r1, [pc, #228]	; (8010f28 <__ieee754_pow+0xa40>)
 8010e44:	2000      	movs	r0, #0
 8010e46:	f7ef fa1f 	bl	8000288 <__aeabi_dsub>
 8010e4a:	ec41 0b10 	vmov	d0, r0, r1
 8010e4e:	ee10 3a90 	vmov	r3, s1
 8010e52:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010e5a:	da2b      	bge.n	8010eb4 <__ieee754_pow+0x9cc>
 8010e5c:	4650      	mov	r0, sl
 8010e5e:	f000 f877 	bl	8010f50 <scalbn>
 8010e62:	ec51 0b10 	vmov	r0, r1, d0
 8010e66:	ec53 2b18 	vmov	r2, r3, d8
 8010e6a:	f7ff bbee 	b.w	801064a <__ieee754_pow+0x162>
 8010e6e:	4b2f      	ldr	r3, [pc, #188]	; (8010f2c <__ieee754_pow+0xa44>)
 8010e70:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010e74:	429e      	cmp	r6, r3
 8010e76:	f77f af0d 	ble.w	8010c94 <__ieee754_pow+0x7ac>
 8010e7a:	4b2d      	ldr	r3, [pc, #180]	; (8010f30 <__ieee754_pow+0xa48>)
 8010e7c:	440b      	add	r3, r1
 8010e7e:	4303      	orrs	r3, r0
 8010e80:	d009      	beq.n	8010e96 <__ieee754_pow+0x9ae>
 8010e82:	ec51 0b18 	vmov	r0, r1, d8
 8010e86:	2200      	movs	r2, #0
 8010e88:	2300      	movs	r3, #0
 8010e8a:	f7ef fe27 	bl	8000adc <__aeabi_dcmplt>
 8010e8e:	3800      	subs	r0, #0
 8010e90:	bf18      	it	ne
 8010e92:	2001      	movne	r0, #1
 8010e94:	e448      	b.n	8010728 <__ieee754_pow+0x240>
 8010e96:	4622      	mov	r2, r4
 8010e98:	462b      	mov	r3, r5
 8010e9a:	f7ef f9f5 	bl	8000288 <__aeabi_dsub>
 8010e9e:	4642      	mov	r2, r8
 8010ea0:	464b      	mov	r3, r9
 8010ea2:	f7ef fe2f 	bl	8000b04 <__aeabi_dcmpge>
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	f43f aef4 	beq.w	8010c94 <__ieee754_pow+0x7ac>
 8010eac:	e7e9      	b.n	8010e82 <__ieee754_pow+0x99a>
 8010eae:	f04f 0a00 	mov.w	sl, #0
 8010eb2:	e71a      	b.n	8010cea <__ieee754_pow+0x802>
 8010eb4:	ec51 0b10 	vmov	r0, r1, d0
 8010eb8:	4619      	mov	r1, r3
 8010eba:	e7d4      	b.n	8010e66 <__ieee754_pow+0x97e>
 8010ebc:	491a      	ldr	r1, [pc, #104]	; (8010f28 <__ieee754_pow+0xa40>)
 8010ebe:	2000      	movs	r0, #0
 8010ec0:	f7ff bb31 	b.w	8010526 <__ieee754_pow+0x3e>
 8010ec4:	2000      	movs	r0, #0
 8010ec6:	2100      	movs	r1, #0
 8010ec8:	f7ff bb2d 	b.w	8010526 <__ieee754_pow+0x3e>
 8010ecc:	4630      	mov	r0, r6
 8010ece:	4639      	mov	r1, r7
 8010ed0:	f7ff bb29 	b.w	8010526 <__ieee754_pow+0x3e>
 8010ed4:	9204      	str	r2, [sp, #16]
 8010ed6:	f7ff bb7b 	b.w	80105d0 <__ieee754_pow+0xe8>
 8010eda:	2300      	movs	r3, #0
 8010edc:	f7ff bb65 	b.w	80105aa <__ieee754_pow+0xc2>
 8010ee0:	00000000 	.word	0x00000000
 8010ee4:	3fe62e43 	.word	0x3fe62e43
 8010ee8:	fefa39ef 	.word	0xfefa39ef
 8010eec:	3fe62e42 	.word	0x3fe62e42
 8010ef0:	0ca86c39 	.word	0x0ca86c39
 8010ef4:	be205c61 	.word	0xbe205c61
 8010ef8:	72bea4d0 	.word	0x72bea4d0
 8010efc:	3e663769 	.word	0x3e663769
 8010f00:	c5d26bf1 	.word	0xc5d26bf1
 8010f04:	3ebbbd41 	.word	0x3ebbbd41
 8010f08:	af25de2c 	.word	0xaf25de2c
 8010f0c:	3f11566a 	.word	0x3f11566a
 8010f10:	16bebd93 	.word	0x16bebd93
 8010f14:	3f66c16c 	.word	0x3f66c16c
 8010f18:	5555553e 	.word	0x5555553e
 8010f1c:	3fc55555 	.word	0x3fc55555
 8010f20:	3fe00000 	.word	0x3fe00000
 8010f24:	fff00000 	.word	0xfff00000
 8010f28:	3ff00000 	.word	0x3ff00000
 8010f2c:	4090cbff 	.word	0x4090cbff
 8010f30:	3f6f3400 	.word	0x3f6f3400
 8010f34:	652b82fe 	.word	0x652b82fe
 8010f38:	3c971547 	.word	0x3c971547

08010f3c <fabs>:
 8010f3c:	ec51 0b10 	vmov	r0, r1, d0
 8010f40:	ee10 2a10 	vmov	r2, s0
 8010f44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010f48:	ec43 2b10 	vmov	d0, r2, r3
 8010f4c:	4770      	bx	lr
	...

08010f50 <scalbn>:
 8010f50:	b570      	push	{r4, r5, r6, lr}
 8010f52:	ec55 4b10 	vmov	r4, r5, d0
 8010f56:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010f5a:	4606      	mov	r6, r0
 8010f5c:	462b      	mov	r3, r5
 8010f5e:	b999      	cbnz	r1, 8010f88 <scalbn+0x38>
 8010f60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010f64:	4323      	orrs	r3, r4
 8010f66:	d03f      	beq.n	8010fe8 <scalbn+0x98>
 8010f68:	4b35      	ldr	r3, [pc, #212]	; (8011040 <scalbn+0xf0>)
 8010f6a:	4629      	mov	r1, r5
 8010f6c:	ee10 0a10 	vmov	r0, s0
 8010f70:	2200      	movs	r2, #0
 8010f72:	f7ef fb41 	bl	80005f8 <__aeabi_dmul>
 8010f76:	4b33      	ldr	r3, [pc, #204]	; (8011044 <scalbn+0xf4>)
 8010f78:	429e      	cmp	r6, r3
 8010f7a:	4604      	mov	r4, r0
 8010f7c:	460d      	mov	r5, r1
 8010f7e:	da10      	bge.n	8010fa2 <scalbn+0x52>
 8010f80:	a327      	add	r3, pc, #156	; (adr r3, 8011020 <scalbn+0xd0>)
 8010f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f86:	e01f      	b.n	8010fc8 <scalbn+0x78>
 8010f88:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010f8c:	4291      	cmp	r1, r2
 8010f8e:	d10c      	bne.n	8010faa <scalbn+0x5a>
 8010f90:	ee10 2a10 	vmov	r2, s0
 8010f94:	4620      	mov	r0, r4
 8010f96:	4629      	mov	r1, r5
 8010f98:	f7ef f978 	bl	800028c <__adddf3>
 8010f9c:	4604      	mov	r4, r0
 8010f9e:	460d      	mov	r5, r1
 8010fa0:	e022      	b.n	8010fe8 <scalbn+0x98>
 8010fa2:	460b      	mov	r3, r1
 8010fa4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010fa8:	3936      	subs	r1, #54	; 0x36
 8010faa:	f24c 3250 	movw	r2, #50000	; 0xc350
 8010fae:	4296      	cmp	r6, r2
 8010fb0:	dd0d      	ble.n	8010fce <scalbn+0x7e>
 8010fb2:	2d00      	cmp	r5, #0
 8010fb4:	a11c      	add	r1, pc, #112	; (adr r1, 8011028 <scalbn+0xd8>)
 8010fb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fba:	da02      	bge.n	8010fc2 <scalbn+0x72>
 8010fbc:	a11c      	add	r1, pc, #112	; (adr r1, 8011030 <scalbn+0xe0>)
 8010fbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fc2:	a319      	add	r3, pc, #100	; (adr r3, 8011028 <scalbn+0xd8>)
 8010fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc8:	f7ef fb16 	bl	80005f8 <__aeabi_dmul>
 8010fcc:	e7e6      	b.n	8010f9c <scalbn+0x4c>
 8010fce:	1872      	adds	r2, r6, r1
 8010fd0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010fd4:	428a      	cmp	r2, r1
 8010fd6:	dcec      	bgt.n	8010fb2 <scalbn+0x62>
 8010fd8:	2a00      	cmp	r2, #0
 8010fda:	dd08      	ble.n	8010fee <scalbn+0x9e>
 8010fdc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010fe0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010fe4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010fe8:	ec45 4b10 	vmov	d0, r4, r5
 8010fec:	bd70      	pop	{r4, r5, r6, pc}
 8010fee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010ff2:	da08      	bge.n	8011006 <scalbn+0xb6>
 8010ff4:	2d00      	cmp	r5, #0
 8010ff6:	a10a      	add	r1, pc, #40	; (adr r1, 8011020 <scalbn+0xd0>)
 8010ff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ffc:	dac0      	bge.n	8010f80 <scalbn+0x30>
 8010ffe:	a10e      	add	r1, pc, #56	; (adr r1, 8011038 <scalbn+0xe8>)
 8011000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011004:	e7bc      	b.n	8010f80 <scalbn+0x30>
 8011006:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801100a:	3236      	adds	r2, #54	; 0x36
 801100c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011010:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011014:	4620      	mov	r0, r4
 8011016:	4b0c      	ldr	r3, [pc, #48]	; (8011048 <scalbn+0xf8>)
 8011018:	2200      	movs	r2, #0
 801101a:	e7d5      	b.n	8010fc8 <scalbn+0x78>
 801101c:	f3af 8000 	nop.w
 8011020:	c2f8f359 	.word	0xc2f8f359
 8011024:	01a56e1f 	.word	0x01a56e1f
 8011028:	8800759c 	.word	0x8800759c
 801102c:	7e37e43c 	.word	0x7e37e43c
 8011030:	8800759c 	.word	0x8800759c
 8011034:	fe37e43c 	.word	0xfe37e43c
 8011038:	c2f8f359 	.word	0xc2f8f359
 801103c:	81a56e1f 	.word	0x81a56e1f
 8011040:	43500000 	.word	0x43500000
 8011044:	ffff3cb0 	.word	0xffff3cb0
 8011048:	3c900000 	.word	0x3c900000

0801104c <with_errno>:
 801104c:	b570      	push	{r4, r5, r6, lr}
 801104e:	4604      	mov	r4, r0
 8011050:	460d      	mov	r5, r1
 8011052:	4616      	mov	r6, r2
 8011054:	f7fd f9d2 	bl	800e3fc <__errno>
 8011058:	4629      	mov	r1, r5
 801105a:	6006      	str	r6, [r0, #0]
 801105c:	4620      	mov	r0, r4
 801105e:	bd70      	pop	{r4, r5, r6, pc}

08011060 <xflow>:
 8011060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011062:	4614      	mov	r4, r2
 8011064:	461d      	mov	r5, r3
 8011066:	b108      	cbz	r0, 801106c <xflow+0xc>
 8011068:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801106c:	e9cd 2300 	strd	r2, r3, [sp]
 8011070:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011074:	4620      	mov	r0, r4
 8011076:	4629      	mov	r1, r5
 8011078:	f7ef fabe 	bl	80005f8 <__aeabi_dmul>
 801107c:	2222      	movs	r2, #34	; 0x22
 801107e:	b003      	add	sp, #12
 8011080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011084:	f7ff bfe2 	b.w	801104c <with_errno>

08011088 <__math_uflow>:
 8011088:	b508      	push	{r3, lr}
 801108a:	2200      	movs	r2, #0
 801108c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011090:	f7ff ffe6 	bl	8011060 <xflow>
 8011094:	ec41 0b10 	vmov	d0, r0, r1
 8011098:	bd08      	pop	{r3, pc}

0801109a <__math_oflow>:
 801109a:	b508      	push	{r3, lr}
 801109c:	2200      	movs	r2, #0
 801109e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80110a2:	f7ff ffdd 	bl	8011060 <xflow>
 80110a6:	ec41 0b10 	vmov	d0, r0, r1
 80110aa:	bd08      	pop	{r3, pc}

080110ac <__ieee754_sqrt>:
 80110ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110b0:	ec55 4b10 	vmov	r4, r5, d0
 80110b4:	4e67      	ldr	r6, [pc, #412]	; (8011254 <__ieee754_sqrt+0x1a8>)
 80110b6:	43ae      	bics	r6, r5
 80110b8:	ee10 0a10 	vmov	r0, s0
 80110bc:	ee10 2a10 	vmov	r2, s0
 80110c0:	4629      	mov	r1, r5
 80110c2:	462b      	mov	r3, r5
 80110c4:	d10d      	bne.n	80110e2 <__ieee754_sqrt+0x36>
 80110c6:	f7ef fa97 	bl	80005f8 <__aeabi_dmul>
 80110ca:	4602      	mov	r2, r0
 80110cc:	460b      	mov	r3, r1
 80110ce:	4620      	mov	r0, r4
 80110d0:	4629      	mov	r1, r5
 80110d2:	f7ef f8db 	bl	800028c <__adddf3>
 80110d6:	4604      	mov	r4, r0
 80110d8:	460d      	mov	r5, r1
 80110da:	ec45 4b10 	vmov	d0, r4, r5
 80110de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110e2:	2d00      	cmp	r5, #0
 80110e4:	dc0b      	bgt.n	80110fe <__ieee754_sqrt+0x52>
 80110e6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80110ea:	4326      	orrs	r6, r4
 80110ec:	d0f5      	beq.n	80110da <__ieee754_sqrt+0x2e>
 80110ee:	b135      	cbz	r5, 80110fe <__ieee754_sqrt+0x52>
 80110f0:	f7ef f8ca 	bl	8000288 <__aeabi_dsub>
 80110f4:	4602      	mov	r2, r0
 80110f6:	460b      	mov	r3, r1
 80110f8:	f7ef fba8 	bl	800084c <__aeabi_ddiv>
 80110fc:	e7eb      	b.n	80110d6 <__ieee754_sqrt+0x2a>
 80110fe:	1509      	asrs	r1, r1, #20
 8011100:	f000 808d 	beq.w	801121e <__ieee754_sqrt+0x172>
 8011104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011108:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801110c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011110:	07c9      	lsls	r1, r1, #31
 8011112:	bf5c      	itt	pl
 8011114:	005b      	lslpl	r3, r3, #1
 8011116:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801111a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801111e:	bf58      	it	pl
 8011120:	0052      	lslpl	r2, r2, #1
 8011122:	2500      	movs	r5, #0
 8011124:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011128:	1076      	asrs	r6, r6, #1
 801112a:	0052      	lsls	r2, r2, #1
 801112c:	f04f 0e16 	mov.w	lr, #22
 8011130:	46ac      	mov	ip, r5
 8011132:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011136:	eb0c 0001 	add.w	r0, ip, r1
 801113a:	4298      	cmp	r0, r3
 801113c:	bfde      	ittt	le
 801113e:	1a1b      	suble	r3, r3, r0
 8011140:	eb00 0c01 	addle.w	ip, r0, r1
 8011144:	186d      	addle	r5, r5, r1
 8011146:	005b      	lsls	r3, r3, #1
 8011148:	f1be 0e01 	subs.w	lr, lr, #1
 801114c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011150:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011154:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011158:	d1ed      	bne.n	8011136 <__ieee754_sqrt+0x8a>
 801115a:	4674      	mov	r4, lr
 801115c:	2720      	movs	r7, #32
 801115e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8011162:	4563      	cmp	r3, ip
 8011164:	eb01 000e 	add.w	r0, r1, lr
 8011168:	dc02      	bgt.n	8011170 <__ieee754_sqrt+0xc4>
 801116a:	d113      	bne.n	8011194 <__ieee754_sqrt+0xe8>
 801116c:	4290      	cmp	r0, r2
 801116e:	d811      	bhi.n	8011194 <__ieee754_sqrt+0xe8>
 8011170:	2800      	cmp	r0, #0
 8011172:	eb00 0e01 	add.w	lr, r0, r1
 8011176:	da57      	bge.n	8011228 <__ieee754_sqrt+0x17c>
 8011178:	f1be 0f00 	cmp.w	lr, #0
 801117c:	db54      	blt.n	8011228 <__ieee754_sqrt+0x17c>
 801117e:	f10c 0801 	add.w	r8, ip, #1
 8011182:	eba3 030c 	sub.w	r3, r3, ip
 8011186:	4290      	cmp	r0, r2
 8011188:	bf88      	it	hi
 801118a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801118e:	1a12      	subs	r2, r2, r0
 8011190:	440c      	add	r4, r1
 8011192:	46c4      	mov	ip, r8
 8011194:	005b      	lsls	r3, r3, #1
 8011196:	3f01      	subs	r7, #1
 8011198:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801119c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80111a0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80111a4:	d1dd      	bne.n	8011162 <__ieee754_sqrt+0xb6>
 80111a6:	4313      	orrs	r3, r2
 80111a8:	d01b      	beq.n	80111e2 <__ieee754_sqrt+0x136>
 80111aa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8011258 <__ieee754_sqrt+0x1ac>
 80111ae:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801125c <__ieee754_sqrt+0x1b0>
 80111b2:	e9da 0100 	ldrd	r0, r1, [sl]
 80111b6:	e9db 2300 	ldrd	r2, r3, [fp]
 80111ba:	f7ef f865 	bl	8000288 <__aeabi_dsub>
 80111be:	e9da 8900 	ldrd	r8, r9, [sl]
 80111c2:	4602      	mov	r2, r0
 80111c4:	460b      	mov	r3, r1
 80111c6:	4640      	mov	r0, r8
 80111c8:	4649      	mov	r1, r9
 80111ca:	f7ef fc91 	bl	8000af0 <__aeabi_dcmple>
 80111ce:	b140      	cbz	r0, 80111e2 <__ieee754_sqrt+0x136>
 80111d0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80111d4:	e9da 0100 	ldrd	r0, r1, [sl]
 80111d8:	e9db 2300 	ldrd	r2, r3, [fp]
 80111dc:	d126      	bne.n	801122c <__ieee754_sqrt+0x180>
 80111de:	3501      	adds	r5, #1
 80111e0:	463c      	mov	r4, r7
 80111e2:	106a      	asrs	r2, r5, #1
 80111e4:	0863      	lsrs	r3, r4, #1
 80111e6:	07e9      	lsls	r1, r5, #31
 80111e8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80111ec:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80111f0:	bf48      	it	mi
 80111f2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80111f6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80111fa:	461c      	mov	r4, r3
 80111fc:	e76d      	b.n	80110da <__ieee754_sqrt+0x2e>
 80111fe:	0ad3      	lsrs	r3, r2, #11
 8011200:	3815      	subs	r0, #21
 8011202:	0552      	lsls	r2, r2, #21
 8011204:	2b00      	cmp	r3, #0
 8011206:	d0fa      	beq.n	80111fe <__ieee754_sqrt+0x152>
 8011208:	02dc      	lsls	r4, r3, #11
 801120a:	d50a      	bpl.n	8011222 <__ieee754_sqrt+0x176>
 801120c:	f1c1 0420 	rsb	r4, r1, #32
 8011210:	fa22 f404 	lsr.w	r4, r2, r4
 8011214:	1e4d      	subs	r5, r1, #1
 8011216:	408a      	lsls	r2, r1
 8011218:	4323      	orrs	r3, r4
 801121a:	1b41      	subs	r1, r0, r5
 801121c:	e772      	b.n	8011104 <__ieee754_sqrt+0x58>
 801121e:	4608      	mov	r0, r1
 8011220:	e7f0      	b.n	8011204 <__ieee754_sqrt+0x158>
 8011222:	005b      	lsls	r3, r3, #1
 8011224:	3101      	adds	r1, #1
 8011226:	e7ef      	b.n	8011208 <__ieee754_sqrt+0x15c>
 8011228:	46e0      	mov	r8, ip
 801122a:	e7aa      	b.n	8011182 <__ieee754_sqrt+0xd6>
 801122c:	f7ef f82e 	bl	800028c <__adddf3>
 8011230:	e9da 8900 	ldrd	r8, r9, [sl]
 8011234:	4602      	mov	r2, r0
 8011236:	460b      	mov	r3, r1
 8011238:	4640      	mov	r0, r8
 801123a:	4649      	mov	r1, r9
 801123c:	f7ef fc4e 	bl	8000adc <__aeabi_dcmplt>
 8011240:	b120      	cbz	r0, 801124c <__ieee754_sqrt+0x1a0>
 8011242:	1ca0      	adds	r0, r4, #2
 8011244:	bf08      	it	eq
 8011246:	3501      	addeq	r5, #1
 8011248:	3402      	adds	r4, #2
 801124a:	e7ca      	b.n	80111e2 <__ieee754_sqrt+0x136>
 801124c:	3401      	adds	r4, #1
 801124e:	f024 0401 	bic.w	r4, r4, #1
 8011252:	e7c6      	b.n	80111e2 <__ieee754_sqrt+0x136>
 8011254:	7ff00000 	.word	0x7ff00000
 8011258:	20000250 	.word	0x20000250
 801125c:	20000258 	.word	0x20000258

08011260 <_init>:
 8011260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011262:	bf00      	nop
 8011264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011266:	bc08      	pop	{r3}
 8011268:	469e      	mov	lr, r3
 801126a:	4770      	bx	lr

0801126c <_fini>:
 801126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801126e:	bf00      	nop
 8011270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011272:	bc08      	pop	{r3}
 8011274:	469e      	mov	lr, r3
 8011276:	4770      	bx	lr
