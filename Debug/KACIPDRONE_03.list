
KACIPDRONE_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010498  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000870  08010628  08010628  00020628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e98  08010e98  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08010e98  08010e98  00020e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ea0  08010ea0  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ea0  08010ea0  00020ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010ea4  08010ea4  00020ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08010ea8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f8  2**0
                  CONTENTS
 10 .bss          000048b8  200001f8  200001f8  000301f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004ab0  20004ab0  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e20f  00000000  00000000  0003026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004a90  00000000  00000000  0004e47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001908  00000000  00000000  00052f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001366  00000000  00000000  00054818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027772  00000000  00000000  00055b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020e4d  00000000  00000000  0007d2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7694  00000000  00000000  0009e13d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007c64  00000000  00000000  001857d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0018d438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010610 	.word	0x08010610

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08010610 	.word	0x08010610

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9bb 	b.w	8000fe0 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b970 	b.w	8000fe0 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9e08      	ldr	r6, [sp, #32]
 8000d1e:	460d      	mov	r5, r1
 8000d20:	4604      	mov	r4, r0
 8000d22:	460f      	mov	r7, r1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d14a      	bne.n	8000dbe <__udivmoddi4+0xa6>
 8000d28:	428a      	cmp	r2, r1
 8000d2a:	4694      	mov	ip, r2
 8000d2c:	d965      	bls.n	8000dfa <__udivmoddi4+0xe2>
 8000d2e:	fab2 f382 	clz	r3, r2
 8000d32:	b143      	cbz	r3, 8000d46 <__udivmoddi4+0x2e>
 8000d34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d38:	f1c3 0220 	rsb	r2, r3, #32
 8000d3c:	409f      	lsls	r7, r3
 8000d3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d42:	4317      	orrs	r7, r2
 8000d44:	409c      	lsls	r4, r3
 8000d46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d4a:	fa1f f58c 	uxth.w	r5, ip
 8000d4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d52:	0c22      	lsrs	r2, r4, #16
 8000d54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d5c:	fb01 f005 	mul.w	r0, r1, r5
 8000d60:	4290      	cmp	r0, r2
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x62>
 8000d64:	eb1c 0202 	adds.w	r2, ip, r2
 8000d68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d6c:	f080 811c 	bcs.w	8000fa8 <__udivmoddi4+0x290>
 8000d70:	4290      	cmp	r0, r2
 8000d72:	f240 8119 	bls.w	8000fa8 <__udivmoddi4+0x290>
 8000d76:	3902      	subs	r1, #2
 8000d78:	4462      	add	r2, ip
 8000d7a:	1a12      	subs	r2, r2, r0
 8000d7c:	b2a4      	uxth	r4, r4
 8000d7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8a:	fb00 f505 	mul.w	r5, r0, r5
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x90>
 8000d92:	eb1c 0404 	adds.w	r4, ip, r4
 8000d96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d9a:	f080 8107 	bcs.w	8000fac <__udivmoddi4+0x294>
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	f240 8104 	bls.w	8000fac <__udivmoddi4+0x294>
 8000da4:	4464      	add	r4, ip
 8000da6:	3802      	subs	r0, #2
 8000da8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dac:	1b64      	subs	r4, r4, r5
 8000dae:	2100      	movs	r1, #0
 8000db0:	b11e      	cbz	r6, 8000dba <__udivmoddi4+0xa2>
 8000db2:	40dc      	lsrs	r4, r3
 8000db4:	2300      	movs	r3, #0
 8000db6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0xbc>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	f000 80ed 	beq.w	8000fa2 <__udivmoddi4+0x28a>
 8000dc8:	2100      	movs	r1, #0
 8000dca:	e9c6 0500 	strd	r0, r5, [r6]
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd4:	fab3 f183 	clz	r1, r3
 8000dd8:	2900      	cmp	r1, #0
 8000dda:	d149      	bne.n	8000e70 <__udivmoddi4+0x158>
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	d302      	bcc.n	8000de6 <__udivmoddi4+0xce>
 8000de0:	4282      	cmp	r2, r0
 8000de2:	f200 80f8 	bhi.w	8000fd6 <__udivmoddi4+0x2be>
 8000de6:	1a84      	subs	r4, r0, r2
 8000de8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dec:	2001      	movs	r0, #1
 8000dee:	4617      	mov	r7, r2
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d0e2      	beq.n	8000dba <__udivmoddi4+0xa2>
 8000df4:	e9c6 4700 	strd	r4, r7, [r6]
 8000df8:	e7df      	b.n	8000dba <__udivmoddi4+0xa2>
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xe6>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f382 	clz	r3, r2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x210>
 8000e08:	1a8a      	subs	r2, r1, r2
 8000e0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0e:	fa1f fe8c 	uxth.w	lr, ip
 8000e12:	2101      	movs	r1, #1
 8000e14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e18:	fb07 2015 	mls	r0, r7, r5, r2
 8000e1c:	0c22      	lsrs	r2, r4, #16
 8000e1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e22:	fb0e f005 	mul.w	r0, lr, r5
 8000e26:	4290      	cmp	r0, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x124>
 8000e2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x122>
 8000e34:	4290      	cmp	r0, r2
 8000e36:	f200 80cb 	bhi.w	8000fd0 <__udivmoddi4+0x2b8>
 8000e3a:	4645      	mov	r5, r8
 8000e3c:	1a12      	subs	r2, r2, r0
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e44:	fb07 2210 	mls	r2, r7, r0, r2
 8000e48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x14e>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e5c:	d202      	bcs.n	8000e64 <__udivmoddi4+0x14c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f200 80bb 	bhi.w	8000fda <__udivmoddi4+0x2c2>
 8000e64:	4610      	mov	r0, r2
 8000e66:	eba4 040e 	sub.w	r4, r4, lr
 8000e6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e6e:	e79f      	b.n	8000db0 <__udivmoddi4+0x98>
 8000e70:	f1c1 0720 	rsb	r7, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e82:	fa20 f307 	lsr.w	r3, r0, r7
 8000e86:	40fd      	lsrs	r5, r7
 8000e88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	fb09 5518 	mls	r5, r9, r8, r5
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ea0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ea4:	42a5      	cmp	r5, r4
 8000ea6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eaa:	fa00 f001 	lsl.w	r0, r0, r1
 8000eae:	d90b      	bls.n	8000ec8 <__udivmoddi4+0x1b0>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb8:	f080 8088 	bcs.w	8000fcc <__udivmoddi4+0x2b4>
 8000ebc:	42a5      	cmp	r5, r4
 8000ebe:	f240 8085 	bls.w	8000fcc <__udivmoddi4+0x2b4>
 8000ec2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec6:	4464      	add	r4, ip
 8000ec8:	1b64      	subs	r4, r4, r5
 8000eca:	b29d      	uxth	r5, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ed8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000edc:	45a6      	cmp	lr, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1da>
 8000ee0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ee8:	d26c      	bcs.n	8000fc4 <__udivmoddi4+0x2ac>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	d96a      	bls.n	8000fc4 <__udivmoddi4+0x2ac>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	4464      	add	r4, ip
 8000ef2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ef6:	fba3 9502 	umull	r9, r5, r3, r2
 8000efa:	eba4 040e 	sub.w	r4, r4, lr
 8000efe:	42ac      	cmp	r4, r5
 8000f00:	46c8      	mov	r8, r9
 8000f02:	46ae      	mov	lr, r5
 8000f04:	d356      	bcc.n	8000fb4 <__udivmoddi4+0x29c>
 8000f06:	d053      	beq.n	8000fb0 <__udivmoddi4+0x298>
 8000f08:	b156      	cbz	r6, 8000f20 <__udivmoddi4+0x208>
 8000f0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f12:	fa04 f707 	lsl.w	r7, r4, r7
 8000f16:	40ca      	lsrs	r2, r1
 8000f18:	40cc      	lsrs	r4, r1
 8000f1a:	4317      	orrs	r7, r2
 8000f1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f20:	4618      	mov	r0, r3
 8000f22:	2100      	movs	r1, #0
 8000f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f28:	f1c3 0120 	rsb	r1, r3, #32
 8000f2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f30:	fa20 f201 	lsr.w	r2, r0, r1
 8000f34:	fa25 f101 	lsr.w	r1, r5, r1
 8000f38:	409d      	lsls	r5, r3
 8000f3a:	432a      	orrs	r2, r5
 8000f3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f40:	fa1f fe8c 	uxth.w	lr, ip
 8000f44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f48:	fb07 1510 	mls	r5, r7, r0, r1
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f52:	fb00 f50e 	mul.w	r5, r0, lr
 8000f56:	428d      	cmp	r5, r1
 8000f58:	fa04 f403 	lsl.w	r4, r4, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x258>
 8000f5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f66:	d22f      	bcs.n	8000fc8 <__udivmoddi4+0x2b0>
 8000f68:	428d      	cmp	r5, r1
 8000f6a:	d92d      	bls.n	8000fc8 <__udivmoddi4+0x2b0>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4461      	add	r1, ip
 8000f70:	1b49      	subs	r1, r1, r5
 8000f72:	b292      	uxth	r2, r2
 8000f74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f78:	fb07 1115 	mls	r1, r7, r5, r1
 8000f7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f80:	fb05 f10e 	mul.w	r1, r5, lr
 8000f84:	4291      	cmp	r1, r2
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x282>
 8000f88:	eb1c 0202 	adds.w	r2, ip, r2
 8000f8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f90:	d216      	bcs.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f92:	4291      	cmp	r1, r2
 8000f94:	d914      	bls.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f96:	3d02      	subs	r5, #2
 8000f98:	4462      	add	r2, ip
 8000f9a:	1a52      	subs	r2, r2, r1
 8000f9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fa0:	e738      	b.n	8000e14 <__udivmoddi4+0xfc>
 8000fa2:	4631      	mov	r1, r6
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	e708      	b.n	8000dba <__udivmoddi4+0xa2>
 8000fa8:	4639      	mov	r1, r7
 8000faa:	e6e6      	b.n	8000d7a <__udivmoddi4+0x62>
 8000fac:	4610      	mov	r0, r2
 8000fae:	e6fb      	b.n	8000da8 <__udivmoddi4+0x90>
 8000fb0:	4548      	cmp	r0, r9
 8000fb2:	d2a9      	bcs.n	8000f08 <__udivmoddi4+0x1f0>
 8000fb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	e7a3      	b.n	8000f08 <__udivmoddi4+0x1f0>
 8000fc0:	4645      	mov	r5, r8
 8000fc2:	e7ea      	b.n	8000f9a <__udivmoddi4+0x282>
 8000fc4:	462b      	mov	r3, r5
 8000fc6:	e794      	b.n	8000ef2 <__udivmoddi4+0x1da>
 8000fc8:	4640      	mov	r0, r8
 8000fca:	e7d1      	b.n	8000f70 <__udivmoddi4+0x258>
 8000fcc:	46d0      	mov	r8, sl
 8000fce:	e77b      	b.n	8000ec8 <__udivmoddi4+0x1b0>
 8000fd0:	3d02      	subs	r5, #2
 8000fd2:	4462      	add	r2, ip
 8000fd4:	e732      	b.n	8000e3c <__udivmoddi4+0x124>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e70a      	b.n	8000df0 <__udivmoddi4+0xd8>
 8000fda:	4464      	add	r4, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e742      	b.n	8000e66 <__udivmoddi4+0x14e>

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	; 0x30
 8000fe8:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	2319      	movs	r3, #25
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2288      	movs	r2, #136	; 0x88
 8000ffc:	21ec      	movs	r1, #236	; 0xec
 8000ffe:	4857      	ldr	r0, [pc, #348]	; (800115c <TrimRead+0x178>)
 8001000:	f005 ffc8 	bl	8006f94 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8001004:	463b      	mov	r3, r7
 8001006:	3319      	adds	r3, #25
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	9202      	str	r2, [sp, #8]
 800100e:	2207      	movs	r2, #7
 8001010:	9201      	str	r2, [sp, #4]
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2301      	movs	r3, #1
 8001016:	22e1      	movs	r2, #225	; 0xe1
 8001018:	21ec      	movs	r1, #236	; 0xec
 800101a:	4850      	ldr	r0, [pc, #320]	; (800115c <TrimRead+0x178>)
 800101c:	f005 ffba 	bl	8006f94 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001020:	787b      	ldrb	r3, [r7, #1]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b21a      	sxth	r2, r3
 8001026:	783b      	ldrb	r3, [r7, #0]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21b      	sxth	r3, r3
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b4b      	ldr	r3, [pc, #300]	; (8001160 <TrimRead+0x17c>)
 8001032:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001034:	78fb      	ldrb	r3, [r7, #3]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	78bb      	ldrb	r3, [r7, #2]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21a      	sxth	r2, r3
 8001042:	4b48      	ldr	r3, [pc, #288]	; (8001164 <TrimRead+0x180>)
 8001044:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001046:	797b      	ldrb	r3, [r7, #5]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b21a      	sxth	r2, r3
 800104c:	793b      	ldrb	r3, [r7, #4]
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21a      	sxth	r2, r3
 8001054:	4b44      	ldr	r3, [pc, #272]	; (8001168 <TrimRead+0x184>)
 8001056:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	797b      	ldrb	r3, [r7, #5]
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21b      	sxth	r3, r3
 8001066:	b29a      	uxth	r2, r3
 8001068:	4b40      	ldr	r3, [pc, #256]	; (800116c <TrimRead+0x188>)
 800106a:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 800106c:	7a7b      	ldrb	r3, [r7, #9]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21a      	sxth	r2, r3
 8001072:	79bb      	ldrb	r3, [r7, #6]
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21a      	sxth	r2, r3
 800107a:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <TrimRead+0x18c>)
 800107c:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800107e:	7afb      	ldrb	r3, [r7, #11]
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	b21a      	sxth	r2, r3
 8001084:	7abb      	ldrb	r3, [r7, #10]
 8001086:	b21b      	sxth	r3, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	b21a      	sxth	r2, r3
 800108c:	4b39      	ldr	r3, [pc, #228]	; (8001174 <TrimRead+0x190>)
 800108e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001090:	7b7b      	ldrb	r3, [r7, #13]
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	b21a      	sxth	r2, r3
 8001096:	7b3b      	ldrb	r3, [r7, #12]
 8001098:	b21b      	sxth	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	b21a      	sxth	r2, r3
 800109e:	4b36      	ldr	r3, [pc, #216]	; (8001178 <TrimRead+0x194>)
 80010a0:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	7bbb      	ldrb	r3, [r7, #14]
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	4b32      	ldr	r3, [pc, #200]	; (800117c <TrimRead+0x198>)
 80010b2:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80010b4:	7c7b      	ldrb	r3, [r7, #17]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	7c3b      	ldrb	r3, [r7, #16]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <TrimRead+0x19c>)
 80010c4:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80010c6:	7cfb      	ldrb	r3, [r7, #19]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	7cbb      	ldrb	r3, [r7, #18]
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <TrimRead+0x1a0>)
 80010d6:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80010d8:	7d7b      	ldrb	r3, [r7, #21]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	7d3b      	ldrb	r3, [r7, #20]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <TrimRead+0x1a4>)
 80010e8:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	7dbb      	ldrb	r3, [r7, #22]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <TrimRead+0x1a8>)
 80010fa:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80010fc:	7e3b      	ldrb	r3, [r7, #24]
 80010fe:	b29a      	uxth	r2, r3
 8001100:	4b23      	ldr	r3, [pc, #140]	; (8001190 <TrimRead+0x1ac>)
 8001102:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001104:	7ebb      	ldrb	r3, [r7, #26]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b21a      	sxth	r2, r3
 800110a:	7e7b      	ldrb	r3, [r7, #25]
 800110c:	b21b      	sxth	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b21a      	sxth	r2, r3
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <TrimRead+0x1b0>)
 8001114:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8001116:	7efb      	ldrb	r3, [r7, #27]
 8001118:	b29a      	uxth	r2, r3
 800111a:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <TrimRead+0x1b4>)
 800111c:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 800111e:	7f3b      	ldrb	r3, [r7, #28]
 8001120:	011b      	lsls	r3, r3, #4
 8001122:	b21a      	sxth	r2, r3
 8001124:	7f7b      	ldrb	r3, [r7, #29]
 8001126:	b21b      	sxth	r3, r3
 8001128:	f003 030f 	and.w	r3, r3, #15
 800112c:	b21b      	sxth	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b21a      	sxth	r2, r3
 8001132:	4b1a      	ldr	r3, [pc, #104]	; (800119c <TrimRead+0x1b8>)
 8001134:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8001136:	7fbb      	ldrb	r3, [r7, #30]
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	b21a      	sxth	r2, r3
 800113c:	7f7b      	ldrb	r3, [r7, #29]
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	b2db      	uxtb	r3, r3
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <TrimRead+0x1bc>)
 800114a:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 800114c:	7ffb      	ldrb	r3, [r7, #31]
 800114e:	b21a      	sxth	r2, r3
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <TrimRead+0x1c0>)
 8001152:	801a      	strh	r2, [r3, #0]
}
 8001154:	bf00      	nop
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000079c 	.word	0x2000079c
 8001160:	20000224 	.word	0x20000224
 8001164:	2000022c 	.word	0x2000022c
 8001168:	2000022e 	.word	0x2000022e
 800116c:	20000226 	.word	0x20000226
 8001170:	20000230 	.word	0x20000230
 8001174:	20000232 	.word	0x20000232
 8001178:	20000234 	.word	0x20000234
 800117c:	20000236 	.word	0x20000236
 8001180:	20000238 	.word	0x20000238
 8001184:	2000023a 	.word	0x2000023a
 8001188:	2000023c 	.word	0x2000023c
 800118c:	2000023e 	.word	0x2000023e
 8001190:	20000228 	.word	0x20000228
 8001194:	20000240 	.word	0x20000240
 8001198:	2000022a 	.word	0x2000022a
 800119c:	20000242 	.word	0x20000242
 80011a0:	20000244 	.word	0x20000244
 80011a4:	20000246 	.word	0x20000246

080011a8 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af04      	add	r7, sp, #16
 80011ae:	4604      	mov	r4, r0
 80011b0:	4608      	mov	r0, r1
 80011b2:	4611      	mov	r1, r2
 80011b4:	461a      	mov	r2, r3
 80011b6:	4623      	mov	r3, r4
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	4603      	mov	r3, r0
 80011bc:	71bb      	strb	r3, [r7, #6]
 80011be:	460b      	mov	r3, r1
 80011c0:	717b      	strb	r3, [r7, #5]
 80011c2:	4613      	mov	r3, r2
 80011c4:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80011c6:	f7ff ff0d 	bl	8000fe4 <TrimRead>


	uint8_t datatowrite = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80011d2:	23b6      	movs	r3, #182	; 0xb6
 80011d4:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2301      	movs	r3, #1
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	f107 030f 	add.w	r3, r7, #15
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2301      	movs	r3, #1
 80011e8:	22e0      	movs	r2, #224	; 0xe0
 80011ea:	21ec      	movs	r1, #236	; 0xec
 80011ec:	4858      	ldr	r0, [pc, #352]	; (8001350 <BME280_Config+0x1a8>)
 80011ee:	f005 fdd7 	bl	8006da0 <HAL_I2C_Mem_Write>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <BME280_Config+0x56>
	{
		return -1;
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	e0a3      	b.n	8001346 <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80011fe:	2064      	movs	r0, #100	; 0x64
 8001200:	f004 f9fe 	bl	8005600 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001204:	797b      	ldrb	r3, [r7, #5]
 8001206:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120c:	9302      	str	r3, [sp, #8]
 800120e:	2301      	movs	r3, #1
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	f107 030f 	add.w	r3, r7, #15
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	22f2      	movs	r2, #242	; 0xf2
 800121c:	21ec      	movs	r1, #236	; 0xec
 800121e:	484c      	ldr	r0, [pc, #304]	; (8001350 <BME280_Config+0x1a8>)
 8001220:	f005 fdbe 	bl	8006da0 <HAL_I2C_Mem_Write>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <BME280_Config+0x88>
	{
		return -1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	e08a      	b.n	8001346 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001230:	2064      	movs	r0, #100	; 0x64
 8001232:	f004 f9e5 	bl	8005600 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	2301      	movs	r3, #1
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	f107 030e 	add.w	r3, r7, #14
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2301      	movs	r3, #1
 8001248:	22f2      	movs	r2, #242	; 0xf2
 800124a:	21ec      	movs	r1, #236	; 0xec
 800124c:	4840      	ldr	r0, [pc, #256]	; (8001350 <BME280_Config+0x1a8>)
 800124e:	f005 fea1 	bl	8006f94 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001252:	7bba      	ldrb	r2, [r7, #14]
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	429a      	cmp	r2, r3
 8001258:	d002      	beq.n	8001260 <BME280_Config+0xb8>
	{
		return -1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e072      	b.n	8001346 <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001260:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001264:	015b      	lsls	r3, r3, #5
 8001266:	b25a      	sxtb	r2, r3
 8001268:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	b25b      	sxtb	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	b25b      	sxtb	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001278:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	2301      	movs	r3, #1
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	f107 030f 	add.w	r3, r7, #15
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	22f5      	movs	r2, #245	; 0xf5
 800128c:	21ec      	movs	r1, #236	; 0xec
 800128e:	4830      	ldr	r0, [pc, #192]	; (8001350 <BME280_Config+0x1a8>)
 8001290:	f005 fd86 	bl	8006da0 <HAL_I2C_Mem_Write>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <BME280_Config+0xf8>
	{
		return -1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	e052      	b.n	8001346 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012a0:	2064      	movs	r0, #100	; 0x64
 80012a2:	f004 f9ad 	bl	8005600 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	9302      	str	r3, [sp, #8]
 80012ac:	2301      	movs	r3, #1
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	f107 030e 	add.w	r3, r7, #14
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2301      	movs	r3, #1
 80012b8:	22f5      	movs	r2, #245	; 0xf5
 80012ba:	21ec      	movs	r1, #236	; 0xec
 80012bc:	4824      	ldr	r0, [pc, #144]	; (8001350 <BME280_Config+0x1a8>)
 80012be:	f005 fe69 	bl	8006f94 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012c2:	7bba      	ldrb	r2, [r7, #14]
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d002      	beq.n	80012d0 <BME280_Config+0x128>
	{
		return -1;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	e03a      	b.n	8001346 <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	015b      	lsls	r3, r3, #5
 80012d4:	b25a      	sxtb	r2, r3
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b25a      	sxtb	r2, r3
 80012e0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f0:	9302      	str	r3, [sp, #8]
 80012f2:	2301      	movs	r3, #1
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	f107 030f 	add.w	r3, r7, #15
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2301      	movs	r3, #1
 80012fe:	22f4      	movs	r2, #244	; 0xf4
 8001300:	21ec      	movs	r1, #236	; 0xec
 8001302:	4813      	ldr	r0, [pc, #76]	; (8001350 <BME280_Config+0x1a8>)
 8001304:	f005 fd4c 	bl	8006da0 <HAL_I2C_Mem_Write>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <BME280_Config+0x16c>
	{
		return -1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	e018      	b.n	8001346 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001314:	2064      	movs	r0, #100	; 0x64
 8001316:	f004 f973 	bl	8005600 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800131a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131e:	9302      	str	r3, [sp, #8]
 8001320:	2301      	movs	r3, #1
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	f107 030e 	add.w	r3, r7, #14
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2301      	movs	r3, #1
 800132c:	22f4      	movs	r2, #244	; 0xf4
 800132e:	21ec      	movs	r1, #236	; 0xec
 8001330:	4807      	ldr	r0, [pc, #28]	; (8001350 <BME280_Config+0x1a8>)
 8001332:	f005 fe2f 	bl	8006f94 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001336:	7bba      	ldrb	r2, [r7, #14]
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	429a      	cmp	r2, r3
 800133c:	d002      	beq.n	8001344 <BME280_Config+0x19c>
	{
		return -1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	e000      	b.n	8001346 <BME280_Config+0x19e>
	}

	return 0;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	bd90      	pop	{r4, r7, pc}
 800134e:	bf00      	nop
 8001350:	2000079c 	.word	0x2000079c

08001354 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	2301      	movs	r3, #1
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <BMEReadRaw+0x8c>)
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2301      	movs	r3, #1
 800136a:	22d0      	movs	r2, #208	; 0xd0
 800136c:	21ec      	movs	r1, #236	; 0xec
 800136e:	481d      	ldr	r0, [pc, #116]	; (80013e4 <BMEReadRaw+0x90>)
 8001370:	f005 fe10 	bl	8006f94 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <BMEReadRaw+0x8c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b60      	cmp	r3, #96	; 0x60
 800137a:	d12a      	bne.n	80013d2 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	2308      	movs	r3, #8
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	463b      	mov	r3, r7
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2301      	movs	r3, #1
 800138c:	22f7      	movs	r2, #247	; 0xf7
 800138e:	21ec      	movs	r1, #236	; 0xec
 8001390:	4814      	ldr	r0, [pc, #80]	; (80013e4 <BMEReadRaw+0x90>)
 8001392:	f005 fdff 	bl	8006f94 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001396:	783b      	ldrb	r3, [r7, #0]
 8001398:	031a      	lsls	r2, r3, #12
 800139a:	787b      	ldrb	r3, [r7, #1]
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	4313      	orrs	r3, r2
 80013a0:	78ba      	ldrb	r2, [r7, #2]
 80013a2:	0912      	lsrs	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	4313      	orrs	r3, r2
 80013a8:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <BMEReadRaw+0x94>)
 80013aa:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80013ac:	78fb      	ldrb	r3, [r7, #3]
 80013ae:	031a      	lsls	r2, r3, #12
 80013b0:	793b      	ldrb	r3, [r7, #4]
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	4313      	orrs	r3, r2
 80013b6:	797a      	ldrb	r2, [r7, #5]
 80013b8:	0912      	lsrs	r2, r2, #4
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	4313      	orrs	r3, r2
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <BMEReadRaw+0x98>)
 80013c0:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	79fa      	ldrb	r2, [r7, #7]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <BMEReadRaw+0x9c>)
 80013cc:	6013      	str	r3, [r2, #0]

		return 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e001      	b.n	80013d6 <BMEReadRaw+0x82>
	}

	else return -1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000214 	.word	0x20000214
 80013e4:	2000079c 	.word	0x2000079c
 80013e8:	2000021c 	.word	0x2000021c
 80013ec:	20000218 	.word	0x20000218
 80013f0:	20000220 	.word	0x20000220

080013f4 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	10da      	asrs	r2, r3, #3
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <BME280_compensate_T_int32+0x74>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	4a18      	ldr	r2, [pc, #96]	; (800146c <BME280_compensate_T_int32+0x78>)
 800140a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800140e:	fb02 f303 	mul.w	r3, r2, r3
 8001412:	12db      	asrs	r3, r3, #11
 8001414:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	111b      	asrs	r3, r3, #4
 800141a:	4a13      	ldr	r2, [pc, #76]	; (8001468 <BME280_compensate_T_int32+0x74>)
 800141c:	8812      	ldrh	r2, [r2, #0]
 800141e:	1a9b      	subs	r3, r3, r2
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	1112      	asrs	r2, r2, #4
 8001424:	4910      	ldr	r1, [pc, #64]	; (8001468 <BME280_compensate_T_int32+0x74>)
 8001426:	8809      	ldrh	r1, [r1, #0]
 8001428:	1a52      	subs	r2, r2, r1
 800142a:	fb02 f303 	mul.w	r3, r2, r3
 800142e:	131b      	asrs	r3, r3, #12
 8001430:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <BME280_compensate_T_int32+0x7c>)
 8001432:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001436:	fb02 f303 	mul.w	r3, r2, r3
 800143a:	139b      	asrs	r3, r3, #14
 800143c:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4413      	add	r3, r2
 8001444:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <BME280_compensate_T_int32+0x80>)
 8001446:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <BME280_compensate_T_int32+0x80>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	3380      	adds	r3, #128	; 0x80
 8001454:	121b      	asrs	r3, r3, #8
 8001456:	60fb      	str	r3, [r7, #12]
	return T;
 8001458:	68fb      	ldr	r3, [r7, #12]
}
 800145a:	4618      	mov	r0, r3
 800145c:	371c      	adds	r7, #28
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000224 	.word	0x20000224
 800146c:	2000022c 	.word	0x2000022c
 8001470:	2000022e 	.word	0x2000022e
 8001474:	20000248 	.word	0x20000248

08001478 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800147c:	b0ca      	sub	sp, #296	; 0x128
 800147e:	af00      	add	r7, sp, #0
 8001480:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001484:	4baf      	ldr	r3, [pc, #700]	; (8001744 <BME280_compensate_P_int64+0x2cc>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	17da      	asrs	r2, r3, #31
 800148a:	461c      	mov	r4, r3
 800148c:	4615      	mov	r5, r2
 800148e:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001492:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001496:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800149a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800149e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014a2:	fb03 f102 	mul.w	r1, r3, r2
 80014a6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014ae:	fb02 f303 	mul.w	r3, r2, r3
 80014b2:	18ca      	adds	r2, r1, r3
 80014b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014b8:	fba3 8903 	umull	r8, r9, r3, r3
 80014bc:	eb02 0309 	add.w	r3, r2, r9
 80014c0:	4699      	mov	r9, r3
 80014c2:	4ba1      	ldr	r3, [pc, #644]	; (8001748 <BME280_compensate_P_int64+0x2d0>)
 80014c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	17da      	asrs	r2, r3, #31
 80014cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80014d4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80014d8:	4603      	mov	r3, r0
 80014da:	fb03 f209 	mul.w	r2, r3, r9
 80014de:	460b      	mov	r3, r1
 80014e0:	fb08 f303 	mul.w	r3, r8, r3
 80014e4:	4413      	add	r3, r2
 80014e6:	4602      	mov	r2, r0
 80014e8:	fba8 1202 	umull	r1, r2, r8, r2
 80014ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80014f0:	460a      	mov	r2, r1
 80014f2:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80014f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80014fa:	4413      	add	r3, r2
 80014fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001500:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001504:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001508:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 800150c:	4b8f      	ldr	r3, [pc, #572]	; (800174c <BME280_compensate_P_int64+0x2d4>)
 800150e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001512:	b21b      	sxth	r3, r3
 8001514:	17da      	asrs	r2, r3, #31
 8001516:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800151a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800151e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001522:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001526:	462a      	mov	r2, r5
 8001528:	fb02 f203 	mul.w	r2, r2, r3
 800152c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001530:	4621      	mov	r1, r4
 8001532:	fb01 f303 	mul.w	r3, r1, r3
 8001536:	441a      	add	r2, r3
 8001538:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800153c:	4621      	mov	r1, r4
 800153e:	fba3 1301 	umull	r1, r3, r3, r1
 8001542:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001546:	460b      	mov	r3, r1
 8001548:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800154c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001550:	18d3      	adds	r3, r2, r3
 8001552:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001556:	f04f 0000 	mov.w	r0, #0
 800155a:	f04f 0100 	mov.w	r1, #0
 800155e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001562:	462b      	mov	r3, r5
 8001564:	0459      	lsls	r1, r3, #17
 8001566:	4623      	mov	r3, r4
 8001568:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800156c:	4623      	mov	r3, r4
 800156e:	0458      	lsls	r0, r3, #17
 8001570:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001574:	1814      	adds	r4, r2, r0
 8001576:	643c      	str	r4, [r7, #64]	; 0x40
 8001578:	414b      	adcs	r3, r1
 800157a:	647b      	str	r3, [r7, #68]	; 0x44
 800157c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001580:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001584:	4b72      	ldr	r3, [pc, #456]	; (8001750 <BME280_compensate_P_int64+0x2d8>)
 8001586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158a:	b21b      	sxth	r3, r3
 800158c:	17da      	asrs	r2, r3, #31
 800158e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001592:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001596:	f04f 0000 	mov.w	r0, #0
 800159a:	f04f 0100 	mov.w	r1, #0
 800159e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015a2:	00d9      	lsls	r1, r3, #3
 80015a4:	2000      	movs	r0, #0
 80015a6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80015aa:	1814      	adds	r4, r2, r0
 80015ac:	63bc      	str	r4, [r7, #56]	; 0x38
 80015ae:	414b      	adcs	r3, r1
 80015b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015b2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80015b6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80015ba:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015c2:	fb03 f102 	mul.w	r1, r3, r2
 80015c6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	18ca      	adds	r2, r1, r3
 80015d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015d8:	fba3 1303 	umull	r1, r3, r3, r3
 80015dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015e0:	460b      	mov	r3, r1
 80015e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80015e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015ea:	18d3      	adds	r3, r2, r3
 80015ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015f0:	4b58      	ldr	r3, [pc, #352]	; (8001754 <BME280_compensate_P_int64+0x2dc>)
 80015f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	17da      	asrs	r2, r3, #31
 80015fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80015fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001602:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001606:	462b      	mov	r3, r5
 8001608:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800160c:	4642      	mov	r2, r8
 800160e:	fb02 f203 	mul.w	r2, r2, r3
 8001612:	464b      	mov	r3, r9
 8001614:	4621      	mov	r1, r4
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	4413      	add	r3, r2
 800161c:	4622      	mov	r2, r4
 800161e:	4641      	mov	r1, r8
 8001620:	fba2 1201 	umull	r1, r2, r2, r1
 8001624:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001628:	460a      	mov	r2, r1
 800162a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800162e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001632:	4413      	add	r3, r2
 8001634:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001638:	f04f 0000 	mov.w	r0, #0
 800163c:	f04f 0100 	mov.w	r1, #0
 8001640:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001644:	4623      	mov	r3, r4
 8001646:	0a18      	lsrs	r0, r3, #8
 8001648:	462b      	mov	r3, r5
 800164a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800164e:	462b      	mov	r3, r5
 8001650:	1219      	asrs	r1, r3, #8
 8001652:	4b41      	ldr	r3, [pc, #260]	; (8001758 <BME280_compensate_P_int64+0x2e0>)
 8001654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001658:	b21b      	sxth	r3, r3
 800165a:	17da      	asrs	r2, r3, #31
 800165c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001660:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001664:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001668:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 800166c:	464a      	mov	r2, r9
 800166e:	fb02 f203 	mul.w	r2, r2, r3
 8001672:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001676:	4644      	mov	r4, r8
 8001678:	fb04 f303 	mul.w	r3, r4, r3
 800167c:	441a      	add	r2, r3
 800167e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001682:	4644      	mov	r4, r8
 8001684:	fba3 4304 	umull	r4, r3, r3, r4
 8001688:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800168c:	4623      	mov	r3, r4
 800168e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001692:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001696:	18d3      	adds	r3, r2, r3
 8001698:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80016a8:	464c      	mov	r4, r9
 80016aa:	0323      	lsls	r3, r4, #12
 80016ac:	4644      	mov	r4, r8
 80016ae:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80016b2:	4644      	mov	r4, r8
 80016b4:	0322      	lsls	r2, r4, #12
 80016b6:	1884      	adds	r4, r0, r2
 80016b8:	633c      	str	r4, [r7, #48]	; 0x30
 80016ba:	eb41 0303 	adc.w	r3, r1, r3
 80016be:	637b      	str	r3, [r7, #52]	; 0x34
 80016c0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80016c4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80016c8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016cc:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80016d0:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80016d4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <BME280_compensate_P_int64+0x2e4>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	2200      	movs	r2, #0
 80016e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80016e8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80016ec:	462b      	mov	r3, r5
 80016ee:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80016f2:	4642      	mov	r2, r8
 80016f4:	fb02 f203 	mul.w	r2, r2, r3
 80016f8:	464b      	mov	r3, r9
 80016fa:	4621      	mov	r1, r4
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	4622      	mov	r2, r4
 8001704:	4641      	mov	r1, r8
 8001706:	fba2 1201 	umull	r1, r2, r2, r1
 800170a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800170e:	460a      	mov	r2, r1
 8001710:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001714:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001718:	4413      	add	r3, r2
 800171a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800172a:	4629      	mov	r1, r5
 800172c:	104a      	asrs	r2, r1, #1
 800172e:	4629      	mov	r1, r5
 8001730:	17cb      	asrs	r3, r1, #31
 8001732:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 8001736:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800173a:	4313      	orrs	r3, r2
 800173c:	d110      	bne.n	8001760 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 800173e:	2300      	movs	r3, #0
 8001740:	e154      	b.n	80019ec <BME280_compensate_P_int64+0x574>
 8001742:	bf00      	nop
 8001744:	20000248 	.word	0x20000248
 8001748:	20000238 	.word	0x20000238
 800174c:	20000236 	.word	0x20000236
 8001750:	20000234 	.word	0x20000234
 8001754:	20000232 	.word	0x20000232
 8001758:	20000230 	.word	0x20000230
 800175c:	20000226 	.word	0x20000226
	}
	p = 1048576-adc_P;
 8001760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001764:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001768:	17da      	asrs	r2, r3, #31
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
 800176c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800176e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001772:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001776:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800177a:	105b      	asrs	r3, r3, #1
 800177c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001780:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001784:	07db      	lsls	r3, r3, #31
 8001786:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800178a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800178e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001792:	4621      	mov	r1, r4
 8001794:	1a89      	subs	r1, r1, r2
 8001796:	67b9      	str	r1, [r7, #120]	; 0x78
 8001798:	4629      	mov	r1, r5
 800179a:	eb61 0303 	sbc.w	r3, r1, r3
 800179e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017a0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017a4:	4622      	mov	r2, r4
 80017a6:	462b      	mov	r3, r5
 80017a8:	1891      	adds	r1, r2, r2
 80017aa:	6239      	str	r1, [r7, #32]
 80017ac:	415b      	adcs	r3, r3
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
 80017b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017b4:	4621      	mov	r1, r4
 80017b6:	1851      	adds	r1, r2, r1
 80017b8:	61b9      	str	r1, [r7, #24]
 80017ba:	4629      	mov	r1, r5
 80017bc:	414b      	adcs	r3, r1
 80017be:	61fb      	str	r3, [r7, #28]
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80017cc:	4649      	mov	r1, r9
 80017ce:	018b      	lsls	r3, r1, #6
 80017d0:	4641      	mov	r1, r8
 80017d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017d6:	4641      	mov	r1, r8
 80017d8:	018a      	lsls	r2, r1, #6
 80017da:	4641      	mov	r1, r8
 80017dc:	1889      	adds	r1, r1, r2
 80017de:	6139      	str	r1, [r7, #16]
 80017e0:	4649      	mov	r1, r9
 80017e2:	eb43 0101 	adc.w	r1, r3, r1
 80017e6:	6179      	str	r1, [r7, #20]
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017f4:	4649      	mov	r1, r9
 80017f6:	008b      	lsls	r3, r1, #2
 80017f8:	4641      	mov	r1, r8
 80017fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017fe:	4641      	mov	r1, r8
 8001800:	008a      	lsls	r2, r1, #2
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	4603      	mov	r3, r0
 8001808:	4622      	mov	r2, r4
 800180a:	189b      	adds	r3, r3, r2
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	460b      	mov	r3, r1
 8001810:	462a      	mov	r2, r5
 8001812:	eb42 0303 	adc.w	r3, r2, r3
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001824:	4649      	mov	r1, r9
 8001826:	008b      	lsls	r3, r1, #2
 8001828:	4641      	mov	r1, r8
 800182a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800182e:	4641      	mov	r1, r8
 8001830:	008a      	lsls	r2, r1, #2
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	4603      	mov	r3, r0
 8001838:	4622      	mov	r2, r4
 800183a:	189b      	adds	r3, r3, r2
 800183c:	673b      	str	r3, [r7, #112]	; 0x70
 800183e:	462b      	mov	r3, r5
 8001840:	460a      	mov	r2, r1
 8001842:	eb42 0303 	adc.w	r3, r2, r3
 8001846:	677b      	str	r3, [r7, #116]	; 0x74
 8001848:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800184c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001850:	f7ff f9fa 	bl	8000c48 <__aeabi_ldivmod>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 800185c:	4b66      	ldr	r3, [pc, #408]	; (80019f8 <BME280_compensate_P_int64+0x580>)
 800185e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001862:	b21b      	sxth	r3, r3
 8001864:	17da      	asrs	r2, r3, #31
 8001866:	66bb      	str	r3, [r7, #104]	; 0x68
 8001868:	66fa      	str	r2, [r7, #108]	; 0x6c
 800186a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800186e:	f04f 0000 	mov.w	r0, #0
 8001872:	f04f 0100 	mov.w	r1, #0
 8001876:	0b50      	lsrs	r0, r2, #13
 8001878:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800187c:	1359      	asrs	r1, r3, #13
 800187e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001882:	462b      	mov	r3, r5
 8001884:	fb00 f203 	mul.w	r2, r0, r3
 8001888:	4623      	mov	r3, r4
 800188a:	fb03 f301 	mul.w	r3, r3, r1
 800188e:	4413      	add	r3, r2
 8001890:	4622      	mov	r2, r4
 8001892:	fba2 1200 	umull	r1, r2, r2, r0
 8001896:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800189a:	460a      	mov	r2, r1
 800189c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80018a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80018a4:	4413      	add	r3, r2
 80018a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80018aa:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80018ae:	f04f 0000 	mov.w	r0, #0
 80018b2:	f04f 0100 	mov.w	r1, #0
 80018b6:	0b50      	lsrs	r0, r2, #13
 80018b8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018bc:	1359      	asrs	r1, r3, #13
 80018be:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80018c2:	462b      	mov	r3, r5
 80018c4:	fb00 f203 	mul.w	r2, r0, r3
 80018c8:	4623      	mov	r3, r4
 80018ca:	fb03 f301 	mul.w	r3, r3, r1
 80018ce:	4413      	add	r3, r2
 80018d0:	4622      	mov	r2, r4
 80018d2:	fba2 1200 	umull	r1, r2, r2, r0
 80018d6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80018da:	460a      	mov	r2, r1
 80018dc:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80018e0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80018e4:	4413      	add	r3, r2
 80018e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80018f6:	4621      	mov	r1, r4
 80018f8:	0e4a      	lsrs	r2, r1, #25
 80018fa:	4629      	mov	r1, r5
 80018fc:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001900:	4629      	mov	r1, r5
 8001902:	164b      	asrs	r3, r1, #25
 8001904:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <BME280_compensate_P_int64+0x584>)
 800190a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190e:	b21b      	sxth	r3, r3
 8001910:	17da      	asrs	r2, r3, #31
 8001912:	663b      	str	r3, [r7, #96]	; 0x60
 8001914:	667a      	str	r2, [r7, #100]	; 0x64
 8001916:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800191a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800191e:	462a      	mov	r2, r5
 8001920:	fb02 f203 	mul.w	r2, r2, r3
 8001924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001928:	4621      	mov	r1, r4
 800192a:	fb01 f303 	mul.w	r3, r1, r3
 800192e:	4413      	add	r3, r2
 8001930:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001934:	4621      	mov	r1, r4
 8001936:	fba2 1201 	umull	r1, r2, r2, r1
 800193a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800193e:	460a      	mov	r2, r1
 8001940:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001944:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001948:	4413      	add	r3, r2
 800194a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800195a:	4621      	mov	r1, r4
 800195c:	0cca      	lsrs	r2, r1, #19
 800195e:	4629      	mov	r1, r5
 8001960:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001964:	4629      	mov	r1, r5
 8001966:	14cb      	asrs	r3, r1, #19
 8001968:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 800196c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001970:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001974:	1884      	adds	r4, r0, r2
 8001976:	65bc      	str	r4, [r7, #88]	; 0x58
 8001978:	eb41 0303 	adc.w	r3, r1, r3
 800197c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800197e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001982:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001986:	4621      	mov	r1, r4
 8001988:	1889      	adds	r1, r1, r2
 800198a:	6539      	str	r1, [r7, #80]	; 0x50
 800198c:	4629      	mov	r1, r5
 800198e:	eb43 0101 	adc.w	r1, r3, r1
 8001992:	6579      	str	r1, [r7, #84]	; 0x54
 8001994:	f04f 0000 	mov.w	r0, #0
 8001998:	f04f 0100 	mov.w	r1, #0
 800199c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80019a0:	4623      	mov	r3, r4
 80019a2:	0a18      	lsrs	r0, r3, #8
 80019a4:	462b      	mov	r3, r5
 80019a6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80019aa:	462b      	mov	r3, r5
 80019ac:	1219      	asrs	r1, r3, #8
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <BME280_compensate_P_int64+0x588>)
 80019b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b4:	b21b      	sxth	r3, r3
 80019b6:	17da      	asrs	r2, r3, #31
 80019b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80019ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80019c8:	464c      	mov	r4, r9
 80019ca:	0123      	lsls	r3, r4, #4
 80019cc:	4644      	mov	r4, r8
 80019ce:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80019d2:	4644      	mov	r4, r8
 80019d4:	0122      	lsls	r2, r4, #4
 80019d6:	1884      	adds	r4, r0, r2
 80019d8:	603c      	str	r4, [r7, #0]
 80019da:	eb41 0303 	adc.w	r3, r1, r3
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019e4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 80019e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80019f2:	46bd      	mov	sp, r7
 80019f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019f8:	2000023e 	.word	0x2000023e
 80019fc:	2000023c 	.word	0x2000023c
 8001a00:	2000023a 	.word	0x2000023a

08001a04 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <bme280_compensate_H_int32+0xbc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001a14:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	039a      	lsls	r2, r3, #14
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <bme280_compensate_H_int32+0xc0>)
 8001a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a20:	051b      	lsls	r3, r3, #20
 8001a22:	1ad2      	subs	r2, r2, r3
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <bme280_compensate_H_int32+0xc4>)
 8001a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a34:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001a38:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a3a:	4a24      	ldr	r2, [pc, #144]	; (8001acc <bme280_compensate_H_int32+0xc8>)
 8001a3c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a40:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a48:	1292      	asrs	r2, r2, #10
 8001a4a:	4921      	ldr	r1, [pc, #132]	; (8001ad0 <bme280_compensate_H_int32+0xcc>)
 8001a4c:	8809      	ldrh	r1, [r1, #0]
 8001a4e:	4608      	mov	r0, r1
 8001a50:	68f9      	ldr	r1, [r7, #12]
 8001a52:	fb00 f101 	mul.w	r1, r0, r1
 8001a56:	12c9      	asrs	r1, r1, #11
 8001a58:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001a5c:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001a60:	1292      	asrs	r2, r2, #10
 8001a62:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001a66:	491b      	ldr	r1, [pc, #108]	; (8001ad4 <bme280_compensate_H_int32+0xd0>)
 8001a68:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001a6c:	fb01 f202 	mul.w	r2, r1, r2
 8001a70:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001a74:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a76:	fb02 f303 	mul.w	r3, r2, r3
 8001a7a:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	13db      	asrs	r3, r3, #15
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	13d2      	asrs	r2, r2, #15
 8001a84:	fb02 f303 	mul.w	r3, r2, r3
 8001a88:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001a8a:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <bme280_compensate_H_int32+0xd4>)
 8001a8c:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001a92:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001aa0:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001aa8:	bfa8      	it	ge
 8001aaa:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001aae:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	131b      	asrs	r3, r3, #12
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	20000248 	.word	0x20000248
 8001ac4:	20000242 	.word	0x20000242
 8001ac8:	20000244 	.word	0x20000244
 8001acc:	20000246 	.word	0x20000246
 8001ad0:	2000022a 	.word	0x2000022a
 8001ad4:	20000240 	.word	0x20000240
 8001ad8:	20000228 	.word	0x20000228

08001adc <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001ae0:	f7ff fc38 	bl	8001354 <BMEReadRaw>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d163      	bne.n	8001bb2 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) bme280.temperature = 0; // value in case temp measurement was disabled
 8001aea:	4b39      	ldr	r3, [pc, #228]	; (8001bd0 <BME280_Measure+0xf4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001af2:	d104      	bne.n	8001afe <BME280_Measure+0x22>
 8001af4:	4b37      	ldr	r3, [pc, #220]	; (8001bd4 <BME280_Measure+0xf8>)
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e016      	b.n	8001b2c <BME280_Measure+0x50>
		  else
		  {
			  bme280.temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001afe:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <BME280_Measure+0xf4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fc76 	bl	80013f4 <BME280_compensate_T_int32>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd0a 	bl	8000524 <__aeabi_i2d>
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <BME280_Measure+0xfc>)
 8001b16:	f7fe fe99 	bl	800084c <__aeabi_ddiv>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7ff f841 	bl	8000ba8 <__aeabi_d2f>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4a2a      	ldr	r2, [pc, #168]	; (8001bd4 <BME280_Measure+0xf8>)
 8001b2a:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) bme280.pressure = 0; // value in case temp measurement was disabled
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <BME280_Measure+0x100>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b34:	d104      	bne.n	8001b40 <BME280_Measure+0x64>
 8001b36:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <BME280_Measure+0xf8>)
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	e016      	b.n	8001b6e <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  bme280.pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001b40:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <BME280_Measure+0x100>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fc97 	bl	8001478 <BME280_compensate_P_int64>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fcd9 	bl	8000504 <__aeabi_ui2d>
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <BME280_Measure+0x104>)
 8001b58:	f7fe fe78 	bl	800084c <__aeabi_ddiv>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7ff f820 	bl	8000ba8 <__aeabi_d2f>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <BME280_Measure+0xf8>)
 8001b6c:	6053      	str	r3, [r2, #4]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) bme280.humidity = 0; // value in case temp measurement was disabled
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <BME280_Measure+0x108>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b76:	d104      	bne.n	8001b82 <BME280_Measure+0xa6>
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <BME280_Measure+0xf8>)
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
	// if the device is detached
	else
	{
		bme280.temperature = bme280.pressure = bme280.humidity = 0;
	}
}
 8001b80:	e023      	b.n	8001bca <BME280_Measure+0xee>
			  bme280.humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <BME280_Measure+0x108>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff3c 	bl	8001a04 <bme280_compensate_H_int32>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fcb8 	bl	8000504 <__aeabi_ui2d>
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <BME280_Measure+0x10c>)
 8001b9a:	f7fe fe57 	bl	800084c <__aeabi_ddiv>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f7fe ffff 	bl	8000ba8 <__aeabi_d2f>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <BME280_Measure+0xf8>)
 8001bae:	6093      	str	r3, [r2, #8]
}
 8001bb0:	e00b      	b.n	8001bca <BME280_Measure+0xee>
		bme280.temperature = bme280.pressure = bme280.humidity = 0;
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <BME280_Measure+0xf8>)
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <BME280_Measure+0xf8>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <BME280_Measure+0xf8>)
 8001bc0:	6053      	str	r3, [r2, #4]
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <BME280_Measure+0xf8>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4a03      	ldr	r2, [pc, #12]	; (8001bd4 <BME280_Measure+0xf8>)
 8001bc8:	6013      	str	r3, [r2, #0]
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000218 	.word	0x20000218
 8001bd4:	200004cc 	.word	0x200004cc
 8001bd8:	40590000 	.word	0x40590000
 8001bdc:	2000021c 	.word	0x2000021c
 8001be0:	40700000 	.word	0x40700000
 8001be4:	20000220 	.word	0x20000220
 8001be8:	40900000 	.word	0x40900000

08001bec <PIDController_Init>:
//burada pid limmax ve lim min silinmeli çünkü biz throttle-pitch+yaw-roll vs gibi formüller kullanıyoruz..
//..bunların tamamının limiti konulmalı(pwm max ve pwm min olmalı bu da)

//sadece roll ve pitch için pid yapıyoruz. yaw ve yükseklik işini sonraya bırakacağız.

void PIDController_Init(PIDController *pid) {
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError = 0.0f;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator = 0.0f;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
	pid->T = 3000;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001c1a:	61da      	str	r2, [r3, #28]

	pid->out = 0.0f;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	635a      	str	r2, [r3, #52]	; 0x34
	pid_debug_counter = 0;
 8001c24:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <PIDController_Init+0x4c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]

}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	200002b0 	.word	0x200002b0
 8001c3c:	00000000 	.word	0x00000000

08001c40 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint,
		float measurement) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08c      	sub	sp, #48	; 0x30
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c4c:	edc7 0a01 	vstr	s1, [r7, #4]
	 printf("measurement = ");
	 printf(ptr3);
	 printf("\n");
	 */

	if(pid->ID == ROLL_ID){
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d127      	bne.n	8001ca8 <PIDController_Update+0x68>
		if(measurement < 0){
 8001c58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c64:	d510      	bpl.n	8001c88 <PIDController_Update+0x48>
			measurement = measurement * 0.95;
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7fe fc6e 	bl	8000548 <__aeabi_f2d>
 8001c6c:	a3d8      	add	r3, pc, #864	; (adr r3, 8001fd0 <PIDController_Update+0x390>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe fcc1 	bl	80005f8 <__aeabi_dmul>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7fe ff93 	bl	8000ba8 <__aeabi_d2f>
 8001c82:	4603      	mov	r3, r0
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	e00f      	b.n	8001ca8 <PIDController_Update+0x68>
		}else{
			measurement = measurement * 1.05;
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7fe fc5d 	bl	8000548 <__aeabi_f2d>
 8001c8e:	a3d2      	add	r3, pc, #840	; (adr r3, 8001fd8 <PIDController_Update+0x398>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fcb0 	bl	80005f8 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f7fe ff82 	bl	8000ba8 <__aeabi_d2f>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	607b      	str	r3, [r7, #4]
		}
	}

	float error = 0.0;
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (pid->T == 0)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d103      	bne.n	8001cbe <PIDController_Update+0x7e>
		pid->T = 3000; //sample time değişince değiştir!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001cbc:	61da      	str	r2, [r3, #28]

	if (pid->ID == PITCH_ID) {
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d10a      	bne.n	8001cdc <PIDController_Update+0x9c>
		error = -(setpoint - measurement); //setpoint 1k-2k arası, measurement min-180max180=>error 920-2080 arası
 8001cc6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001cca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd2:	eef1 7a67 	vneg.f32	s15, s15
 8001cd6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8001cda:	e0dd      	b.n	8001e98 <PIDController_Update+0x258>
	} else if (pid->ID == ROLL_ID) {
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d108      	bne.n	8001cf6 <PIDController_Update+0xb6>
		error = setpoint - measurement; //setpoint 1k-2k arası, measurement min-180max180=>error 920-2080 arası
 8001ce4:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ce8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8001cf4:	e0d0      	b.n	8001e98 <PIDController_Update+0x258>
	}
	// Konumdan Hız Hesaplıyoruz
	else if (pid->ID == YAW_ID) {
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	f040 80cc 	bne.w	8001e98 <PIDController_Update+0x258>

		IMUYaw = MAP(measurement, 0.0, 360.0, -180.0, 180.0);
 8001d00:	ed9f 2aa9 	vldr	s4, [pc, #676]	; 8001fa8 <PIDController_Update+0x368>
 8001d04:	eddf 1aa9 	vldr	s3, [pc, #676]	; 8001fac <PIDController_Update+0x36c>
 8001d08:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 8001fb0 <PIDController_Update+0x370>
 8001d0c:	eddf 0aa9 	vldr	s1, [pc, #676]	; 8001fb4 <PIDController_Update+0x374>
 8001d10:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d14:	f002 faa2 	bl	800425c <MAP>
 8001d18:	eef0 7a40 	vmov.f32	s15, s0
 8001d1c:	4ba6      	ldr	r3, [pc, #664]	; (8001fb8 <PIDController_Update+0x378>)
 8001d1e:	edc3 7a00 	vstr	s15, [r3]
		 printf("IMUYaw = ");
		 printf(ptr3);
		 printf("\n");
		 */

		yaw_speed = (measurement - pid->prevMeasurement);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001d28:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d30:	4ba2      	ldr	r3, [pc, #648]	; (8001fbc <PIDController_Update+0x37c>)
 8001d32:	edc3 7a00 	vstr	s15, [r3]
		if (yaw_speed <= 300 || yaw_speed >= 300) {
 8001d36:	4ba1      	ldr	r3, [pc, #644]	; (8001fbc <PIDController_Update+0x37c>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001fc0 <PIDController_Update+0x380>
 8001d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d48:	d909      	bls.n	8001d5e <PIDController_Update+0x11e>
 8001d4a:	4b9c      	ldr	r3, [pc, #624]	; (8001fbc <PIDController_Update+0x37c>)
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8001fc0 <PIDController_Update+0x380>
 8001d54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5c:	db52      	blt.n	8001e04 <PIDController_Update+0x1c4>
			if (pid->prevMeasurement < 0 && measurement > 0) {
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001d64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6c:	d523      	bpl.n	8001db6 <PIDController_Update+0x176>
 8001d6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7a:	dd1c      	ble.n	8001db6 <PIDController_Update+0x176>
				pid->prevMeasurement = -pid->prevMeasurement;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001d82:	eef1 7a67 	vneg.f32	s15, s15
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
				yaw_speed =
						-((180 - measurement) + (180 - pid->prevMeasurement));
 8001d8c:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001fa8 <PIDController_Update+0x368>
 8001d90:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001d9e:	eddf 6a82 	vldr	s13, [pc, #520]	; 8001fa8 <PIDController_Update+0x368>
 8001da2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001daa:	eef1 7a67 	vneg.f32	s15, s15
				yaw_speed =
 8001dae:	4b83      	ldr	r3, [pc, #524]	; (8001fbc <PIDController_Update+0x37c>)
 8001db0:	edc3 7a00 	vstr	s15, [r3]
 8001db4:	e026      	b.n	8001e04 <PIDController_Update+0x1c4>

			} else if (pid->prevMeasurement > 0 && measurement < 0) {
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001dbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc4:	dd1e      	ble.n	8001e04 <PIDController_Update+0x1c4>
 8001dc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd2:	d517      	bpl.n	8001e04 <PIDController_Update+0x1c4>
				measurement = -measurement;
 8001dd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dd8:	eef1 7a67 	vneg.f32	s15, s15
 8001ddc:	edc7 7a01 	vstr	s15, [r7, #4]
				yaw_speed = (180 - measurement) + (180 - pid->prevMeasurement);
 8001de0:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001fa8 <PIDController_Update+0x368>
 8001de4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001de8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001df2:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8001fa8 <PIDController_Update+0x368>
 8001df6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dfe:	4b6f      	ldr	r3, [pc, #444]	; (8001fbc <PIDController_Update+0x37c>)
 8001e00:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		yaw_speed = yaw_speed / pid->T;
 8001e04:	4b6d      	ldr	r3, [pc, #436]	; (8001fbc <PIDController_Update+0x37c>)
 8001e06:	edd3 6a00 	vldr	s13, [r3]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e1a:	4b68      	ldr	r3, [pc, #416]	; (8001fbc <PIDController_Update+0x37c>)
 8001e1c:	edc3 7a00 	vstr	s15, [r3]
		debug_yaw_speed_once = yaw_speed;
 8001e20:	4b66      	ldr	r3, [pc, #408]	; (8001fbc <PIDController_Update+0x37c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a67      	ldr	r2, [pc, #412]	; (8001fc4 <PIDController_Update+0x384>)
 8001e26:	6013      	str	r3, [r2, #0]
		 printf("YAW Speed Map oncesi = ");
		 printf(ptr3);
		 printf("\n");
		 */

		yaw_speed = MAP(yaw_speed, -0.003, 0.003, -180.0, 180.0);
 8001e28:	4b64      	ldr	r3, [pc, #400]	; (8001fbc <PIDController_Update+0x37c>)
 8001e2a:	edd3 7a00 	vldr	s15, [r3]
 8001e2e:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 8001fa8 <PIDController_Update+0x368>
 8001e32:	eddf 1a5e 	vldr	s3, [pc, #376]	; 8001fac <PIDController_Update+0x36c>
 8001e36:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8001fc8 <PIDController_Update+0x388>
 8001e3a:	eddf 0a64 	vldr	s1, [pc, #400]	; 8001fcc <PIDController_Update+0x38c>
 8001e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e42:	f002 fa0b 	bl	800425c <MAP>
 8001e46:	eef0 7a40 	vmov.f32	s15, s0
 8001e4a:	4b5c      	ldr	r3, [pc, #368]	; (8001fbc <PIDController_Update+0x37c>)
 8001e4c:	edc3 7a00 	vstr	s15, [r3]
		 printf(ptr3);
		 printf("\n");
		 */

		//setpoint = MAP(setpoint, -0.045, 0.045, -180.0, 180.0);
		error = setpoint - yaw_speed;
 8001e50:	4b5a      	ldr	r3, [pc, #360]	; (8001fbc <PIDController_Update+0x37c>)
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e5e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		if (error < 1.5 && error > -1.8) { //dead zone
 8001e62:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e66:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e72:	d511      	bpl.n	8001e98 <PIDController_Update+0x258>
 8001e74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e76:	f7fe fb67 	bl	8000548 <__aeabi_f2d>
 8001e7a:	a349      	add	r3, pc, #292	; (adr r3, 8001fa0 <PIDController_Update+0x360>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	f7fe fe4a 	bl	8000b18 <__aeabi_dcmpgt>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d006      	beq.n	8001e98 <PIDController_Update+0x258>
			error = 0;
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			pid->integrator = 0;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24
	 */

	/*
	 * Proportional
	 */
	float proportional = pid->Kp * error;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	pid->proportional = proportional; //sadece debug için
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eae:	621a      	str	r2, [r3, #32]
	/*
	 * Integral
	 */
	pid->integrator = pid->integrator
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
			+ 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ebc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001ec0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 8001eda:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ede:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid->integrator = pid->integrator
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/* Anti-wind-up via integrator clamping */
	if (pid->integrator > pid->limMaxInt) {
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	edd3 7a06 	vldr	s15, [r3, #24]
 8001efc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f04:	dd04      	ble.n	8001f10 <PIDController_Update+0x2d0>

		pid->integrator = pid->limMaxInt;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	625a      	str	r2, [r3, #36]	; 0x24
 8001f0e:	e00e      	b.n	8001f2e <PIDController_Update+0x2ee>

	} else if (pid->integrator < pid->limMinInt) {
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f24:	d503      	bpl.n	8001f2e <PIDController_Update+0x2ee>

		pid->integrator = pid->limMinInt;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	625a      	str	r2, [r3, #36]	; 0x24
	 pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)
	 + (2.0f * pid->tau - pid->T) * pid->differentiator)
	 / (2.0f * pid->tau + pid->T);
	 */
	//https://www.robotsforroboticists.com/pid-control/ //derivative = (error – error_prior) / iteration_time
	pid->differentiator = pid->Kd * ((error - pid->prevError) / pid->T);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001f3a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f3e:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	ee07 3a90 	vmov	s15, r3
 8001f4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f4e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	/*
	 * Compute output and apply limits
	 */
	pid->out = proportional + pid->integrator + pid->differentiator;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001f62:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	if (pid->out > pid->limMax) {
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8e:	dd27      	ble.n	8001fe0 <PIDController_Update+0x3a0>

		pid->out = pid->limMax;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34
 8001f98:	e031      	b.n	8001ffe <PIDController_Update+0x3be>
 8001f9a:	bf00      	nop
 8001f9c:	f3af 8000 	nop.w
 8001fa0:	cccccccd 	.word	0xcccccccd
 8001fa4:	bffccccc 	.word	0xbffccccc
 8001fa8:	43340000 	.word	0x43340000
 8001fac:	c3340000 	.word	0xc3340000
 8001fb0:	43b40000 	.word	0x43b40000
 8001fb4:	00000000 	.word	0x00000000
 8001fb8:	200002bc 	.word	0x200002bc
 8001fbc:	200002b8 	.word	0x200002b8
 8001fc0:	43960000 	.word	0x43960000
 8001fc4:	200002b4 	.word	0x200002b4
 8001fc8:	3b449ba6 	.word	0x3b449ba6
 8001fcc:	bb449ba6 	.word	0xbb449ba6
 8001fd0:	66666666 	.word	0x66666666
 8001fd4:	3fee6666 	.word	0x3fee6666
 8001fd8:	cccccccd 	.word	0xcccccccd
 8001fdc:	3ff0cccc 	.word	0x3ff0cccc

	} else if (pid->out < pid->limMin) {
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff4:	d503      	bpl.n	8001ffe <PIDController_Update+0x3be>

		pid->out = pid->limMin;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34

	}

	/* Store error and measurement for later use */
	pid->prevError = error;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002002:	629a      	str	r2, [r3, #40]	; 0x28
	pid->prevMeasurement = measurement;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	631a      	str	r2, [r3, #48]	; 0x30

	float d_pid_out = pid->out;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
	float d_pid_proportional = proportional;
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	623b      	str	r3, [r7, #32]
	float d_pid_integrator = pid->integrator;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	61fb      	str	r3, [r7, #28]
	float d_pid_diff = pid->differentiator;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	61bb      	str	r3, [r7, #24]
	float d_delta_t = (float) pid->T;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	ee07 3a90 	vmov	s15, r3
 8002028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800202c:	edc7 7a05 	vstr	s15, [r7, #20]

	pid_debug_counter++;
 8002030:	4b80      	ldr	r3, [pc, #512]	; (8002234 <PIDController_Update+0x5f4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	3301      	adds	r3, #1
 8002036:	4a7f      	ldr	r2, [pc, #508]	; (8002234 <PIDController_Update+0x5f4>)
 8002038:	6013      	str	r3, [r2, #0]
	if (pid_debug_counter == 25) {
 800203a:	4b7e      	ldr	r3, [pc, #504]	; (8002234 <PIDController_Update+0x5f4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b19      	cmp	r3, #25
 8002040:	f040 80ef 	bne.w	8002222 <PIDController_Update+0x5e2>
		 printf("--------------------------------\n");

		 pid_debug_counter = 0;
		 }
		 */
		if (pid->ID == PITCH_ID) {
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002048:	2b01      	cmp	r3, #1
 800204a:	d103      	bne.n	8002054 <PIDController_Update+0x414>
			printf("\n------------PITCH DATALAR \n");
 800204c:	487a      	ldr	r0, [pc, #488]	; (8002238 <PIDController_Update+0x5f8>)
 800204e:	f00b fa25 	bl	800d49c <puts>
 8002052:	e038      	b.n	80020c6 <PIDController_Update+0x486>
		} else if (pid->ID == ROLL_ID) {
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002058:	2b02      	cmp	r3, #2
 800205a:	d103      	bne.n	8002064 <PIDController_Update+0x424>
			printf("\n------------ROLL DATALAR \n");
 800205c:	4877      	ldr	r0, [pc, #476]	; (800223c <PIDController_Update+0x5fc>)
 800205e:	f00b fa1d 	bl	800d49c <puts>
 8002062:	e030      	b.n	80020c6 <PIDController_Update+0x486>
		} else if (pid->ID == YAW_ID) {
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002068:	2b03      	cmp	r3, #3
 800206a:	d12c      	bne.n	80020c6 <PIDController_Update+0x486>
			printf("\n------------YAW DATALAR \n");
 800206c:	4874      	ldr	r0, [pc, #464]	; (8002240 <PIDController_Update+0x600>)
 800206e:	f00b fa15 	bl	800d49c <puts>
			gcvt(yaw_speed, 8, ptr3);
 8002072:	4b74      	ldr	r3, [pc, #464]	; (8002244 <PIDController_Update+0x604>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fa66 	bl	8000548 <__aeabi_f2d>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4971      	ldr	r1, [pc, #452]	; (8002248 <PIDController_Update+0x608>)
 8002082:	2008      	movs	r0, #8
 8002084:	ec43 2b10 	vmov	d0, r2, r3
 8002088:	f00a fc60 	bl	800c94c <gcvt>
			printf("yaw_speed = ");
 800208c:	486f      	ldr	r0, [pc, #444]	; (800224c <PIDController_Update+0x60c>)
 800208e:	f00b f997 	bl	800d3c0 <iprintf>
			printf(ptr3);
 8002092:	486d      	ldr	r0, [pc, #436]	; (8002248 <PIDController_Update+0x608>)
 8002094:	f00b f994 	bl	800d3c0 <iprintf>
			printf("\n");
 8002098:	200a      	movs	r0, #10
 800209a:	f00b f9a3 	bl	800d3e4 <putchar>

			gcvt(measurement, 8, ptr3);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7fe fa52 	bl	8000548 <__aeabi_f2d>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4967      	ldr	r1, [pc, #412]	; (8002248 <PIDController_Update+0x608>)
 80020aa:	2008      	movs	r0, #8
 80020ac:	ec43 2b10 	vmov	d0, r2, r3
 80020b0:	f00a fc4c 	bl	800c94c <gcvt>
			printf("measurement = ");
 80020b4:	4866      	ldr	r0, [pc, #408]	; (8002250 <PIDController_Update+0x610>)
 80020b6:	f00b f983 	bl	800d3c0 <iprintf>
			printf(ptr3);
 80020ba:	4863      	ldr	r0, [pc, #396]	; (8002248 <PIDController_Update+0x608>)
 80020bc:	f00b f980 	bl	800d3c0 <iprintf>
			printf("\n");
 80020c0:	200a      	movs	r0, #10
 80020c2:	f00b f98f 	bl	800d3e4 <putchar>

		}
		//debug
		printf("\n");
 80020c6:	200a      	movs	r0, #10
 80020c8:	f00b f98c 	bl	800d3e4 <putchar>
		gcvt(d_pid_out, 8, ptr3);
 80020cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020ce:	f7fe fa3b 	bl	8000548 <__aeabi_f2d>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	495c      	ldr	r1, [pc, #368]	; (8002248 <PIDController_Update+0x608>)
 80020d8:	2008      	movs	r0, #8
 80020da:	ec43 2b10 	vmov	d0, r2, r3
 80020de:	f00a fc35 	bl	800c94c <gcvt>
		printf("pid_out = ");
 80020e2:	485c      	ldr	r0, [pc, #368]	; (8002254 <PIDController_Update+0x614>)
 80020e4:	f00b f96c 	bl	800d3c0 <iprintf>
		printf(ptr3);
 80020e8:	4857      	ldr	r0, [pc, #348]	; (8002248 <PIDController_Update+0x608>)
 80020ea:	f00b f969 	bl	800d3c0 <iprintf>
		printf("\n");
 80020ee:	200a      	movs	r0, #10
 80020f0:	f00b f978 	bl	800d3e4 <putchar>

		gcvt(d_pid_proportional, 8, ptr3);
 80020f4:	6a38      	ldr	r0, [r7, #32]
 80020f6:	f7fe fa27 	bl	8000548 <__aeabi_f2d>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4952      	ldr	r1, [pc, #328]	; (8002248 <PIDController_Update+0x608>)
 8002100:	2008      	movs	r0, #8
 8002102:	ec43 2b10 	vmov	d0, r2, r3
 8002106:	f00a fc21 	bl	800c94c <gcvt>
		printf("d_pid_proportional = ");
 800210a:	4853      	ldr	r0, [pc, #332]	; (8002258 <PIDController_Update+0x618>)
 800210c:	f00b f958 	bl	800d3c0 <iprintf>
		printf(ptr3);
 8002110:	484d      	ldr	r0, [pc, #308]	; (8002248 <PIDController_Update+0x608>)
 8002112:	f00b f955 	bl	800d3c0 <iprintf>
		printf("\n");
 8002116:	200a      	movs	r0, #10
 8002118:	f00b f964 	bl	800d3e4 <putchar>

		gcvt(d_pid_integrator, 8, ptr3);
 800211c:	69f8      	ldr	r0, [r7, #28]
 800211e:	f7fe fa13 	bl	8000548 <__aeabi_f2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4948      	ldr	r1, [pc, #288]	; (8002248 <PIDController_Update+0x608>)
 8002128:	2008      	movs	r0, #8
 800212a:	ec43 2b10 	vmov	d0, r2, r3
 800212e:	f00a fc0d 	bl	800c94c <gcvt>
		printf("d_pid_integrator =           ");
 8002132:	484a      	ldr	r0, [pc, #296]	; (800225c <PIDController_Update+0x61c>)
 8002134:	f00b f944 	bl	800d3c0 <iprintf>
		printf(ptr3);
 8002138:	4843      	ldr	r0, [pc, #268]	; (8002248 <PIDController_Update+0x608>)
 800213a:	f00b f941 	bl	800d3c0 <iprintf>
		printf("\n");
 800213e:	200a      	movs	r0, #10
 8002140:	f00b f950 	bl	800d3e4 <putchar>

		gcvt(d_pid_diff, 8, ptr3);
 8002144:	69b8      	ldr	r0, [r7, #24]
 8002146:	f7fe f9ff 	bl	8000548 <__aeabi_f2d>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	493e      	ldr	r1, [pc, #248]	; (8002248 <PIDController_Update+0x608>)
 8002150:	2008      	movs	r0, #8
 8002152:	ec43 2b10 	vmov	d0, r2, r3
 8002156:	f00a fbf9 	bl	800c94c <gcvt>
		printf("d_pid_diff = ");
 800215a:	4841      	ldr	r0, [pc, #260]	; (8002260 <PIDController_Update+0x620>)
 800215c:	f00b f930 	bl	800d3c0 <iprintf>
		printf(ptr3);
 8002160:	4839      	ldr	r0, [pc, #228]	; (8002248 <PIDController_Update+0x608>)
 8002162:	f00b f92d 	bl	800d3c0 <iprintf>
		printf("\n");
 8002166:	200a      	movs	r0, #10
 8002168:	f00b f93c 	bl	800d3e4 <putchar>

		gcvt(d_delta_t, 8, ptr3);
 800216c:	6978      	ldr	r0, [r7, #20]
 800216e:	f7fe f9eb 	bl	8000548 <__aeabi_f2d>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4934      	ldr	r1, [pc, #208]	; (8002248 <PIDController_Update+0x608>)
 8002178:	2008      	movs	r0, #8
 800217a:	ec43 2b10 	vmov	d0, r2, r3
 800217e:	f00a fbe5 	bl	800c94c <gcvt>
		printf("d_delta_t = ");
 8002182:	4838      	ldr	r0, [pc, #224]	; (8002264 <PIDController_Update+0x624>)
 8002184:	f00b f91c 	bl	800d3c0 <iprintf>
		printf(ptr3);
 8002188:	482f      	ldr	r0, [pc, #188]	; (8002248 <PIDController_Update+0x608>)
 800218a:	f00b f919 	bl	800d3c0 <iprintf>
		printf("\n\n");
 800218e:	4836      	ldr	r0, [pc, #216]	; (8002268 <PIDController_Update+0x628>)
 8002190:	f00b f984 	bl	800d49c <puts>

		gcvt(setpoint, 8, ptr3);
 8002194:	68b8      	ldr	r0, [r7, #8]
 8002196:	f7fe f9d7 	bl	8000548 <__aeabi_f2d>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	492a      	ldr	r1, [pc, #168]	; (8002248 <PIDController_Update+0x608>)
 80021a0:	2008      	movs	r0, #8
 80021a2:	ec43 2b10 	vmov	d0, r2, r3
 80021a6:	f00a fbd1 	bl	800c94c <gcvt>
		printf("setpoint = ");
 80021aa:	4830      	ldr	r0, [pc, #192]	; (800226c <PIDController_Update+0x62c>)
 80021ac:	f00b f908 	bl	800d3c0 <iprintf>
		printf(ptr3);
 80021b0:	4825      	ldr	r0, [pc, #148]	; (8002248 <PIDController_Update+0x608>)
 80021b2:	f00b f905 	bl	800d3c0 <iprintf>
		printf("\n");
 80021b6:	200a      	movs	r0, #10
 80021b8:	f00b f914 	bl	800d3e4 <putchar>

		gcvt(measurement, 8, ptr3);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7fe f9c3 	bl	8000548 <__aeabi_f2d>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4920      	ldr	r1, [pc, #128]	; (8002248 <PIDController_Update+0x608>)
 80021c8:	2008      	movs	r0, #8
 80021ca:	ec43 2b10 	vmov	d0, r2, r3
 80021ce:	f00a fbbd 	bl	800c94c <gcvt>
		printf("measurement = ");
 80021d2:	481f      	ldr	r0, [pc, #124]	; (8002250 <PIDController_Update+0x610>)
 80021d4:	f00b f8f4 	bl	800d3c0 <iprintf>
		printf(ptr3);
 80021d8:	481b      	ldr	r0, [pc, #108]	; (8002248 <PIDController_Update+0x608>)
 80021da:	f00b f8f1 	bl	800d3c0 <iprintf>
		printf("\n");
 80021de:	200a      	movs	r0, #10
 80021e0:	f00b f900 	bl	800d3e4 <putchar>

		gcvt(error, 8, ptr3);
 80021e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021e6:	f7fe f9af 	bl	8000548 <__aeabi_f2d>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4916      	ldr	r1, [pc, #88]	; (8002248 <PIDController_Update+0x608>)
 80021f0:	2008      	movs	r0, #8
 80021f2:	ec43 2b10 	vmov	d0, r2, r3
 80021f6:	f00a fba9 	bl	800c94c <gcvt>
		printf("error = ");
 80021fa:	481d      	ldr	r0, [pc, #116]	; (8002270 <PIDController_Update+0x630>)
 80021fc:	f00b f8e0 	bl	800d3c0 <iprintf>
		printf(ptr3);
 8002200:	4811      	ldr	r0, [pc, #68]	; (8002248 <PIDController_Update+0x608>)
 8002202:	f00b f8dd 	bl	800d3c0 <iprintf>
		printf("\n");
 8002206:	200a      	movs	r0, #10
 8002208:	f00b f8ec 	bl	800d3e4 <putchar>
		printf("--------------------------\n");
 800220c:	4819      	ldr	r0, [pc, #100]	; (8002274 <PIDController_Update+0x634>)
 800220e:	f00b f945 	bl	800d49c <puts>
		HAL_GPIO_TogglePin(led_2_GPIO_Port, led_2_Pin);
 8002212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002216:	4818      	ldr	r0, [pc, #96]	; (8002278 <PIDController_Update+0x638>)
 8002218:	f004 f93f 	bl	800649a <HAL_GPIO_TogglePin>
		pid_debug_counter = 0;
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <PIDController_Update+0x5f4>)
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]

	}
	/* Return controller output */

	return pid->out;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002226:	ee07 3a90 	vmov	s15, r3

}
 800222a:	eeb0 0a67 	vmov.f32	s0, s15
 800222e:	3730      	adds	r7, #48	; 0x30
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	200002b0 	.word	0x200002b0
 8002238:	08010628 	.word	0x08010628
 800223c:	08010644 	.word	0x08010644
 8002240:	08010660 	.word	0x08010660
 8002244:	200002b8 	.word	0x200002b8
 8002248:	2000024c 	.word	0x2000024c
 800224c:	0801067c 	.word	0x0801067c
 8002250:	0801068c 	.word	0x0801068c
 8002254:	0801069c 	.word	0x0801069c
 8002258:	080106a8 	.word	0x080106a8
 800225c:	080106c0 	.word	0x080106c0
 8002260:	080106e0 	.word	0x080106e0
 8002264:	080106f0 	.word	0x080106f0
 8002268:	08010700 	.word	0x08010700
 800226c:	08010704 	.word	0x08010704
 8002270:	08010710 	.word	0x08010710
 8002274:	0801071c 	.word	0x0801071c
 8002278:	40020c00 	.word	0x40020c00

0800227c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002282:	463b      	mov	r3, r7
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800228e:	4b21      	ldr	r3, [pc, #132]	; (8002314 <MX_ADC1_Init+0x98>)
 8002290:	4a21      	ldr	r2, [pc, #132]	; (8002318 <MX_ADC1_Init+0x9c>)
 8002292:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002294:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <MX_ADC1_Init+0x98>)
 8002296:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800229a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800229c:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <MX_ADC1_Init+0x98>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80022a2:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <MX_ADC1_Init+0x98>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022a8:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <MX_ADC1_Init+0x98>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022ae:	4b19      	ldr	r3, [pc, #100]	; (8002314 <MX_ADC1_Init+0x98>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <MX_ADC1_Init+0x98>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022bc:	4b15      	ldr	r3, [pc, #84]	; (8002314 <MX_ADC1_Init+0x98>)
 80022be:	4a17      	ldr	r2, [pc, #92]	; (800231c <MX_ADC1_Init+0xa0>)
 80022c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022c2:	4b14      	ldr	r3, [pc, #80]	; (8002314 <MX_ADC1_Init+0x98>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <MX_ADC1_Init+0x98>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022ce:	4b11      	ldr	r3, [pc, #68]	; (8002314 <MX_ADC1_Init+0x98>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022d6:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <MX_ADC1_Init+0x98>)
 80022d8:	2201      	movs	r2, #1
 80022da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022dc:	480d      	ldr	r0, [pc, #52]	; (8002314 <MX_ADC1_Init+0x98>)
 80022de:	f003 f9b3 	bl	8005648 <HAL_ADC_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80022e8:	f001 fdea 	bl	8003ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80022ec:	2301      	movs	r3, #1
 80022ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80022f0:	2301      	movs	r3, #1
 80022f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80022f4:	2307      	movs	r3, #7
 80022f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022f8:	463b      	mov	r3, r7
 80022fa:	4619      	mov	r1, r3
 80022fc:	4805      	ldr	r0, [pc, #20]	; (8002314 <MX_ADC1_Init+0x98>)
 80022fe:	f003 fb85 	bl	8005a0c <HAL_ADC_ConfigChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002308:	f001 fdda 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200002c0 	.word	0x200002c0
 8002318:	40012000 	.word	0x40012000
 800231c:	0f000001 	.word	0x0f000001

08002320 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a17      	ldr	r2, [pc, #92]	; (800239c <HAL_ADC_MspInit+0x7c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d127      	bne.n	8002392 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <HAL_ADC_MspInit+0x80>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	4a15      	ldr	r2, [pc, #84]	; (80023a0 <HAL_ADC_MspInit+0x80>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002350:	6453      	str	r3, [r2, #68]	; 0x44
 8002352:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <HAL_ADC_MspInit+0x80>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <HAL_ADC_MspInit+0x80>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <HAL_ADC_MspInit+0x80>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <HAL_ADC_MspInit+0x80>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = power_module_adc_Pin;
 800237a:	2302      	movs	r3, #2
 800237c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800237e:	2303      	movs	r3, #3
 8002380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(power_module_adc_GPIO_Port, &GPIO_InitStruct);
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	4619      	mov	r1, r3
 800238c:	4805      	ldr	r0, [pc, #20]	; (80023a4 <HAL_ADC_MspInit+0x84>)
 800238e:	f003 fecf 	bl	8006130 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002392:	bf00      	nop
 8002394:	3728      	adds	r7, #40	; 0x28
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40012000 	.word	0x40012000
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40020000 	.word	0x40020000

080023a8 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	4619      	mov	r1, r3
 80023b6:	2007      	movs	r0, #7
 80023b8:	f000 fbac 	bl	8002b14 <bno055_writeData>
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	4619      	mov	r1, r3
 80023d2:	203d      	movs	r0, #61	; 0x3d
 80023d4:	f000 fb9e 	bl	8002b14 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d103      	bne.n	80023e6 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80023de:	2013      	movs	r0, #19
 80023e0:	f000 fb8c 	bl	8002afc <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80023e4:	e002      	b.n	80023ec <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80023e6:	2007      	movs	r0, #7
 80023e8:	f000 fb88 	bl	8002afc <bno055_delay>
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80023f8:	2000      	movs	r0, #0
 80023fa:	f7ff ffe3 	bl	80023c4 <bno055_setOperationMode>
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}

08002402 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8002402:	b580      	push	{r7, lr}
 8002404:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8002406:	200c      	movs	r0, #12
 8002408:	f7ff ffdc 	bl	80023c4 <bno055_setOperationMode>
}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}

08002410 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8002414:	2120      	movs	r1, #32
 8002416:	203f      	movs	r0, #63	; 0x3f
 8002418:	f000 fb7c 	bl	8002b14 <bno055_writeData>
  bno055_delay(700);
 800241c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002420:	f000 fb6c 	bl	8002afc <bno055_delay>
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}

08002428 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
  bno055_reset();
 800242e:	f7ff ffef 	bl	8002410 <bno055_reset>

  uint8_t id = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8002436:	1dfb      	adds	r3, r7, #7
 8002438:	2201      	movs	r2, #1
 800243a:	4619      	mov	r1, r3
 800243c:	2000      	movs	r0, #0
 800243e:	f000 fc67 	bl	8002d10 <bno055_readData>
  if (id != BNO055_ID) {
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	2ba0      	cmp	r3, #160	; 0xa0
 8002446:	d004      	beq.n	8002452 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	4619      	mov	r1, r3
 800244c:	4809      	ldr	r0, [pc, #36]	; (8002474 <bno055_setup+0x4c>)
 800244e:	f00a ffb7 	bl	800d3c0 <iprintf>
  }
  bno055_setPage(0);
 8002452:	2000      	movs	r0, #0
 8002454:	f7ff ffa8 	bl	80023a8 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8002458:	2100      	movs	r1, #0
 800245a:	203f      	movs	r0, #63	; 0x3f
 800245c:	f000 fb5a 	bl	8002b14 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8002460:	f7ff ffc8 	bl	80023f4 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8002464:	200a      	movs	r0, #10
 8002466:	f000 fb49 	bl	8002afc <bno055_delay>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	08010738 	.word	0x08010738

08002478 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8002478:	b590      	push	{r4, r7, lr}
 800247a:	b093      	sub	sp, #76	; 0x4c
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	75fb      	strb	r3, [r7, #23]
  bno055_setPage(0);
 8002482:	2000      	movs	r0, #0
 8002484:	f7ff ff90 	bl	80023a8 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8002488:	7dfb      	ldrb	r3, [r7, #23]
 800248a:	2b20      	cmp	r3, #32
 800248c:	d107      	bne.n	800249e <bno055_getVector+0x26>
    bno055_readData(vec, buffer, 8);
 800248e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002492:	7dfb      	ldrb	r3, [r7, #23]
 8002494:	2208      	movs	r2, #8
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fc3a 	bl	8002d10 <bno055_readData>
 800249c:	e006      	b.n	80024ac <bno055_getVector+0x34>
  else
    bno055_readData(vec, buffer, 6);
 800249e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80024a2:	7dfb      	ldrb	r3, [r7, #23]
 80024a4:	2206      	movs	r2, #6
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fc32 	bl	8002d10 <bno055_readData>

  double scale = 1;
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	4b8c      	ldr	r3, [pc, #560]	; (80026e4 <bno055_getVector+0x26c>)
 80024b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
 80024b8:	2b0e      	cmp	r3, #14
 80024ba:	d109      	bne.n	80024d0 <bno055_getVector+0x58>
    scale = magScale;
 80024bc:	4b8a      	ldr	r3, [pc, #552]	; (80026e8 <bno055_getVector+0x270>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe f81f 	bl	8000504 <__aeabi_ui2d>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80024ce:	e038      	b.n	8002542 <bno055_getVector+0xca>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80024d0:	7dfb      	ldrb	r3, [r7, #23]
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d005      	beq.n	80024e2 <bno055_getVector+0x6a>
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
 80024d8:	2b28      	cmp	r3, #40	; 0x28
 80024da:	d002      	beq.n	80024e2 <bno055_getVector+0x6a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
 80024de:	2b2e      	cmp	r3, #46	; 0x2e
 80024e0:	d109      	bne.n	80024f6 <bno055_getVector+0x7e>
    scale = accelScale;
 80024e2:	4b82      	ldr	r3, [pc, #520]	; (80026ec <bno055_getVector+0x274>)
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe f80c 	bl	8000504 <__aeabi_ui2d>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80024f4:	e025      	b.n	8002542 <bno055_getVector+0xca>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
 80024f8:	2b14      	cmp	r3, #20
 80024fa:	d109      	bne.n	8002510 <bno055_getVector+0x98>
    scale = angularRateScale;
 80024fc:	4b7c      	ldr	r3, [pc, #496]	; (80026f0 <bno055_getVector+0x278>)
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fd ffff 	bl	8000504 <__aeabi_ui2d>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800250e:	e018      	b.n	8002542 <bno055_getVector+0xca>
  } else if (vec == BNO055_VECTOR_EULER) {
 8002510:	7dfb      	ldrb	r3, [r7, #23]
 8002512:	2b1a      	cmp	r3, #26
 8002514:	d109      	bne.n	800252a <bno055_getVector+0xb2>
    scale = eulerScale;
 8002516:	4b77      	ldr	r3, [pc, #476]	; (80026f4 <bno055_getVector+0x27c>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7fd fff2 	bl	8000504 <__aeabi_ui2d>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8002528:	e00b      	b.n	8002542 <bno055_getVector+0xca>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 800252a:	7dfb      	ldrb	r3, [r7, #23]
 800252c:	2b20      	cmp	r3, #32
 800252e:	d108      	bne.n	8002542 <bno055_getVector+0xca>
    scale = quaScale;
 8002530:	4b71      	ldr	r3, [pc, #452]	; (80026f8 <bno055_getVector+0x280>)
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fd ffe5 	bl	8000504 <__aeabi_ui2d>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8002542:	f107 0318 	add.w	r3, r7, #24
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	609a      	str	r2, [r3, #8]
 800254e:	60da      	str	r2, [r3, #12]
  if (vec == BNO055_VECTOR_QUATERNION) {
 8002550:	7dfb      	ldrb	r3, [r7, #23]
 8002552:	2b20      	cmp	r3, #32
 8002554:	d160      	bne.n	8002618 <bno055_getVector+0x1a0>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8002556:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	b21a      	sxth	r2, r3
 800255e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002562:	b21b      	sxth	r3, r3
 8002564:	4313      	orrs	r3, r2
 8002566:	b21b      	sxth	r3, r3
 8002568:	4618      	mov	r0, r3
 800256a:	f7fd ffdb 	bl	8000524 <__aeabi_i2d>
 800256e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002572:	f7fe f96b 	bl	800084c <__aeabi_ddiv>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4610      	mov	r0, r2
 800257c:	4619      	mov	r1, r3
 800257e:	f7fe fb13 	bl	8000ba8 <__aeabi_d2f>
 8002582:	4603      	mov	r3, r0
 8002584:	61bb      	str	r3, [r7, #24]
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8002586:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	b21a      	sxth	r2, r3
 800258e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002592:	b21b      	sxth	r3, r3
 8002594:	4313      	orrs	r3, r2
 8002596:	b21b      	sxth	r3, r3
 8002598:	4618      	mov	r0, r3
 800259a:	f7fd ffc3 	bl	8000524 <__aeabi_i2d>
 800259e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025a2:	f7fe f953 	bl	800084c <__aeabi_ddiv>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	f7fe fafb 	bl	8000ba8 <__aeabi_d2f>
 80025b2:	4603      	mov	r3, r0
 80025b4:	61fb      	str	r3, [r7, #28]
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80025b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	b21a      	sxth	r2, r3
 80025be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025c2:	b21b      	sxth	r3, r3
 80025c4:	4313      	orrs	r3, r2
 80025c6:	b21b      	sxth	r3, r3
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fd ffab 	bl	8000524 <__aeabi_i2d>
 80025ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025d2:	f7fe f93b 	bl	800084c <__aeabi_ddiv>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	f7fe fae3 	bl	8000ba8 <__aeabi_d2f>
 80025e2:	4603      	mov	r3, r0
 80025e4:	623b      	str	r3, [r7, #32]
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80025e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	b21a      	sxth	r2, r3
 80025ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80025f2:	b21b      	sxth	r3, r3
 80025f4:	4313      	orrs	r3, r2
 80025f6:	b21b      	sxth	r3, r3
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd ff93 	bl	8000524 <__aeabi_i2d>
 80025fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002602:	f7fe f923 	bl	800084c <__aeabi_ddiv>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f7fe facb 	bl	8000ba8 <__aeabi_d2f>
 8002612:	4603      	mov	r3, r0
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
 8002616:	e047      	b.n	80026a8 <bno055_getVector+0x230>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8002618:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	b21a      	sxth	r2, r3
 8002620:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002624:	b21b      	sxth	r3, r3
 8002626:	4313      	orrs	r3, r2
 8002628:	b21b      	sxth	r3, r3
 800262a:	4618      	mov	r0, r3
 800262c:	f7fd ff7a 	bl	8000524 <__aeabi_i2d>
 8002630:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002634:	f7fe f90a 	bl	800084c <__aeabi_ddiv>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	f7fe fab2 	bl	8000ba8 <__aeabi_d2f>
 8002644:	4603      	mov	r3, r0
 8002646:	61fb      	str	r3, [r7, #28]
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8002648:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	b21a      	sxth	r2, r3
 8002650:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002654:	b21b      	sxth	r3, r3
 8002656:	4313      	orrs	r3, r2
 8002658:	b21b      	sxth	r3, r3
 800265a:	4618      	mov	r0, r3
 800265c:	f7fd ff62 	bl	8000524 <__aeabi_i2d>
 8002660:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002664:	f7fe f8f2 	bl	800084c <__aeabi_ddiv>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	f7fe fa9a 	bl	8000ba8 <__aeabi_d2f>
 8002674:	4603      	mov	r3, r0
 8002676:	623b      	str	r3, [r7, #32]
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8002678:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	b21a      	sxth	r2, r3
 8002680:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002684:	b21b      	sxth	r3, r3
 8002686:	4313      	orrs	r3, r2
 8002688:	b21b      	sxth	r3, r3
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd ff4a 	bl	8000524 <__aeabi_i2d>
 8002690:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002694:	f7fe f8da 	bl	800084c <__aeabi_ddiv>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	f7fe fa82 	bl	8000ba8 <__aeabi_d2f>
 80026a4:	4603      	mov	r3, r0
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return xyz;
 80026a8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80026ac:	f107 0318 	add.w	r3, r7, #24
 80026b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80026b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026be:	ee06 0a10 	vmov	s12, r0
 80026c2:	ee06 1a90 	vmov	s13, r1
 80026c6:	ee07 2a10 	vmov	s14, r2
 80026ca:	ee07 3a90 	vmov	s15, r3
}
 80026ce:	eeb0 0a46 	vmov.f32	s0, s12
 80026d2:	eef0 0a66 	vmov.f32	s1, s13
 80026d6:	eeb0 1a47 	vmov.f32	s2, s14
 80026da:	eef0 1a67 	vmov.f32	s3, s15
 80026de:	374c      	adds	r7, #76	; 0x4c
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd90      	pop	{r4, r7, pc}
 80026e4:	3ff00000 	.word	0x3ff00000
 80026e8:	20000006 	.word	0x20000006
 80026ec:	20000000 	.word	0x20000000
 80026f0:	20000002 	.word	0x20000002
 80026f4:	20000004 	.word	0x20000004
 80026f8:	20000008 	.word	0x20000008

080026fc <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8002702:	201a      	movs	r0, #26
 8002704:	f7ff feb8 	bl	8002478 <bno055_getVector>
 8002708:	eeb0 6a40 	vmov.f32	s12, s0
 800270c:	eef0 6a60 	vmov.f32	s13, s1
 8002710:	eeb0 7a41 	vmov.f32	s14, s2
 8002714:	eef0 7a61 	vmov.f32	s15, s3
 8002718:	ed87 6a04 	vstr	s12, [r7, #16]
 800271c:	edc7 6a05 	vstr	s13, [r7, #20]
 8002720:	ed87 7a06 	vstr	s14, [r7, #24]
 8002724:	edc7 7a07 	vstr	s15, [r7, #28]
 8002728:	6938      	ldr	r0, [r7, #16]
 800272a:	6979      	ldr	r1, [r7, #20]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	ee06 0a10 	vmov	s12, r0
 8002734:	ee06 1a90 	vmov	s13, r1
 8002738:	ee07 2a10 	vmov	s14, r2
 800273c:	ee07 3a90 	vmov	s15, r3
}
 8002740:	eeb0 0a46 	vmov.f32	s0, s12
 8002744:	eef0 0a66 	vmov.f32	s1, s13
 8002748:	eeb0 1a47 	vmov.f32	s2, s14
 800274c:	eef0 1a67 	vmov.f32	s3, s15
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <init_esc>:
//1000 YERİNE 2 KATINI VEREREK 2 KATINA ÇIKARTIRSIN

//config(pwm başlat) ve kalibrasyon(mainde whileın öncesinde çağır)
int pid_debug_counter_m;
int esc_fark;
void init_esc() {
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800275c:	2100      	movs	r1, #0
 800275e:	480b      	ldr	r0, [pc, #44]	; (800278c <init_esc+0x34>)
 8002760:	f006 f950 	bl	8008a04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002764:	2104      	movs	r1, #4
 8002766:	4809      	ldr	r0, [pc, #36]	; (800278c <init_esc+0x34>)
 8002768:	f006 f94c 	bl	8008a04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800276c:	2108      	movs	r1, #8
 800276e:	4807      	ldr	r0, [pc, #28]	; (800278c <init_esc+0x34>)
 8002770:	f006 f948 	bl	8008a04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002774:	210c      	movs	r1, #12
 8002776:	4805      	ldr	r0, [pc, #20]	; (800278c <init_esc+0x34>)
 8002778:	f006 f944 	bl	8008a04 <HAL_TIM_PWM_Start>
	pid_debug_counter_m = 0;
 800277c:	4b04      	ldr	r3, [pc, #16]	; (8002790 <init_esc+0x38>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
	esc_fark = 0;
 8002782:	4b04      	ldr	r3, [pc, #16]	; (8002794 <init_esc+0x3c>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
	 TIM1->CCR3 = 1950;   // Set the minimum Pulse (1ms)
	 TIM1->CCR4 = 1950;   // Set the minimum Pulse (1ms)

	 HAL_Delay(2000);  // wait for 2 beeps
	 */
}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000900 	.word	0x20000900
 8002790:	2000036c 	.word	0x2000036c
 8002794:	20000370 	.word	0x20000370

08002798 <drive_motor_1>:

void drive_motor_1(int pwm1Val) {
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

	TIM1->CCR3 = pwm1Val;
 80027a0:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <drive_motor_1+0x1c>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40010000 	.word	0x40010000

080027b8 <drive_motor_2>:

void drive_motor_2(int pwm2Val) {
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]

	TIM1->CCR1 = pwm2Val;
 80027c0:	4a04      	ldr	r2, [pc, #16]	; (80027d4 <drive_motor_2+0x1c>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6353      	str	r3, [r2, #52]	; 0x34
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40010000 	.word	0x40010000

080027d8 <drive_motor_3>:

void drive_motor_3(int pwm3Val) {
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

	TIM1->CCR4 = pwm3Val;
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <drive_motor_3+0x1c>)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40010000 	.word	0x40010000

080027f8 <drive_motor_4>:

void drive_motor_4(int pwm4Val) {
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

	TIM1->CCR2 = pwm4Val;
 8002800:	4a04      	ldr	r2, [pc, #16]	; (8002814 <drive_motor_4+0x1c>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40010000 	.word	0x40010000

08002818 <set_pwm>:

void set_pwm(float roll_pid, float pitch_pid, float yaw_pid, uint16_t throttle,
		battery_t battery, esc_t esc) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b08e      	sub	sp, #56	; 0x38
 800281c:	af00      	add	r7, sp, #0
 800281e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8002822:	edc7 0a08 	vstr	s1, [r7, #32]
 8002826:	ed87 1a07 	vstr	s2, [r7, #28]
 800282a:	f107 0310 	add.w	r3, r7, #16
 800282e:	e883 0006 	stmia.w	r3, {r1, r2}
 8002832:	eeb0 6a61 	vmov.f32	s12, s3
 8002836:	eef0 6a42 	vmov.f32	s13, s4
 800283a:	eeb0 7a62 	vmov.f32	s14, s5
 800283e:	eef0 7a43 	vmov.f32	s15, s6
 8002842:	4603      	mov	r3, r0
 8002844:	837b      	strh	r3, [r7, #26]
 8002846:	ed87 6a00 	vstr	s12, [r7]
 800284a:	edc7 6a01 	vstr	s13, [r7, #4]
 800284e:	ed87 7a02 	vstr	s14, [r7, #8]
 8002852:	edc7 7a03 	vstr	s15, [r7, #12]

	float pulse_length_esc1 = 0, pulse_length_esc2 = 0, pulse_length_esc3 = 0,
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	633b      	str	r3, [r7, #48]	; 0x30
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
			pulse_length_esc4 = 0;
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28

	pulse_length_esc1 = throttle - roll_pid - pitch_pid; //0+ yaw_pid; //sağ arka
 800286e:	8b7b      	ldrh	r3, [r7, #26]
 8002870:	ee07 3a90 	vmov	s15, r3
 8002874:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002878:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800287c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002880:	edd7 7a08 	vldr	s15, [r7, #32]
 8002884:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002888:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	pulse_length_esc2 = throttle + roll_pid - pitch_pid; //- yaw_pid; //sol arka
 800288c:	8b7b      	ldrh	r3, [r7, #26]
 800288e:	ee07 3a90 	vmov	s15, r3
 8002892:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002896:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800289a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800289e:	edd7 7a08 	vldr	s15, [r7, #32]
 80028a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	pulse_length_esc3 = throttle - roll_pid + pitch_pid; //- yaw_pid; //sağ ön
 80028aa:	8b7b      	ldrh	r3, [r7, #26]
 80028ac:	ee07 3a90 	vmov	s15, r3
 80028b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028bc:	ed97 7a08 	vldr	s14, [r7, #32]
 80028c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	pulse_length_esc4 = throttle + roll_pid + pitch_pid; //+ yaw_pid; //sol ön
 80028c8:	8b7b      	ldrh	r3, [r7, #26]
 80028ca:	ee07 3a90 	vmov	s15, r3
 80028ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028da:	ed97 7a08 	vldr	s14, [r7, #32]
 80028de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	 pulse_length_esc4 += pulse_length_esc4
	 * ((BATTERY_START_VOLTAGE - battery.voltage)
	 / (float) BATTERY_COMPENSATION_COEFFICIENT);
	 */
	//************************************ESC MAX OUTPUT LIMITING*********************************//
	if (pulse_length_esc1 > MAX_PWM_OUTPUT)
 80028e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80028ea:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002ab4 <set_pwm+0x29c>
 80028ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f6:	dd01      	ble.n	80028fc <set_pwm+0xe4>
		pulse_length_esc1 = MAX_PWM_OUTPUT;
 80028f8:	4b6f      	ldr	r3, [pc, #444]	; (8002ab8 <set_pwm+0x2a0>)
 80028fa:	637b      	str	r3, [r7, #52]	; 0x34

	if (pulse_length_esc2 > MAX_PWM_OUTPUT)
 80028fc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002900:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8002ab4 <set_pwm+0x29c>
 8002904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290c:	dd01      	ble.n	8002912 <set_pwm+0xfa>
		pulse_length_esc2 = MAX_PWM_OUTPUT;
 800290e:	4b6a      	ldr	r3, [pc, #424]	; (8002ab8 <set_pwm+0x2a0>)
 8002910:	633b      	str	r3, [r7, #48]	; 0x30

	if (pulse_length_esc3 > MAX_PWM_OUTPUT)
 8002912:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002916:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002ab4 <set_pwm+0x29c>
 800291a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800291e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002922:	dd01      	ble.n	8002928 <set_pwm+0x110>
		pulse_length_esc3 = MAX_PWM_OUTPUT;
 8002924:	4b64      	ldr	r3, [pc, #400]	; (8002ab8 <set_pwm+0x2a0>)
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (pulse_length_esc4 > MAX_PWM_OUTPUT)
 8002928:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800292c:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002ab4 <set_pwm+0x29c>
 8002930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002938:	dd01      	ble.n	800293e <set_pwm+0x126>
		pulse_length_esc4 = MAX_PWM_OUTPUT;
 800293a:	4b5f      	ldr	r3, [pc, #380]	; (8002ab8 <set_pwm+0x2a0>)
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
	//************************************ESC MIN OUTPUT LIMITING*********************************//

	if (pulse_length_esc1 < MIN_PWM_OUTPUT)
 800293e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002942:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002abc <set_pwm+0x2a4>
 8002946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800294a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294e:	d501      	bpl.n	8002954 <set_pwm+0x13c>
		pulse_length_esc1 = MIN_PWM_OUTPUT;
 8002950:	4b5b      	ldr	r3, [pc, #364]	; (8002ac0 <set_pwm+0x2a8>)
 8002952:	637b      	str	r3, [r7, #52]	; 0x34

	if (pulse_length_esc2 < MIN_PWM_OUTPUT)
 8002954:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002958:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002abc <set_pwm+0x2a4>
 800295c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002964:	d501      	bpl.n	800296a <set_pwm+0x152>
		pulse_length_esc2 = MIN_PWM_OUTPUT;
 8002966:	4b56      	ldr	r3, [pc, #344]	; (8002ac0 <set_pwm+0x2a8>)
 8002968:	633b      	str	r3, [r7, #48]	; 0x30

	if (pulse_length_esc3 < MIN_PWM_OUTPUT)
 800296a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800296e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002abc <set_pwm+0x2a4>
 8002972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297a:	d501      	bpl.n	8002980 <set_pwm+0x168>
		pulse_length_esc3 = MIN_PWM_OUTPUT;
 800297c:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <set_pwm+0x2a8>)
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (pulse_length_esc4 < MIN_PWM_OUTPUT)
 8002980:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002984:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002abc <set_pwm+0x2a4>
 8002988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800298c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002990:	d501      	bpl.n	8002996 <set_pwm+0x17e>
		pulse_length_esc4 = MIN_PWM_OUTPUT;
 8002992:	4b4b      	ldr	r3, [pc, #300]	; (8002ac0 <set_pwm+0x2a8>)
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28

	//*********************************************************************************************//
	if (throttle < 1200) { //throttle minimum'a indirilince tüm motorları durdur
 8002996:	8b7b      	ldrh	r3, [r7, #26]
 8002998:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800299c:	d207      	bcs.n	80029ae <set_pwm+0x196>
		pulse_length_esc4 = MIN_PWM_OUTPUT;
 800299e:	4b48      	ldr	r3, [pc, #288]	; (8002ac0 <set_pwm+0x2a8>)
 80029a0:	62bb      	str	r3, [r7, #40]	; 0x28
		pulse_length_esc3 = MIN_PWM_OUTPUT;
 80029a2:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <set_pwm+0x2a8>)
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		pulse_length_esc2 = MIN_PWM_OUTPUT;
 80029a6:	4b46      	ldr	r3, [pc, #280]	; (8002ac0 <set_pwm+0x2a8>)
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30
		pulse_length_esc1 = MIN_PWM_OUTPUT;
 80029aa:	4b45      	ldr	r3, [pc, #276]	; (8002ac0 <set_pwm+0x2a8>)
 80029ac:	637b      	str	r3, [r7, #52]	; 0x34
	 pulse_length_esc3 = 1600;
	 pulse_length_esc2 = 1600;
	 pulse_length_esc1 = 1600;
	 }*/

	drive_motor_1(pulse_length_esc1); // motor sürme fonksiyonları		motor3ü çalıştırıyor1
 80029ae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029b6:	ee17 0a90 	vmov	r0, s15
 80029ba:	f7ff feed 	bl	8002798 <drive_motor_1>
	drive_motor_2(pulse_length_esc2);	//motor2
 80029be:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80029c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029c6:	ee17 0a90 	vmov	r0, s15
 80029ca:	f7ff fef5 	bl	80027b8 <drive_motor_2>
	drive_motor_3(pulse_length_esc3);	//motor1
 80029ce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80029d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029d6:	ee17 0a90 	vmov	r0, s15
 80029da:	f7ff fefd 	bl	80027d8 <drive_motor_3>
	drive_motor_4(pulse_length_esc4);	//motor4
 80029de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80029e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029e6:	ee17 0a90 	vmov	r0, s15
 80029ea:	f7ff ff05 	bl	80027f8 <drive_motor_4>

	//debug
	pid_debug_counter_m++;
 80029ee:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <set_pwm+0x2ac>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3301      	adds	r3, #1
 80029f4:	4a33      	ldr	r2, [pc, #204]	; (8002ac4 <set_pwm+0x2ac>)
 80029f6:	6013      	str	r3, [r2, #0]
	if (pid_debug_counter_m == 50) {
 80029f8:	4b32      	ldr	r3, [pc, #200]	; (8002ac4 <set_pwm+0x2ac>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b32      	cmp	r3, #50	; 0x32
 80029fe:	d155      	bne.n	8002aac <set_pwm+0x294>
		printf("\n");
 8002a00:	200a      	movs	r0, #10
 8002a02:	f00a fcef 	bl	800d3e4 <putchar>
		gcvt(pulse_length_esc1, 8, ptr2);
 8002a06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a08:	f7fd fd9e 	bl	8000548 <__aeabi_f2d>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	492d      	ldr	r1, [pc, #180]	; (8002ac8 <set_pwm+0x2b0>)
 8002a12:	2008      	movs	r0, #8
 8002a14:	ec43 2b10 	vmov	d0, r2, r3
 8002a18:	f009 ff98 	bl	800c94c <gcvt>
		printf("esc1 = ");
 8002a1c:	482b      	ldr	r0, [pc, #172]	; (8002acc <set_pwm+0x2b4>)
 8002a1e:	f00a fccf 	bl	800d3c0 <iprintf>
		printf(ptr2);
 8002a22:	4829      	ldr	r0, [pc, #164]	; (8002ac8 <set_pwm+0x2b0>)
 8002a24:	f00a fccc 	bl	800d3c0 <iprintf>
		printf("\n");
 8002a28:	200a      	movs	r0, #10
 8002a2a:	f00a fcdb 	bl	800d3e4 <putchar>

		gcvt(pulse_length_esc2, 8, ptr2);
 8002a2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a30:	f7fd fd8a 	bl	8000548 <__aeabi_f2d>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4923      	ldr	r1, [pc, #140]	; (8002ac8 <set_pwm+0x2b0>)
 8002a3a:	2008      	movs	r0, #8
 8002a3c:	ec43 2b10 	vmov	d0, r2, r3
 8002a40:	f009 ff84 	bl	800c94c <gcvt>
		printf("esc2 = ");
 8002a44:	4822      	ldr	r0, [pc, #136]	; (8002ad0 <set_pwm+0x2b8>)
 8002a46:	f00a fcbb 	bl	800d3c0 <iprintf>
		printf(ptr2);
 8002a4a:	481f      	ldr	r0, [pc, #124]	; (8002ac8 <set_pwm+0x2b0>)
 8002a4c:	f00a fcb8 	bl	800d3c0 <iprintf>
		printf("\n");
 8002a50:	200a      	movs	r0, #10
 8002a52:	f00a fcc7 	bl	800d3e4 <putchar>

		gcvt(pulse_length_esc3, 8, ptr2);
 8002a56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a58:	f7fd fd76 	bl	8000548 <__aeabi_f2d>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4919      	ldr	r1, [pc, #100]	; (8002ac8 <set_pwm+0x2b0>)
 8002a62:	2008      	movs	r0, #8
 8002a64:	ec43 2b10 	vmov	d0, r2, r3
 8002a68:	f009 ff70 	bl	800c94c <gcvt>
		printf("esc3 = ");
 8002a6c:	4819      	ldr	r0, [pc, #100]	; (8002ad4 <set_pwm+0x2bc>)
 8002a6e:	f00a fca7 	bl	800d3c0 <iprintf>
		printf(ptr2);
 8002a72:	4815      	ldr	r0, [pc, #84]	; (8002ac8 <set_pwm+0x2b0>)
 8002a74:	f00a fca4 	bl	800d3c0 <iprintf>
		printf("\n");
 8002a78:	200a      	movs	r0, #10
 8002a7a:	f00a fcb3 	bl	800d3e4 <putchar>

		gcvt(pulse_length_esc4, 8, ptr2);
 8002a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a80:	f7fd fd62 	bl	8000548 <__aeabi_f2d>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	490f      	ldr	r1, [pc, #60]	; (8002ac8 <set_pwm+0x2b0>)
 8002a8a:	2008      	movs	r0, #8
 8002a8c:	ec43 2b10 	vmov	d0, r2, r3
 8002a90:	f009 ff5c 	bl	800c94c <gcvt>
		printf("esc4 = ");
 8002a94:	4810      	ldr	r0, [pc, #64]	; (8002ad8 <set_pwm+0x2c0>)
 8002a96:	f00a fc93 	bl	800d3c0 <iprintf>
		printf(ptr2);
 8002a9a:	480b      	ldr	r0, [pc, #44]	; (8002ac8 <set_pwm+0x2b0>)
 8002a9c:	f00a fc90 	bl	800d3c0 <iprintf>
		printf("\n");
 8002aa0:	200a      	movs	r0, #10
 8002aa2:	f00a fc9f 	bl	800d3e4 <putchar>
		pid_debug_counter_m = 0;
 8002aa6:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <set_pwm+0x2ac>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
		//	printf("ESC FARKI----- =%d", esc_fark);
		//printf(esc_fark);
		//printf("\n");

	}
}
 8002aac:	bf00      	nop
 8002aae:	3738      	adds	r7, #56	; 0x38
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	44f0a000 	.word	0x44f0a000
 8002ab8:	44f0a000 	.word	0x44f0a000
 8002abc:	44898000 	.word	0x44898000
 8002ac0:	44898000 	.word	0x44898000
 8002ac4:	2000036c 	.word	0x2000036c
 8002ac8:	20000308 	.word	0x20000308
 8002acc:	08010774 	.word	0x08010774
 8002ad0:	0801077c 	.word	0x0801077c
 8002ad4:	08010784 	.word	0x08010784
 8002ad8:	0801078c 	.word	0x0801078c

08002adc <bno055_assignI2C>:
#include "bno055.h"
#include "main.h"
extern I2C_HandleTypeDef hi2c3;
I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
	_bno055_i2c_port = hi2c_device;
 8002ae4:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <bno055_assignI2C+0x1c>)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6013      	str	r3, [r2, #0]
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000374 	.word	0x20000374

08002afc <bno055_delay>:

void bno055_delay(int time) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
	osDelay(time);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f008 fd0f 	bl	800b52a <osDelay>
#else
	HAL_Delay(time);
#endif
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	460a      	mov	r2, r1
 8002b1e:	71fb      	strb	r3, [r7, #7]
 8002b20:	4613      	mov	r3, r2
 8002b22:	71bb      	strb	r3, [r7, #6]
	uint8_t txdata[2] = { reg, data };
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	733b      	strb	r3, [r7, #12]
 8002b28:	79bb      	ldrb	r3, [r7, #6]
 8002b2a:	737b      	strb	r3, [r7, #13]
	uint8_t status;
	status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8002b2c:	4b61      	ldr	r3, [pc, #388]	; (8002cb4 <bno055_writeData+0x1a0>)
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	f107 020c 	add.w	r2, r7, #12
 8002b34:	230a      	movs	r3, #10
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	2302      	movs	r3, #2
 8002b3a:	2150      	movs	r1, #80	; 0x50
 8002b3c:	f003 fe0c 	bl	8006758 <HAL_I2C_Master_Transmit>
 8002b40:	4603      	mov	r3, r0
 8002b42:	75fb      	strb	r3, [r7, #23]
			txdata, sizeof(txdata), 10);
	if (status == HAL_OK) {
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 80ae 	beq.w	8002ca8 <bno055_writeData+0x194>
		return;
	} else {
		while (status != HAL_OK) {
 8002b4c:	e009      	b.n	8002b62 <bno055_writeData+0x4e>
			bno055_assignI2C(&hi2c3);
 8002b4e:	485a      	ldr	r0, [pc, #360]	; (8002cb8 <bno055_writeData+0x1a4>)
 8002b50:	f7ff ffc4 	bl	8002adc <bno055_assignI2C>
			bno055_setup();
 8002b54:	f7ff fc68 	bl	8002428 <bno055_setup>
			bno055_setOperationModeNDOF();
 8002b58:	f7ff fc53 	bl	8002402 <bno055_setOperationModeNDOF>
			printf("imu basladi---------\r\n");
 8002b5c:	4857      	ldr	r0, [pc, #348]	; (8002cbc <bno055_writeData+0x1a8>)
 8002b5e:	f00a fc9d 	bl	800d49c <puts>
		while (status != HAL_OK) {
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f2      	bne.n	8002b4e <bno055_writeData+0x3a>
	 bno055_assignI2C(&hi2c3);
	 bno055_setup();
	 bno055_setOperationModeNDOF();
	 printf("HAL_ERROR_MUSTI\n");
	 }*/
	if (status == HAL_ERROR) {
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d103      	bne.n	8002b76 <bno055_writeData+0x62>
		printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8002b6e:	4854      	ldr	r0, [pc, #336]	; (8002cc0 <bno055_writeData+0x1ac>)
 8002b70:	f00a fc94 	bl	800d49c <puts>
 8002b74:	e012      	b.n	8002b9c <bno055_writeData+0x88>
	} else if (status == HAL_TIMEOUT) {
 8002b76:	7dfb      	ldrb	r3, [r7, #23]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d103      	bne.n	8002b84 <bno055_writeData+0x70>
		printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8002b7c:	4851      	ldr	r0, [pc, #324]	; (8002cc4 <bno055_writeData+0x1b0>)
 8002b7e:	f00a fc8d 	bl	800d49c <puts>
 8002b82:	e00b      	b.n	8002b9c <bno055_writeData+0x88>
	} else if (status == HAL_BUSY) {
 8002b84:	7dfb      	ldrb	r3, [r7, #23]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d103      	bne.n	8002b92 <bno055_writeData+0x7e>
		printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8002b8a:	484f      	ldr	r0, [pc, #316]	; (8002cc8 <bno055_writeData+0x1b4>)
 8002b8c:	f00a fc86 	bl	800d49c <puts>
 8002b90:	e004      	b.n	8002b9c <bno055_writeData+0x88>
	} else {
		printf("Unknown status data %d", status);
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
 8002b94:	4619      	mov	r1, r3
 8002b96:	484d      	ldr	r0, [pc, #308]	; (8002ccc <bno055_writeData+0x1b8>)
 8002b98:	f00a fc12 	bl	800d3c0 <iprintf>
	}

	uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8002b9c:	4b45      	ldr	r3, [pc, #276]	; (8002cb4 <bno055_writeData+0x1a0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f004 fc2b 	bl	80073fc <HAL_I2C_GetError>
 8002ba6:	6138      	str	r0, [r7, #16]
	if (error == HAL_I2C_ERROR_NONE) {
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d07e      	beq.n	8002cac <bno055_writeData+0x198>
		return;
	} else if (error == HAL_I2C_ERROR_BERR) {
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d103      	bne.n	8002bbc <bno055_writeData+0xa8>
		printf("HAL_I2C_ERROR_BERR\r\n");
 8002bb4:	4846      	ldr	r0, [pc, #280]	; (8002cd0 <bno055_writeData+0x1bc>)
 8002bb6:	f00a fc71 	bl	800d49c <puts>
 8002bba:	e021      	b.n	8002c00 <bno055_writeData+0xec>
	} else if (error == HAL_I2C_ERROR_ARLO) {
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d103      	bne.n	8002bca <bno055_writeData+0xb6>
		printf("HAL_I2C_ERROR_ARLO\r\n");
 8002bc2:	4844      	ldr	r0, [pc, #272]	; (8002cd4 <bno055_writeData+0x1c0>)
 8002bc4:	f00a fc6a 	bl	800d49c <puts>
 8002bc8:	e01a      	b.n	8002c00 <bno055_writeData+0xec>
	} else if (error == HAL_I2C_ERROR_AF) {
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d103      	bne.n	8002bd8 <bno055_writeData+0xc4>
		printf("HAL_I2C_ERROR_AF\r\n");
 8002bd0:	4841      	ldr	r0, [pc, #260]	; (8002cd8 <bno055_writeData+0x1c4>)
 8002bd2:	f00a fc63 	bl	800d49c <puts>
 8002bd6:	e013      	b.n	8002c00 <bno055_writeData+0xec>
	} else if (error == HAL_I2C_ERROR_OVR) {
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d103      	bne.n	8002be6 <bno055_writeData+0xd2>
		printf("HAL_I2C_ERROR_OVR\r\n");
 8002bde:	483f      	ldr	r0, [pc, #252]	; (8002cdc <bno055_writeData+0x1c8>)
 8002be0:	f00a fc5c 	bl	800d49c <puts>
 8002be4:	e00c      	b.n	8002c00 <bno055_writeData+0xec>
	} else if (error == HAL_I2C_ERROR_DMA) {
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	2b10      	cmp	r3, #16
 8002bea:	d103      	bne.n	8002bf4 <bno055_writeData+0xe0>
		printf("HAL_I2C_ERROR_DMA\r\n");
 8002bec:	483c      	ldr	r0, [pc, #240]	; (8002ce0 <bno055_writeData+0x1cc>)
 8002bee:	f00a fc55 	bl	800d49c <puts>
 8002bf2:	e005      	b.n	8002c00 <bno055_writeData+0xec>
	} else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	d102      	bne.n	8002c00 <bno055_writeData+0xec>
		printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8002bfa:	483a      	ldr	r0, [pc, #232]	; (8002ce4 <bno055_writeData+0x1d0>)
 8002bfc:	f00a fc4e 	bl	800d49c <puts>
	}

	HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8002c00:	4b2c      	ldr	r3, [pc, #176]	; (8002cb4 <bno055_writeData+0x1a0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f004 fbeb 	bl	80073e0 <HAL_I2C_GetState>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	73fb      	strb	r3, [r7, #15]
	if (state == HAL_I2C_STATE_RESET) {
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d103      	bne.n	8002c1c <bno055_writeData+0x108>
		printf("HAL_I2C_STATE_RESET\r\n");
 8002c14:	4834      	ldr	r0, [pc, #208]	; (8002ce8 <bno055_writeData+0x1d4>)
 8002c16:	f00a fc41 	bl	800d49c <puts>
 8002c1a:	e048      	b.n	8002cae <bno055_writeData+0x19a>
	} else if (state == HAL_I2C_STATE_READY) {
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d103      	bne.n	8002c2a <bno055_writeData+0x116>
		printf("HAL_I2C_STATE_RESET\r\n");
 8002c22:	4831      	ldr	r0, [pc, #196]	; (8002ce8 <bno055_writeData+0x1d4>)
 8002c24:	f00a fc3a 	bl	800d49c <puts>
 8002c28:	e041      	b.n	8002cae <bno055_writeData+0x19a>
	} else if (state == HAL_I2C_STATE_BUSY) {
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	2b24      	cmp	r3, #36	; 0x24
 8002c2e:	d103      	bne.n	8002c38 <bno055_writeData+0x124>
		printf("HAL_I2C_STATE_BUSY\r\n");
 8002c30:	482e      	ldr	r0, [pc, #184]	; (8002cec <bno055_writeData+0x1d8>)
 8002c32:	f00a fc33 	bl	800d49c <puts>
 8002c36:	e03a      	b.n	8002cae <bno055_writeData+0x19a>
	} else if (state == HAL_I2C_STATE_BUSY_TX) {
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	2b21      	cmp	r3, #33	; 0x21
 8002c3c:	d103      	bne.n	8002c46 <bno055_writeData+0x132>
		printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8002c3e:	482c      	ldr	r0, [pc, #176]	; (8002cf0 <bno055_writeData+0x1dc>)
 8002c40:	f00a fc2c 	bl	800d49c <puts>
 8002c44:	e033      	b.n	8002cae <bno055_writeData+0x19a>
	} else if (state == HAL_I2C_STATE_BUSY_RX) {
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	2b22      	cmp	r3, #34	; 0x22
 8002c4a:	d103      	bne.n	8002c54 <bno055_writeData+0x140>
		printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8002c4c:	4829      	ldr	r0, [pc, #164]	; (8002cf4 <bno055_writeData+0x1e0>)
 8002c4e:	f00a fc25 	bl	800d49c <puts>
 8002c52:	e02c      	b.n	8002cae <bno055_writeData+0x19a>
	} else if (state == HAL_I2C_STATE_LISTEN) {
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2b28      	cmp	r3, #40	; 0x28
 8002c58:	d103      	bne.n	8002c62 <bno055_writeData+0x14e>
		printf("HAL_I2C_STATE_LISTEN\r\n");
 8002c5a:	4827      	ldr	r0, [pc, #156]	; (8002cf8 <bno055_writeData+0x1e4>)
 8002c5c:	f00a fc1e 	bl	800d49c <puts>
 8002c60:	e025      	b.n	8002cae <bno055_writeData+0x19a>
	} else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	2b29      	cmp	r3, #41	; 0x29
 8002c66:	d103      	bne.n	8002c70 <bno055_writeData+0x15c>
		printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8002c68:	4824      	ldr	r0, [pc, #144]	; (8002cfc <bno055_writeData+0x1e8>)
 8002c6a:	f00a fc17 	bl	800d49c <puts>
 8002c6e:	e01e      	b.n	8002cae <bno055_writeData+0x19a>
	} else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	2b2a      	cmp	r3, #42	; 0x2a
 8002c74:	d103      	bne.n	8002c7e <bno055_writeData+0x16a>
		printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8002c76:	4822      	ldr	r0, [pc, #136]	; (8002d00 <bno055_writeData+0x1ec>)
 8002c78:	f00a fc10 	bl	800d49c <puts>
 8002c7c:	e017      	b.n	8002cae <bno055_writeData+0x19a>
	} else if (state == HAL_I2C_STATE_ABORT) {
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	2b60      	cmp	r3, #96	; 0x60
 8002c82:	d103      	bne.n	8002c8c <bno055_writeData+0x178>
		printf("HAL_I2C_STATE_ABORT\r\n");
 8002c84:	481f      	ldr	r0, [pc, #124]	; (8002d04 <bno055_writeData+0x1f0>)
 8002c86:	f00a fc09 	bl	800d49c <puts>
 8002c8a:	e010      	b.n	8002cae <bno055_writeData+0x19a>
	} else if (state == HAL_I2C_STATE_TIMEOUT) {
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	2ba0      	cmp	r3, #160	; 0xa0
 8002c90:	d103      	bne.n	8002c9a <bno055_writeData+0x186>
		printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8002c92:	481d      	ldr	r0, [pc, #116]	; (8002d08 <bno055_writeData+0x1f4>)
 8002c94:	f00a fc02 	bl	800d49c <puts>
 8002c98:	e009      	b.n	8002cae <bno055_writeData+0x19a>
	} else if (state == HAL_I2C_STATE_ERROR) {
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	2be0      	cmp	r3, #224	; 0xe0
 8002c9e:	d106      	bne.n	8002cae <bno055_writeData+0x19a>
		printf("HAL_I2C_STATE_ERROR\r\n");
 8002ca0:	481a      	ldr	r0, [pc, #104]	; (8002d0c <bno055_writeData+0x1f8>)
 8002ca2:	f00a fbfb 	bl	800d49c <puts>
 8002ca6:	e002      	b.n	8002cae <bno055_writeData+0x19a>
		return;
 8002ca8:	bf00      	nop
 8002caa:	e000      	b.n	8002cae <bno055_writeData+0x19a>
		return;
 8002cac:	bf00      	nop
	}
	// while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
	// return;
}
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000374 	.word	0x20000374
 8002cb8:	200007f0 	.word	0x200007f0
 8002cbc:	08010794 	.word	0x08010794
 8002cc0:	080107ac 	.word	0x080107ac
 8002cc4:	080107d0 	.word	0x080107d0
 8002cc8:	080107f8 	.word	0x080107f8
 8002ccc:	0801081c 	.word	0x0801081c
 8002cd0:	08010834 	.word	0x08010834
 8002cd4:	08010848 	.word	0x08010848
 8002cd8:	0801085c 	.word	0x0801085c
 8002cdc:	08010870 	.word	0x08010870
 8002ce0:	08010884 	.word	0x08010884
 8002ce4:	08010898 	.word	0x08010898
 8002ce8:	080108b0 	.word	0x080108b0
 8002cec:	080108c8 	.word	0x080108c8
 8002cf0:	080108dc 	.word	0x080108dc
 8002cf4:	080108f4 	.word	0x080108f4
 8002cf8:	0801090c 	.word	0x0801090c
 8002cfc:	08010924 	.word	0x08010924
 8002d00:	08010944 	.word	0x08010944
 8002d04:	08010964 	.word	0x08010964
 8002d08:	0801097c 	.word	0x0801097c
 8002d0c:	08010994 	.word	0x08010994

08002d10 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	4603      	mov	r3, r0
 8002d18:	6039      	str	r1, [r7, #0]
 8002d1a:	71fb      	strb	r3, [r7, #7]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <bno055_readData+0x40>)
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	1dfa      	adds	r2, r7, #7
 8002d26:	2364      	movs	r3, #100	; 0x64
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	2150      	movs	r1, #80	; 0x50
 8002d2e:	f003 fd13 	bl	8006758 <HAL_I2C_Master_Transmit>
			100);
	HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8002d32:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <bno055_readData+0x40>)
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	79bb      	ldrb	r3, [r7, #6]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2264      	movs	r2, #100	; 0x64
 8002d3c:	9200      	str	r2, [sp, #0]
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	2150      	movs	r1, #80	; 0x50
 8002d42:	f003 fe07 	bl	8006954 <HAL_I2C_Master_Receive>
			100);
	// HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
	// I2C_MEMADD_SIZE_8BIT, data, len, 100);

}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000374 	.word	0x20000374

08002d54 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <vApplicationGetIdleTaskMemory+0x2c>)
 8002d64:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	4a06      	ldr	r2, [pc, #24]	; (8002d84 <vApplicationGetIdleTaskMemory+0x30>)
 8002d6a:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2280      	movs	r2, #128	; 0x80
 8002d70:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8002d72:	bf00      	nop
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	200004fc 	.word	0x200004fc
 8002d84:	2000059c 	.word	0x2000059c

08002d88 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8002d88:	b5b0      	push	{r4, r5, r7, lr}
 8002d8a:	b0aa      	sub	sp, #168	; 0xa8
 8002d8c:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of sendDataTask */
	osThreadDef(sendDataTask, StartSendDataTask, osPriorityIdle, 0, 128);
 8002d8e:	4b3a      	ldr	r3, [pc, #232]	; (8002e78 <MX_FREERTOS_Init+0xf0>)
 8002d90:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8002d94:	461d      	mov	r5, r3
 8002d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002d9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	sendDataTaskHandle = osThreadCreate(osThread(sendDataTask), NULL);
 8002da2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f008 fb72 	bl	800b492 <osThreadCreate>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4a32      	ldr	r2, [pc, #200]	; (8002e7c <MX_FREERTOS_Init+0xf4>)
 8002db2:	6013      	str	r3, [r2, #0]

	/* definition and creation of barometerTask */
	osThreadDef(barometerTask, startBarometerTask, osPriorityIdle, 0, 128);
 8002db4:	4b32      	ldr	r3, [pc, #200]	; (8002e80 <MX_FREERTOS_Init+0xf8>)
 8002db6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8002dba:	461d      	mov	r5, r3
 8002dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002dc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	barometerTaskHandle = osThreadCreate(osThread(barometerTask), NULL);
 8002dc8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f008 fb5f 	bl	800b492 <osThreadCreate>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	4a2b      	ldr	r2, [pc, #172]	; (8002e84 <MX_FREERTOS_Init+0xfc>)
 8002dd8:	6013      	str	r3, [r2, #0]

	/* definition and creation of escTask */
	osThreadDef(escTask, startEscTask, osPriorityIdle, 0, 128);
 8002dda:	4b2b      	ldr	r3, [pc, #172]	; (8002e88 <MX_FREERTOS_Init+0x100>)
 8002ddc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8002de0:	461d      	mov	r5, r3
 8002de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002de6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002dea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	escTaskHandle = osThreadCreate(osThread(escTask), NULL);
 8002dee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002df2:	2100      	movs	r1, #0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f008 fb4c 	bl	800b492 <osThreadCreate>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4a23      	ldr	r2, [pc, #140]	; (8002e8c <MX_FREERTOS_Init+0x104>)
 8002dfe:	6013      	str	r3, [r2, #0]

	/* definition and creation of imuTask */
	osThreadDef(imuTask, StartImuTask, osPriorityRealtime, 0, 128);
 8002e00:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <MX_FREERTOS_Init+0x108>)
 8002e02:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002e06:	461d      	mov	r5, r3
 8002e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	imuTaskHandle = osThreadCreate(osThread(imuTask), NULL);
 8002e14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f008 fb39 	bl	800b492 <osThreadCreate>
 8002e20:	4603      	mov	r3, r0
 8002e22:	4a1c      	ldr	r2, [pc, #112]	; (8002e94 <MX_FREERTOS_Init+0x10c>)
 8002e24:	6013      	str	r3, [r2, #0]

	/* definition and creation of batteryTask */
	osThreadDef(batteryTask, StartBatteryTask, osPriorityIdle, 0, 128);
 8002e26:	4b1c      	ldr	r3, [pc, #112]	; (8002e98 <MX_FREERTOS_Init+0x110>)
 8002e28:	f107 041c 	add.w	r4, r7, #28
 8002e2c:	461d      	mov	r5, r3
 8002e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	batteryTaskHandle = osThreadCreate(osThread(batteryTask), NULL);
 8002e3a:	f107 031c 	add.w	r3, r7, #28
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4618      	mov	r0, r3
 8002e42:	f008 fb26 	bl	800b492 <osThreadCreate>
 8002e46:	4603      	mov	r3, r0
 8002e48:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <MX_FREERTOS_Init+0x114>)
 8002e4a:	6013      	str	r3, [r2, #0]

	/* definition and creation of gpsTask */
	osThreadDef(gpsTask, StartGPSTask, osPriorityIdle, 0, 128);
 8002e4c:	4b14      	ldr	r3, [pc, #80]	; (8002ea0 <MX_FREERTOS_Init+0x118>)
 8002e4e:	463c      	mov	r4, r7
 8002e50:	461d      	mov	r5, r3
 8002e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	gpsTaskHandle = osThreadCreate(osThread(gpsTask), NULL);
 8002e5e:	463b      	mov	r3, r7
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f008 fb15 	bl	800b492 <osThreadCreate>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ea4 <MX_FREERTOS_Init+0x11c>)
 8002e6c:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 8002e6e:	bf00      	nop
 8002e70:	37a8      	adds	r7, #168	; 0xa8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bdb0      	pop	{r4, r5, r7, pc}
 8002e76:	bf00      	nop
 8002e78:	080109bc 	.word	0x080109bc
 8002e7c:	200004e4 	.word	0x200004e4
 8002e80:	080109e8 	.word	0x080109e8
 8002e84:	200004e8 	.word	0x200004e8
 8002e88:	08010a0c 	.word	0x08010a0c
 8002e8c:	200004ec 	.word	0x200004ec
 8002e90:	08010a30 	.word	0x08010a30
 8002e94:	200004f0 	.word	0x200004f0
 8002e98:	08010a58 	.word	0x08010a58
 8002e9c:	200004f4 	.word	0x200004f4
 8002ea0:	08010a7c 	.word	0x08010a7c
 8002ea4:	200004f8 	.word	0x200004f8

08002ea8 <StartSendDataTask>:
 * @brief Function implementing the sendDataTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSendDataTask */
void StartSendDataTask(void const *argument) {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
		 if (failsafe.flag == true) {
		 printf("FAILSAFE IS ACTIVATED!\n");
		 }
		 */

		osDelay(SAMPLE_TIME_TX);
 8002eb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002eb4:	f008 fb39 	bl	800b52a <osDelay>
 8002eb8:	e7fa      	b.n	8002eb0 <StartSendDataTask+0x8>
 8002eba:	0000      	movs	r0, r0
 8002ebc:	0000      	movs	r0, r0
	...

08002ec0 <startBarometerTask>:
 * @brief Function implementing the barometerTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startBarometerTask */
void startBarometerTask(void const *argument) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startBarometerTask */
	BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8002ec8:	2304      	movs	r3, #4
 8002eca:	9301      	str	r3, [sp, #4]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	2105      	movs	r1, #5
 8002ed6:	2002      	movs	r0, #2
 8002ed8:	f7fe f966 	bl	80011a8 <BME280_Config>
	osDelay(SAMPLE_TIME_BAROMETER);
 8002edc:	2064      	movs	r0, #100	; 0x64
 8002ede:	f008 fb24 	bl	800b52a <osDelay>
	BME280_Measure();
 8002ee2:	f7fe fdfb 	bl	8001adc <BME280_Measure>
	bme280.initialAltitude = 44330
			* (1
					- (pow(((float) bme280.pressure / (float) atmPress),
 8002ee6:	4b38      	ldr	r3, [pc, #224]	; (8002fc8 <startBarometerTask+0x108>)
 8002ee8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002eec:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002fcc <startBarometerTask+0x10c>
 8002ef0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ef4:	ee16 0a90 	vmov	r0, s13
 8002ef8:	f7fd fb26 	bl	8000548 <__aeabi_f2d>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 8002fb8 <startBarometerTask+0xf8>
 8002f04:	ec43 2b10 	vmov	d0, r2, r3
 8002f08:	f00c fc4a 	bl	800f7a0 <pow>
 8002f0c:	ec53 2b10 	vmov	r2, r3, d0
 8002f10:	f04f 0000 	mov.w	r0, #0
 8002f14:	492e      	ldr	r1, [pc, #184]	; (8002fd0 <startBarometerTask+0x110>)
 8002f16:	f7fd f9b7 	bl	8000288 <__aeabi_dsub>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
			* (1
 8002f22:	a327      	add	r3, pc, #156	; (adr r3, 8002fc0 <startBarometerTask+0x100>)
 8002f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f28:	f7fd fb66 	bl	80005f8 <__aeabi_dmul>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4610      	mov	r0, r2
 8002f32:	4619      	mov	r1, r3
 8002f34:	f7fd fe38 	bl	8000ba8 <__aeabi_d2f>
 8002f38:	4603      	mov	r3, r0
	bme280.initialAltitude = 44330
 8002f3a:	4a23      	ldr	r2, [pc, #140]	; (8002fc8 <startBarometerTask+0x108>)
 8002f3c:	6113      	str	r3, [r2, #16]
							0.19029495718)));
	/* Infinite loop */
	for (;;) {
		BME280_Measure();
 8002f3e:	f7fe fdcd 	bl	8001adc <BME280_Measure>
		bme280.altitude = 44330
				* (1
						- (pow(((float) bme280.pressure / (float) atmPress),
 8002f42:	4b21      	ldr	r3, [pc, #132]	; (8002fc8 <startBarometerTask+0x108>)
 8002f44:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f48:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002fcc <startBarometerTask+0x10c>
 8002f4c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f50:	ee16 0a90 	vmov	r0, s13
 8002f54:	f7fd faf8 	bl	8000548 <__aeabi_f2d>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8002fb8 <startBarometerTask+0xf8>
 8002f60:	ec43 2b10 	vmov	d0, r2, r3
 8002f64:	f00c fc1c 	bl	800f7a0 <pow>
 8002f68:	ec53 2b10 	vmov	r2, r3, d0
 8002f6c:	f04f 0000 	mov.w	r0, #0
 8002f70:	4917      	ldr	r1, [pc, #92]	; (8002fd0 <startBarometerTask+0x110>)
 8002f72:	f7fd f989 	bl	8000288 <__aeabi_dsub>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
				* (1
 8002f7e:	a310      	add	r3, pc, #64	; (adr r3, 8002fc0 <startBarometerTask+0x100>)
 8002f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f84:	f7fd fb38 	bl	80005f8 <__aeabi_dmul>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f7fd fe0a 	bl	8000ba8 <__aeabi_d2f>
 8002f94:	4603      	mov	r3, r0
		bme280.altitude = 44330
 8002f96:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <startBarometerTask+0x108>)
 8002f98:	60d3      	str	r3, [r2, #12]
								0.19029495718)));
		bme280.finalAltitude = bme280.altitude - bme280.initialAltitude;
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <startBarometerTask+0x108>)
 8002f9c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <startBarometerTask+0x108>)
 8002fa2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002faa:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <startBarometerTask+0x108>)
 8002fac:	edc3 7a05 	vstr	s15, [r3, #20]
		osDelay(SAMPLE_TIME_BAROMETER);
 8002fb0:	2064      	movs	r0, #100	; 0x64
 8002fb2:	f008 faba 	bl	800b52a <osDelay>
		BME280_Measure();
 8002fb6:	e7c2      	b.n	8002f3e <startBarometerTask+0x7e>
 8002fb8:	ccd745e4 	.word	0xccd745e4
 8002fbc:	3fc85b95 	.word	0x3fc85b95
 8002fc0:	00000000 	.word	0x00000000
 8002fc4:	40e5a540 	.word	0x40e5a540
 8002fc8:	200004cc 	.word	0x200004cc
 8002fcc:	47c5e680 	.word	0x47c5e680
 8002fd0:	3ff00000 	.word	0x3ff00000

08002fd4 <startEscTask>:
 * @brief Function implementing the escTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startEscTask */
void startEscTask(void const *argument) {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startEscTask */
//init_esc();
	/* Infinite loop */
	for (;;) {
		if (AUTONOMOUS_MODE == drive_mode) {
 8002fdc:	4b71      	ldr	r3, [pc, #452]	; (80031a4 <startEscTask+0x1d0>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	f040 81f4 	bne.w	80033ce <startEscTask+0x3fa>

			if (uartBuffer.movementData.takeoff == TRUE) { //OTONOM TAKE OFF
 8002fe6:	4b70      	ldr	r3, [pc, #448]	; (80031a8 <startEscTask+0x1d4>)
 8002fe8:	789b      	ldrb	r3, [r3, #2]
 8002fea:	2b31      	cmp	r3, #49	; 0x31
 8002fec:	f040 80e8 	bne.w	80031c0 <startEscTask+0x1ec>
				osDelay(TAKEOFF_STEP_TIME);
 8002ff0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ff4:	f008 fa99 	bl	800b52a <osDelay>
				osDelay(TAKEOFF_STEP_TIME);
 8002ff8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ffc:	f008 fa95 	bl	800b52a <osDelay>

				set_pwm(PID_ROLL, PID_PITCH, PID_YAW, 1300, battery, esc);
 8003000:	4b6a      	ldr	r3, [pc, #424]	; (80031ac <startEscTask+0x1d8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	ee07 3a90 	vmov	s15, r3
 8003008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800300c:	4b68      	ldr	r3, [pc, #416]	; (80031b0 <startEscTask+0x1dc>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	ee07 3a10 	vmov	s14, r3
 8003014:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003018:	4b66      	ldr	r3, [pc, #408]	; (80031b4 <startEscTask+0x1e0>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	ee06 3a90 	vmov	s13, r3
 8003020:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003024:	4b64      	ldr	r3, [pc, #400]	; (80031b8 <startEscTask+0x1e4>)
 8003026:	edd3 4a00 	vldr	s9, [r3]
 800302a:	ed93 5a01 	vldr	s10, [r3, #4]
 800302e:	edd3 5a02 	vldr	s11, [r3, #8]
 8003032:	ed93 6a03 	vldr	s12, [r3, #12]
 8003036:	4b61      	ldr	r3, [pc, #388]	; (80031bc <startEscTask+0x1e8>)
 8003038:	eef0 1a64 	vmov.f32	s3, s9
 800303c:	eeb0 2a45 	vmov.f32	s4, s10
 8003040:	eef0 2a65 	vmov.f32	s5, s11
 8003044:	eeb0 3a46 	vmov.f32	s6, s12
 8003048:	e893 0006 	ldmia.w	r3, {r1, r2}
 800304c:	f240 5014 	movw	r0, #1300	; 0x514
 8003050:	eeb0 1a66 	vmov.f32	s2, s13
 8003054:	eef0 0a47 	vmov.f32	s1, s14
 8003058:	eeb0 0a67 	vmov.f32	s0, s15
 800305c:	f7ff fbdc 	bl	8002818 <set_pwm>
				osDelay(TAKEOFF_STEP_TIME);
 8003060:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003064:	f008 fa61 	bl	800b52a <osDelay>

				set_pwm(PID_ROLL, PID_PITCH, PID_YAW, 1500, battery, esc);
 8003068:	4b50      	ldr	r3, [pc, #320]	; (80031ac <startEscTask+0x1d8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	ee07 3a90 	vmov	s15, r3
 8003070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003074:	4b4e      	ldr	r3, [pc, #312]	; (80031b0 <startEscTask+0x1dc>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	ee07 3a10 	vmov	s14, r3
 800307c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003080:	4b4c      	ldr	r3, [pc, #304]	; (80031b4 <startEscTask+0x1e0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	ee06 3a90 	vmov	s13, r3
 8003088:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800308c:	4b4a      	ldr	r3, [pc, #296]	; (80031b8 <startEscTask+0x1e4>)
 800308e:	edd3 4a00 	vldr	s9, [r3]
 8003092:	ed93 5a01 	vldr	s10, [r3, #4]
 8003096:	edd3 5a02 	vldr	s11, [r3, #8]
 800309a:	ed93 6a03 	vldr	s12, [r3, #12]
 800309e:	4b47      	ldr	r3, [pc, #284]	; (80031bc <startEscTask+0x1e8>)
 80030a0:	eef0 1a64 	vmov.f32	s3, s9
 80030a4:	eeb0 2a45 	vmov.f32	s4, s10
 80030a8:	eef0 2a65 	vmov.f32	s5, s11
 80030ac:	eeb0 3a46 	vmov.f32	s6, s12
 80030b0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80030b4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80030b8:	eeb0 1a66 	vmov.f32	s2, s13
 80030bc:	eef0 0a47 	vmov.f32	s1, s14
 80030c0:	eeb0 0a67 	vmov.f32	s0, s15
 80030c4:	f7ff fba8 	bl	8002818 <set_pwm>
				osDelay(TAKEOFF_STEP_TIME);
 80030c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030cc:	f008 fa2d 	bl	800b52a <osDelay>

				set_pwm(PID_ROLL, PID_PITCH, PID_YAW, 1700, battery, esc);
 80030d0:	4b36      	ldr	r3, [pc, #216]	; (80031ac <startEscTask+0x1d8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	ee07 3a90 	vmov	s15, r3
 80030d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030dc:	4b34      	ldr	r3, [pc, #208]	; (80031b0 <startEscTask+0x1dc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	ee07 3a10 	vmov	s14, r3
 80030e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80030e8:	4b32      	ldr	r3, [pc, #200]	; (80031b4 <startEscTask+0x1e0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	ee06 3a90 	vmov	s13, r3
 80030f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80030f4:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <startEscTask+0x1e4>)
 80030f6:	edd3 4a00 	vldr	s9, [r3]
 80030fa:	ed93 5a01 	vldr	s10, [r3, #4]
 80030fe:	edd3 5a02 	vldr	s11, [r3, #8]
 8003102:	ed93 6a03 	vldr	s12, [r3, #12]
 8003106:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <startEscTask+0x1e8>)
 8003108:	eef0 1a64 	vmov.f32	s3, s9
 800310c:	eeb0 2a45 	vmov.f32	s4, s10
 8003110:	eef0 2a65 	vmov.f32	s5, s11
 8003114:	eeb0 3a46 	vmov.f32	s6, s12
 8003118:	e893 0006 	ldmia.w	r3, {r1, r2}
 800311c:	f240 60a4 	movw	r0, #1700	; 0x6a4
 8003120:	eeb0 1a66 	vmov.f32	s2, s13
 8003124:	eef0 0a47 	vmov.f32	s1, s14
 8003128:	eeb0 0a67 	vmov.f32	s0, s15
 800312c:	f7ff fb74 	bl	8002818 <set_pwm>
				osDelay(TAKEOFF_STEP_TIME);
 8003130:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003134:	f008 f9f9 	bl	800b52a <osDelay>

				set_pwm(PID_ROLL, PID_PITCH, PID_YAW, 1800, battery, esc);
 8003138:	4b1c      	ldr	r3, [pc, #112]	; (80031ac <startEscTask+0x1d8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	ee07 3a90 	vmov	s15, r3
 8003140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003144:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <startEscTask+0x1dc>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	ee07 3a10 	vmov	s14, r3
 800314c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003150:	4b18      	ldr	r3, [pc, #96]	; (80031b4 <startEscTask+0x1e0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	ee06 3a90 	vmov	s13, r3
 8003158:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800315c:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <startEscTask+0x1e4>)
 800315e:	edd3 4a00 	vldr	s9, [r3]
 8003162:	ed93 5a01 	vldr	s10, [r3, #4]
 8003166:	edd3 5a02 	vldr	s11, [r3, #8]
 800316a:	ed93 6a03 	vldr	s12, [r3, #12]
 800316e:	4b13      	ldr	r3, [pc, #76]	; (80031bc <startEscTask+0x1e8>)
 8003170:	eef0 1a64 	vmov.f32	s3, s9
 8003174:	eeb0 2a45 	vmov.f32	s4, s10
 8003178:	eef0 2a65 	vmov.f32	s5, s11
 800317c:	eeb0 3a46 	vmov.f32	s6, s12
 8003180:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003184:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8003188:	eeb0 1a66 	vmov.f32	s2, s13
 800318c:	eef0 0a47 	vmov.f32	s1, s14
 8003190:	eeb0 0a67 	vmov.f32	s0, s15
 8003194:	f7ff fb40 	bl	8002818 <set_pwm>
				osDelay(TAKEOFF_STEP_TIME);
 8003198:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800319c:	f008 f9c5 	bl	800b52a <osDelay>
 80031a0:	e160      	b.n	8003464 <startEscTask+0x490>
 80031a2:	bf00      	nop
 80031a4:	2000044c 	.word	0x2000044c
 80031a8:	20000844 	.word	0x20000844
 80031ac:	20000440 	.word	0x20000440
 80031b0:	20000444 	.word	0x20000444
 80031b4:	20000448 	.word	0x20000448
 80031b8:	20000450 	.word	0x20000450
 80031bc:	200004c4 	.word	0x200004c4

			} else if (uartBuffer.movementData.landing == TRUE) { //OTONOM LANDING
 80031c0:	4baa      	ldr	r3, [pc, #680]	; (800346c <startEscTask+0x498>)
 80031c2:	785b      	ldrb	r3, [r3, #1]
 80031c4:	2b31      	cmp	r3, #49	; 0x31
 80031c6:	f040 80d1 	bne.w	800336c <startEscTask+0x398>

				set_pwm(PID_ROLL, PID_PITCH, PID_YAW, 1700, battery, esc);
 80031ca:	4ba9      	ldr	r3, [pc, #676]	; (8003470 <startEscTask+0x49c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031d6:	4ba7      	ldr	r3, [pc, #668]	; (8003474 <startEscTask+0x4a0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	ee07 3a10 	vmov	s14, r3
 80031de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80031e2:	4ba5      	ldr	r3, [pc, #660]	; (8003478 <startEscTask+0x4a4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	ee06 3a90 	vmov	s13, r3
 80031ea:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80031ee:	4ba3      	ldr	r3, [pc, #652]	; (800347c <startEscTask+0x4a8>)
 80031f0:	edd3 4a00 	vldr	s9, [r3]
 80031f4:	ed93 5a01 	vldr	s10, [r3, #4]
 80031f8:	edd3 5a02 	vldr	s11, [r3, #8]
 80031fc:	ed93 6a03 	vldr	s12, [r3, #12]
 8003200:	4b9f      	ldr	r3, [pc, #636]	; (8003480 <startEscTask+0x4ac>)
 8003202:	eef0 1a64 	vmov.f32	s3, s9
 8003206:	eeb0 2a45 	vmov.f32	s4, s10
 800320a:	eef0 2a65 	vmov.f32	s5, s11
 800320e:	eeb0 3a46 	vmov.f32	s6, s12
 8003212:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003216:	f240 60a4 	movw	r0, #1700	; 0x6a4
 800321a:	eeb0 1a66 	vmov.f32	s2, s13
 800321e:	eef0 0a47 	vmov.f32	s1, s14
 8003222:	eeb0 0a67 	vmov.f32	s0, s15
 8003226:	f7ff faf7 	bl	8002818 <set_pwm>
				osDelay(LAND_STEP_TIME);
 800322a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800322e:	f008 f97c 	bl	800b52a <osDelay>

				set_pwm(PID_ROLL, PID_PITCH, PID_YAW, 1650, battery, esc);
 8003232:	4b8f      	ldr	r3, [pc, #572]	; (8003470 <startEscTask+0x49c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	ee07 3a90 	vmov	s15, r3
 800323a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800323e:	4b8d      	ldr	r3, [pc, #564]	; (8003474 <startEscTask+0x4a0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	ee07 3a10 	vmov	s14, r3
 8003246:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800324a:	4b8b      	ldr	r3, [pc, #556]	; (8003478 <startEscTask+0x4a4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	ee06 3a90 	vmov	s13, r3
 8003252:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003256:	4b89      	ldr	r3, [pc, #548]	; (800347c <startEscTask+0x4a8>)
 8003258:	edd3 4a00 	vldr	s9, [r3]
 800325c:	ed93 5a01 	vldr	s10, [r3, #4]
 8003260:	edd3 5a02 	vldr	s11, [r3, #8]
 8003264:	ed93 6a03 	vldr	s12, [r3, #12]
 8003268:	4b85      	ldr	r3, [pc, #532]	; (8003480 <startEscTask+0x4ac>)
 800326a:	eef0 1a64 	vmov.f32	s3, s9
 800326e:	eeb0 2a45 	vmov.f32	s4, s10
 8003272:	eef0 2a65 	vmov.f32	s5, s11
 8003276:	eeb0 3a46 	vmov.f32	s6, s12
 800327a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800327e:	f240 6072 	movw	r0, #1650	; 0x672
 8003282:	eeb0 1a66 	vmov.f32	s2, s13
 8003286:	eef0 0a47 	vmov.f32	s1, s14
 800328a:	eeb0 0a67 	vmov.f32	s0, s15
 800328e:	f7ff fac3 	bl	8002818 <set_pwm>
				osDelay(LAND_STEP_TIME);
 8003292:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003296:	f008 f948 	bl	800b52a <osDelay>

				set_pwm(PID_ROLL, PID_PITCH, PID_YAW, 1500, battery, esc);
 800329a:	4b75      	ldr	r3, [pc, #468]	; (8003470 <startEscTask+0x49c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	ee07 3a90 	vmov	s15, r3
 80032a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032a6:	4b73      	ldr	r3, [pc, #460]	; (8003474 <startEscTask+0x4a0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	ee07 3a10 	vmov	s14, r3
 80032ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80032b2:	4b71      	ldr	r3, [pc, #452]	; (8003478 <startEscTask+0x4a4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	ee06 3a90 	vmov	s13, r3
 80032ba:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80032be:	4b6f      	ldr	r3, [pc, #444]	; (800347c <startEscTask+0x4a8>)
 80032c0:	edd3 4a00 	vldr	s9, [r3]
 80032c4:	ed93 5a01 	vldr	s10, [r3, #4]
 80032c8:	edd3 5a02 	vldr	s11, [r3, #8]
 80032cc:	ed93 6a03 	vldr	s12, [r3, #12]
 80032d0:	4b6b      	ldr	r3, [pc, #428]	; (8003480 <startEscTask+0x4ac>)
 80032d2:	eef0 1a64 	vmov.f32	s3, s9
 80032d6:	eeb0 2a45 	vmov.f32	s4, s10
 80032da:	eef0 2a65 	vmov.f32	s5, s11
 80032de:	eeb0 3a46 	vmov.f32	s6, s12
 80032e2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80032e6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80032ea:	eeb0 1a66 	vmov.f32	s2, s13
 80032ee:	eef0 0a47 	vmov.f32	s1, s14
 80032f2:	eeb0 0a67 	vmov.f32	s0, s15
 80032f6:	f7ff fa8f 	bl	8002818 <set_pwm>
				osDelay(LAND_STEP_TIME);
 80032fa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80032fe:	f008 f914 	bl	800b52a <osDelay>

				set_pwm(PID_ROLL, PID_PITCH, PID_YAW, 1300, battery, esc);
 8003302:	4b5b      	ldr	r3, [pc, #364]	; (8003470 <startEscTask+0x49c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800330e:	4b59      	ldr	r3, [pc, #356]	; (8003474 <startEscTask+0x4a0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	ee07 3a10 	vmov	s14, r3
 8003316:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800331a:	4b57      	ldr	r3, [pc, #348]	; (8003478 <startEscTask+0x4a4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	ee06 3a90 	vmov	s13, r3
 8003322:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003326:	4b55      	ldr	r3, [pc, #340]	; (800347c <startEscTask+0x4a8>)
 8003328:	edd3 4a00 	vldr	s9, [r3]
 800332c:	ed93 5a01 	vldr	s10, [r3, #4]
 8003330:	edd3 5a02 	vldr	s11, [r3, #8]
 8003334:	ed93 6a03 	vldr	s12, [r3, #12]
 8003338:	4b51      	ldr	r3, [pc, #324]	; (8003480 <startEscTask+0x4ac>)
 800333a:	eef0 1a64 	vmov.f32	s3, s9
 800333e:	eeb0 2a45 	vmov.f32	s4, s10
 8003342:	eef0 2a65 	vmov.f32	s5, s11
 8003346:	eeb0 3a46 	vmov.f32	s6, s12
 800334a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800334e:	f240 5014 	movw	r0, #1300	; 0x514
 8003352:	eeb0 1a66 	vmov.f32	s2, s13
 8003356:	eef0 0a47 	vmov.f32	s1, s14
 800335a:	eeb0 0a67 	vmov.f32	s0, s15
 800335e:	f7ff fa5b 	bl	8002818 <set_pwm>
				osDelay(LAND_STEP_TIME);
 8003362:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003366:	f008 f8e0 	bl	800b52a <osDelay>
 800336a:	e07b      	b.n	8003464 <startEscTask+0x490>

			} else {
				set_pwm(PID_ROLL, PID_PITCH, PID_YAW, PWM_CRUISE, battery, esc);
 800336c:	4b40      	ldr	r3, [pc, #256]	; (8003470 <startEscTask+0x49c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	ee07 3a90 	vmov	s15, r3
 8003374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003378:	4b3e      	ldr	r3, [pc, #248]	; (8003474 <startEscTask+0x4a0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	ee07 3a10 	vmov	s14, r3
 8003380:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003384:	4b3c      	ldr	r3, [pc, #240]	; (8003478 <startEscTask+0x4a4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	ee06 3a90 	vmov	s13, r3
 800338c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003390:	4b3a      	ldr	r3, [pc, #232]	; (800347c <startEscTask+0x4a8>)
 8003392:	edd3 4a00 	vldr	s9, [r3]
 8003396:	ed93 5a01 	vldr	s10, [r3, #4]
 800339a:	edd3 5a02 	vldr	s11, [r3, #8]
 800339e:	ed93 6a03 	vldr	s12, [r3, #12]
 80033a2:	4b37      	ldr	r3, [pc, #220]	; (8003480 <startEscTask+0x4ac>)
 80033a4:	eef0 1a64 	vmov.f32	s3, s9
 80033a8:	eeb0 2a45 	vmov.f32	s4, s10
 80033ac:	eef0 2a65 	vmov.f32	s5, s11
 80033b0:	eeb0 3a46 	vmov.f32	s6, s12
 80033b4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80033b8:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80033bc:	eeb0 1a66 	vmov.f32	s2, s13
 80033c0:	eef0 0a47 	vmov.f32	s1, s14
 80033c4:	eeb0 0a67 	vmov.f32	s0, s15
 80033c8:	f7ff fa26 	bl	8002818 <set_pwm>
 80033cc:	e04a      	b.n	8003464 <startEscTask+0x490>
			}
		}

		else if (SAFETY_MODE == drive_mode) { //safe modda tüm motorları durdur
 80033ce:	4b2d      	ldr	r3, [pc, #180]	; (8003484 <startEscTask+0x4b0>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d110      	bne.n	80033f8 <startEscTask+0x424>
			drive_motor_1(MIN_PWM_OUTPUT);
 80033d6:	f240 404c 	movw	r0, #1100	; 0x44c
 80033da:	f7ff f9dd 	bl	8002798 <drive_motor_1>
			drive_motor_2(MIN_PWM_OUTPUT);
 80033de:	f240 404c 	movw	r0, #1100	; 0x44c
 80033e2:	f7ff f9e9 	bl	80027b8 <drive_motor_2>
			drive_motor_3(MIN_PWM_OUTPUT);
 80033e6:	f240 404c 	movw	r0, #1100	; 0x44c
 80033ea:	f7ff f9f5 	bl	80027d8 <drive_motor_3>
			drive_motor_4(MIN_PWM_OUTPUT);
 80033ee:	f240 404c 	movw	r0, #1100	; 0x44c
 80033f2:	f7ff fa01 	bl	80027f8 <drive_motor_4>
 80033f6:	e035      	b.n	8003464 <startEscTask+0x490>
		} else { 	//aksi halde manuel sürüş
			set_pwm(PID_ROLL, PID_PITCH, PID_YAW, rc_throttle.dutyCycle,
 80033f8:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <startEscTask+0x49c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	ee07 3a90 	vmov	s15, r3
 8003400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003404:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <startEscTask+0x4a0>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	ee07 3a90 	vmov	s15, r3
 800340c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003410:	4b19      	ldr	r3, [pc, #100]	; (8003478 <startEscTask+0x4a4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	ee07 3a90 	vmov	s15, r3
 8003418:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800341c:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <startEscTask+0x4b4>)
 800341e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003426:	ee17 3a90 	vmov	r3, s15
 800342a:	b298      	uxth	r0, r3
 800342c:	4b13      	ldr	r3, [pc, #76]	; (800347c <startEscTask+0x4a8>)
 800342e:	edd3 4a00 	vldr	s9, [r3]
 8003432:	ed93 5a01 	vldr	s10, [r3, #4]
 8003436:	edd3 5a02 	vldr	s11, [r3, #8]
 800343a:	edd3 7a03 	vldr	s15, [r3, #12]
 800343e:	4b10      	ldr	r3, [pc, #64]	; (8003480 <startEscTask+0x4ac>)
 8003440:	eef0 1a64 	vmov.f32	s3, s9
 8003444:	eeb0 2a45 	vmov.f32	s4, s10
 8003448:	eef0 2a65 	vmov.f32	s5, s11
 800344c:	eeb0 3a67 	vmov.f32	s6, s15
 8003450:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003454:	eeb0 1a46 	vmov.f32	s2, s12
 8003458:	eef0 0a66 	vmov.f32	s1, s13
 800345c:	eeb0 0a47 	vmov.f32	s0, s14
 8003460:	f7ff f9da 	bl	8002818 <set_pwm>
					battery, esc); //ch3 throttle
		}

		osDelay(SAMPLE_TIME_ESC);
 8003464:	2014      	movs	r0, #20
 8003466:	f008 f860 	bl	800b52a <osDelay>
		if (AUTONOMOUS_MODE == drive_mode) {
 800346a:	e5b7      	b.n	8002fdc <startEscTask+0x8>
 800346c:	20000844 	.word	0x20000844
 8003470:	20000440 	.word	0x20000440
 8003474:	20000444 	.word	0x20000444
 8003478:	20000448 	.word	0x20000448
 800347c:	20000450 	.word	0x20000450
 8003480:	200004c4 	.word	0x200004c4
 8003484:	2000044c 	.word	0x2000044c
 8003488:	20000888 	.word	0x20000888

0800348c <StartImuTask>:
 * @brief Function implementing the imuTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartImuTask */
void StartImuTask(void const *argument) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartImuTask */
	bno055_assignI2C(&hi2c3);
 8003494:	4888      	ldr	r0, [pc, #544]	; (80036b8 <StartImuTask+0x22c>)
 8003496:	f7ff fb21 	bl	8002adc <bno055_assignI2C>
	bno055_setup();
 800349a:	f7fe ffc5 	bl	8002428 <bno055_setup>
	bno055_setOperationModeNDOF();
 800349e:	f7fe ffb0 	bl	8002402 <bno055_setOperationModeNDOF>

	PIDController_Init(&pitch_pid_t); //pid sıfırlama
 80034a2:	4886      	ldr	r0, [pc, #536]	; (80036bc <StartImuTask+0x230>)
 80034a4:	f7fe fba2 	bl	8001bec <PIDController_Init>
	PIDController_Init(&roll_pid_t);
 80034a8:	4885      	ldr	r0, [pc, #532]	; (80036c0 <StartImuTask+0x234>)
 80034aa:	f7fe fb9f 	bl	8001bec <PIDController_Init>

//PITCH LIMITLERI
	pitch_pid_t.limMax = 150; //150;		//elde çalıştırınca buraları 0la	MAX
 80034ae:	4b83      	ldr	r3, [pc, #524]	; (80036bc <StartImuTask+0x230>)
 80034b0:	4a84      	ldr	r2, [pc, #528]	; (80036c4 <StartImuTask+0x238>)
 80034b2:	611a      	str	r2, [r3, #16]
	pitch_pid_t.limMin = -150; //-150;
 80034b4:	4b81      	ldr	r3, [pc, #516]	; (80036bc <StartImuTask+0x230>)
 80034b6:	4a84      	ldr	r2, [pc, #528]	; (80036c8 <StartImuTask+0x23c>)
 80034b8:	60da      	str	r2, [r3, #12]

	pitch_pid_t.limMaxInt = 60;
 80034ba:	4b80      	ldr	r3, [pc, #512]	; (80036bc <StartImuTask+0x230>)
 80034bc:	4a83      	ldr	r2, [pc, #524]	; (80036cc <StartImuTask+0x240>)
 80034be:	619a      	str	r2, [r3, #24]
	pitch_pid_t.limMinInt = -60;
 80034c0:	4b7e      	ldr	r3, [pc, #504]	; (80036bc <StartImuTask+0x230>)
 80034c2:	4a83      	ldr	r2, [pc, #524]	; (80036d0 <StartImuTask+0x244>)
 80034c4:	615a      	str	r2, [r3, #20]

//ROLL LIMITLERI
	roll_pid_t.limMax = 150; //150;	//elde çalıştırınca buraları 0la	MAX
 80034c6:	4b7e      	ldr	r3, [pc, #504]	; (80036c0 <StartImuTask+0x234>)
 80034c8:	4a7e      	ldr	r2, [pc, #504]	; (80036c4 <StartImuTask+0x238>)
 80034ca:	611a      	str	r2, [r3, #16]
	roll_pid_t.limMin = -150; //-150;
 80034cc:	4b7c      	ldr	r3, [pc, #496]	; (80036c0 <StartImuTask+0x234>)
 80034ce:	4a7e      	ldr	r2, [pc, #504]	; (80036c8 <StartImuTask+0x23c>)
 80034d0:	60da      	str	r2, [r3, #12]

	roll_pid_t.limMaxInt = 60;		//İNTEGRAL LİMİT
 80034d2:	4b7b      	ldr	r3, [pc, #492]	; (80036c0 <StartImuTask+0x234>)
 80034d4:	4a7d      	ldr	r2, [pc, #500]	; (80036cc <StartImuTask+0x240>)
 80034d6:	619a      	str	r2, [r3, #24]
	roll_pid_t.limMinInt = -60;
 80034d8:	4b79      	ldr	r3, [pc, #484]	; (80036c0 <StartImuTask+0x234>)
 80034da:	4a7d      	ldr	r2, [pc, #500]	; (80036d0 <StartImuTask+0x244>)
 80034dc:	615a      	str	r2, [r3, #20]

//YAW LIMITLERI
	yaw_pid_t.limMax = 50; //150;	//YAW LİMİT DÜZELT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 80034de:	4b7d      	ldr	r3, [pc, #500]	; (80036d4 <StartImuTask+0x248>)
 80034e0:	4a7d      	ldr	r2, [pc, #500]	; (80036d8 <StartImuTask+0x24c>)
 80034e2:	611a      	str	r2, [r3, #16]
	yaw_pid_t.limMin = -50; //-150;
 80034e4:	4b7b      	ldr	r3, [pc, #492]	; (80036d4 <StartImuTask+0x248>)
 80034e6:	4a7d      	ldr	r2, [pc, #500]	; (80036dc <StartImuTask+0x250>)
 80034e8:	60da      	str	r2, [r3, #12]

	yaw_pid_t.limMaxInt = 60;		//İNTEGRAL LİMİT
 80034ea:	4b7a      	ldr	r3, [pc, #488]	; (80036d4 <StartImuTask+0x248>)
 80034ec:	4a77      	ldr	r2, [pc, #476]	; (80036cc <StartImuTask+0x240>)
 80034ee:	619a      	str	r2, [r3, #24]
	yaw_pid_t.limMinInt = -60;
 80034f0:	4b78      	ldr	r3, [pc, #480]	; (80036d4 <StartImuTask+0x248>)
 80034f2:	4a77      	ldr	r2, [pc, #476]	; (80036d0 <StartImuTask+0x244>)
 80034f4:	615a      	str	r2, [r3, #20]

//PARAMETRE ATAMA
//pitch ve roll pid parametreleri x konfigurasyonunda aynı olabilir
	pitch_pid_t.Kp = PITCH_KP;
 80034f6:	4b71      	ldr	r3, [pc, #452]	; (80036bc <StartImuTask+0x230>)
 80034f8:	4a79      	ldr	r2, [pc, #484]	; (80036e0 <StartImuTask+0x254>)
 80034fa:	601a      	str	r2, [r3, #0]
	pitch_pid_t.Ki = PITCH_KI;
 80034fc:	4b6f      	ldr	r3, [pc, #444]	; (80036bc <StartImuTask+0x230>)
 80034fe:	4a79      	ldr	r2, [pc, #484]	; (80036e4 <StartImuTask+0x258>)
 8003500:	605a      	str	r2, [r3, #4]
	pitch_pid_t.Kd = PITCH_KD;
 8003502:	4b6e      	ldr	r3, [pc, #440]	; (80036bc <StartImuTask+0x230>)
 8003504:	4a78      	ldr	r2, [pc, #480]	; (80036e8 <StartImuTask+0x25c>)
 8003506:	609a      	str	r2, [r3, #8]

	roll_pid_t.Kp = ROLL_KP;
 8003508:	4b6d      	ldr	r3, [pc, #436]	; (80036c0 <StartImuTask+0x234>)
 800350a:	4a75      	ldr	r2, [pc, #468]	; (80036e0 <StartImuTask+0x254>)
 800350c:	601a      	str	r2, [r3, #0]
	roll_pid_t.Ki = ROLL_KI;
 800350e:	4b6c      	ldr	r3, [pc, #432]	; (80036c0 <StartImuTask+0x234>)
 8003510:	4a74      	ldr	r2, [pc, #464]	; (80036e4 <StartImuTask+0x258>)
 8003512:	605a      	str	r2, [r3, #4]
	roll_pid_t.Kd = ROLL_KD;
 8003514:	4b6a      	ldr	r3, [pc, #424]	; (80036c0 <StartImuTask+0x234>)
 8003516:	4a74      	ldr	r2, [pc, #464]	; (80036e8 <StartImuTask+0x25c>)
 8003518:	609a      	str	r2, [r3, #8]

	yaw_pid_t.Kp = YAW_KP;
 800351a:	4b6e      	ldr	r3, [pc, #440]	; (80036d4 <StartImuTask+0x248>)
 800351c:	4a73      	ldr	r2, [pc, #460]	; (80036ec <StartImuTask+0x260>)
 800351e:	601a      	str	r2, [r3, #0]
	yaw_pid_t.Ki = YAW_KI;
 8003520:	4b6c      	ldr	r3, [pc, #432]	; (80036d4 <StartImuTask+0x248>)
 8003522:	4a73      	ldr	r2, [pc, #460]	; (80036f0 <StartImuTask+0x264>)
 8003524:	605a      	str	r2, [r3, #4]
	yaw_pid_t.Kd = YAW_KD;
 8003526:	4b6b      	ldr	r3, [pc, #428]	; (80036d4 <StartImuTask+0x248>)
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	609a      	str	r2, [r3, #8]

	pitch_pid_t.ID = PITCH_ID;
 800352e:	4b63      	ldr	r3, [pc, #396]	; (80036bc <StartImuTask+0x230>)
 8003530:	2201      	movs	r2, #1
 8003532:	639a      	str	r2, [r3, #56]	; 0x38
	roll_pid_t.ID = ROLL_ID;
 8003534:	4b62      	ldr	r3, [pc, #392]	; (80036c0 <StartImuTask+0x234>)
 8003536:	2202      	movs	r2, #2
 8003538:	639a      	str	r2, [r3, #56]	; 0x38
	yaw_pid_t.ID = YAW_ID;
 800353a:	4b66      	ldr	r3, [pc, #408]	; (80036d4 <StartImuTask+0x248>)
 800353c:	2203      	movs	r2, #3
 800353e:	639a      	str	r2, [r3, #56]	; 0x38

	for (;;) {
		imu = bno055_getVectorEuler();
 8003540:	f7ff f8dc 	bl	80026fc <bno055_getVectorEuler>
 8003544:	eeb0 6a40 	vmov.f32	s12, s0
 8003548:	eef0 6a60 	vmov.f32	s13, s1
 800354c:	eeb0 7a41 	vmov.f32	s14, s2
 8003550:	eef0 7a61 	vmov.f32	s15, s3
 8003554:	4b67      	ldr	r3, [pc, #412]	; (80036f4 <StartImuTask+0x268>)
 8003556:	ed83 6a00 	vstr	s12, [r3]
 800355a:	edc3 6a01 	vstr	s13, [r3, #4]
 800355e:	ed83 7a02 	vstr	s14, [r3, #8]
 8003562:	edc3 7a03 	vstr	s15, [r3, #12]

		roll_pid_t.T = deltaT;
 8003566:	4b64      	ldr	r3, [pc, #400]	; (80036f8 <StartImuTask+0x26c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a55      	ldr	r2, [pc, #340]	; (80036c0 <StartImuTask+0x234>)
 800356c:	61d3      	str	r3, [r2, #28]
		pitch_pid_t.T = deltaT;
 800356e:	4b62      	ldr	r3, [pc, #392]	; (80036f8 <StartImuTask+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a52      	ldr	r2, [pc, #328]	; (80036bc <StartImuTask+0x230>)
 8003574:	61d3      	str	r3, [r2, #28]
		yaw_pid_t.T = deltaT;
 8003576:	4b60      	ldr	r3, [pc, #384]	; (80036f8 <StartImuTask+0x26c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a56      	ldr	r2, [pc, #344]	; (80036d4 <StartImuTask+0x248>)
 800357c:	61d3      	str	r3, [r2, #28]

		__HAL_TIM_SET_COUNTER(&htim5, 0);
 800357e:	4b5f      	ldr	r3, [pc, #380]	; (80036fc <StartImuTask+0x270>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2200      	movs	r2, #0
 8003584:	625a      	str	r2, [r3, #36]	; 0x24

		//OTONOMDA ŞU AN YAW YOK!!!!!!!!!!!!!!!!!!!!
		if (AUTONOMOUS_MODE == drive_mode) { //roll ve pitch pozitif veya negatif olmayabilir iflere girmez
 8003586:	4b5e      	ldr	r3, [pc, #376]	; (8003700 <StartImuTask+0x274>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b01      	cmp	r3, #1
 800358c:	f040 80c6 	bne.w	800371c <StartImuTask+0x290>

			//jetsondan gelen veriye göre wanted setpoint değerini burada güncelleyeceğiz
			//imuda x yaw y pitch z roll
			if (uartBuffer.movementData.pitchPositive == TRUE) {
 8003590:	4b5c      	ldr	r3, [pc, #368]	; (8003704 <StartImuTask+0x278>)
 8003592:	78db      	ldrb	r3, [r3, #3]
 8003594:	2b31      	cmp	r3, #49	; 0x31
 8003596:	d112      	bne.n	80035be <StartImuTask+0x132>
				PID_PITCH = PIDController_Update(&pitch_pid_t, PWM_POS_PITCH,
 8003598:	4b56      	ldr	r3, [pc, #344]	; (80036f4 <StartImuTask+0x268>)
 800359a:	edd3 7a02 	vldr	s15, [r3, #8]
 800359e:	eef0 0a67 	vmov.f32	s1, s15
 80035a2:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8003708 <StartImuTask+0x27c>
 80035a6:	4845      	ldr	r0, [pc, #276]	; (80036bc <StartImuTask+0x230>)
 80035a8:	f7fe fb4a 	bl	8001c40 <PIDController_Update>
 80035ac:	eef0 7a40 	vmov.f32	s15, s0
 80035b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035b4:	ee17 2a90 	vmov	r2, s15
 80035b8:	4b54      	ldr	r3, [pc, #336]	; (800370c <StartImuTask+0x280>)
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	e030      	b.n	8003620 <StartImuTask+0x194>
						imu.y);	//pitch +180 -180 aralığında

			} else if (uartBuffer.movementData.pitchNegative == TRUE) {
 80035be:	4b51      	ldr	r3, [pc, #324]	; (8003704 <StartImuTask+0x278>)
 80035c0:	791b      	ldrb	r3, [r3, #4]
 80035c2:	2b31      	cmp	r3, #49	; 0x31
 80035c4:	d112      	bne.n	80035ec <StartImuTask+0x160>
				PID_PITCH = PIDController_Update(&pitch_pid_t, PWM_NEG_PITCH,
 80035c6:	4b4b      	ldr	r3, [pc, #300]	; (80036f4 <StartImuTask+0x268>)
 80035c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80035cc:	eef0 0a67 	vmov.f32	s1, s15
 80035d0:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8003710 <StartImuTask+0x284>
 80035d4:	4839      	ldr	r0, [pc, #228]	; (80036bc <StartImuTask+0x230>)
 80035d6:	f7fe fb33 	bl	8001c40 <PIDController_Update>
 80035da:	eef0 7a40 	vmov.f32	s15, s0
 80035de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035e2:	ee17 2a90 	vmov	r2, s15
 80035e6:	4b49      	ldr	r3, [pc, #292]	; (800370c <StartImuTask+0x280>)
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	e019      	b.n	8003620 <StartImuTask+0x194>
						imu.y);	//pitch +180 -180 aralığında

			} else if (uartBuffer.movementData.pitchNegative == FALSE
 80035ec:	4b45      	ldr	r3, [pc, #276]	; (8003704 <StartImuTask+0x278>)
 80035ee:	791b      	ldrb	r3, [r3, #4]
 80035f0:	2b30      	cmp	r3, #48	; 0x30
 80035f2:	d115      	bne.n	8003620 <StartImuTask+0x194>
					&& uartBuffer.movementData.pitchPositive == FALSE) {
 80035f4:	4b43      	ldr	r3, [pc, #268]	; (8003704 <StartImuTask+0x278>)
 80035f6:	78db      	ldrb	r3, [r3, #3]
 80035f8:	2b30      	cmp	r3, #48	; 0x30
 80035fa:	d111      	bne.n	8003620 <StartImuTask+0x194>
				PID_PITCH = PIDController_Update(&pitch_pid_t, PWM_NOTR_PITCH,
 80035fc:	4b3d      	ldr	r3, [pc, #244]	; (80036f4 <StartImuTask+0x268>)
 80035fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8003602:	eef0 0a67 	vmov.f32	s1, s15
 8003606:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8003714 <StartImuTask+0x288>
 800360a:	482c      	ldr	r0, [pc, #176]	; (80036bc <StartImuTask+0x230>)
 800360c:	f7fe fb18 	bl	8001c40 <PIDController_Update>
 8003610:	eef0 7a40 	vmov.f32	s15, s0
 8003614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003618:	ee17 2a90 	vmov	r2, s15
 800361c:	4b3b      	ldr	r3, [pc, #236]	; (800370c <StartImuTask+0x280>)
 800361e:	601a      	str	r2, [r3, #0]
						imu.y);	//pitch +180 -180 aralığında

			}

			if (uartBuffer.movementData.rollPositive == TRUE) {
 8003620:	4b38      	ldr	r3, [pc, #224]	; (8003704 <StartImuTask+0x278>)
 8003622:	795b      	ldrb	r3, [r3, #5]
 8003624:	2b31      	cmp	r3, #49	; 0x31
 8003626:	d112      	bne.n	800364e <StartImuTask+0x1c2>
				PID_ROLL = PIDController_Update(&roll_pid_t, PWM_POS_ROLL,
 8003628:	4b32      	ldr	r3, [pc, #200]	; (80036f4 <StartImuTask+0x268>)
 800362a:	edd3 7a03 	vldr	s15, [r3, #12]
 800362e:	eef0 0a67 	vmov.f32	s1, s15
 8003632:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8003708 <StartImuTask+0x27c>
 8003636:	4822      	ldr	r0, [pc, #136]	; (80036c0 <StartImuTask+0x234>)
 8003638:	f7fe fb02 	bl	8001c40 <PIDController_Update>
 800363c:	eef0 7a40 	vmov.f32	s15, s0
 8003640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003644:	ee17 2a90 	vmov	r2, s15
 8003648:	4b33      	ldr	r3, [pc, #204]	; (8003718 <StartImuTask+0x28c>)
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e0eb      	b.n	8003826 <StartImuTask+0x39a>
						imu.z);	//roll +90 -90 aralığında

			} else if (uartBuffer.movementData.rollNegative == TRUE) {
 800364e:	4b2d      	ldr	r3, [pc, #180]	; (8003704 <StartImuTask+0x278>)
 8003650:	799b      	ldrb	r3, [r3, #6]
 8003652:	2b31      	cmp	r3, #49	; 0x31
 8003654:	d112      	bne.n	800367c <StartImuTask+0x1f0>
				PID_ROLL = PIDController_Update(&roll_pid_t, PWM_NEG_ROLL,
 8003656:	4b27      	ldr	r3, [pc, #156]	; (80036f4 <StartImuTask+0x268>)
 8003658:	edd3 7a03 	vldr	s15, [r3, #12]
 800365c:	eef0 0a67 	vmov.f32	s1, s15
 8003660:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8003710 <StartImuTask+0x284>
 8003664:	4816      	ldr	r0, [pc, #88]	; (80036c0 <StartImuTask+0x234>)
 8003666:	f7fe faeb 	bl	8001c40 <PIDController_Update>
 800366a:	eef0 7a40 	vmov.f32	s15, s0
 800366e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003672:	ee17 2a90 	vmov	r2, s15
 8003676:	4b28      	ldr	r3, [pc, #160]	; (8003718 <StartImuTask+0x28c>)
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	e0d4      	b.n	8003826 <StartImuTask+0x39a>
						imu.z);	//roll +90 -90 aralığında

			} else if (uartBuffer.movementData.rollPositive == FALSE
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <StartImuTask+0x278>)
 800367e:	795b      	ldrb	r3, [r3, #5]
 8003680:	2b30      	cmp	r3, #48	; 0x30
 8003682:	f040 80d0 	bne.w	8003826 <StartImuTask+0x39a>
					&& uartBuffer.movementData.rollNegative == FALSE) {
 8003686:	4b1f      	ldr	r3, [pc, #124]	; (8003704 <StartImuTask+0x278>)
 8003688:	799b      	ldrb	r3, [r3, #6]
 800368a:	2b30      	cmp	r3, #48	; 0x30
 800368c:	f040 80cb 	bne.w	8003826 <StartImuTask+0x39a>
				PID_PITCH = PIDController_Update(&roll_pid_t, PWM_NOTR_ROLL,
 8003690:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <StartImuTask+0x268>)
 8003692:	edd3 7a03 	vldr	s15, [r3, #12]
 8003696:	eef0 0a67 	vmov.f32	s1, s15
 800369a:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8003714 <StartImuTask+0x288>
 800369e:	4808      	ldr	r0, [pc, #32]	; (80036c0 <StartImuTask+0x234>)
 80036a0:	f7fe face 	bl	8001c40 <PIDController_Update>
 80036a4:	eef0 7a40 	vmov.f32	s15, s0
 80036a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036ac:	ee17 2a90 	vmov	r2, s15
 80036b0:	4b16      	ldr	r3, [pc, #88]	; (800370c <StartImuTask+0x280>)
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	e0b7      	b.n	8003826 <StartImuTask+0x39a>
 80036b6:	bf00      	nop
 80036b8:	200007f0 	.word	0x200007f0
 80036bc:	20000378 	.word	0x20000378
 80036c0:	200003b4 	.word	0x200003b4
 80036c4:	43160000 	.word	0x43160000
 80036c8:	c3160000 	.word	0xc3160000
 80036cc:	42700000 	.word	0x42700000
 80036d0:	c2700000 	.word	0xc2700000
 80036d4:	200003f0 	.word	0x200003f0
 80036d8:	42480000 	.word	0x42480000
 80036dc:	c2480000 	.word	0xc2480000
 80036e0:	40a00000 	.word	0x40a00000
 80036e4:	358637bd 	.word	0x358637bd
 80036e8:	47d6d800 	.word	0x47d6d800
 80036ec:	3e9eb852 	.word	0x3e9eb852
 80036f0:	33d6bf95 	.word	0x33d6bf95
 80036f4:	20000430 	.word	0x20000430
 80036f8:	2000042c 	.word	0x2000042c
 80036fc:	20000a20 	.word	0x20000a20
 8003700:	2000044c 	.word	0x2000044c
 8003704:	20000844 	.word	0x20000844
 8003708:	44d48000 	.word	0x44d48000
 800370c:	20000444 	.word	0x20000444
 8003710:	44a28000 	.word	0x44a28000
 8003714:	44bb8000 	.word	0x44bb8000
 8003718:	20000440 	.word	0x20000440

			}
		}

		else {	//kumanda bölümü
			if (rc_throttle.dutyCycle > 1200) {
 800371c:	4b47      	ldr	r3, [pc, #284]	; (800383c <StartImuTask+0x3b0>)
 800371e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003722:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003840 <StartImuTask+0x3b4>
 8003726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800372a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372e:	dd7a      	ble.n	8003826 <StartImuTask+0x39a>

				//kumanda map
				rc_pitch.rcToAngle = MAP(rc_pitch.dutyCycle, MIN_PWM_OUTPUT,
 8003730:	4b44      	ldr	r3, [pc, #272]	; (8003844 <StartImuTask+0x3b8>)
 8003732:	edd3 7a02 	vldr	s15, [r3, #8]
 8003736:	ed9f 2a44 	vldr	s4, [pc, #272]	; 8003848 <StartImuTask+0x3bc>
 800373a:	eddf 1a44 	vldr	s3, [pc, #272]	; 800384c <StartImuTask+0x3c0>
 800373e:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8003850 <StartImuTask+0x3c4>
 8003742:	eddf 0a44 	vldr	s1, [pc, #272]	; 8003854 <StartImuTask+0x3c8>
 8003746:	eeb0 0a67 	vmov.f32	s0, s15
 800374a:	f000 fd87 	bl	800425c <MAP>
 800374e:	eef0 7a40 	vmov.f32	s15, s0
 8003752:	4b3c      	ldr	r3, [pc, #240]	; (8003844 <StartImuTask+0x3b8>)
 8003754:	edc3 7a04 	vstr	s15, [r3, #16]
				MAX_PWM_OUTPUT, PITCH_MIN_ANGLE, PITCH_MAX_ANGLE);

				rc_roll.rcToAngle = MAP(rc_roll.dutyCycle, MIN_PWM_OUTPUT,
 8003758:	4b3f      	ldr	r3, [pc, #252]	; (8003858 <StartImuTask+0x3cc>)
 800375a:	edd3 7a02 	vldr	s15, [r3, #8]
 800375e:	ed9f 2a3a 	vldr	s4, [pc, #232]	; 8003848 <StartImuTask+0x3bc>
 8003762:	eddf 1a3a 	vldr	s3, [pc, #232]	; 800384c <StartImuTask+0x3c0>
 8003766:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8003850 <StartImuTask+0x3c4>
 800376a:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8003854 <StartImuTask+0x3c8>
 800376e:	eeb0 0a67 	vmov.f32	s0, s15
 8003772:	f000 fd73 	bl	800425c <MAP>
 8003776:	eef0 7a40 	vmov.f32	s15, s0
 800377a:	4b37      	ldr	r3, [pc, #220]	; (8003858 <StartImuTask+0x3cc>)
 800377c:	edc3 7a04 	vstr	s15, [r3, #16]
				MAX_PWM_OUTPUT, ROLL_MIN_ANGLE, ROLL_MAX_ANGLE);

				rc_yaw.rcToAngle = MAP(rc_yaw.dutyCycle, 1099, 1919, -180.0,
 8003780:	4b36      	ldr	r3, [pc, #216]	; (800385c <StartImuTask+0x3d0>)
 8003782:	edd3 7a02 	vldr	s15, [r3, #8]
 8003786:	ed9f 2a36 	vldr	s4, [pc, #216]	; 8003860 <StartImuTask+0x3d4>
 800378a:	eddf 1a36 	vldr	s3, [pc, #216]	; 8003864 <StartImuTask+0x3d8>
 800378e:	ed9f 1a36 	vldr	s2, [pc, #216]	; 8003868 <StartImuTask+0x3dc>
 8003792:	eddf 0a36 	vldr	s1, [pc, #216]	; 800386c <StartImuTask+0x3e0>
 8003796:	eeb0 0a67 	vmov.f32	s0, s15
 800379a:	f000 fd5f 	bl	800425c <MAP>
 800379e:	eef0 7a40 	vmov.f32	s15, s0
 80037a2:	4b2e      	ldr	r3, [pc, #184]	; (800385c <StartImuTask+0x3d0>)
 80037a4:	edc3 7a04 	vstr	s15, [r3, #16]
						180.0);

				PID_PITCH = PIDController_Update(&pitch_pid_t,
 80037a8:	4b26      	ldr	r3, [pc, #152]	; (8003844 <StartImuTask+0x3b8>)
 80037aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80037ae:	4b30      	ldr	r3, [pc, #192]	; (8003870 <StartImuTask+0x3e4>)
 80037b0:	ed93 7a02 	vldr	s14, [r3, #8]
 80037b4:	eef0 0a47 	vmov.f32	s1, s14
 80037b8:	eeb0 0a67 	vmov.f32	s0, s15
 80037bc:	482d      	ldr	r0, [pc, #180]	; (8003874 <StartImuTask+0x3e8>)
 80037be:	f7fe fa3f 	bl	8001c40 <PIDController_Update>
 80037c2:	eef0 7a40 	vmov.f32	s15, s0
 80037c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037ca:	ee17 2a90 	vmov	r2, s15
 80037ce:	4b2a      	ldr	r3, [pc, #168]	; (8003878 <StartImuTask+0x3ec>)
 80037d0:	601a      	str	r2, [r3, #0]
						rc_pitch.rcToAngle, imu.y);	//pitch +180 -180 aralığında
				PID_ROLL = PIDController_Update(&roll_pid_t, rc_roll.rcToAngle,
 80037d2:	4b21      	ldr	r3, [pc, #132]	; (8003858 <StartImuTask+0x3cc>)
 80037d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80037d8:	4b25      	ldr	r3, [pc, #148]	; (8003870 <StartImuTask+0x3e4>)
 80037da:	ed93 7a03 	vldr	s14, [r3, #12]
 80037de:	eef0 0a47 	vmov.f32	s1, s14
 80037e2:	eeb0 0a67 	vmov.f32	s0, s15
 80037e6:	4825      	ldr	r0, [pc, #148]	; (800387c <StartImuTask+0x3f0>)
 80037e8:	f7fe fa2a 	bl	8001c40 <PIDController_Update>
 80037ec:	eef0 7a40 	vmov.f32	s15, s0
 80037f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037f4:	ee17 2a90 	vmov	r2, s15
 80037f8:	4b21      	ldr	r3, [pc, #132]	; (8003880 <StartImuTask+0x3f4>)
 80037fa:	601a      	str	r2, [r3, #0]
						imu.z);	//roll +90 -90 aralığında

				//IMUYaw = MAP(imu.x, 0.0, 360.0, -180.0, 180.0);

				PID_YAW = PIDController_Update(&yaw_pid_t, rc_yaw.rcToAngle,
 80037fc:	4b17      	ldr	r3, [pc, #92]	; (800385c <StartImuTask+0x3d0>)
 80037fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8003802:	4b1b      	ldr	r3, [pc, #108]	; (8003870 <StartImuTask+0x3e4>)
 8003804:	ed93 7a01 	vldr	s14, [r3, #4]
 8003808:	eef0 0a47 	vmov.f32	s1, s14
 800380c:	eeb0 0a67 	vmov.f32	s0, s15
 8003810:	481c      	ldr	r0, [pc, #112]	; (8003884 <StartImuTask+0x3f8>)
 8003812:	f7fe fa15 	bl	8001c40 <PIDController_Update>
 8003816:	eef0 7a40 	vmov.f32	s15, s0
 800381a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800381e:	ee17 2a90 	vmov	r2, s15
 8003822:	4b19      	ldr	r3, [pc, #100]	; (8003888 <StartImuTask+0x3fc>)
 8003824:	601a      	str	r2, [r3, #0]
		}

		//printf("PID_PITCH: %d\n", PID_PITCH);
		//printf("PID_ROLL: %d\n", PID_ROLL);

		osDelay(SAMPLE_TIME_IMU);
 8003826:	2004      	movs	r0, #4
 8003828:	f007 fe7f 	bl	800b52a <osDelay>

		deltaT = __HAL_TIM_GET_COUNTER(&htim5);
 800382c:	4b17      	ldr	r3, [pc, #92]	; (800388c <StartImuTask+0x400>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	461a      	mov	r2, r3
 8003834:	4b16      	ldr	r3, [pc, #88]	; (8003890 <StartImuTask+0x404>)
 8003836:	601a      	str	r2, [r3, #0]
		imu = bno055_getVectorEuler();
 8003838:	e682      	b.n	8003540 <StartImuTask+0xb4>
 800383a:	bf00      	nop
 800383c:	20000888 	.word	0x20000888
 8003840:	44960000 	.word	0x44960000
 8003844:	2000089c 	.word	0x2000089c
 8003848:	42340000 	.word	0x42340000
 800384c:	c2340000 	.word	0xc2340000
 8003850:	44f0a000 	.word	0x44f0a000
 8003854:	44898000 	.word	0x44898000
 8003858:	2000084c 	.word	0x2000084c
 800385c:	20000860 	.word	0x20000860
 8003860:	43340000 	.word	0x43340000
 8003864:	c3340000 	.word	0xc3340000
 8003868:	44efe000 	.word	0x44efe000
 800386c:	44896000 	.word	0x44896000
 8003870:	20000430 	.word	0x20000430
 8003874:	20000378 	.word	0x20000378
 8003878:	20000444 	.word	0x20000444
 800387c:	200003b4 	.word	0x200003b4
 8003880:	20000440 	.word	0x20000440
 8003884:	200003f0 	.word	0x200003f0
 8003888:	20000448 	.word	0x20000448
 800388c:	20000a20 	.word	0x20000a20
 8003890:	2000042c 	.word	0x2000042c
 8003894:	00000000 	.word	0x00000000

08003898 <StartBatteryTask>:
 * @brief Function implementing the batteryTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBatteryTask */
void StartBatteryTask(void const *argument) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartBatteryTask */
//BatteryInit();
	/* Infinite loop */
	for (;;) {
		battery.voltage = getBatteryVoltage();
 80038a0:	f000 fb16 	bl	8003ed0 <getBatteryVoltage>
 80038a4:	eef0 7a40 	vmov.f32	s15, s0
 80038a8:	4b3f      	ldr	r3, [pc, #252]	; (80039a8 <StartBatteryTask+0x110>)
 80038aa:	edc3 7a00 	vstr	s15, [r3]

		if (battery.voltage < FAILSAFE_VOLTAGE
 80038ae:	4b3e      	ldr	r3, [pc, #248]	; (80039a8 <StartBatteryTask+0x110>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fc fe48 	bl	8000548 <__aeabi_f2d>
 80038b8:	a335      	add	r3, pc, #212	; (adr r3, 8003990 <StartBatteryTask+0xf8>)
 80038ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038be:	f7fd f90d 	bl	8000adc <__aeabi_dcmplt>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d010      	beq.n	80038ea <StartBatteryTask+0x52>
				&& battery.voltage >= DEAD_VOLTAGE) {
 80038c8:	4b37      	ldr	r3, [pc, #220]	; (80039a8 <StartBatteryTask+0x110>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fc fe3b 	bl	8000548 <__aeabi_f2d>
 80038d2:	a331      	add	r3, pc, #196	; (adr r3, 8003998 <StartBatteryTask+0x100>)
 80038d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d8:	f7fd f914 	bl	8000b04 <__aeabi_dcmpge>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <StartBatteryTask+0x52>
			battery.isBatteryLow = true;
 80038e2:	4b31      	ldr	r3, [pc, #196]	; (80039a8 <StartBatteryTask+0x110>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	711a      	strb	r2, [r3, #4]
 80038e8:	e019      	b.n	800391e <StartBatteryTask+0x86>

		} else if (battery.voltage < DEAD_VOLTAGE) {
 80038ea:	4b2f      	ldr	r3, [pc, #188]	; (80039a8 <StartBatteryTask+0x110>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fc fe2a 	bl	8000548 <__aeabi_f2d>
 80038f4:	a328      	add	r3, pc, #160	; (adr r3, 8003998 <StartBatteryTask+0x100>)
 80038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fa:	f7fd f8ef 	bl	8000adc <__aeabi_dcmplt>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d006      	beq.n	8003912 <StartBatteryTask+0x7a>
			battery.isBatteryDead = true;
 8003904:	4b28      	ldr	r3, [pc, #160]	; (80039a8 <StartBatteryTask+0x110>)
 8003906:	2201      	movs	r2, #1
 8003908:	715a      	strb	r2, [r3, #5]
			battery.isBatteryLow = false;
 800390a:	4b27      	ldr	r3, [pc, #156]	; (80039a8 <StartBatteryTask+0x110>)
 800390c:	2200      	movs	r2, #0
 800390e:	711a      	strb	r2, [r3, #4]
 8003910:	e005      	b.n	800391e <StartBatteryTask+0x86>
		} else {
			battery.isBatteryDead = false;
 8003912:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <StartBatteryTask+0x110>)
 8003914:	2200      	movs	r2, #0
 8003916:	715a      	strb	r2, [r3, #5]
			battery.isBatteryLow = false;
 8003918:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <StartBatteryTask+0x110>)
 800391a:	2200      	movs	r2, #0
 800391c:	711a      	strb	r2, [r3, #4]
		}
		if (battery.voltage < 14.3 && rc_throttle.dutyCycle < 1200.0) {
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <StartBatteryTask+0x110>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fc fe10 	bl	8000548 <__aeabi_f2d>
 8003928:	a31d      	add	r3, pc, #116	; (adr r3, 80039a0 <StartBatteryTask+0x108>)
 800392a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392e:	f7fd f8d5 	bl	8000adc <__aeabi_dcmplt>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00e      	beq.n	8003956 <StartBatteryTask+0xbe>
 8003938:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <StartBatteryTask+0x114>)
 800393a:	edd3 7a02 	vldr	s15, [r3, #8]
 800393e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80039b0 <StartBatteryTask+0x118>
 8003942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394a:	d504      	bpl.n	8003956 <StartBatteryTask+0xbe>
			HAL_GPIO_TogglePin(led_1_GPIO_Port, led_1_Pin);/*
 800394c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003950:	4818      	ldr	r0, [pc, #96]	; (80039b4 <StartBatteryTask+0x11c>)
 8003952:	f002 fda2 	bl	800649a <HAL_GPIO_TogglePin>
			 printf("Low Battery!!!\n");
			 printf("Low Battery!!!\n");
			 printf("Low Battery!!!\n");
			 printf("Low Battery!!!!!!!!!!!!!!!!!!!!!!!\n");*/
		}
		gcvt(battery.voltage, 8, ptr);
 8003956:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <StartBatteryTask+0x110>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7fc fdf4 	bl	8000548 <__aeabi_f2d>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4914      	ldr	r1, [pc, #80]	; (80039b8 <StartBatteryTask+0x120>)
 8003966:	2008      	movs	r0, #8
 8003968:	ec43 2b10 	vmov	d0, r2, r3
 800396c:	f008 ffee 	bl	800c94c <gcvt>
		printf("Battery Voltage = ");
 8003970:	4812      	ldr	r0, [pc, #72]	; (80039bc <StartBatteryTask+0x124>)
 8003972:	f009 fd25 	bl	800d3c0 <iprintf>
		printf(ptr);
 8003976:	4810      	ldr	r0, [pc, #64]	; (80039b8 <StartBatteryTask+0x120>)
 8003978:	f009 fd22 	bl	800d3c0 <iprintf>
		printf("\n");
 800397c:	200a      	movs	r0, #10
 800397e:	f009 fd31 	bl	800d3e4 <putchar>
		osDelay(SAMPLE_TIME_POWER_MODULE);
 8003982:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003986:	f007 fdd0 	bl	800b52a <osDelay>
	for (;;) {
 800398a:	e789      	b.n	80038a0 <StartBatteryTask+0x8>
 800398c:	f3af 8000 	nop.w
 8003990:	66666666 	.word	0x66666666
 8003994:	402e6666 	.word	0x402e6666
 8003998:	66666666 	.word	0x66666666
 800399c:	402c6666 	.word	0x402c6666
 80039a0:	9999999a 	.word	0x9999999a
 80039a4:	402c9999 	.word	0x402c9999
 80039a8:	200004c4 	.word	0x200004c4
 80039ac:	20000888 	.word	0x20000888
 80039b0:	44960000 	.word	0x44960000
 80039b4:	40020c00 	.word	0x40020c00
 80039b8:	20000460 	.word	0x20000460
 80039bc:	08010a98 	.word	0x08010a98

080039c0 <StartGPSTask>:
 * @brief Function implementing the gpsTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGPSTask */
void StartGPSTask(void const *argument) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

		 // You are here means the VCC is less, or maybe there is some connection issue
		 // Check the VCC, also you can try connecting to the external 5V
		 }
		 */
		osDelay(SAMPLE_TIME_GPS);
 80039c8:	2064      	movs	r0, #100	; 0x64
 80039ca:	f007 fdae 	bl	800b52a <osDelay>
 80039ce:	e7fb      	b.n	80039c8 <StartGPSTask+0x8>

080039d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08c      	sub	sp, #48	; 0x30
 80039d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d6:	f107 031c 	add.w	r3, r7, #28
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	605a      	str	r2, [r3, #4]
 80039e0:	609a      	str	r2, [r3, #8]
 80039e2:	60da      	str	r2, [r3, #12]
 80039e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	4b35      	ldr	r3, [pc, #212]	; (8003ac0 <MX_GPIO_Init+0xf0>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	4a34      	ldr	r2, [pc, #208]	; (8003ac0 <MX_GPIO_Init+0xf0>)
 80039f0:	f043 0310 	orr.w	r3, r3, #16
 80039f4:	6313      	str	r3, [r2, #48]	; 0x30
 80039f6:	4b32      	ldr	r3, [pc, #200]	; (8003ac0 <MX_GPIO_Init+0xf0>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	61bb      	str	r3, [r7, #24]
 8003a00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	4b2e      	ldr	r3, [pc, #184]	; (8003ac0 <MX_GPIO_Init+0xf0>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	4a2d      	ldr	r2, [pc, #180]	; (8003ac0 <MX_GPIO_Init+0xf0>)
 8003a0c:	f043 0304 	orr.w	r3, r3, #4
 8003a10:	6313      	str	r3, [r2, #48]	; 0x30
 8003a12:	4b2b      	ldr	r3, [pc, #172]	; (8003ac0 <MX_GPIO_Init+0xf0>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	4b27      	ldr	r3, [pc, #156]	; (8003ac0 <MX_GPIO_Init+0xf0>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	4a26      	ldr	r2, [pc, #152]	; (8003ac0 <MX_GPIO_Init+0xf0>)
 8003a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2e:	4b24      	ldr	r3, [pc, #144]	; (8003ac0 <MX_GPIO_Init+0xf0>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	4b20      	ldr	r3, [pc, #128]	; (8003ac0 <MX_GPIO_Init+0xf0>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	4a1f      	ldr	r2, [pc, #124]	; (8003ac0 <MX_GPIO_Init+0xf0>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <MX_GPIO_Init+0xf0>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	60bb      	str	r3, [r7, #8]
 8003a5a:	4b19      	ldr	r3, [pc, #100]	; (8003ac0 <MX_GPIO_Init+0xf0>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <MX_GPIO_Init+0xf0>)
 8003a60:	f043 0302 	orr.w	r3, r3, #2
 8003a64:	6313      	str	r3, [r2, #48]	; 0x30
 8003a66:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <MX_GPIO_Init+0xf0>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	4b12      	ldr	r3, [pc, #72]	; (8003ac0 <MX_GPIO_Init+0xf0>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	4a11      	ldr	r2, [pc, #68]	; (8003ac0 <MX_GPIO_Init+0xf0>)
 8003a7c:	f043 0308 	orr.w	r3, r3, #8
 8003a80:	6313      	str	r3, [r2, #48]	; 0x30
 8003a82:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <MX_GPIO_Init+0xf0>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	607b      	str	r3, [r7, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led_2_Pin|led_1_Pin|hard_fault_led_Pin, GPIO_PIN_RESET);
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8003a94:	480b      	ldr	r0, [pc, #44]	; (8003ac4 <MX_GPIO_Init+0xf4>)
 8003a96:	f002 fce7 	bl	8006468 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = led_2_Pin|led_1_Pin|hard_fault_led_Pin;
 8003a9a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003aac:	f107 031c 	add.w	r3, r7, #28
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4804      	ldr	r0, [pc, #16]	; (8003ac4 <MX_GPIO_Init+0xf4>)
 8003ab4:	f002 fb3c 	bl	8006130 <HAL_GPIO_Init>

}
 8003ab8:	bf00      	nop
 8003aba:	3730      	adds	r7, #48	; 0x30
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40020c00 	.word	0x40020c00

08003ac8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003acc:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <MX_I2C1_Init+0x50>)
 8003ace:	4a13      	ldr	r2, [pc, #76]	; (8003b1c <MX_I2C1_Init+0x54>)
 8003ad0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003ad2:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <MX_I2C1_Init+0x50>)
 8003ad4:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <MX_I2C1_Init+0x58>)
 8003ad6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ad8:	4b0f      	ldr	r3, [pc, #60]	; (8003b18 <MX_I2C1_Init+0x50>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003ade:	4b0e      	ldr	r3, [pc, #56]	; (8003b18 <MX_I2C1_Init+0x50>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <MX_I2C1_Init+0x50>)
 8003ae6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003aea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003aec:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <MX_I2C1_Init+0x50>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <MX_I2C1_Init+0x50>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003af8:	4b07      	ldr	r3, [pc, #28]	; (8003b18 <MX_I2C1_Init+0x50>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003afe:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <MX_I2C1_Init+0x50>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b04:	4804      	ldr	r0, [pc, #16]	; (8003b18 <MX_I2C1_Init+0x50>)
 8003b06:	f002 fce3 	bl	80064d0 <HAL_I2C_Init>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003b10:	f000 f9d6 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003b14:	bf00      	nop
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	2000079c 	.word	0x2000079c
 8003b1c:	40005400 	.word	0x40005400
 8003b20:	000186a0 	.word	0x000186a0

08003b24 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003b28:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <MX_I2C3_Init+0x50>)
 8003b2a:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <MX_I2C3_Init+0x54>)
 8003b2c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8003b2e:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <MX_I2C3_Init+0x50>)
 8003b30:	4a12      	ldr	r2, [pc, #72]	; (8003b7c <MX_I2C3_Init+0x58>)
 8003b32:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b34:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <MX_I2C3_Init+0x50>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <MX_I2C3_Init+0x50>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b40:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <MX_I2C3_Init+0x50>)
 8003b42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b46:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b48:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <MX_I2C3_Init+0x50>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <MX_I2C3_Init+0x50>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b54:	4b07      	ldr	r3, [pc, #28]	; (8003b74 <MX_I2C3_Init+0x50>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <MX_I2C3_Init+0x50>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003b60:	4804      	ldr	r0, [pc, #16]	; (8003b74 <MX_I2C3_Init+0x50>)
 8003b62:	f002 fcb5 	bl	80064d0 <HAL_I2C_Init>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003b6c:	f000 f9a8 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003b70:	bf00      	nop
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	200007f0 	.word	0x200007f0
 8003b78:	40005c00 	.word	0x40005c00
 8003b7c:	00061a80 	.word	0x00061a80

08003b80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08c      	sub	sp, #48	; 0x30
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b88:	f107 031c 	add.w	r3, r7, #28
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	609a      	str	r2, [r3, #8]
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a42      	ldr	r2, [pc, #264]	; (8003ca8 <HAL_I2C_MspInit+0x128>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d12c      	bne.n	8003bfc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	4b41      	ldr	r3, [pc, #260]	; (8003cac <HAL_I2C_MspInit+0x12c>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	4a40      	ldr	r2, [pc, #256]	; (8003cac <HAL_I2C_MspInit+0x12c>)
 8003bac:	f043 0302 	orr.w	r3, r3, #2
 8003bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb2:	4b3e      	ldr	r3, [pc, #248]	; (8003cac <HAL_I2C_MspInit+0x12c>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = barometre_scl_Pin|barometre_sda_Pin;
 8003bbe:	23c0      	movs	r3, #192	; 0xc0
 8003bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bc2:	2312      	movs	r3, #18
 8003bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003bce:	2304      	movs	r3, #4
 8003bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd2:	f107 031c 	add.w	r3, r7, #28
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4835      	ldr	r0, [pc, #212]	; (8003cb0 <HAL_I2C_MspInit+0x130>)
 8003bda:	f002 faa9 	bl	8006130 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	4b32      	ldr	r3, [pc, #200]	; (8003cac <HAL_I2C_MspInit+0x12c>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	4a31      	ldr	r2, [pc, #196]	; (8003cac <HAL_I2C_MspInit+0x12c>)
 8003be8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bec:	6413      	str	r3, [r2, #64]	; 0x40
 8003bee:	4b2f      	ldr	r3, [pc, #188]	; (8003cac <HAL_I2C_MspInit+0x12c>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003bfa:	e050      	b.n	8003c9e <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2c      	ldr	r2, [pc, #176]	; (8003cb4 <HAL_I2C_MspInit+0x134>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d14b      	bne.n	8003c9e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	4b28      	ldr	r3, [pc, #160]	; (8003cac <HAL_I2C_MspInit+0x12c>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	4a27      	ldr	r2, [pc, #156]	; (8003cac <HAL_I2C_MspInit+0x12c>)
 8003c10:	f043 0304 	orr.w	r3, r3, #4
 8003c14:	6313      	str	r3, [r2, #48]	; 0x30
 8003c16:	4b25      	ldr	r3, [pc, #148]	; (8003cac <HAL_I2C_MspInit+0x12c>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	4b21      	ldr	r3, [pc, #132]	; (8003cac <HAL_I2C_MspInit+0x12c>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	4a20      	ldr	r2, [pc, #128]	; (8003cac <HAL_I2C_MspInit+0x12c>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	6313      	str	r3, [r2, #48]	; 0x30
 8003c32:	4b1e      	ldr	r3, [pc, #120]	; (8003cac <HAL_I2C_MspInit+0x12c>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = imu_sda_i2c3_Pin;
 8003c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c44:	2312      	movs	r3, #18
 8003c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003c50:	2304      	movs	r3, #4
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(imu_sda_i2c3_GPIO_Port, &GPIO_InitStruct);
 8003c54:	f107 031c 	add.w	r3, r7, #28
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4817      	ldr	r0, [pc, #92]	; (8003cb8 <HAL_I2C_MspInit+0x138>)
 8003c5c:	f002 fa68 	bl	8006130 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = imu_scl_i2c3_Pin;
 8003c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c66:	2312      	movs	r3, #18
 8003c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003c72:	2304      	movs	r3, #4
 8003c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(imu_scl_i2c3_GPIO_Port, &GPIO_InitStruct);
 8003c76:	f107 031c 	add.w	r3, r7, #28
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	480f      	ldr	r0, [pc, #60]	; (8003cbc <HAL_I2C_MspInit+0x13c>)
 8003c7e:	f002 fa57 	bl	8006130 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	4b09      	ldr	r3, [pc, #36]	; (8003cac <HAL_I2C_MspInit+0x12c>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	4a08      	ldr	r2, [pc, #32]	; (8003cac <HAL_I2C_MspInit+0x12c>)
 8003c8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c90:	6413      	str	r3, [r2, #64]	; 0x40
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <HAL_I2C_MspInit+0x12c>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
}
 8003c9e:	bf00      	nop
 8003ca0:	3730      	adds	r7, #48	; 0x30
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40005400 	.word	0x40005400
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	40020400 	.word	0x40020400
 8003cb4:	40005c00 	.word	0x40005c00
 8003cb8:	40020800 	.word	0x40020800
 8003cbc:	40020000 	.word	0x40020000

08003cc0 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	4804      	ldr	r0, [pc, #16]	; (8003ce8 <_write+0x28>)
 8003cd8:	f006 fb87 	bl	800a3ea <HAL_UART_Transmit>
	return len;
 8003cdc:	687b      	ldr	r3, [r7, #4]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000bc8 	.word	0x20000bc8

08003cec <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
	pwm_read_ch1();
 8003cf4:	f000 f974 	bl	8003fe0 <pwm_read_ch1>
	pwm_read_ch2();
 8003cf8:	f000 f9a6 	bl	8004048 <pwm_read_ch2>
	pwm_read_ch3();
 8003cfc:	f000 f9d8 	bl	80040b0 <pwm_read_ch3>
	pwm_read_ch4();
 8003d00:	f000 fa44 	bl	800418c <pwm_read_ch4>
	pwm_read_ch5();
 8003d04:	f000 fa76 	bl	80041f4 <pwm_read_ch5>

	if (rc_throttle.dutyCycle < 1000) {
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <HAL_TIM_IC_CaptureCallback+0x48>)
 8003d0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d0e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003d38 <HAL_TIM_IC_CaptureCallback+0x4c>
 8003d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1a:	d503      	bpl.n	8003d24 <HAL_TIM_IC_CaptureCallback+0x38>
		failsafe.flag = true;
 8003d1c:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <HAL_TIM_IC_CaptureCallback+0x50>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	701a      	strb	r2, [r3, #0]
	} else {
		failsafe.flag = false;
	}
}
 8003d22:	e002      	b.n	8003d2a <HAL_TIM_IC_CaptureCallback+0x3e>
		failsafe.flag = false;
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <HAL_TIM_IC_CaptureCallback+0x50>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000888 	.word	0x20000888
 8003d38:	447a0000 	.word	0x447a0000
 8003d3c:	200008b0 	.word	0x200008b0

08003d40 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003d44:	f001 fc1a 	bl	800557c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003d48:	f000 f83e 	bl	8003dc8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003d4c:	f7ff fe40 	bl	80039d0 <MX_GPIO_Init>
	MX_TIM1_Init();
 8003d50:	f000 fca0 	bl	8004694 <MX_TIM1_Init>
	MX_ADC1_Init();
 8003d54:	f7fe fa92 	bl	800227c <MX_ADC1_Init>
	MX_I2C1_Init();
 8003d58:	f7ff feb6 	bl	8003ac8 <MX_I2C1_Init>
	MX_I2C3_Init();
 8003d5c:	f7ff fee2 	bl	8003b24 <MX_I2C3_Init>
	MX_TIM2_Init();
 8003d60:	f000 fd5c 	bl	800481c <MX_TIM2_Init>
	MX_TIM3_Init();
 8003d64:	f000 fdf8 	bl	8004958 <MX_TIM3_Init>
	MX_TIM9_Init();
 8003d68:	f000 ffb6 	bl	8004cd8 <MX_TIM9_Init>
	MX_TIM12_Init();
 8003d6c:	f001 f83e 	bl	8004dec <MX_TIM12_Init>
	MX_USART1_UART_Init();
 8003d70:	f001 fa98 	bl	80052a4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8003d74:	f001 fac0 	bl	80052f8 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8003d78:	f001 fae8 	bl	800534c <MX_USART3_UART_Init>
	MX_TIM4_Init();
 8003d7c:	f000 fe8a 	bl	8004a94 <MX_TIM4_Init>
	MX_TIM5_Init();
 8003d80:	f000 ff26 	bl	8004bd0 <MX_TIM5_Init>
	MX_TIM6_Init();
 8003d84:	f000 ff72 	bl	8004c6c <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart3, (uint8_t*) uartBuffer.buffer, 8);
 8003d88:	2208      	movs	r2, #8
 8003d8a:	490b      	ldr	r1, [pc, #44]	; (8003db8 <main+0x78>)
 8003d8c:	480b      	ldr	r0, [pc, #44]	; (8003dbc <main+0x7c>)
 8003d8e:	f006 fbbe 	bl	800a50e <HAL_UART_Receive_IT>

	HAL_TIM_Base_Start(&htim5);
 8003d92:	480b      	ldr	r0, [pc, #44]	; (8003dc0 <main+0x80>)
 8003d94:	f004 fd04 	bl	80087a0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim6);
 8003d98:	480a      	ldr	r0, [pc, #40]	; (8003dc4 <main+0x84>)
 8003d9a:	f004 fd01 	bl	80087a0 <HAL_TIM_Base_Start>

	//Ringbuf_init();

	HAL_Delay(500);
 8003d9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003da2:	f001 fc2d 	bl	8005600 <HAL_Delay>

	init_esc();
 8003da6:	f7fe fcd7 	bl	8002758 <init_esc>

	pwm_enabled();
 8003daa:	f000 f8e3 	bl	8003f74 <pwm_enabled>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8003dae:	f7fe ffeb 	bl	8002d88 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8003db2:	f007 fb67 	bl	800b484 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8003db6:	e7fe      	b.n	8003db6 <main+0x76>
 8003db8:	20000844 	.word	0x20000844
 8003dbc:	20000bc8 	.word	0x20000bc8
 8003dc0:	20000a20 	.word	0x20000a20
 8003dc4:	20000a68 	.word	0x20000a68

08003dc8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b094      	sub	sp, #80	; 0x50
 8003dcc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003dce:	f107 0320 	add.w	r3, r7, #32
 8003dd2:	2230      	movs	r2, #48	; 0x30
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f009 fc40 	bl	800d65c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003ddc:	f107 030c 	add.w	r3, r7, #12
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003dec:	2300      	movs	r3, #0
 8003dee:	60bb      	str	r3, [r7, #8]
 8003df0:	4b28      	ldr	r3, [pc, #160]	; (8003e94 <SystemClock_Config+0xcc>)
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	4a27      	ldr	r2, [pc, #156]	; (8003e94 <SystemClock_Config+0xcc>)
 8003df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfc:	4b25      	ldr	r3, [pc, #148]	; (8003e94 <SystemClock_Config+0xcc>)
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e08:	2300      	movs	r3, #0
 8003e0a:	607b      	str	r3, [r7, #4]
 8003e0c:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <SystemClock_Config+0xd0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a21      	ldr	r2, [pc, #132]	; (8003e98 <SystemClock_Config+0xd0>)
 8003e12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	4b1f      	ldr	r3, [pc, #124]	; (8003e98 <SystemClock_Config+0xd0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e20:	607b      	str	r3, [r7, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e24:	2301      	movs	r3, #1
 8003e26:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e36:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8003e38:	2304      	movs	r3, #4
 8003e3a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8003e3c:	23a8      	movs	r3, #168	; 0xa8
 8003e3e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e40:	2302      	movs	r3, #2
 8003e42:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8003e44:	2304      	movs	r3, #4
 8003e46:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003e48:	f107 0320 	add.w	r3, r7, #32
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f003 ff8d 	bl	8007d6c <HAL_RCC_OscConfig>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <SystemClock_Config+0x94>
		Error_Handler();
 8003e58:	f000 f832 	bl	8003ec0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003e5c:	230f      	movs	r3, #15
 8003e5e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e60:	2302      	movs	r3, #2
 8003e62:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003e68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003e6c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e72:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	2105      	movs	r1, #5
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f004 f9ee 	bl	800825c <HAL_RCC_ClockConfig>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <SystemClock_Config+0xc2>
		Error_Handler();
 8003e86:	f000 f81b 	bl	8003ec0 <Error_Handler>
	}
}
 8003e8a:	bf00      	nop
 8003e8c:	3750      	adds	r7, #80	; 0x50
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40023800 	.word	0x40023800
 8003e98:	40007000 	.word	0x40007000

08003e9c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM10) {
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a04      	ldr	r2, [pc, #16]	; (8003ebc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d101      	bne.n	8003eb2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8003eae:	f001 fb87 	bl	80055c0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40014400 	.word	0x40014400

08003ec0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ec4:	b672      	cpsid	i
}
 8003ec6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003ec8:	e7fe      	b.n	8003ec8 <Error_Handler+0x8>
 8003eca:	0000      	movs	r0, r0
 8003ecc:	0000      	movs	r0, r0
	...

08003ed0 <getBatteryVoltage>:

void BatteryInit() {
	HAL_ADC_Start(&hadc1);
}

float getBatteryVoltage() {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
	uint16_t adcValue;
	float adcVoltage;
	HAL_ADC_Start(&hadc1); // start the adc
 8003ed6:	4826      	ldr	r0, [pc, #152]	; (8003f70 <getBatteryVoltage+0xa0>)
 8003ed8:	f001 fbfa 	bl	80056d0 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8003edc:	2164      	movs	r1, #100	; 0x64
 8003ede:	4824      	ldr	r0, [pc, #144]	; (8003f70 <getBatteryVoltage+0xa0>)
 8003ee0:	f001 fcfb 	bl	80058da <HAL_ADC_PollForConversion>

	adcValue = HAL_ADC_GetValue(&hadc1); // get the adc value
 8003ee4:	4822      	ldr	r0, [pc, #136]	; (8003f70 <getBatteryVoltage+0xa0>)
 8003ee6:	f001 fd83 	bl	80059f0 <HAL_ADC_GetValue>
 8003eea:	4603      	mov	r3, r0
 8003eec:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Stop(&hadc1); // stop adc
 8003eee:	4820      	ldr	r0, [pc, #128]	; (8003f70 <getBatteryVoltage+0xa0>)
 8003ef0:	f001 fcc0 	bl	8005874 <HAL_ADC_Stop>

	adcVoltage = 3.3 * adcValue / 4095;
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fc fb14 	bl	8000524 <__aeabi_i2d>
 8003efc:	a316      	add	r3, pc, #88	; (adr r3, 8003f58 <getBatteryVoltage+0x88>)
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	f7fc fb79 	bl	80005f8 <__aeabi_dmul>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	a314      	add	r3, pc, #80	; (adr r3, 8003f60 <getBatteryVoltage+0x90>)
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	f7fc fc9a 	bl	800084c <__aeabi_ddiv>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4619      	mov	r1, r3
 8003f20:	f7fc fe42 	bl	8000ba8 <__aeabi_d2f>
 8003f24:	4603      	mov	r3, r0
 8003f26:	603b      	str	r3, [r7, #0]

	return adcVoltage * 10.818;
 8003f28:	6838      	ldr	r0, [r7, #0]
 8003f2a:	f7fc fb0d 	bl	8000548 <__aeabi_f2d>
 8003f2e:	a30e      	add	r3, pc, #56	; (adr r3, 8003f68 <getBatteryVoltage+0x98>)
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	f7fc fb60 	bl	80005f8 <__aeabi_dmul>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	f7fc fe32 	bl	8000ba8 <__aeabi_d2f>
 8003f44:	4603      	mov	r3, r0
 8003f46:	ee07 3a90 	vmov	s15, r3
}
 8003f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	f3af 8000 	nop.w
 8003f58:	66666666 	.word	0x66666666
 8003f5c:	400a6666 	.word	0x400a6666
 8003f60:	00000000 	.word	0x00000000
 8003f64:	40affe00 	.word	0x40affe00
 8003f68:	e5604189 	.word	0xe5604189
 8003f6c:	4025a2d0 	.word	0x4025a2d0
 8003f70:	200002c0 	.word	0x200002c0

08003f74 <pwm_enabled>:
#define SAFETY_MODE 2

extern uint8_t drive_mode;

//pwm read için 2 kanalda rising ve falling alıyor global interrupt yapılmalı internal clock kullanılmalı
void pwm_enabled() {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8003f78:	2100      	movs	r1, #0
 8003f7a:	4814      	ldr	r0, [pc, #80]	; (8003fcc <pwm_enabled+0x58>)
 8003f7c:	f004 ff40 	bl	8008e00 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8003f80:	2104      	movs	r1, #4
 8003f82:	4812      	ldr	r0, [pc, #72]	; (8003fcc <pwm_enabled+0x58>)
 8003f84:	f004 fe60 	bl	8008c48 <HAL_TIM_IC_Start>

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4811      	ldr	r0, [pc, #68]	; (8003fd0 <pwm_enabled+0x5c>)
 8003f8c:	f004 ff38 	bl	8008e00 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8003f90:	2104      	movs	r1, #4
 8003f92:	480f      	ldr	r0, [pc, #60]	; (8003fd0 <pwm_enabled+0x5c>)
 8003f94:	f004 fe58 	bl	8008c48 <HAL_TIM_IC_Start>

	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8003f98:	2100      	movs	r1, #0
 8003f9a:	480e      	ldr	r0, [pc, #56]	; (8003fd4 <pwm_enabled+0x60>)
 8003f9c:	f004 ff30 	bl	8008e00 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 8003fa0:	2104      	movs	r1, #4
 8003fa2:	480c      	ldr	r0, [pc, #48]	; (8003fd4 <pwm_enabled+0x60>)
 8003fa4:	f004 fe50 	bl	8008c48 <HAL_TIM_IC_Start>

	HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_1);
 8003fa8:	2100      	movs	r1, #0
 8003faa:	480b      	ldr	r0, [pc, #44]	; (8003fd8 <pwm_enabled+0x64>)
 8003fac:	f004 ff28 	bl	8008e00 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim9, TIM_CHANNEL_2);
 8003fb0:	2104      	movs	r1, #4
 8003fb2:	4809      	ldr	r0, [pc, #36]	; (8003fd8 <pwm_enabled+0x64>)
 8003fb4:	f004 fe48 	bl	8008c48 <HAL_TIM_IC_Start>

	HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1);
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4808      	ldr	r0, [pc, #32]	; (8003fdc <pwm_enabled+0x68>)
 8003fbc:	f004 ff20 	bl	8008e00 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim12, TIM_CHANNEL_2);
 8003fc0:	2104      	movs	r1, #4
 8003fc2:	4806      	ldr	r0, [pc, #24]	; (8003fdc <pwm_enabled+0x68>)
 8003fc4:	f004 fe40 	bl	8008c48 <HAL_TIM_IC_Start>
}
 8003fc8:	bf00      	nop
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20000990 	.word	0x20000990
 8003fd0:	20000948 	.word	0x20000948
 8003fd4:	200009d8 	.word	0x200009d8
 8003fd8:	20000ab0 	.word	0x20000ab0
 8003fdc:	20000af8 	.word	0x20000af8

08003fe0 <pwm_read_ch1>:

	HAL_TIM_IC_Stop_IT(&htim12, TIM_CHANNEL_1);
	HAL_TIM_IC_Stop(&htim12, TIM_CHANNEL_2);
}

void pwm_read_ch1() {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
	if (htim2.Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8003fe4:	4b15      	ldr	r3, [pc, #84]	; (800403c <pwm_read_ch1+0x5c>)
 8003fe6:	7f1b      	ldrb	r3, [r3, #28]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d125      	bne.n	8004038 <pwm_read_ch1+0x58>
		rc_roll.ICValue = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8003fec:	2100      	movs	r1, #0
 8003fee:	4813      	ldr	r0, [pc, #76]	; (800403c <pwm_read_ch1+0x5c>)
 8003ff0:	f005 fb9e 	bl	8009730 <HAL_TIM_ReadCapturedValue>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	4a12      	ldr	r2, [pc, #72]	; (8004040 <pwm_read_ch1+0x60>)
 8003ff8:	6013      	str	r3, [r2, #0]

		if (rc_roll.ICValue != 0) {
 8003ffa:	4b11      	ldr	r3, [pc, #68]	; (8004040 <pwm_read_ch1+0x60>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01a      	beq.n	8004038 <pwm_read_ch1+0x58>
			rc_roll.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim2,
 8004002:	2104      	movs	r1, #4
 8004004:	480d      	ldr	r0, [pc, #52]	; (800403c <pwm_read_ch1+0x5c>)
 8004006:	f005 fb93 	bl	8009730 <HAL_TIM_ReadCapturedValue>
 800400a:	4603      	mov	r3, r0
			TIM_CHANNEL_2) * 15000) / rc_roll.ICValue; //max2000 oluyor pwm out ile aynı
 800400c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8004010:	fb03 f202 	mul.w	r2, r3, r2
 8004014:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <pwm_read_ch1+0x60>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	fbb2 f3f3 	udiv	r3, r2, r3
			rc_roll.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim2,
 800401c:	ee07 3a90 	vmov	s15, r3
 8004020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004024:	4b06      	ldr	r3, [pc, #24]	; (8004040 <pwm_read_ch1+0x60>)
 8004026:	edc3 7a02 	vstr	s15, [r3, #8]

			rc_roll.frequency = 400000 / rc_roll.ICValue;
 800402a:	4b05      	ldr	r3, [pc, #20]	; (8004040 <pwm_read_ch1+0x60>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a05      	ldr	r2, [pc, #20]	; (8004044 <pwm_read_ch1+0x64>)
 8004030:	fbb2 f3f3 	udiv	r3, r2, r3
 8004034:	4a02      	ldr	r2, [pc, #8]	; (8004040 <pwm_read_ch1+0x60>)
 8004036:	6053      	str	r3, [r2, #4]
		}
	}
}
 8004038:	bf00      	nop
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20000948 	.word	0x20000948
 8004040:	2000084c 	.word	0x2000084c
 8004044:	00061a80 	.word	0x00061a80

08004048 <pwm_read_ch2>:
void pwm_read_ch2() {
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
	if (htim3.Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800404c:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <pwm_read_ch2+0x5c>)
 800404e:	7f1b      	ldrb	r3, [r3, #28]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d125      	bne.n	80040a0 <pwm_read_ch2+0x58>
		rc_yaw.ICValue = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8004054:	2100      	movs	r1, #0
 8004056:	4813      	ldr	r0, [pc, #76]	; (80040a4 <pwm_read_ch2+0x5c>)
 8004058:	f005 fb6a 	bl	8009730 <HAL_TIM_ReadCapturedValue>
 800405c:	4603      	mov	r3, r0
 800405e:	4a12      	ldr	r2, [pc, #72]	; (80040a8 <pwm_read_ch2+0x60>)
 8004060:	6013      	str	r3, [r2, #0]

		if (rc_yaw.ICValue != 0) {
 8004062:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <pwm_read_ch2+0x60>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01a      	beq.n	80040a0 <pwm_read_ch2+0x58>
			rc_yaw.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim3,
 800406a:	2104      	movs	r1, #4
 800406c:	480d      	ldr	r0, [pc, #52]	; (80040a4 <pwm_read_ch2+0x5c>)
 800406e:	f005 fb5f 	bl	8009730 <HAL_TIM_ReadCapturedValue>
 8004072:	4603      	mov	r3, r0
			TIM_CHANNEL_2) * 15000) / rc_yaw.ICValue;
 8004074:	f643 2298 	movw	r2, #15000	; 0x3a98
 8004078:	fb03 f202 	mul.w	r2, r3, r2
 800407c:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <pwm_read_ch2+0x60>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	fbb2 f3f3 	udiv	r3, r2, r3
			rc_yaw.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim3,
 8004084:	ee07 3a90 	vmov	s15, r3
 8004088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <pwm_read_ch2+0x60>)
 800408e:	edc3 7a02 	vstr	s15, [r3, #8]

			rc_yaw.frequency = 400000 / rc_yaw.ICValue;
 8004092:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <pwm_read_ch2+0x60>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a05      	ldr	r2, [pc, #20]	; (80040ac <pwm_read_ch2+0x64>)
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	4a02      	ldr	r2, [pc, #8]	; (80040a8 <pwm_read_ch2+0x60>)
 800409e:	6053      	str	r3, [r2, #4]
		}
	}
}
 80040a0:	bf00      	nop
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000990 	.word	0x20000990
 80040a8:	20000860 	.word	0x20000860
 80040ac:	00061a80 	.word	0x00061a80

080040b0 <pwm_read_ch3>:
void pwm_read_ch3() {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
	if (htim4.Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80040b4:	4b2f      	ldr	r3, [pc, #188]	; (8004174 <pwm_read_ch3+0xc4>)
 80040b6:	7f1b      	ldrb	r3, [r3, #28]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d159      	bne.n	8004170 <pwm_read_ch3+0xc0>
		rc_mode.ICValue = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80040bc:	2100      	movs	r1, #0
 80040be:	482d      	ldr	r0, [pc, #180]	; (8004174 <pwm_read_ch3+0xc4>)
 80040c0:	f005 fb36 	bl	8009730 <HAL_TIM_ReadCapturedValue>
 80040c4:	4603      	mov	r3, r0
 80040c6:	4a2c      	ldr	r2, [pc, #176]	; (8004178 <pwm_read_ch3+0xc8>)
 80040c8:	6013      	str	r3, [r2, #0]

		if (rc_mode.ICValue != 0) {
 80040ca:	4b2b      	ldr	r3, [pc, #172]	; (8004178 <pwm_read_ch3+0xc8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d01a      	beq.n	8004108 <pwm_read_ch3+0x58>
			rc_mode.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim4,
 80040d2:	2104      	movs	r1, #4
 80040d4:	4827      	ldr	r0, [pc, #156]	; (8004174 <pwm_read_ch3+0xc4>)
 80040d6:	f005 fb2b 	bl	8009730 <HAL_TIM_ReadCapturedValue>
 80040da:	4603      	mov	r3, r0
			TIM_CHANNEL_2) * 15000) / rc_mode.ICValue;
 80040dc:	f643 2298 	movw	r2, #15000	; 0x3a98
 80040e0:	fb03 f202 	mul.w	r2, r3, r2
 80040e4:	4b24      	ldr	r3, [pc, #144]	; (8004178 <pwm_read_ch3+0xc8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	fbb2 f3f3 	udiv	r3, r2, r3
			rc_mode.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim4,
 80040ec:	ee07 3a90 	vmov	s15, r3
 80040f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f4:	4b20      	ldr	r3, [pc, #128]	; (8004178 <pwm_read_ch3+0xc8>)
 80040f6:	edc3 7a02 	vstr	s15, [r3, #8]

			rc_mode.frequency = 400000 / rc_mode.ICValue;
 80040fa:	4b1f      	ldr	r3, [pc, #124]	; (8004178 <pwm_read_ch3+0xc8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1f      	ldr	r2, [pc, #124]	; (800417c <pwm_read_ch3+0xcc>)
 8004100:	fbb2 f3f3 	udiv	r3, r2, r3
 8004104:	4a1c      	ldr	r2, [pc, #112]	; (8004178 <pwm_read_ch3+0xc8>)
 8004106:	6053      	str	r3, [r2, #4]
		}

		if (rc_mode.dutyCycle < 1200) { // sadece 2 mod var kumanda da 3 mod var. kill mod falan eklenmek isteniyor ise kod eklenebilir.
 8004108:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <pwm_read_ch3+0xc8>)
 800410a:	edd3 7a02 	vldr	s15, [r3, #8]
 800410e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004180 <pwm_read_ch3+0xd0>
 8004112:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411a:	d503      	bpl.n	8004124 <pwm_read_ch3+0x74>
			drive_mode = MANUAL_MODE;	// yukarıda iken manuel modda
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <pwm_read_ch3+0xd4>)
 800411e:	2200      	movs	r2, #0
 8004120:	701a      	strb	r2, [r3, #0]
			drive_mode = SAFETY_MODE;	//BURAYI OTONOM MOD YAZACAĞIZ GÜVENLİK İÇİN ŞU AN SAFETY'DE
		} else if (rc_mode.dutyCycle < 1700 || rc_mode.dutyCycle > 1200) {
			drive_mode = SAFETY_MODE;
		}
	}
}
 8004122:	e025      	b.n	8004170 <pwm_read_ch3+0xc0>
		} else if (rc_mode.dutyCycle > 1700) {
 8004124:	4b14      	ldr	r3, [pc, #80]	; (8004178 <pwm_read_ch3+0xc8>)
 8004126:	edd3 7a02 	vldr	s15, [r3, #8]
 800412a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004188 <pwm_read_ch3+0xd8>
 800412e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004136:	dd03      	ble.n	8004140 <pwm_read_ch3+0x90>
			drive_mode = SAFETY_MODE;	//BURAYI OTONOM MOD YAZACAĞIZ GÜVENLİK İÇİN ŞU AN SAFETY'DE
 8004138:	4b12      	ldr	r3, [pc, #72]	; (8004184 <pwm_read_ch3+0xd4>)
 800413a:	2202      	movs	r2, #2
 800413c:	701a      	strb	r2, [r3, #0]
}
 800413e:	e017      	b.n	8004170 <pwm_read_ch3+0xc0>
		} else if (rc_mode.dutyCycle < 1700 || rc_mode.dutyCycle > 1200) {
 8004140:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <pwm_read_ch3+0xc8>)
 8004142:	edd3 7a02 	vldr	s15, [r3, #8]
 8004146:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004188 <pwm_read_ch3+0xd8>
 800414a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800414e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004152:	d40a      	bmi.n	800416a <pwm_read_ch3+0xba>
 8004154:	4b08      	ldr	r3, [pc, #32]	; (8004178 <pwm_read_ch3+0xc8>)
 8004156:	edd3 7a02 	vldr	s15, [r3, #8]
 800415a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004180 <pwm_read_ch3+0xd0>
 800415e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004166:	dc00      	bgt.n	800416a <pwm_read_ch3+0xba>
}
 8004168:	e002      	b.n	8004170 <pwm_read_ch3+0xc0>
			drive_mode = SAFETY_MODE;
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <pwm_read_ch3+0xd4>)
 800416c:	2202      	movs	r2, #2
 800416e:	701a      	strb	r2, [r3, #0]
}
 8004170:	bf00      	nop
 8004172:	bd80      	pop	{r7, pc}
 8004174:	200009d8 	.word	0x200009d8
 8004178:	20000874 	.word	0x20000874
 800417c:	00061a80 	.word	0x00061a80
 8004180:	44960000 	.word	0x44960000
 8004184:	2000044c 	.word	0x2000044c
 8004188:	44d48000 	.word	0x44d48000

0800418c <pwm_read_ch4>:


void pwm_read_ch4() {
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
if (htim9.Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8004190:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <pwm_read_ch4+0x5c>)
 8004192:	7f1b      	ldrb	r3, [r3, #28]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d125      	bne.n	80041e4 <pwm_read_ch4+0x58>
	rc_throttle.ICValue = HAL_TIM_ReadCapturedValue(&htim9, TIM_CHANNEL_1);
 8004198:	2100      	movs	r1, #0
 800419a:	4813      	ldr	r0, [pc, #76]	; (80041e8 <pwm_read_ch4+0x5c>)
 800419c:	f005 fac8 	bl	8009730 <HAL_TIM_ReadCapturedValue>
 80041a0:	4603      	mov	r3, r0
 80041a2:	4a12      	ldr	r2, [pc, #72]	; (80041ec <pwm_read_ch4+0x60>)
 80041a4:	6013      	str	r3, [r2, #0]

	if (rc_throttle.ICValue != 0) {
 80041a6:	4b11      	ldr	r3, [pc, #68]	; (80041ec <pwm_read_ch4+0x60>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01a      	beq.n	80041e4 <pwm_read_ch4+0x58>
		rc_throttle.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim9,
 80041ae:	2104      	movs	r1, #4
 80041b0:	480d      	ldr	r0, [pc, #52]	; (80041e8 <pwm_read_ch4+0x5c>)
 80041b2:	f005 fabd 	bl	8009730 <HAL_TIM_ReadCapturedValue>
 80041b6:	4603      	mov	r3, r0
		TIM_CHANNEL_2) * 15000) / rc_throttle.ICValue;
 80041b8:	f643 2298 	movw	r2, #15000	; 0x3a98
 80041bc:	fb03 f202 	mul.w	r2, r3, r2
 80041c0:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <pwm_read_ch4+0x60>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
		rc_throttle.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim9,
 80041c8:	ee07 3a90 	vmov	s15, r3
 80041cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <pwm_read_ch4+0x60>)
 80041d2:	edc3 7a02 	vstr	s15, [r3, #8]

		rc_throttle.frequency = 400000 / rc_throttle.ICValue;
 80041d6:	4b05      	ldr	r3, [pc, #20]	; (80041ec <pwm_read_ch4+0x60>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a05      	ldr	r2, [pc, #20]	; (80041f0 <pwm_read_ch4+0x64>)
 80041dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e0:	4a02      	ldr	r2, [pc, #8]	; (80041ec <pwm_read_ch4+0x60>)
 80041e2:	6053      	str	r3, [r2, #4]

	}

}
}
 80041e4:	bf00      	nop
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	20000ab0 	.word	0x20000ab0
 80041ec:	20000888 	.word	0x20000888
 80041f0:	00061a80 	.word	0x00061a80

080041f4 <pwm_read_ch5>:
void pwm_read_ch5() {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
	if (htim12.Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80041f8:	4b15      	ldr	r3, [pc, #84]	; (8004250 <pwm_read_ch5+0x5c>)
 80041fa:	7f1b      	ldrb	r3, [r3, #28]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d125      	bne.n	800424c <pwm_read_ch5+0x58>
		rc_pitch.ICValue = HAL_TIM_ReadCapturedValue(&htim12, TIM_CHANNEL_1);
 8004200:	2100      	movs	r1, #0
 8004202:	4813      	ldr	r0, [pc, #76]	; (8004250 <pwm_read_ch5+0x5c>)
 8004204:	f005 fa94 	bl	8009730 <HAL_TIM_ReadCapturedValue>
 8004208:	4603      	mov	r3, r0
 800420a:	4a12      	ldr	r2, [pc, #72]	; (8004254 <pwm_read_ch5+0x60>)
 800420c:	6013      	str	r3, [r2, #0]

		if (rc_pitch.ICValue != 0) {
 800420e:	4b11      	ldr	r3, [pc, #68]	; (8004254 <pwm_read_ch5+0x60>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d01a      	beq.n	800424c <pwm_read_ch5+0x58>
			rc_pitch.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim12,
 8004216:	2104      	movs	r1, #4
 8004218:	480d      	ldr	r0, [pc, #52]	; (8004250 <pwm_read_ch5+0x5c>)
 800421a:	f005 fa89 	bl	8009730 <HAL_TIM_ReadCapturedValue>
 800421e:	4603      	mov	r3, r0
			TIM_CHANNEL_2) * 15000) / rc_pitch.ICValue;
 8004220:	f643 2298 	movw	r2, #15000	; 0x3a98
 8004224:	fb03 f202 	mul.w	r2, r3, r2
 8004228:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <pwm_read_ch5+0x60>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	fbb2 f3f3 	udiv	r3, r2, r3
			rc_pitch.dutyCycle = (HAL_TIM_ReadCapturedValue(&htim12,
 8004230:	ee07 3a90 	vmov	s15, r3
 8004234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <pwm_read_ch5+0x60>)
 800423a:	edc3 7a02 	vstr	s15, [r3, #8]

			rc_pitch.frequency = 400000 / rc_pitch.ICValue;
 800423e:	4b05      	ldr	r3, [pc, #20]	; (8004254 <pwm_read_ch5+0x60>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a05      	ldr	r2, [pc, #20]	; (8004258 <pwm_read_ch5+0x64>)
 8004244:	fbb2 f3f3 	udiv	r3, r2, r3
 8004248:	4a02      	ldr	r2, [pc, #8]	; (8004254 <pwm_read_ch5+0x60>)
 800424a:	6053      	str	r3, [r2, #4]
		}
	}
}
 800424c:	bf00      	nop
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20000af8 	.word	0x20000af8
 8004254:	2000089c 	.word	0x2000089c
 8004258:	00061a80 	.word	0x00061a80

0800425c <MAP>:

float MAP(float INvariable, float INmin, float INmax, float OUTmin,
		float OUTmax) {
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	ed87 0a05 	vstr	s0, [r7, #20]
 8004266:	edc7 0a04 	vstr	s1, [r7, #16]
 800426a:	ed87 1a03 	vstr	s2, [r7, #12]
 800426e:	edc7 1a02 	vstr	s3, [r7, #8]
 8004272:	ed87 2a01 	vstr	s4, [r7, #4]
	return (float) ((((INvariable - INmin) * (OUTmax - OUTmin))
 8004276:	ed97 7a05 	vldr	s14, [r7, #20]
 800427a:	edd7 7a04 	vldr	s15, [r7, #16]
 800427e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004282:	edd7 6a01 	vldr	s13, [r7, #4]
 8004286:	edd7 7a02 	vldr	s15, [r7, #8]
 800428a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800428e:	ee67 6a27 	vmul.f32	s13, s14, s15
			/ (INmax - INmin)) + OUTmin);
 8004292:	ed97 7a03 	vldr	s14, [r7, #12]
 8004296:	edd7 7a04 	vldr	s15, [r7, #16]
 800429a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800429e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	return (float) ((((INvariable - INmin) * (OUTmax - OUTmin))
 80042a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80042a6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80042aa:	eeb0 0a67 	vmov.f32	s0, s15
 80042ae:	371c      	adds	r7, #28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042be:	2300      	movs	r3, #0
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	4b12      	ldr	r3, [pc, #72]	; (800430c <HAL_MspInit+0x54>)
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	4a11      	ldr	r2, [pc, #68]	; (800430c <HAL_MspInit+0x54>)
 80042c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042cc:	6453      	str	r3, [r2, #68]	; 0x44
 80042ce:	4b0f      	ldr	r3, [pc, #60]	; (800430c <HAL_MspInit+0x54>)
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042da:	2300      	movs	r3, #0
 80042dc:	603b      	str	r3, [r7, #0]
 80042de:	4b0b      	ldr	r3, [pc, #44]	; (800430c <HAL_MspInit+0x54>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	4a0a      	ldr	r2, [pc, #40]	; (800430c <HAL_MspInit+0x54>)
 80042e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ea:	4b08      	ldr	r3, [pc, #32]	; (800430c <HAL_MspInit+0x54>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80042f6:	2200      	movs	r2, #0
 80042f8:	210f      	movs	r1, #15
 80042fa:	f06f 0001 	mvn.w	r0, #1
 80042fe:	f001 fe5b 	bl	8005fb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40023800 	.word	0x40023800

08004310 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08c      	sub	sp, #48	; 0x30
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8004320:	2300      	movs	r3, #0
 8004322:	60bb      	str	r3, [r7, #8]
 8004324:	4b2f      	ldr	r3, [pc, #188]	; (80043e4 <HAL_InitTick+0xd4>)
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	4a2e      	ldr	r2, [pc, #184]	; (80043e4 <HAL_InitTick+0xd4>)
 800432a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800432e:	6453      	str	r3, [r2, #68]	; 0x44
 8004330:	4b2c      	ldr	r3, [pc, #176]	; (80043e4 <HAL_InitTick+0xd4>)
 8004332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800433c:	f107 020c 	add.w	r2, r7, #12
 8004340:	f107 0310 	add.w	r3, r7, #16
 8004344:	4611      	mov	r1, r2
 8004346:	4618      	mov	r0, r3
 8004348:	f004 f9a8 	bl	800869c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800434c:	f004 f992 	bl	8008674 <HAL_RCC_GetPCLK2Freq>
 8004350:	4603      	mov	r3, r0
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004358:	4a23      	ldr	r2, [pc, #140]	; (80043e8 <HAL_InitTick+0xd8>)
 800435a:	fba2 2303 	umull	r2, r3, r2, r3
 800435e:	0c9b      	lsrs	r3, r3, #18
 8004360:	3b01      	subs	r3, #1
 8004362:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8004364:	4b21      	ldr	r3, [pc, #132]	; (80043ec <HAL_InitTick+0xdc>)
 8004366:	4a22      	ldr	r2, [pc, #136]	; (80043f0 <HAL_InitTick+0xe0>)
 8004368:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800436a:	4b20      	ldr	r3, [pc, #128]	; (80043ec <HAL_InitTick+0xdc>)
 800436c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004370:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8004372:	4a1e      	ldr	r2, [pc, #120]	; (80043ec <HAL_InitTick+0xdc>)
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8004378:	4b1c      	ldr	r3, [pc, #112]	; (80043ec <HAL_InitTick+0xdc>)
 800437a:	2200      	movs	r2, #0
 800437c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800437e:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <HAL_InitTick+0xdc>)
 8004380:	2200      	movs	r2, #0
 8004382:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004384:	4b19      	ldr	r3, [pc, #100]	; (80043ec <HAL_InitTick+0xdc>)
 8004386:	2200      	movs	r2, #0
 8004388:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800438a:	4818      	ldr	r0, [pc, #96]	; (80043ec <HAL_InitTick+0xdc>)
 800438c:	f004 f9b8 	bl	8008700 <HAL_TIM_Base_Init>
 8004390:	4603      	mov	r3, r0
 8004392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004396:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800439a:	2b00      	cmp	r3, #0
 800439c:	d11b      	bne.n	80043d6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800439e:	4813      	ldr	r0, [pc, #76]	; (80043ec <HAL_InitTick+0xdc>)
 80043a0:	f004 fa66 	bl	8008870 <HAL_TIM_Base_Start_IT>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80043aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d111      	bne.n	80043d6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80043b2:	2019      	movs	r0, #25
 80043b4:	f001 fe1c 	bl	8005ff0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b0f      	cmp	r3, #15
 80043bc:	d808      	bhi.n	80043d0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80043be:	2200      	movs	r2, #0
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	2019      	movs	r0, #25
 80043c4:	f001 fdf8 	bl	8005fb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80043c8:	4a0a      	ldr	r2, [pc, #40]	; (80043f4 <HAL_InitTick+0xe4>)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e002      	b.n	80043d6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80043d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3730      	adds	r7, #48	; 0x30
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40023800 	.word	0x40023800
 80043e8:	431bde83 	.word	0x431bde83
 80043ec:	200008b4 	.word	0x200008b4
 80043f0:	40014400 	.word	0x40014400
 80043f4:	20000010 	.word	0x20000010

080043f8 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80043fc:	e7fe      	b.n	80043fc <NMI_Handler+0x4>
	...

08004400 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */
	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
		/* USER CODE BEGIN W1_HardFault_IRQn 0 */
		drive_motor_1(1100);
 8004404:	f240 404c 	movw	r0, #1100	; 0x44c
 8004408:	f7fe f9c6 	bl	8002798 <drive_motor_1>
		drive_motor_2(1100);
 800440c:	f240 404c 	movw	r0, #1100	; 0x44c
 8004410:	f7fe f9d2 	bl	80027b8 <drive_motor_2>
		drive_motor_3(1100);
 8004414:	f240 404c 	movw	r0, #1100	; 0x44c
 8004418:	f7fe f9de 	bl	80027d8 <drive_motor_3>
		drive_motor_4(1100);
 800441c:	f240 404c 	movw	r0, #1100	; 0x44c
 8004420:	f7fe f9ea 	bl	80027f8 <drive_motor_4>

		HAL_GPIO_WritePin(hard_fault_led_GPIO_Port, hard_fault_led_Pin,
 8004424:	2201      	movs	r2, #1
 8004426:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800442a:	4803      	ldr	r0, [pc, #12]	; (8004438 <HardFault_Handler+0x38>)
 800442c:	f002 f81c 	bl	8006468 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);

		printf("HARD FAULT!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
 8004430:	4802      	ldr	r0, [pc, #8]	; (800443c <HardFault_Handler+0x3c>)
 8004432:	f009 f833 	bl	800d49c <puts>
		drive_motor_1(1100);
 8004436:	e7e5      	b.n	8004404 <HardFault_Handler+0x4>
 8004438:	40020c00 	.word	0x40020c00
 800443c:	08010aac 	.word	0x08010aac

08004440 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8004444:	e7fe      	b.n	8004444 <MemManage_Handler+0x4>

08004446 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8004446:	b480      	push	{r7}
 8004448:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800444a:	e7fe      	b.n	800444a <BusFault_Handler+0x4>

0800444c <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8004450:	e7fe      	b.n	8004450 <UsageFault_Handler+0x4>

08004452 <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8004452:	b480      	push	{r7}
 8004454:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8004456:	bf00      	nop
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <TIM1_BRK_TIM9_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
 */
void TIM1_BRK_TIM9_IRQHandler(void) {
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	/* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 8004464:	4803      	ldr	r0, [pc, #12]	; (8004474 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8004466:	f004 fdf3 	bl	8009050 <HAL_TIM_IRQHandler>
	HAL_TIM_IRQHandler(&htim9);
 800446a:	4803      	ldr	r0, [pc, #12]	; (8004478 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800446c:	f004 fdf0 	bl	8009050 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

	/* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004470:	bf00      	nop
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20000900 	.word	0x20000900
 8004478:	20000ab0 	.word	0x20000ab0

0800447c <TIM1_UP_TIM10_IRQHandler>:

/**
 * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
 */
void TIM1_UP_TIM10_IRQHandler(void) {
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

	/* USER CODE END TIM1_UP_TIM10_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 8004480:	4803      	ldr	r0, [pc, #12]	; (8004490 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004482:	f004 fde5 	bl	8009050 <HAL_TIM_IRQHandler>
	HAL_TIM_IRQHandler(&htim10);
 8004486:	4803      	ldr	r0, [pc, #12]	; (8004494 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004488:	f004 fde2 	bl	8009050 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

	/* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800448c:	bf00      	nop
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20000900 	.word	0x20000900
 8004494:	200008b4 	.word	0x200008b4

08004498 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 800449c:	4802      	ldr	r0, [pc, #8]	; (80044a8 <TIM2_IRQHandler+0x10>)
 800449e:	f004 fdd7 	bl	8009050 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 80044a2:	bf00      	nop
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000948 	.word	0x20000948

080044ac <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 80044b0:	4802      	ldr	r0, [pc, #8]	; (80044bc <TIM3_IRQHandler+0x10>)
 80044b2:	f004 fdcd 	bl	8009050 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 80044b6:	bf00      	nop
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000990 	.word	0x20000990

080044c0 <TIM4_IRQHandler>:

/**
 * @brief This function handles TIM4 global interrupt.
 */
void TIM4_IRQHandler(void) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM4_IRQn 0 */

	/* USER CODE END TIM4_IRQn 0 */
	HAL_TIM_IRQHandler(&htim4);
 80044c4:	4802      	ldr	r0, [pc, #8]	; (80044d0 <TIM4_IRQHandler+0x10>)
 80044c6:	f004 fdc3 	bl	8009050 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM4_IRQn 1 */

	/* USER CODE END TIM4_IRQn 1 */
}
 80044ca:	bf00      	nop
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	200009d8 	.word	0x200009d8

080044d4 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */
	//Uart_isr(&huart2);
	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 80044d8:	4802      	ldr	r0, [pc, #8]	; (80044e4 <USART2_IRQHandler+0x10>)
 80044da:	f006 f849 	bl	800a570 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */
	/* USER CODE END USART2_IRQn 1 */
}
 80044de:	bf00      	nop
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20000b84 	.word	0x20000b84

080044e8 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 80044ec:	4804      	ldr	r0, [pc, #16]	; (8004500 <USART3_IRQHandler+0x18>)
 80044ee:	f006 f83f 	bl	800a570 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */
	HAL_UART_Receive_IT(&huart3, (uint8_t*) uartBuffer.buffer, 8);
 80044f2:	2208      	movs	r2, #8
 80044f4:	4903      	ldr	r1, [pc, #12]	; (8004504 <USART3_IRQHandler+0x1c>)
 80044f6:	4802      	ldr	r0, [pc, #8]	; (8004500 <USART3_IRQHandler+0x18>)
 80044f8:	f006 f809 	bl	800a50e <HAL_UART_Receive_IT>
	/* USER CODE END USART3_IRQn 1 */
}
 80044fc:	bf00      	nop
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20000bc8 	.word	0x20000bc8
 8004504:	20000844 	.word	0x20000844

08004508 <TIM8_BRK_TIM12_IRQHandler>:

/**
 * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
 */
void TIM8_BRK_TIM12_IRQHandler(void) {
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

	/* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
	HAL_TIM_IRQHandler(&htim12);
 800450c:	4802      	ldr	r0, [pc, #8]	; (8004518 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800450e:	f004 fd9f 	bl	8009050 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

	/* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004512:	bf00      	nop
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000af8 	.word	0x20000af8

0800451c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return 1;
 8004520:	2301      	movs	r3, #1
}
 8004522:	4618      	mov	r0, r3
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <_kill>:

int _kill(int pid, int sig)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004536:	f009 f939 	bl	800d7ac <__errno>
 800453a:	4603      	mov	r3, r0
 800453c:	2216      	movs	r2, #22
 800453e:	601a      	str	r2, [r3, #0]
  return -1;
 8004540:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <_exit>:

void _exit (int status)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004554:	f04f 31ff 	mov.w	r1, #4294967295
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff ffe7 	bl	800452c <_kill>
  while (1) {}    /* Make sure we hang here */
 800455e:	e7fe      	b.n	800455e <_exit+0x12>

08004560 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	e00a      	b.n	8004588 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004572:	f3af 8000 	nop.w
 8004576:	4601      	mov	r1, r0
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	60ba      	str	r2, [r7, #8]
 800457e:	b2ca      	uxtb	r2, r1
 8004580:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	3301      	adds	r3, #1
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	429a      	cmp	r2, r3
 800458e:	dbf0      	blt.n	8004572 <_read+0x12>
  }

  return len;
 8004590:	687b      	ldr	r3, [r7, #4]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <_close>:
  }
  return len;
}

int _close(int file)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80045a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045c2:	605a      	str	r2, [r3, #4]
  return 0;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <_isatty>:

int _isatty(int file)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80045da:	2301      	movs	r3, #1
}
 80045dc:	4618      	mov	r0, r3
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800460c:	4a14      	ldr	r2, [pc, #80]	; (8004660 <_sbrk+0x5c>)
 800460e:	4b15      	ldr	r3, [pc, #84]	; (8004664 <_sbrk+0x60>)
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004618:	4b13      	ldr	r3, [pc, #76]	; (8004668 <_sbrk+0x64>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d102      	bne.n	8004626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004620:	4b11      	ldr	r3, [pc, #68]	; (8004668 <_sbrk+0x64>)
 8004622:	4a12      	ldr	r2, [pc, #72]	; (800466c <_sbrk+0x68>)
 8004624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004626:	4b10      	ldr	r3, [pc, #64]	; (8004668 <_sbrk+0x64>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	429a      	cmp	r2, r3
 8004632:	d207      	bcs.n	8004644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004634:	f009 f8ba 	bl	800d7ac <__errno>
 8004638:	4603      	mov	r3, r0
 800463a:	220c      	movs	r2, #12
 800463c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800463e:	f04f 33ff 	mov.w	r3, #4294967295
 8004642:	e009      	b.n	8004658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004644:	4b08      	ldr	r3, [pc, #32]	; (8004668 <_sbrk+0x64>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800464a:	4b07      	ldr	r3, [pc, #28]	; (8004668 <_sbrk+0x64>)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4413      	add	r3, r2
 8004652:	4a05      	ldr	r2, [pc, #20]	; (8004668 <_sbrk+0x64>)
 8004654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004656:	68fb      	ldr	r3, [r7, #12]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20020000 	.word	0x20020000
 8004664:	00000400 	.word	0x00000400
 8004668:	200008fc 	.word	0x200008fc
 800466c:	20004ab0 	.word	0x20004ab0

08004670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004674:	4b06      	ldr	r3, [pc, #24]	; (8004690 <SystemInit+0x20>)
 8004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467a:	4a05      	ldr	r2, [pc, #20]	; (8004690 <SystemInit+0x20>)
 800467c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004684:	bf00      	nop
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	e000ed00 	.word	0xe000ed00

08004694 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b096      	sub	sp, #88	; 0x58
 8004698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800469a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	605a      	str	r2, [r3, #4]
 80046a4:	609a      	str	r2, [r3, #8]
 80046a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80046b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	605a      	str	r2, [r3, #4]
 80046bc:	609a      	str	r2, [r3, #8]
 80046be:	60da      	str	r2, [r3, #12]
 80046c0:	611a      	str	r2, [r3, #16]
 80046c2:	615a      	str	r2, [r3, #20]
 80046c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80046c6:	1d3b      	adds	r3, r7, #4
 80046c8:	2220      	movs	r2, #32
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f008 ffc5 	bl	800d65c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80046d2:	4b50      	ldr	r3, [pc, #320]	; (8004814 <MX_TIM1_Init+0x180>)
 80046d4:	4a50      	ldr	r2, [pc, #320]	; (8004818 <MX_TIM1_Init+0x184>)
 80046d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 80046d8:	4b4e      	ldr	r3, [pc, #312]	; (8004814 <MX_TIM1_Init+0x180>)
 80046da:	22a7      	movs	r2, #167	; 0xa7
 80046dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046de:	4b4d      	ldr	r3, [pc, #308]	; (8004814 <MX_TIM1_Init+0x180>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80046e4:	4b4b      	ldr	r3, [pc, #300]	; (8004814 <MX_TIM1_Init+0x180>)
 80046e6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80046ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046ec:	4b49      	ldr	r3, [pc, #292]	; (8004814 <MX_TIM1_Init+0x180>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80046f2:	4b48      	ldr	r3, [pc, #288]	; (8004814 <MX_TIM1_Init+0x180>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80046f8:	4b46      	ldr	r3, [pc, #280]	; (8004814 <MX_TIM1_Init+0x180>)
 80046fa:	2280      	movs	r2, #128	; 0x80
 80046fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80046fe:	4845      	ldr	r0, [pc, #276]	; (8004814 <MX_TIM1_Init+0x180>)
 8004700:	f003 fffe 	bl	8008700 <HAL_TIM_Base_Init>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800470a:	f7ff fbd9 	bl	8003ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800470e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004712:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004714:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004718:	4619      	mov	r1, r3
 800471a:	483e      	ldr	r0, [pc, #248]	; (8004814 <MX_TIM1_Init+0x180>)
 800471c:	f004 fefe 	bl	800951c <HAL_TIM_ConfigClockSource>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004726:	f7ff fbcb 	bl	8003ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800472a:	483a      	ldr	r0, [pc, #232]	; (8004814 <MX_TIM1_Init+0x180>)
 800472c:	f004 f910 	bl	8008950 <HAL_TIM_PWM_Init>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004736:	f7ff fbc3 	bl	8003ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800473a:	2300      	movs	r3, #0
 800473c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800473e:	2300      	movs	r3, #0
 8004740:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004742:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004746:	4619      	mov	r1, r3
 8004748:	4832      	ldr	r0, [pc, #200]	; (8004814 <MX_TIM1_Init+0x180>)
 800474a:	f005 fd1f 	bl	800a18c <HAL_TIMEx_MasterConfigSynchronization>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004754:	f7ff fbb4 	bl	8003ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004758:	2360      	movs	r3, #96	; 0x60
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004760:	2300      	movs	r3, #0
 8004762:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004764:	2300      	movs	r3, #0
 8004766:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004768:	2300      	movs	r3, #0
 800476a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800476c:	2300      	movs	r3, #0
 800476e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004770:	2300      	movs	r3, #0
 8004772:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004778:	2200      	movs	r2, #0
 800477a:	4619      	mov	r1, r3
 800477c:	4825      	ldr	r0, [pc, #148]	; (8004814 <MX_TIM1_Init+0x180>)
 800477e:	f004 fe0b 	bl	8009398 <HAL_TIM_PWM_ConfigChannel>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004788:	f7ff fb9a 	bl	8003ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800478c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004790:	2204      	movs	r2, #4
 8004792:	4619      	mov	r1, r3
 8004794:	481f      	ldr	r0, [pc, #124]	; (8004814 <MX_TIM1_Init+0x180>)
 8004796:	f004 fdff 	bl	8009398 <HAL_TIM_PWM_ConfigChannel>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80047a0:	f7ff fb8e 	bl	8003ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80047a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047a8:	2208      	movs	r2, #8
 80047aa:	4619      	mov	r1, r3
 80047ac:	4819      	ldr	r0, [pc, #100]	; (8004814 <MX_TIM1_Init+0x180>)
 80047ae:	f004 fdf3 	bl	8009398 <HAL_TIM_PWM_ConfigChannel>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80047b8:	f7ff fb82 	bl	8003ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80047bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047c0:	220c      	movs	r2, #12
 80047c2:	4619      	mov	r1, r3
 80047c4:	4813      	ldr	r0, [pc, #76]	; (8004814 <MX_TIM1_Init+0x180>)
 80047c6:	f004 fde7 	bl	8009398 <HAL_TIM_PWM_ConfigChannel>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80047d0:	f7ff fb76 	bl	8003ec0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80047d4:	2300      	movs	r3, #0
 80047d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80047d8:	2300      	movs	r3, #0
 80047da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80047e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80047ee:	2300      	movs	r3, #0
 80047f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80047f2:	1d3b      	adds	r3, r7, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4807      	ldr	r0, [pc, #28]	; (8004814 <MX_TIM1_Init+0x180>)
 80047f8:	f005 fd44 	bl	800a284 <HAL_TIMEx_ConfigBreakDeadTime>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8004802:	f7ff fb5d 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004806:	4803      	ldr	r0, [pc, #12]	; (8004814 <MX_TIM1_Init+0x180>)
 8004808:	f000 fd12 	bl	8005230 <HAL_TIM_MspPostInit>

}
 800480c:	bf00      	nop
 800480e:	3758      	adds	r7, #88	; 0x58
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20000900 	.word	0x20000900
 8004818:	40010000 	.word	0x40010000

0800481c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b090      	sub	sp, #64	; 0x40
 8004820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004822:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	605a      	str	r2, [r3, #4]
 800482c:	609a      	str	r2, [r3, #8]
 800482e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004830:	f107 031c 	add.w	r3, r7, #28
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	605a      	str	r2, [r3, #4]
 800483a:	609a      	str	r2, [r3, #8]
 800483c:	60da      	str	r2, [r3, #12]
 800483e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004840:	f107 030c 	add.w	r3, r7, #12
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800484e:	1d3b      	adds	r3, r7, #4
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004856:	4b3f      	ldr	r3, [pc, #252]	; (8004954 <MX_TIM2_Init+0x138>)
 8004858:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800485c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2100-1;
 800485e:	4b3d      	ldr	r3, [pc, #244]	; (8004954 <MX_TIM2_Init+0x138>)
 8004860:	f640 0233 	movw	r2, #2099	; 0x833
 8004864:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004866:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <MX_TIM2_Init+0x138>)
 8004868:	2200      	movs	r2, #0
 800486a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800486c:	4b39      	ldr	r3, [pc, #228]	; (8004954 <MX_TIM2_Init+0x138>)
 800486e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004872:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004874:	4b37      	ldr	r3, [pc, #220]	; (8004954 <MX_TIM2_Init+0x138>)
 8004876:	2200      	movs	r2, #0
 8004878:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800487a:	4b36      	ldr	r3, [pc, #216]	; (8004954 <MX_TIM2_Init+0x138>)
 800487c:	2200      	movs	r2, #0
 800487e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004880:	4834      	ldr	r0, [pc, #208]	; (8004954 <MX_TIM2_Init+0x138>)
 8004882:	f003 ff3d 	bl	8008700 <HAL_TIM_Base_Init>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800488c:	f7ff fb18 	bl	8003ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004894:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004896:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800489a:	4619      	mov	r1, r3
 800489c:	482d      	ldr	r0, [pc, #180]	; (8004954 <MX_TIM2_Init+0x138>)
 800489e:	f004 fe3d 	bl	800951c <HAL_TIM_ConfigClockSource>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80048a8:	f7ff fb0a 	bl	8003ec0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80048ac:	4829      	ldr	r0, [pc, #164]	; (8004954 <MX_TIM2_Init+0x138>)
 80048ae:	f004 f971 	bl	8008b94 <HAL_TIM_IC_Init>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80048b8:	f7ff fb02 	bl	8003ec0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80048bc:	2304      	movs	r3, #4
 80048be:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80048c0:	2350      	movs	r3, #80	; 0x50
 80048c2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80048c4:	2300      	movs	r3, #0
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80048c8:	2300      	movs	r3, #0
 80048ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80048d0:	f107 031c 	add.w	r3, r7, #28
 80048d4:	4619      	mov	r1, r3
 80048d6:	481f      	ldr	r0, [pc, #124]	; (8004954 <MX_TIM2_Init+0x138>)
 80048d8:	f004 fee7 	bl	80096aa <HAL_TIM_SlaveConfigSynchro>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80048e2:	f7ff faed 	bl	8003ec0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80048ea:	2301      	movs	r3, #1
 80048ec:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80048ee:	2300      	movs	r3, #0
 80048f0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80048f6:	f107 030c 	add.w	r3, r7, #12
 80048fa:	2200      	movs	r2, #0
 80048fc:	4619      	mov	r1, r3
 80048fe:	4815      	ldr	r0, [pc, #84]	; (8004954 <MX_TIM2_Init+0x138>)
 8004900:	f004 fcae 	bl	8009260 <HAL_TIM_IC_ConfigChannel>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800490a:	f7ff fad9 	bl	8003ec0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800490e:	2302      	movs	r3, #2
 8004910:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8004912:	2302      	movs	r3, #2
 8004914:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004916:	f107 030c 	add.w	r3, r7, #12
 800491a:	2204      	movs	r2, #4
 800491c:	4619      	mov	r1, r3
 800491e:	480d      	ldr	r0, [pc, #52]	; (8004954 <MX_TIM2_Init+0x138>)
 8004920:	f004 fc9e 	bl	8009260 <HAL_TIM_IC_ConfigChannel>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 800492a:	f7ff fac9 	bl	8003ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800492e:	2300      	movs	r3, #0
 8004930:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004932:	2300      	movs	r3, #0
 8004934:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004936:	1d3b      	adds	r3, r7, #4
 8004938:	4619      	mov	r1, r3
 800493a:	4806      	ldr	r0, [pc, #24]	; (8004954 <MX_TIM2_Init+0x138>)
 800493c:	f005 fc26 	bl	800a18c <HAL_TIMEx_MasterConfigSynchronization>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8004946:	f7ff fabb 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800494a:	bf00      	nop
 800494c:	3740      	adds	r7, #64	; 0x40
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20000948 	.word	0x20000948

08004958 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b090      	sub	sp, #64	; 0x40
 800495c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800495e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	605a      	str	r2, [r3, #4]
 8004968:	609a      	str	r2, [r3, #8]
 800496a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800496c:	f107 031c 	add.w	r3, r7, #28
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	605a      	str	r2, [r3, #4]
 8004976:	609a      	str	r2, [r3, #8]
 8004978:	60da      	str	r2, [r3, #12]
 800497a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800497c:	f107 030c 	add.w	r3, r7, #12
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	605a      	str	r2, [r3, #4]
 8004986:	609a      	str	r2, [r3, #8]
 8004988:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800498a:	1d3b      	adds	r3, r7, #4
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004992:	4b3e      	ldr	r3, [pc, #248]	; (8004a8c <MX_TIM3_Init+0x134>)
 8004994:	4a3e      	ldr	r2, [pc, #248]	; (8004a90 <MX_TIM3_Init+0x138>)
 8004996:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 210-1;
 8004998:	4b3c      	ldr	r3, [pc, #240]	; (8004a8c <MX_TIM3_Init+0x134>)
 800499a:	22d1      	movs	r2, #209	; 0xd1
 800499c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800499e:	4b3b      	ldr	r3, [pc, #236]	; (8004a8c <MX_TIM3_Init+0x134>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80049a4:	4b39      	ldr	r3, [pc, #228]	; (8004a8c <MX_TIM3_Init+0x134>)
 80049a6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80049aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049ac:	4b37      	ldr	r3, [pc, #220]	; (8004a8c <MX_TIM3_Init+0x134>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049b2:	4b36      	ldr	r3, [pc, #216]	; (8004a8c <MX_TIM3_Init+0x134>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80049b8:	4834      	ldr	r0, [pc, #208]	; (8004a8c <MX_TIM3_Init+0x134>)
 80049ba:	f003 fea1 	bl	8008700 <HAL_TIM_Base_Init>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80049c4:	f7ff fa7c 	bl	8003ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049cc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80049ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80049d2:	4619      	mov	r1, r3
 80049d4:	482d      	ldr	r0, [pc, #180]	; (8004a8c <MX_TIM3_Init+0x134>)
 80049d6:	f004 fda1 	bl	800951c <HAL_TIM_ConfigClockSource>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80049e0:	f7ff fa6e 	bl	8003ec0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80049e4:	4829      	ldr	r0, [pc, #164]	; (8004a8c <MX_TIM3_Init+0x134>)
 80049e6:	f004 f8d5 	bl	8008b94 <HAL_TIM_IC_Init>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80049f0:	f7ff fa66 	bl	8003ec0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80049f4:	2304      	movs	r3, #4
 80049f6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80049f8:	2350      	movs	r3, #80	; 0x50
 80049fa:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80049fc:	2300      	movs	r3, #0
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8004a00:	2300      	movs	r3, #0
 8004a02:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8004a08:	f107 031c 	add.w	r3, r7, #28
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	481f      	ldr	r0, [pc, #124]	; (8004a8c <MX_TIM3_Init+0x134>)
 8004a10:	f004 fe4b 	bl	80096aa <HAL_TIM_SlaveConfigSynchro>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8004a1a:	f7ff fa51 	bl	8003ec0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004a22:	2301      	movs	r3, #1
 8004a24:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004a2e:	f107 030c 	add.w	r3, r7, #12
 8004a32:	2200      	movs	r2, #0
 8004a34:	4619      	mov	r1, r3
 8004a36:	4815      	ldr	r0, [pc, #84]	; (8004a8c <MX_TIM3_Init+0x134>)
 8004a38:	f004 fc12 	bl	8009260 <HAL_TIM_IC_ConfigChannel>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8004a42:	f7ff fa3d 	bl	8003ec0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8004a46:	2302      	movs	r3, #2
 8004a48:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004a4e:	f107 030c 	add.w	r3, r7, #12
 8004a52:	2204      	movs	r2, #4
 8004a54:	4619      	mov	r1, r3
 8004a56:	480d      	ldr	r0, [pc, #52]	; (8004a8c <MX_TIM3_Init+0x134>)
 8004a58:	f004 fc02 	bl	8009260 <HAL_TIM_IC_ConfigChannel>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8004a62:	f7ff fa2d 	bl	8003ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a66:	2300      	movs	r3, #0
 8004a68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004a6e:	1d3b      	adds	r3, r7, #4
 8004a70:	4619      	mov	r1, r3
 8004a72:	4806      	ldr	r0, [pc, #24]	; (8004a8c <MX_TIM3_Init+0x134>)
 8004a74:	f005 fb8a 	bl	800a18c <HAL_TIMEx_MasterConfigSynchronization>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 8004a7e:	f7ff fa1f 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004a82:	bf00      	nop
 8004a84:	3740      	adds	r7, #64	; 0x40
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000990 	.word	0x20000990
 8004a90:	40000400 	.word	0x40000400

08004a94 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b090      	sub	sp, #64	; 0x40
 8004a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	605a      	str	r2, [r3, #4]
 8004aa4:	609a      	str	r2, [r3, #8]
 8004aa6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004aa8:	f107 031c 	add.w	r3, r7, #28
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	605a      	str	r2, [r3, #4]
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	60da      	str	r2, [r3, #12]
 8004ab6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004ab8:	f107 030c 	add.w	r3, r7, #12
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	609a      	str	r2, [r3, #8]
 8004ac4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ac6:	1d3b      	adds	r3, r7, #4
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004ace:	4b3e      	ldr	r3, [pc, #248]	; (8004bc8 <MX_TIM4_Init+0x134>)
 8004ad0:	4a3e      	ldr	r2, [pc, #248]	; (8004bcc <MX_TIM4_Init+0x138>)
 8004ad2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 210-1;
 8004ad4:	4b3c      	ldr	r3, [pc, #240]	; (8004bc8 <MX_TIM4_Init+0x134>)
 8004ad6:	22d1      	movs	r2, #209	; 0xd1
 8004ad8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ada:	4b3b      	ldr	r3, [pc, #236]	; (8004bc8 <MX_TIM4_Init+0x134>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8004ae0:	4b39      	ldr	r3, [pc, #228]	; (8004bc8 <MX_TIM4_Init+0x134>)
 8004ae2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004ae6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ae8:	4b37      	ldr	r3, [pc, #220]	; (8004bc8 <MX_TIM4_Init+0x134>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004aee:	4b36      	ldr	r3, [pc, #216]	; (8004bc8 <MX_TIM4_Init+0x134>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004af4:	4834      	ldr	r0, [pc, #208]	; (8004bc8 <MX_TIM4_Init+0x134>)
 8004af6:	f003 fe03 	bl	8008700 <HAL_TIM_Base_Init>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004b00:	f7ff f9de 	bl	8003ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b08:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004b0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b0e:	4619      	mov	r1, r3
 8004b10:	482d      	ldr	r0, [pc, #180]	; (8004bc8 <MX_TIM4_Init+0x134>)
 8004b12:	f004 fd03 	bl	800951c <HAL_TIM_ConfigClockSource>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004b1c:	f7ff f9d0 	bl	8003ec0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8004b20:	4829      	ldr	r0, [pc, #164]	; (8004bc8 <MX_TIM4_Init+0x134>)
 8004b22:	f004 f837 	bl	8008b94 <HAL_TIM_IC_Init>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004b2c:	f7ff f9c8 	bl	8003ec0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004b30:	2304      	movs	r3, #4
 8004b32:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004b34:	2350      	movs	r3, #80	; 0x50
 8004b36:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8004b44:	f107 031c 	add.w	r3, r7, #28
 8004b48:	4619      	mov	r1, r3
 8004b4a:	481f      	ldr	r0, [pc, #124]	; (8004bc8 <MX_TIM4_Init+0x134>)
 8004b4c:	f004 fdad 	bl	80096aa <HAL_TIM_SlaveConfigSynchro>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8004b56:	f7ff f9b3 	bl	8003ec0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004b6a:	f107 030c 	add.w	r3, r7, #12
 8004b6e:	2200      	movs	r2, #0
 8004b70:	4619      	mov	r1, r3
 8004b72:	4815      	ldr	r0, [pc, #84]	; (8004bc8 <MX_TIM4_Init+0x134>)
 8004b74:	f004 fb74 	bl	8009260 <HAL_TIM_IC_ConfigChannel>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8004b7e:	f7ff f99f 	bl	8003ec0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8004b82:	2302      	movs	r3, #2
 8004b84:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8004b86:	2302      	movs	r3, #2
 8004b88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004b8a:	f107 030c 	add.w	r3, r7, #12
 8004b8e:	2204      	movs	r2, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	480d      	ldr	r0, [pc, #52]	; (8004bc8 <MX_TIM4_Init+0x134>)
 8004b94:	f004 fb64 	bl	8009260 <HAL_TIM_IC_ConfigChannel>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <MX_TIM4_Init+0x10e>
  {
    Error_Handler();
 8004b9e:	f7ff f98f 	bl	8003ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004baa:	1d3b      	adds	r3, r7, #4
 8004bac:	4619      	mov	r1, r3
 8004bae:	4806      	ldr	r0, [pc, #24]	; (8004bc8 <MX_TIM4_Init+0x134>)
 8004bb0:	f005 faec 	bl	800a18c <HAL_TIMEx_MasterConfigSynchronization>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <MX_TIM4_Init+0x12a>
  {
    Error_Handler();
 8004bba:	f7ff f981 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004bbe:	bf00      	nop
 8004bc0:	3740      	adds	r7, #64	; 0x40
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	200009d8 	.word	0x200009d8
 8004bcc:	40000800 	.word	0x40000800

08004bd0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bd6:	f107 0308 	add.w	r3, r7, #8
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	605a      	str	r2, [r3, #4]
 8004be0:	609a      	str	r2, [r3, #8]
 8004be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004be4:	463b      	mov	r3, r7
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004bec:	4b1c      	ldr	r3, [pc, #112]	; (8004c60 <MX_TIM5_Init+0x90>)
 8004bee:	4a1d      	ldr	r2, [pc, #116]	; (8004c64 <MX_TIM5_Init+0x94>)
 8004bf0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8004bf2:	4b1b      	ldr	r3, [pc, #108]	; (8004c60 <MX_TIM5_Init+0x90>)
 8004bf4:	2253      	movs	r2, #83	; 0x53
 8004bf6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bf8:	4b19      	ldr	r3, [pc, #100]	; (8004c60 <MX_TIM5_Init+0x90>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000000-1;
 8004bfe:	4b18      	ldr	r3, [pc, #96]	; (8004c60 <MX_TIM5_Init+0x90>)
 8004c00:	4a19      	ldr	r2, [pc, #100]	; (8004c68 <MX_TIM5_Init+0x98>)
 8004c02:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c04:	4b16      	ldr	r3, [pc, #88]	; (8004c60 <MX_TIM5_Init+0x90>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c0a:	4b15      	ldr	r3, [pc, #84]	; (8004c60 <MX_TIM5_Init+0x90>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004c10:	4813      	ldr	r0, [pc, #76]	; (8004c60 <MX_TIM5_Init+0x90>)
 8004c12:	f003 fd75 	bl	8008700 <HAL_TIM_Base_Init>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8004c1c:	f7ff f950 	bl	8003ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004c26:	f107 0308 	add.w	r3, r7, #8
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	480c      	ldr	r0, [pc, #48]	; (8004c60 <MX_TIM5_Init+0x90>)
 8004c2e:	f004 fc75 	bl	800951c <HAL_TIM_ConfigClockSource>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8004c38:	f7ff f942 	bl	8003ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c40:	2300      	movs	r3, #0
 8004c42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004c44:	463b      	mov	r3, r7
 8004c46:	4619      	mov	r1, r3
 8004c48:	4805      	ldr	r0, [pc, #20]	; (8004c60 <MX_TIM5_Init+0x90>)
 8004c4a:	f005 fa9f 	bl	800a18c <HAL_TIMEx_MasterConfigSynchronization>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8004c54:	f7ff f934 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004c58:	bf00      	nop
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20000a20 	.word	0x20000a20
 8004c64:	40000c00 	.word	0x40000c00
 8004c68:	000f423f 	.word	0x000f423f

08004c6c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c72:	463b      	mov	r3, r7
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004c7a:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <MX_TIM6_Init+0x64>)
 8004c7c:	4a15      	ldr	r2, [pc, #84]	; (8004cd4 <MX_TIM6_Init+0x68>)
 8004c7e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 8004c80:	4b13      	ldr	r3, [pc, #76]	; (8004cd0 <MX_TIM6_Init+0x64>)
 8004c82:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8004c86:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c88:	4b11      	ldr	r3, [pc, #68]	; (8004cd0 <MX_TIM6_Init+0x64>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000-1;
 8004c8e:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <MX_TIM6_Init+0x64>)
 8004c90:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8004c94:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c96:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <MX_TIM6_Init+0x64>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004c9c:	480c      	ldr	r0, [pc, #48]	; (8004cd0 <MX_TIM6_Init+0x64>)
 8004c9e:	f003 fd2f 	bl	8008700 <HAL_TIM_Base_Init>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004ca8:	f7ff f90a 	bl	8003ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cac:	2300      	movs	r3, #0
 8004cae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004cb4:	463b      	mov	r3, r7
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4805      	ldr	r0, [pc, #20]	; (8004cd0 <MX_TIM6_Init+0x64>)
 8004cba:	f005 fa67 	bl	800a18c <HAL_TIMEx_MasterConfigSynchronization>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004cc4:	f7ff f8fc 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004cc8:	bf00      	nop
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000a68 	.word	0x20000a68
 8004cd4:	40001000 	.word	0x40001000

08004cd8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08e      	sub	sp, #56	; 0x38
 8004cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	605a      	str	r2, [r3, #4]
 8004ce8:	609a      	str	r2, [r3, #8]
 8004cea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004cec:	f107 0314 	add.w	r3, r7, #20
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	605a      	str	r2, [r3, #4]
 8004cf6:	609a      	str	r2, [r3, #8]
 8004cf8:	60da      	str	r2, [r3, #12]
 8004cfa:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004cfc:	1d3b      	adds	r3, r7, #4
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	605a      	str	r2, [r3, #4]
 8004d04:	609a      	str	r2, [r3, #8]
 8004d06:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8004d08:	4b36      	ldr	r3, [pc, #216]	; (8004de4 <MX_TIM9_Init+0x10c>)
 8004d0a:	4a37      	ldr	r2, [pc, #220]	; (8004de8 <MX_TIM9_Init+0x110>)
 8004d0c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 420-1;
 8004d0e:	4b35      	ldr	r3, [pc, #212]	; (8004de4 <MX_TIM9_Init+0x10c>)
 8004d10:	f240 12a3 	movw	r2, #419	; 0x1a3
 8004d14:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d16:	4b33      	ldr	r3, [pc, #204]	; (8004de4 <MX_TIM9_Init+0x10c>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 8004d1c:	4b31      	ldr	r3, [pc, #196]	; (8004de4 <MX_TIM9_Init+0x10c>)
 8004d1e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004d22:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d24:	4b2f      	ldr	r3, [pc, #188]	; (8004de4 <MX_TIM9_Init+0x10c>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d2a:	4b2e      	ldr	r3, [pc, #184]	; (8004de4 <MX_TIM9_Init+0x10c>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8004d30:	482c      	ldr	r0, [pc, #176]	; (8004de4 <MX_TIM9_Init+0x10c>)
 8004d32:	f003 fce5 	bl	8008700 <HAL_TIM_Base_Init>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <MX_TIM9_Init+0x68>
  {
    Error_Handler();
 8004d3c:	f7ff f8c0 	bl	8003ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8004d46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4825      	ldr	r0, [pc, #148]	; (8004de4 <MX_TIM9_Init+0x10c>)
 8004d4e:	f004 fbe5 	bl	800951c <HAL_TIM_ConfigClockSource>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <MX_TIM9_Init+0x84>
  {
    Error_Handler();
 8004d58:	f7ff f8b2 	bl	8003ec0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8004d5c:	4821      	ldr	r0, [pc, #132]	; (8004de4 <MX_TIM9_Init+0x10c>)
 8004d5e:	f003 ff19 	bl	8008b94 <HAL_TIM_IC_Init>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <MX_TIM9_Init+0x94>
  {
    Error_Handler();
 8004d68:	f7ff f8aa 	bl	8003ec0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004d70:	2350      	movs	r3, #80	; 0x50
 8004d72:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004d74:	2300      	movs	r3, #0
 8004d76:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8004d80:	f107 0314 	add.w	r3, r7, #20
 8004d84:	4619      	mov	r1, r3
 8004d86:	4817      	ldr	r0, [pc, #92]	; (8004de4 <MX_TIM9_Init+0x10c>)
 8004d88:	f004 fc8f 	bl	80096aa <HAL_TIM_SlaveConfigSynchro>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <MX_TIM9_Init+0xbe>
  {
    Error_Handler();
 8004d92:	f7ff f895 	bl	8003ec0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004d96:	2300      	movs	r3, #0
 8004d98:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004da2:	2300      	movs	r3, #0
 8004da4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004da6:	1d3b      	adds	r3, r7, #4
 8004da8:	2200      	movs	r2, #0
 8004daa:	4619      	mov	r1, r3
 8004dac:	480d      	ldr	r0, [pc, #52]	; (8004de4 <MX_TIM9_Init+0x10c>)
 8004dae:	f004 fa57 	bl	8009260 <HAL_TIM_IC_ConfigChannel>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <MX_TIM9_Init+0xe4>
  {
    Error_Handler();
 8004db8:	f7ff f882 	bl	8003ec0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004dc4:	1d3b      	adds	r3, r7, #4
 8004dc6:	2204      	movs	r2, #4
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4806      	ldr	r0, [pc, #24]	; (8004de4 <MX_TIM9_Init+0x10c>)
 8004dcc:	f004 fa48 	bl	8009260 <HAL_TIM_IC_ConfigChannel>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <MX_TIM9_Init+0x102>
  {
    Error_Handler();
 8004dd6:	f7ff f873 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8004dda:	bf00      	nop
 8004ddc:	3738      	adds	r7, #56	; 0x38
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000ab0 	.word	0x20000ab0
 8004de8:	40014000 	.word	0x40014000

08004dec <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08e      	sub	sp, #56	; 0x38
 8004df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004df2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	605a      	str	r2, [r3, #4]
 8004dfc:	609a      	str	r2, [r3, #8]
 8004dfe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004e00:	f107 0314 	add.w	r3, r7, #20
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	605a      	str	r2, [r3, #4]
 8004e0a:	609a      	str	r2, [r3, #8]
 8004e0c:	60da      	str	r2, [r3, #12]
 8004e0e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004e10:	1d3b      	adds	r3, r7, #4
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	605a      	str	r2, [r3, #4]
 8004e18:	609a      	str	r2, [r3, #8]
 8004e1a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004e1c:	4b35      	ldr	r3, [pc, #212]	; (8004ef4 <MX_TIM12_Init+0x108>)
 8004e1e:	4a36      	ldr	r2, [pc, #216]	; (8004ef8 <MX_TIM12_Init+0x10c>)
 8004e20:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 210-1;
 8004e22:	4b34      	ldr	r3, [pc, #208]	; (8004ef4 <MX_TIM12_Init+0x108>)
 8004e24:	22d1      	movs	r2, #209	; 0xd1
 8004e26:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e28:	4b32      	ldr	r3, [pc, #200]	; (8004ef4 <MX_TIM12_Init+0x108>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 8004e2e:	4b31      	ldr	r3, [pc, #196]	; (8004ef4 <MX_TIM12_Init+0x108>)
 8004e30:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004e34:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e36:	4b2f      	ldr	r3, [pc, #188]	; (8004ef4 <MX_TIM12_Init+0x108>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e3c:	4b2d      	ldr	r3, [pc, #180]	; (8004ef4 <MX_TIM12_Init+0x108>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004e42:	482c      	ldr	r0, [pc, #176]	; (8004ef4 <MX_TIM12_Init+0x108>)
 8004e44:	f003 fc5c 	bl	8008700 <HAL_TIM_Base_Init>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 8004e4e:	f7ff f837 	bl	8003ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004e58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4825      	ldr	r0, [pc, #148]	; (8004ef4 <MX_TIM12_Init+0x108>)
 8004e60:	f004 fb5c 	bl	800951c <HAL_TIM_ConfigClockSource>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8004e6a:	f7ff f829 	bl	8003ec0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8004e6e:	4821      	ldr	r0, [pc, #132]	; (8004ef4 <MX_TIM12_Init+0x108>)
 8004e70:	f003 fe90 	bl	8008b94 <HAL_TIM_IC_Init>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <MX_TIM12_Init+0x92>
  {
    Error_Handler();
 8004e7a:	f7ff f821 	bl	8003ec0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004e7e:	2304      	movs	r3, #4
 8004e80:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004e82:	2350      	movs	r3, #80	; 0x50
 8004e84:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8004e92:	f107 0314 	add.w	r3, r7, #20
 8004e96:	4619      	mov	r1, r3
 8004e98:	4816      	ldr	r0, [pc, #88]	; (8004ef4 <MX_TIM12_Init+0x108>)
 8004e9a:	f004 fc06 	bl	80096aa <HAL_TIM_SlaveConfigSynchro>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <MX_TIM12_Init+0xbc>
  {
    Error_Handler();
 8004ea4:	f7ff f80c 	bl	8003ec0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004eac:	2301      	movs	r3, #1
 8004eae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004eb8:	1d3b      	adds	r3, r7, #4
 8004eba:	2200      	movs	r2, #0
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	480d      	ldr	r0, [pc, #52]	; (8004ef4 <MX_TIM12_Init+0x108>)
 8004ec0:	f004 f9ce 	bl	8009260 <HAL_TIM_IC_ConfigChannel>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <MX_TIM12_Init+0xe2>
  {
    Error_Handler();
 8004eca:	f7fe fff9 	bl	8003ec0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8004ece:	2302      	movs	r3, #2
 8004ed0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004ed6:	1d3b      	adds	r3, r7, #4
 8004ed8:	2204      	movs	r2, #4
 8004eda:	4619      	mov	r1, r3
 8004edc:	4805      	ldr	r0, [pc, #20]	; (8004ef4 <MX_TIM12_Init+0x108>)
 8004ede:	f004 f9bf 	bl	8009260 <HAL_TIM_IC_ConfigChannel>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <MX_TIM12_Init+0x100>
  {
    Error_Handler();
 8004ee8:	f7fe ffea 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8004eec:	bf00      	nop
 8004eee:	3738      	adds	r7, #56	; 0x38
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20000af8 	.word	0x20000af8
 8004ef8:	40001800 	.word	0x40001800

08004efc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b094      	sub	sp, #80	; 0x50
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	605a      	str	r2, [r3, #4]
 8004f0e:	609a      	str	r2, [r3, #8]
 8004f10:	60da      	str	r2, [r3, #12]
 8004f12:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a99      	ldr	r2, [pc, #612]	; (8005180 <HAL_TIM_Base_MspInit+0x284>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d11e      	bne.n	8004f5c <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f22:	4b98      	ldr	r3, [pc, #608]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8004f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f26:	4a97      	ldr	r2, [pc, #604]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8004f28:	f043 0301 	orr.w	r3, r3, #1
 8004f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f2e:	4b95      	ldr	r3, [pc, #596]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8004f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2105      	movs	r1, #5
 8004f3e:	2018      	movs	r0, #24
 8004f40:	f001 f83a 	bl	8005fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004f44:	2018      	movs	r0, #24
 8004f46:	f001 f853 	bl	8005ff0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	210f      	movs	r1, #15
 8004f4e:	2019      	movs	r0, #25
 8004f50:	f001 f832 	bl	8005fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004f54:	2019      	movs	r0, #25
 8004f56:	f001 f84b 	bl	8005ff0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8004f5a:	e15f      	b.n	800521c <HAL_TIM_Base_MspInit+0x320>
  else if(tim_baseHandle->Instance==TIM2)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f64:	d134      	bne.n	8004fd0 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f66:	2300      	movs	r3, #0
 8004f68:	637b      	str	r3, [r7, #52]	; 0x34
 8004f6a:	4b86      	ldr	r3, [pc, #536]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	4a85      	ldr	r2, [pc, #532]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	6413      	str	r3, [r2, #64]	; 0x40
 8004f76:	4b83      	ldr	r3, [pc, #524]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f82:	2300      	movs	r3, #0
 8004f84:	633b      	str	r3, [r7, #48]	; 0x30
 8004f86:	4b7f      	ldr	r3, [pc, #508]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	4a7e      	ldr	r2, [pc, #504]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8004f8c:	f043 0301 	orr.w	r3, r3, #1
 8004f90:	6313      	str	r3, [r2, #48]	; 0x30
 8004f92:	4b7c      	ldr	r3, [pc, #496]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = pwm_input_2_Pin;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004faa:	2300      	movs	r3, #0
 8004fac:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(pwm_input_2_GPIO_Port, &GPIO_InitStruct);
 8004fb2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4873      	ldr	r0, [pc, #460]	; (8005188 <HAL_TIM_Base_MspInit+0x28c>)
 8004fba:	f001 f8b9 	bl	8006130 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	2106      	movs	r1, #6
 8004fc2:	201c      	movs	r0, #28
 8004fc4:	f000 fff8 	bl	8005fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004fc8:	201c      	movs	r0, #28
 8004fca:	f001 f811 	bl	8005ff0 <HAL_NVIC_EnableIRQ>
}
 8004fce:	e125      	b.n	800521c <HAL_TIM_Base_MspInit+0x320>
  else if(tim_baseHandle->Instance==TIM3)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a6d      	ldr	r2, [pc, #436]	; (800518c <HAL_TIM_Base_MspInit+0x290>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d134      	bne.n	8005044 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004fda:	2300      	movs	r3, #0
 8004fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fde:	4b69      	ldr	r3, [pc, #420]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	4a68      	ldr	r2, [pc, #416]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8004fe4:	f043 0302 	orr.w	r3, r3, #2
 8004fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8004fea:	4b66      	ldr	r3, [pc, #408]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ffa:	4b62      	ldr	r3, [pc, #392]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	4a61      	ldr	r2, [pc, #388]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	6313      	str	r3, [r2, #48]	; 0x30
 8005006:	4b5f      	ldr	r3, [pc, #380]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005010:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = pwm_input_3_Pin;
 8005012:	2340      	movs	r3, #64	; 0x40
 8005014:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005016:	2302      	movs	r3, #2
 8005018:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501a:	2300      	movs	r3, #0
 800501c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800501e:	2300      	movs	r3, #0
 8005020:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005022:	2302      	movs	r3, #2
 8005024:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(pwm_input_3_GPIO_Port, &GPIO_InitStruct);
 8005026:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800502a:	4619      	mov	r1, r3
 800502c:	4856      	ldr	r0, [pc, #344]	; (8005188 <HAL_TIM_Base_MspInit+0x28c>)
 800502e:	f001 f87f 	bl	8006130 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 7, 0);
 8005032:	2200      	movs	r2, #0
 8005034:	2107      	movs	r1, #7
 8005036:	201d      	movs	r0, #29
 8005038:	f000 ffbe 	bl	8005fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800503c:	201d      	movs	r0, #29
 800503e:	f000 ffd7 	bl	8005ff0 <HAL_NVIC_EnableIRQ>
}
 8005042:	e0eb      	b.n	800521c <HAL_TIM_Base_MspInit+0x320>
  else if(tim_baseHandle->Instance==TIM4)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a51      	ldr	r2, [pc, #324]	; (8005190 <HAL_TIM_Base_MspInit+0x294>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d135      	bne.n	80050ba <HAL_TIM_Base_MspInit+0x1be>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800504e:	2300      	movs	r3, #0
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
 8005052:	4b4c      	ldr	r3, [pc, #304]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	4a4b      	ldr	r2, [pc, #300]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8005058:	f043 0304 	orr.w	r3, r3, #4
 800505c:	6413      	str	r3, [r2, #64]	; 0x40
 800505e:	4b49      	ldr	r3, [pc, #292]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	f003 0304 	and.w	r3, r3, #4
 8005066:	627b      	str	r3, [r7, #36]	; 0x24
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800506a:	2300      	movs	r3, #0
 800506c:	623b      	str	r3, [r7, #32]
 800506e:	4b45      	ldr	r3, [pc, #276]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	4a44      	ldr	r2, [pc, #272]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8005074:	f043 0308 	orr.w	r3, r3, #8
 8005078:	6313      	str	r3, [r2, #48]	; 0x30
 800507a:	4b42      	ldr	r3, [pc, #264]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	623b      	str	r3, [r7, #32]
 8005084:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = pwm_input_4_Pin;
 8005086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800508a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800508c:	2302      	movs	r3, #2
 800508e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005090:	2300      	movs	r3, #0
 8005092:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005094:	2300      	movs	r3, #0
 8005096:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005098:	2302      	movs	r3, #2
 800509a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(pwm_input_4_GPIO_Port, &GPIO_InitStruct);
 800509c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80050a0:	4619      	mov	r1, r3
 80050a2:	483c      	ldr	r0, [pc, #240]	; (8005194 <HAL_TIM_Base_MspInit+0x298>)
 80050a4:	f001 f844 	bl	8006130 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 8, 0);
 80050a8:	2200      	movs	r2, #0
 80050aa:	2108      	movs	r1, #8
 80050ac:	201e      	movs	r0, #30
 80050ae:	f000 ff83 	bl	8005fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80050b2:	201e      	movs	r0, #30
 80050b4:	f000 ff9c 	bl	8005ff0 <HAL_NVIC_EnableIRQ>
}
 80050b8:	e0b0      	b.n	800521c <HAL_TIM_Base_MspInit+0x320>
  else if(tim_baseHandle->Instance==TIM5)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a36      	ldr	r2, [pc, #216]	; (8005198 <HAL_TIM_Base_MspInit+0x29c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10e      	bne.n	80050e2 <HAL_TIM_Base_MspInit+0x1e6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80050c4:	2300      	movs	r3, #0
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	4b2e      	ldr	r3, [pc, #184]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	4a2d      	ldr	r2, [pc, #180]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 80050ce:	f043 0308 	orr.w	r3, r3, #8
 80050d2:	6413      	str	r3, [r2, #64]	; 0x40
 80050d4:	4b2b      	ldr	r3, [pc, #172]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	69fb      	ldr	r3, [r7, #28]
}
 80050e0:	e09c      	b.n	800521c <HAL_TIM_Base_MspInit+0x320>
  else if(tim_baseHandle->Instance==TIM6)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a2d      	ldr	r2, [pc, #180]	; (800519c <HAL_TIM_Base_MspInit+0x2a0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d10e      	bne.n	800510a <HAL_TIM_Base_MspInit+0x20e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80050ec:	2300      	movs	r3, #0
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	4b24      	ldr	r3, [pc, #144]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 80050f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f4:	4a23      	ldr	r2, [pc, #140]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 80050f6:	f043 0310 	orr.w	r3, r3, #16
 80050fa:	6413      	str	r3, [r2, #64]	; 0x40
 80050fc:	4b21      	ldr	r3, [pc, #132]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 80050fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	69bb      	ldr	r3, [r7, #24]
}
 8005108:	e088      	b.n	800521c <HAL_TIM_Base_MspInit+0x320>
  else if(tim_baseHandle->Instance==TIM9)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a24      	ldr	r2, [pc, #144]	; (80051a0 <HAL_TIM_Base_MspInit+0x2a4>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d149      	bne.n	80051a8 <HAL_TIM_Base_MspInit+0x2ac>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8005114:	2300      	movs	r3, #0
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	4b1a      	ldr	r3, [pc, #104]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 800511a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511c:	4a19      	ldr	r2, [pc, #100]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 800511e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005122:	6453      	str	r3, [r2, #68]	; 0x44
 8005124:	4b17      	ldr	r3, [pc, #92]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8005126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005130:	2300      	movs	r3, #0
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	4b13      	ldr	r3, [pc, #76]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8005136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005138:	4a12      	ldr	r2, [pc, #72]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 800513a:	f043 0310 	orr.w	r3, r3, #16
 800513e:	6313      	str	r3, [r2, #48]	; 0x30
 8005140:	4b10      	ldr	r3, [pc, #64]	; (8005184 <HAL_TIM_Base_MspInit+0x288>)
 8005142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	613b      	str	r3, [r7, #16]
 800514a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = pwm_input_1_Pin;
 800514c:	2320      	movs	r3, #32
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005150:	2302      	movs	r3, #2
 8005152:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005154:	2300      	movs	r3, #0
 8005156:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005158:	2300      	movs	r3, #0
 800515a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800515c:	2303      	movs	r3, #3
 800515e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(pwm_input_1_GPIO_Port, &GPIO_InitStruct);
 8005160:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005164:	4619      	mov	r1, r3
 8005166:	480f      	ldr	r0, [pc, #60]	; (80051a4 <HAL_TIM_Base_MspInit+0x2a8>)
 8005168:	f000 ffe2 	bl	8006130 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800516c:	2200      	movs	r2, #0
 800516e:	2105      	movs	r1, #5
 8005170:	2018      	movs	r0, #24
 8005172:	f000 ff21 	bl	8005fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005176:	2018      	movs	r0, #24
 8005178:	f000 ff3a 	bl	8005ff0 <HAL_NVIC_EnableIRQ>
}
 800517c:	e04e      	b.n	800521c <HAL_TIM_Base_MspInit+0x320>
 800517e:	bf00      	nop
 8005180:	40010000 	.word	0x40010000
 8005184:	40023800 	.word	0x40023800
 8005188:	40020000 	.word	0x40020000
 800518c:	40000400 	.word	0x40000400
 8005190:	40000800 	.word	0x40000800
 8005194:	40020c00 	.word	0x40020c00
 8005198:	40000c00 	.word	0x40000c00
 800519c:	40001000 	.word	0x40001000
 80051a0:	40014000 	.word	0x40014000
 80051a4:	40021000 	.word	0x40021000
  else if(tim_baseHandle->Instance==TIM12)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a1d      	ldr	r2, [pc, #116]	; (8005224 <HAL_TIM_Base_MspInit+0x328>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d134      	bne.n	800521c <HAL_TIM_Base_MspInit+0x320>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	4b1c      	ldr	r3, [pc, #112]	; (8005228 <HAL_TIM_Base_MspInit+0x32c>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	4a1b      	ldr	r2, [pc, #108]	; (8005228 <HAL_TIM_Base_MspInit+0x32c>)
 80051bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051c0:	6413      	str	r3, [r2, #64]	; 0x40
 80051c2:	4b19      	ldr	r3, [pc, #100]	; (8005228 <HAL_TIM_Base_MspInit+0x32c>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051ce:	2300      	movs	r3, #0
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	4b15      	ldr	r3, [pc, #84]	; (8005228 <HAL_TIM_Base_MspInit+0x32c>)
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	4a14      	ldr	r2, [pc, #80]	; (8005228 <HAL_TIM_Base_MspInit+0x32c>)
 80051d8:	f043 0302 	orr.w	r3, r3, #2
 80051dc:	6313      	str	r3, [r2, #48]	; 0x30
 80051de:	4b12      	ldr	r3, [pc, #72]	; (8005228 <HAL_TIM_Base_MspInit+0x32c>)
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	60bb      	str	r3, [r7, #8]
 80051e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = pwm_input_5_Pin;
 80051ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f0:	2302      	movs	r3, #2
 80051f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f4:	2300      	movs	r3, #0
 80051f6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051f8:	2300      	movs	r3, #0
 80051fa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80051fc:	2309      	movs	r3, #9
 80051fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(pwm_input_5_GPIO_Port, &GPIO_InitStruct);
 8005200:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005204:	4619      	mov	r1, r3
 8005206:	4809      	ldr	r0, [pc, #36]	; (800522c <HAL_TIM_Base_MspInit+0x330>)
 8005208:	f000 ff92 	bl	8006130 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 9, 0);
 800520c:	2200      	movs	r2, #0
 800520e:	2109      	movs	r1, #9
 8005210:	202b      	movs	r0, #43	; 0x2b
 8005212:	f000 fed1 	bl	8005fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005216:	202b      	movs	r0, #43	; 0x2b
 8005218:	f000 feea 	bl	8005ff0 <HAL_NVIC_EnableIRQ>
}
 800521c:	bf00      	nop
 800521e:	3750      	adds	r7, #80	; 0x50
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40001800 	.word	0x40001800
 8005228:	40023800 	.word	0x40023800
 800522c:	40020400 	.word	0x40020400

08005230 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005238:	f107 030c 	add.w	r3, r7, #12
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	605a      	str	r2, [r3, #4]
 8005242:	609a      	str	r2, [r3, #8]
 8005244:	60da      	str	r2, [r3, #12]
 8005246:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a12      	ldr	r2, [pc, #72]	; (8005298 <HAL_TIM_MspPostInit+0x68>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d11e      	bne.n	8005290 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005252:	2300      	movs	r3, #0
 8005254:	60bb      	str	r3, [r7, #8]
 8005256:	4b11      	ldr	r3, [pc, #68]	; (800529c <HAL_TIM_MspPostInit+0x6c>)
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	4a10      	ldr	r2, [pc, #64]	; (800529c <HAL_TIM_MspPostInit+0x6c>)
 800525c:	f043 0310 	orr.w	r3, r3, #16
 8005260:	6313      	str	r3, [r2, #48]	; 0x30
 8005262:	4b0e      	ldr	r3, [pc, #56]	; (800529c <HAL_TIM_MspPostInit+0x6c>)
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	60bb      	str	r3, [r7, #8]
 800526c:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = pwm_output_1_Pin|pwm_output_2_Pin|pwm_output_3_Pin|pwm_output_4_Pin;
 800526e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8005272:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005274:	2302      	movs	r3, #2
 8005276:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800527c:	2300      	movs	r3, #0
 800527e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005280:	2301      	movs	r3, #1
 8005282:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005284:	f107 030c 	add.w	r3, r7, #12
 8005288:	4619      	mov	r1, r3
 800528a:	4805      	ldr	r0, [pc, #20]	; (80052a0 <HAL_TIM_MspPostInit+0x70>)
 800528c:	f000 ff50 	bl	8006130 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005290:	bf00      	nop
 8005292:	3720      	adds	r7, #32
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40010000 	.word	0x40010000
 800529c:	40023800 	.word	0x40023800
 80052a0:	40021000 	.word	0x40021000

080052a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80052a8:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <MX_USART1_UART_Init+0x4c>)
 80052aa:	4a12      	ldr	r2, [pc, #72]	; (80052f4 <MX_USART1_UART_Init+0x50>)
 80052ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80052ae:	4b10      	ldr	r3, [pc, #64]	; (80052f0 <MX_USART1_UART_Init+0x4c>)
 80052b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80052b6:	4b0e      	ldr	r3, [pc, #56]	; (80052f0 <MX_USART1_UART_Init+0x4c>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80052bc:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <MX_USART1_UART_Init+0x4c>)
 80052be:	2200      	movs	r2, #0
 80052c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80052c2:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <MX_USART1_UART_Init+0x4c>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80052c8:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <MX_USART1_UART_Init+0x4c>)
 80052ca:	220c      	movs	r2, #12
 80052cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052ce:	4b08      	ldr	r3, [pc, #32]	; (80052f0 <MX_USART1_UART_Init+0x4c>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80052d4:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <MX_USART1_UART_Init+0x4c>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80052da:	4805      	ldr	r0, [pc, #20]	; (80052f0 <MX_USART1_UART_Init+0x4c>)
 80052dc:	f005 f838 	bl	800a350 <HAL_UART_Init>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80052e6:	f7fe fdeb 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80052ea:	bf00      	nop
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000b40 	.word	0x20000b40
 80052f4:	40011000 	.word	0x40011000

080052f8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80052fc:	4b11      	ldr	r3, [pc, #68]	; (8005344 <MX_USART2_UART_Init+0x4c>)
 80052fe:	4a12      	ldr	r2, [pc, #72]	; (8005348 <MX_USART2_UART_Init+0x50>)
 8005300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005302:	4b10      	ldr	r3, [pc, #64]	; (8005344 <MX_USART2_UART_Init+0x4c>)
 8005304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800530a:	4b0e      	ldr	r3, [pc, #56]	; (8005344 <MX_USART2_UART_Init+0x4c>)
 800530c:	2200      	movs	r2, #0
 800530e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005310:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <MX_USART2_UART_Init+0x4c>)
 8005312:	2200      	movs	r2, #0
 8005314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005316:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <MX_USART2_UART_Init+0x4c>)
 8005318:	2200      	movs	r2, #0
 800531a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <MX_USART2_UART_Init+0x4c>)
 800531e:	220c      	movs	r2, #12
 8005320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005322:	4b08      	ldr	r3, [pc, #32]	; (8005344 <MX_USART2_UART_Init+0x4c>)
 8005324:	2200      	movs	r2, #0
 8005326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005328:	4b06      	ldr	r3, [pc, #24]	; (8005344 <MX_USART2_UART_Init+0x4c>)
 800532a:	2200      	movs	r2, #0
 800532c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800532e:	4805      	ldr	r0, [pc, #20]	; (8005344 <MX_USART2_UART_Init+0x4c>)
 8005330:	f005 f80e 	bl	800a350 <HAL_UART_Init>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800533a:	f7fe fdc1 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800533e:	bf00      	nop
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20000b84 	.word	0x20000b84
 8005348:	40004400 	.word	0x40004400

0800534c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005350:	4b11      	ldr	r3, [pc, #68]	; (8005398 <MX_USART3_UART_Init+0x4c>)
 8005352:	4a12      	ldr	r2, [pc, #72]	; (800539c <MX_USART3_UART_Init+0x50>)
 8005354:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005356:	4b10      	ldr	r3, [pc, #64]	; (8005398 <MX_USART3_UART_Init+0x4c>)
 8005358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800535c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800535e:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <MX_USART3_UART_Init+0x4c>)
 8005360:	2200      	movs	r2, #0
 8005362:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005364:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <MX_USART3_UART_Init+0x4c>)
 8005366:	2200      	movs	r2, #0
 8005368:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800536a:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <MX_USART3_UART_Init+0x4c>)
 800536c:	2200      	movs	r2, #0
 800536e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005370:	4b09      	ldr	r3, [pc, #36]	; (8005398 <MX_USART3_UART_Init+0x4c>)
 8005372:	220c      	movs	r2, #12
 8005374:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005376:	4b08      	ldr	r3, [pc, #32]	; (8005398 <MX_USART3_UART_Init+0x4c>)
 8005378:	2200      	movs	r2, #0
 800537a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800537c:	4b06      	ldr	r3, [pc, #24]	; (8005398 <MX_USART3_UART_Init+0x4c>)
 800537e:	2200      	movs	r2, #0
 8005380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005382:	4805      	ldr	r0, [pc, #20]	; (8005398 <MX_USART3_UART_Init+0x4c>)
 8005384:	f004 ffe4 	bl	800a350 <HAL_UART_Init>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800538e:	f7fe fd97 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005392:	bf00      	nop
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20000bc8 	.word	0x20000bc8
 800539c:	40004800 	.word	0x40004800

080053a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08e      	sub	sp, #56	; 0x38
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ac:	2200      	movs	r2, #0
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	605a      	str	r2, [r3, #4]
 80053b2:	609a      	str	r2, [r3, #8]
 80053b4:	60da      	str	r2, [r3, #12]
 80053b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a54      	ldr	r2, [pc, #336]	; (8005510 <HAL_UART_MspInit+0x170>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d12d      	bne.n	800541e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80053c2:	2300      	movs	r3, #0
 80053c4:	623b      	str	r3, [r7, #32]
 80053c6:	4b53      	ldr	r3, [pc, #332]	; (8005514 <HAL_UART_MspInit+0x174>)
 80053c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ca:	4a52      	ldr	r2, [pc, #328]	; (8005514 <HAL_UART_MspInit+0x174>)
 80053cc:	f043 0310 	orr.w	r3, r3, #16
 80053d0:	6453      	str	r3, [r2, #68]	; 0x44
 80053d2:	4b50      	ldr	r3, [pc, #320]	; (8005514 <HAL_UART_MspInit+0x174>)
 80053d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d6:	f003 0310 	and.w	r3, r3, #16
 80053da:	623b      	str	r3, [r7, #32]
 80053dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053de:	2300      	movs	r3, #0
 80053e0:	61fb      	str	r3, [r7, #28]
 80053e2:	4b4c      	ldr	r3, [pc, #304]	; (8005514 <HAL_UART_MspInit+0x174>)
 80053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e6:	4a4b      	ldr	r2, [pc, #300]	; (8005514 <HAL_UART_MspInit+0x174>)
 80053e8:	f043 0301 	orr.w	r3, r3, #1
 80053ec:	6313      	str	r3, [r2, #48]	; 0x30
 80053ee:	4b49      	ldr	r3, [pc, #292]	; (8005514 <HAL_UART_MspInit+0x174>)
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = jetson_uart_tx_Pin|jetson_uart_rx_Pin;
 80053fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005400:	2302      	movs	r3, #2
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005404:	2300      	movs	r3, #0
 8005406:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005408:	2303      	movs	r3, #3
 800540a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800540c:	2307      	movs	r3, #7
 800540e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005414:	4619      	mov	r1, r3
 8005416:	4840      	ldr	r0, [pc, #256]	; (8005518 <HAL_UART_MspInit+0x178>)
 8005418:	f000 fe8a 	bl	8006130 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800541c:	e073      	b.n	8005506 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART2)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a3e      	ldr	r2, [pc, #248]	; (800551c <HAL_UART_MspInit+0x17c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d134      	bne.n	8005492 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005428:	2300      	movs	r3, #0
 800542a:	61bb      	str	r3, [r7, #24]
 800542c:	4b39      	ldr	r3, [pc, #228]	; (8005514 <HAL_UART_MspInit+0x174>)
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	4a38      	ldr	r2, [pc, #224]	; (8005514 <HAL_UART_MspInit+0x174>)
 8005432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005436:	6413      	str	r3, [r2, #64]	; 0x40
 8005438:	4b36      	ldr	r3, [pc, #216]	; (8005514 <HAL_UART_MspInit+0x174>)
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005444:	2300      	movs	r3, #0
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	4b32      	ldr	r3, [pc, #200]	; (8005514 <HAL_UART_MspInit+0x174>)
 800544a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544c:	4a31      	ldr	r2, [pc, #196]	; (8005514 <HAL_UART_MspInit+0x174>)
 800544e:	f043 0301 	orr.w	r3, r3, #1
 8005452:	6313      	str	r3, [r2, #48]	; 0x30
 8005454:	4b2f      	ldr	r3, [pc, #188]	; (8005514 <HAL_UART_MspInit+0x174>)
 8005456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = gps_uart_tx_Pin|gps_uart_rx_Pin;
 8005460:	230c      	movs	r3, #12
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005464:	2302      	movs	r3, #2
 8005466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005468:	2300      	movs	r3, #0
 800546a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800546c:	2303      	movs	r3, #3
 800546e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005470:	2307      	movs	r3, #7
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005478:	4619      	mov	r1, r3
 800547a:	4827      	ldr	r0, [pc, #156]	; (8005518 <HAL_UART_MspInit+0x178>)
 800547c:	f000 fe58 	bl	8006130 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 8005480:	2200      	movs	r2, #0
 8005482:	210a      	movs	r1, #10
 8005484:	2026      	movs	r0, #38	; 0x26
 8005486:	f000 fd97 	bl	8005fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800548a:	2026      	movs	r0, #38	; 0x26
 800548c:	f000 fdb0 	bl	8005ff0 <HAL_NVIC_EnableIRQ>
}
 8005490:	e039      	b.n	8005506 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART3)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a22      	ldr	r2, [pc, #136]	; (8005520 <HAL_UART_MspInit+0x180>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d134      	bne.n	8005506 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART3_CLK_ENABLE();
 800549c:	2300      	movs	r3, #0
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	4b1c      	ldr	r3, [pc, #112]	; (8005514 <HAL_UART_MspInit+0x174>)
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a4:	4a1b      	ldr	r2, [pc, #108]	; (8005514 <HAL_UART_MspInit+0x174>)
 80054a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054aa:	6413      	str	r3, [r2, #64]	; 0x40
 80054ac:	4b19      	ldr	r3, [pc, #100]	; (8005514 <HAL_UART_MspInit+0x174>)
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054b4:	613b      	str	r3, [r7, #16]
 80054b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054b8:	2300      	movs	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	4b15      	ldr	r3, [pc, #84]	; (8005514 <HAL_UART_MspInit+0x174>)
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	4a14      	ldr	r2, [pc, #80]	; (8005514 <HAL_UART_MspInit+0x174>)
 80054c2:	f043 0302 	orr.w	r3, r3, #2
 80054c6:	6313      	str	r3, [r2, #48]	; 0x30
 80054c8:	4b12      	ldr	r3, [pc, #72]	; (8005514 <HAL_UART_MspInit+0x174>)
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = debug_ttl_tx_Pin|debug_ttl_rx_Pin;
 80054d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054da:	2302      	movs	r3, #2
 80054dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054e2:	2303      	movs	r3, #3
 80054e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80054e6:	2307      	movs	r3, #7
 80054e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054ee:	4619      	mov	r1, r3
 80054f0:	480c      	ldr	r0, [pc, #48]	; (8005524 <HAL_UART_MspInit+0x184>)
 80054f2:	f000 fe1d 	bl	8006130 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 11, 0);
 80054f6:	2200      	movs	r2, #0
 80054f8:	210b      	movs	r1, #11
 80054fa:	2027      	movs	r0, #39	; 0x27
 80054fc:	f000 fd5c 	bl	8005fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005500:	2027      	movs	r0, #39	; 0x27
 8005502:	f000 fd75 	bl	8005ff0 <HAL_NVIC_EnableIRQ>
}
 8005506:	bf00      	nop
 8005508:	3738      	adds	r7, #56	; 0x38
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40011000 	.word	0x40011000
 8005514:	40023800 	.word	0x40023800
 8005518:	40020000 	.word	0x40020000
 800551c:	40004400 	.word	0x40004400
 8005520:	40004800 	.word	0x40004800
 8005524:	40020400 	.word	0x40020400

08005528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005560 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800552c:	480d      	ldr	r0, [pc, #52]	; (8005564 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800552e:	490e      	ldr	r1, [pc, #56]	; (8005568 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005530:	4a0e      	ldr	r2, [pc, #56]	; (800556c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005534:	e002      	b.n	800553c <LoopCopyDataInit>

08005536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800553a:	3304      	adds	r3, #4

0800553c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800553c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800553e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005540:	d3f9      	bcc.n	8005536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005542:	4a0b      	ldr	r2, [pc, #44]	; (8005570 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005544:	4c0b      	ldr	r4, [pc, #44]	; (8005574 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005548:	e001      	b.n	800554e <LoopFillZerobss>

0800554a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800554a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800554c:	3204      	adds	r2, #4

0800554e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800554e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005550:	d3fb      	bcc.n	800554a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005552:	f7ff f88d 	bl	8004670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005556:	f008 f92f 	bl	800d7b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800555a:	f7fe fbf1 	bl	8003d40 <main>
  bx  lr    
 800555e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005560:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005568:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800556c:	08010ea8 	.word	0x08010ea8
  ldr r2, =_sbss
 8005570:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8005574:	20004ab0 	.word	0x20004ab0

08005578 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005578:	e7fe      	b.n	8005578 <ADC_IRQHandler>
	...

0800557c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005580:	4b0e      	ldr	r3, [pc, #56]	; (80055bc <HAL_Init+0x40>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a0d      	ldr	r2, [pc, #52]	; (80055bc <HAL_Init+0x40>)
 8005586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800558a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800558c:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <HAL_Init+0x40>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <HAL_Init+0x40>)
 8005592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005596:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005598:	4b08      	ldr	r3, [pc, #32]	; (80055bc <HAL_Init+0x40>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a07      	ldr	r2, [pc, #28]	; (80055bc <HAL_Init+0x40>)
 800559e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055a4:	2003      	movs	r0, #3
 80055a6:	f000 fcfc 	bl	8005fa2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80055aa:	200f      	movs	r0, #15
 80055ac:	f7fe feb0 	bl	8004310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80055b0:	f7fe fe82 	bl	80042b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40023c00 	.word	0x40023c00

080055c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055c4:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <HAL_IncTick+0x20>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <HAL_IncTick+0x24>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4413      	add	r3, r2
 80055d0:	4a04      	ldr	r2, [pc, #16]	; (80055e4 <HAL_IncTick+0x24>)
 80055d2:	6013      	str	r3, [r2, #0]
}
 80055d4:	bf00      	nop
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	20000014 	.word	0x20000014
 80055e4:	20000c0c 	.word	0x20000c0c

080055e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  return uwTick;
 80055ec:	4b03      	ldr	r3, [pc, #12]	; (80055fc <HAL_GetTick+0x14>)
 80055ee:	681b      	ldr	r3, [r3, #0]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	20000c0c 	.word	0x20000c0c

08005600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005608:	f7ff ffee 	bl	80055e8 <HAL_GetTick>
 800560c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005618:	d005      	beq.n	8005626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800561a:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <HAL_Delay+0x44>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4413      	add	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005626:	bf00      	nop
 8005628:	f7ff ffde 	bl	80055e8 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	429a      	cmp	r2, r3
 8005636:	d8f7      	bhi.n	8005628 <HAL_Delay+0x28>
  {
  }
}
 8005638:	bf00      	nop
 800563a:	bf00      	nop
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	20000014 	.word	0x20000014

08005648 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e033      	b.n	80056c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	2b00      	cmp	r3, #0
 8005664:	d109      	bne.n	800567a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fc fe5a 	bl	8002320 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	f003 0310 	and.w	r3, r3, #16
 8005682:	2b00      	cmp	r3, #0
 8005684:	d118      	bne.n	80056b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800568e:	f023 0302 	bic.w	r3, r3, #2
 8005692:	f043 0202 	orr.w	r2, r3, #2
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fad8 	bl	8005c50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	f023 0303 	bic.w	r3, r3, #3
 80056ae:	f043 0201 	orr.w	r2, r3, #1
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40
 80056b6:	e001      	b.n	80056bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
	...

080056d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_ADC_Start+0x1a>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e0b2      	b.n	8005850 <HAL_ADC_Start+0x180>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d018      	beq.n	8005732 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689a      	ldr	r2, [r3, #8]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005710:	4b52      	ldr	r3, [pc, #328]	; (800585c <HAL_ADC_Start+0x18c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a52      	ldr	r2, [pc, #328]	; (8005860 <HAL_ADC_Start+0x190>)
 8005716:	fba2 2303 	umull	r2, r3, r2, r3
 800571a:	0c9a      	lsrs	r2, r3, #18
 800571c:	4613      	mov	r3, r2
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	4413      	add	r3, r2
 8005722:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005724:	e002      	b.n	800572c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	3b01      	subs	r3, #1
 800572a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1f9      	bne.n	8005726 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b01      	cmp	r3, #1
 800573e:	d17a      	bne.n	8005836 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005748:	f023 0301 	bic.w	r3, r3, #1
 800574c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800575e:	2b00      	cmp	r3, #0
 8005760:	d007      	beq.n	8005772 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800576a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800577a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800577e:	d106      	bne.n	800578e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005784:	f023 0206 	bic.w	r2, r3, #6
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	645a      	str	r2, [r3, #68]	; 0x44
 800578c:	e002      	b.n	8005794 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800579c:	4b31      	ldr	r3, [pc, #196]	; (8005864 <HAL_ADC_Start+0x194>)
 800579e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80057a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f003 031f 	and.w	r3, r3, #31
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d12a      	bne.n	800580c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a2b      	ldr	r2, [pc, #172]	; (8005868 <HAL_ADC_Start+0x198>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d015      	beq.n	80057ec <HAL_ADC_Start+0x11c>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a29      	ldr	r2, [pc, #164]	; (800586c <HAL_ADC_Start+0x19c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d105      	bne.n	80057d6 <HAL_ADC_Start+0x106>
 80057ca:	4b26      	ldr	r3, [pc, #152]	; (8005864 <HAL_ADC_Start+0x194>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f003 031f 	and.w	r3, r3, #31
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a25      	ldr	r2, [pc, #148]	; (8005870 <HAL_ADC_Start+0x1a0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d136      	bne.n	800584e <HAL_ADC_Start+0x17e>
 80057e0:	4b20      	ldr	r3, [pc, #128]	; (8005864 <HAL_ADC_Start+0x194>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d130      	bne.n	800584e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d129      	bne.n	800584e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005808:	609a      	str	r2, [r3, #8]
 800580a:	e020      	b.n	800584e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a15      	ldr	r2, [pc, #84]	; (8005868 <HAL_ADC_Start+0x198>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d11b      	bne.n	800584e <HAL_ADC_Start+0x17e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d114      	bne.n	800584e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005832:	609a      	str	r2, [r3, #8]
 8005834:	e00b      	b.n	800584e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	f043 0210 	orr.w	r2, r3, #16
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005846:	f043 0201 	orr.w	r2, r3, #1
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	2000000c 	.word	0x2000000c
 8005860:	431bde83 	.word	0x431bde83
 8005864:	40012300 	.word	0x40012300
 8005868:	40012000 	.word	0x40012000
 800586c:	40012100 	.word	0x40012100
 8005870:	40012200 	.word	0x40012200

08005874 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_ADC_Stop+0x16>
 8005886:	2302      	movs	r3, #2
 8005888:	e021      	b.n	80058ce <HAL_ADC_Stop+0x5a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0201 	bic.w	r2, r2, #1
 80058a0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d109      	bne.n	80058c4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80058b8:	f023 0301 	bic.w	r3, r3, #1
 80058bc:	f043 0201 	orr.w	r2, r3, #1
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f6:	d113      	bne.n	8005920 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005906:	d10b      	bne.n	8005920 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590c:	f043 0220 	orr.w	r2, r3, #32
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e063      	b.n	80059e8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005920:	f7ff fe62 	bl	80055e8 <HAL_GetTick>
 8005924:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005926:	e021      	b.n	800596c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592e:	d01d      	beq.n	800596c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d007      	beq.n	8005946 <HAL_ADC_PollForConversion+0x6c>
 8005936:	f7ff fe57 	bl	80055e8 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	429a      	cmp	r2, r3
 8005944:	d212      	bcs.n	800596c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b02      	cmp	r3, #2
 8005952:	d00b      	beq.n	800596c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005958:	f043 0204 	orr.w	r2, r3, #4
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e03d      	b.n	80059e8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b02      	cmp	r3, #2
 8005978:	d1d6      	bne.n	8005928 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f06f 0212 	mvn.w	r2, #18
 8005982:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005988:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d123      	bne.n	80059e6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d11f      	bne.n	80059e6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d006      	beq.n	80059c2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d111      	bne.n	80059e6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d105      	bne.n	80059e6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	f043 0201 	orr.w	r2, r3, #1
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
	...

08005a0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_ADC_ConfigChannel+0x1c>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e105      	b.n	8005c34 <HAL_ADC_ConfigChannel+0x228>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b09      	cmp	r3, #9
 8005a36:	d925      	bls.n	8005a84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68d9      	ldr	r1, [r3, #12]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	461a      	mov	r2, r3
 8005a46:	4613      	mov	r3, r2
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	4413      	add	r3, r2
 8005a4c:	3b1e      	subs	r3, #30
 8005a4e:	2207      	movs	r2, #7
 8005a50:	fa02 f303 	lsl.w	r3, r2, r3
 8005a54:	43da      	mvns	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	400a      	ands	r2, r1
 8005a5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68d9      	ldr	r1, [r3, #12]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	4618      	mov	r0, r3
 8005a70:	4603      	mov	r3, r0
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	4403      	add	r3, r0
 8005a76:	3b1e      	subs	r3, #30
 8005a78:	409a      	lsls	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	60da      	str	r2, [r3, #12]
 8005a82:	e022      	b.n	8005aca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6919      	ldr	r1, [r3, #16]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	461a      	mov	r2, r3
 8005a92:	4613      	mov	r3, r2
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	4413      	add	r3, r2
 8005a98:	2207      	movs	r2, #7
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	43da      	mvns	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	400a      	ands	r2, r1
 8005aa6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6919      	ldr	r1, [r3, #16]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	4618      	mov	r0, r3
 8005aba:	4603      	mov	r3, r0
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	4403      	add	r3, r0
 8005ac0:	409a      	lsls	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b06      	cmp	r3, #6
 8005ad0:	d824      	bhi.n	8005b1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	4613      	mov	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	3b05      	subs	r3, #5
 8005ae4:	221f      	movs	r2, #31
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	43da      	mvns	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	400a      	ands	r2, r1
 8005af2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	4618      	mov	r0, r3
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3b05      	subs	r3, #5
 8005b0e:	fa00 f203 	lsl.w	r2, r0, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	635a      	str	r2, [r3, #52]	; 0x34
 8005b1a:	e04c      	b.n	8005bb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b0c      	cmp	r3, #12
 8005b22:	d824      	bhi.n	8005b6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	3b23      	subs	r3, #35	; 0x23
 8005b36:	221f      	movs	r2, #31
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	43da      	mvns	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	400a      	ands	r2, r1
 8005b44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	4618      	mov	r0, r3
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	3b23      	subs	r3, #35	; 0x23
 8005b60:	fa00 f203 	lsl.w	r2, r0, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	631a      	str	r2, [r3, #48]	; 0x30
 8005b6c:	e023      	b.n	8005bb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	3b41      	subs	r3, #65	; 0x41
 8005b80:	221f      	movs	r2, #31
 8005b82:	fa02 f303 	lsl.w	r3, r2, r3
 8005b86:	43da      	mvns	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	400a      	ands	r2, r1
 8005b8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3b41      	subs	r3, #65	; 0x41
 8005baa:	fa00 f203 	lsl.w	r2, r0, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bb6:	4b22      	ldr	r3, [pc, #136]	; (8005c40 <HAL_ADC_ConfigChannel+0x234>)
 8005bb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a21      	ldr	r2, [pc, #132]	; (8005c44 <HAL_ADC_ConfigChannel+0x238>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d109      	bne.n	8005bd8 <HAL_ADC_ConfigChannel+0x1cc>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b12      	cmp	r3, #18
 8005bca:	d105      	bne.n	8005bd8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a19      	ldr	r2, [pc, #100]	; (8005c44 <HAL_ADC_ConfigChannel+0x238>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d123      	bne.n	8005c2a <HAL_ADC_ConfigChannel+0x21e>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2b10      	cmp	r3, #16
 8005be8:	d003      	beq.n	8005bf2 <HAL_ADC_ConfigChannel+0x1e6>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b11      	cmp	r3, #17
 8005bf0:	d11b      	bne.n	8005c2a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	d111      	bne.n	8005c2a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005c06:	4b10      	ldr	r3, [pc, #64]	; (8005c48 <HAL_ADC_ConfigChannel+0x23c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a10      	ldr	r2, [pc, #64]	; (8005c4c <HAL_ADC_ConfigChannel+0x240>)
 8005c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c10:	0c9a      	lsrs	r2, r3, #18
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005c1c:	e002      	b.n	8005c24 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1f9      	bne.n	8005c1e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	40012300 	.word	0x40012300
 8005c44:	40012000 	.word	0x40012000
 8005c48:	2000000c 	.word	0x2000000c
 8005c4c:	431bde83 	.word	0x431bde83

08005c50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c58:	4b79      	ldr	r3, [pc, #484]	; (8005e40 <ADC_Init+0x1f0>)
 8005c5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	431a      	orrs	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6859      	ldr	r1, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	021a      	lsls	r2, r3, #8
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005ca8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6859      	ldr	r1, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6899      	ldr	r1, [r3, #8]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce2:	4a58      	ldr	r2, [pc, #352]	; (8005e44 <ADC_Init+0x1f4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d022      	beq.n	8005d2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689a      	ldr	r2, [r3, #8]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cf6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6899      	ldr	r1, [r3, #8]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6899      	ldr	r1, [r3, #8]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	609a      	str	r2, [r3, #8]
 8005d2c:	e00f      	b.n	8005d4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0202 	bic.w	r2, r2, #2
 8005d5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6899      	ldr	r1, [r3, #8]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	7e1b      	ldrb	r3, [r3, #24]
 8005d68:	005a      	lsls	r2, r3, #1
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d01b      	beq.n	8005db4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005d9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6859      	ldr	r1, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	3b01      	subs	r3, #1
 8005da8:	035a      	lsls	r2, r3, #13
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	605a      	str	r2, [r3, #4]
 8005db2:	e007      	b.n	8005dc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	051a      	lsls	r2, r3, #20
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005df8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6899      	ldr	r1, [r3, #8]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e06:	025a      	lsls	r2, r3, #9
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6899      	ldr	r1, [r3, #8]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	029a      	lsls	r2, r3, #10
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	609a      	str	r2, [r3, #8]
}
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	40012300 	.word	0x40012300
 8005e44:	0f000001 	.word	0x0f000001

08005e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e58:	4b0c      	ldr	r3, [pc, #48]	; (8005e8c <__NVIC_SetPriorityGrouping+0x44>)
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e64:	4013      	ands	r3, r2
 8005e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e7a:	4a04      	ldr	r2, [pc, #16]	; (8005e8c <__NVIC_SetPriorityGrouping+0x44>)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	60d3      	str	r3, [r2, #12]
}
 8005e80:	bf00      	nop
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	e000ed00 	.word	0xe000ed00

08005e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e90:	b480      	push	{r7}
 8005e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e94:	4b04      	ldr	r3, [pc, #16]	; (8005ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	0a1b      	lsrs	r3, r3, #8
 8005e9a:	f003 0307 	and.w	r3, r3, #7
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	e000ed00 	.word	0xe000ed00

08005eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	db0b      	blt.n	8005ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	f003 021f 	and.w	r2, r3, #31
 8005ec4:	4907      	ldr	r1, [pc, #28]	; (8005ee4 <__NVIC_EnableIRQ+0x38>)
 8005ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eca:	095b      	lsrs	r3, r3, #5
 8005ecc:	2001      	movs	r0, #1
 8005ece:	fa00 f202 	lsl.w	r2, r0, r2
 8005ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	e000e100 	.word	0xe000e100

08005ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	6039      	str	r1, [r7, #0]
 8005ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	db0a      	blt.n	8005f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	490c      	ldr	r1, [pc, #48]	; (8005f34 <__NVIC_SetPriority+0x4c>)
 8005f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f06:	0112      	lsls	r2, r2, #4
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f10:	e00a      	b.n	8005f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	4908      	ldr	r1, [pc, #32]	; (8005f38 <__NVIC_SetPriority+0x50>)
 8005f18:	79fb      	ldrb	r3, [r7, #7]
 8005f1a:	f003 030f 	and.w	r3, r3, #15
 8005f1e:	3b04      	subs	r3, #4
 8005f20:	0112      	lsls	r2, r2, #4
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	440b      	add	r3, r1
 8005f26:	761a      	strb	r2, [r3, #24]
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	e000e100 	.word	0xe000e100
 8005f38:	e000ed00 	.word	0xe000ed00

08005f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b089      	sub	sp, #36	; 0x24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f003 0307 	and.w	r3, r3, #7
 8005f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	f1c3 0307 	rsb	r3, r3, #7
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	bf28      	it	cs
 8005f5a:	2304      	movcs	r3, #4
 8005f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	3304      	adds	r3, #4
 8005f62:	2b06      	cmp	r3, #6
 8005f64:	d902      	bls.n	8005f6c <NVIC_EncodePriority+0x30>
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	3b03      	subs	r3, #3
 8005f6a:	e000      	b.n	8005f6e <NVIC_EncodePriority+0x32>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f70:	f04f 32ff 	mov.w	r2, #4294967295
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7a:	43da      	mvns	r2, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	401a      	ands	r2, r3
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f84:	f04f 31ff 	mov.w	r1, #4294967295
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8e:	43d9      	mvns	r1, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f94:	4313      	orrs	r3, r2
         );
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3724      	adds	r7, #36	; 0x24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b082      	sub	sp, #8
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff ff4c 	bl	8005e48 <__NVIC_SetPriorityGrouping>
}
 8005fb0:	bf00      	nop
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
 8005fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005fca:	f7ff ff61 	bl	8005e90 <__NVIC_GetPriorityGrouping>
 8005fce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	6978      	ldr	r0, [r7, #20]
 8005fd6:	f7ff ffb1 	bl	8005f3c <NVIC_EncodePriority>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fe0:	4611      	mov	r1, r2
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7ff ff80 	bl	8005ee8 <__NVIC_SetPriority>
}
 8005fe8:	bf00      	nop
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff ff54 	bl	8005eac <__NVIC_EnableIRQ>
}
 8006004:	bf00      	nop
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006018:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800601a:	f7ff fae5 	bl	80055e8 <HAL_GetTick>
 800601e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b02      	cmp	r3, #2
 800602a:	d008      	beq.n	800603e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2280      	movs	r2, #128	; 0x80
 8006030:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e052      	b.n	80060e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0216 	bic.w	r2, r2, #22
 800604c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	695a      	ldr	r2, [r3, #20]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800605c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	d103      	bne.n	800606e <HAL_DMA_Abort+0x62>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800606a:	2b00      	cmp	r3, #0
 800606c:	d007      	beq.n	800607e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0208 	bic.w	r2, r2, #8
 800607c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0201 	bic.w	r2, r2, #1
 800608c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800608e:	e013      	b.n	80060b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006090:	f7ff faaa 	bl	80055e8 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b05      	cmp	r3, #5
 800609c:	d90c      	bls.n	80060b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2203      	movs	r2, #3
 80060a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e015      	b.n	80060e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e4      	bne.n	8006090 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ca:	223f      	movs	r2, #63	; 0x3f
 80060cc:	409a      	lsls	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d004      	beq.n	800610a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2280      	movs	r2, #128	; 0x80
 8006104:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e00c      	b.n	8006124 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2205      	movs	r2, #5
 800610e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0201 	bic.w	r2, r2, #1
 8006120:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006130:	b480      	push	{r7}
 8006132:	b089      	sub	sp, #36	; 0x24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800613e:	2300      	movs	r3, #0
 8006140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006142:	2300      	movs	r3, #0
 8006144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006146:	2300      	movs	r3, #0
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	e16b      	b.n	8006424 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800614c:	2201      	movs	r2, #1
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4013      	ands	r3, r2
 800615e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	429a      	cmp	r2, r3
 8006166:	f040 815a 	bne.w	800641e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	2b01      	cmp	r3, #1
 8006174:	d005      	beq.n	8006182 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800617e:	2b02      	cmp	r3, #2
 8006180:	d130      	bne.n	80061e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	2203      	movs	r2, #3
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	43db      	mvns	r3, r3
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	4013      	ands	r3, r2
 8006198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68da      	ldr	r2, [r3, #12]
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	fa02 f303 	lsl.w	r3, r2, r3
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061b8:	2201      	movs	r2, #1
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	fa02 f303 	lsl.w	r3, r2, r3
 80061c0:	43db      	mvns	r3, r3
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	4013      	ands	r3, r2
 80061c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	091b      	lsrs	r3, r3, #4
 80061ce:	f003 0201 	and.w	r2, r3, #1
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	fa02 f303 	lsl.w	r3, r2, r3
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	4313      	orrs	r3, r2
 80061dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f003 0303 	and.w	r3, r3, #3
 80061ec:	2b03      	cmp	r3, #3
 80061ee:	d017      	beq.n	8006220 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	2203      	movs	r2, #3
 80061fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006200:	43db      	mvns	r3, r3
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	4013      	ands	r3, r2
 8006206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	4313      	orrs	r3, r2
 8006218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f003 0303 	and.w	r3, r3, #3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d123      	bne.n	8006274 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	08da      	lsrs	r2, r3, #3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	3208      	adds	r2, #8
 8006234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006238:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	220f      	movs	r2, #15
 8006244:	fa02 f303 	lsl.w	r3, r2, r3
 8006248:	43db      	mvns	r3, r3
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	4013      	ands	r3, r2
 800624e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	691a      	ldr	r2, [r3, #16]
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	fa02 f303 	lsl.w	r3, r2, r3
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	4313      	orrs	r3, r2
 8006264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	08da      	lsrs	r2, r3, #3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	3208      	adds	r2, #8
 800626e:	69b9      	ldr	r1, [r7, #24]
 8006270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	2203      	movs	r2, #3
 8006280:	fa02 f303 	lsl.w	r3, r2, r3
 8006284:	43db      	mvns	r3, r3
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	4013      	ands	r3, r2
 800628a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f003 0203 	and.w	r2, r3, #3
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	fa02 f303 	lsl.w	r3, r2, r3
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	4313      	orrs	r3, r2
 80062a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 80b4 	beq.w	800641e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062b6:	2300      	movs	r3, #0
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	4b60      	ldr	r3, [pc, #384]	; (800643c <HAL_GPIO_Init+0x30c>)
 80062bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062be:	4a5f      	ldr	r2, [pc, #380]	; (800643c <HAL_GPIO_Init+0x30c>)
 80062c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062c4:	6453      	str	r3, [r2, #68]	; 0x44
 80062c6:	4b5d      	ldr	r3, [pc, #372]	; (800643c <HAL_GPIO_Init+0x30c>)
 80062c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062d2:	4a5b      	ldr	r2, [pc, #364]	; (8006440 <HAL_GPIO_Init+0x310>)
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	089b      	lsrs	r3, r3, #2
 80062d8:	3302      	adds	r3, #2
 80062da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	220f      	movs	r2, #15
 80062ea:	fa02 f303 	lsl.w	r3, r2, r3
 80062ee:	43db      	mvns	r3, r3
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	4013      	ands	r3, r2
 80062f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a52      	ldr	r2, [pc, #328]	; (8006444 <HAL_GPIO_Init+0x314>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d02b      	beq.n	8006356 <HAL_GPIO_Init+0x226>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a51      	ldr	r2, [pc, #324]	; (8006448 <HAL_GPIO_Init+0x318>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d025      	beq.n	8006352 <HAL_GPIO_Init+0x222>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a50      	ldr	r2, [pc, #320]	; (800644c <HAL_GPIO_Init+0x31c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d01f      	beq.n	800634e <HAL_GPIO_Init+0x21e>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a4f      	ldr	r2, [pc, #316]	; (8006450 <HAL_GPIO_Init+0x320>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d019      	beq.n	800634a <HAL_GPIO_Init+0x21a>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a4e      	ldr	r2, [pc, #312]	; (8006454 <HAL_GPIO_Init+0x324>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d013      	beq.n	8006346 <HAL_GPIO_Init+0x216>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a4d      	ldr	r2, [pc, #308]	; (8006458 <HAL_GPIO_Init+0x328>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d00d      	beq.n	8006342 <HAL_GPIO_Init+0x212>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a4c      	ldr	r2, [pc, #304]	; (800645c <HAL_GPIO_Init+0x32c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d007      	beq.n	800633e <HAL_GPIO_Init+0x20e>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a4b      	ldr	r2, [pc, #300]	; (8006460 <HAL_GPIO_Init+0x330>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d101      	bne.n	800633a <HAL_GPIO_Init+0x20a>
 8006336:	2307      	movs	r3, #7
 8006338:	e00e      	b.n	8006358 <HAL_GPIO_Init+0x228>
 800633a:	2308      	movs	r3, #8
 800633c:	e00c      	b.n	8006358 <HAL_GPIO_Init+0x228>
 800633e:	2306      	movs	r3, #6
 8006340:	e00a      	b.n	8006358 <HAL_GPIO_Init+0x228>
 8006342:	2305      	movs	r3, #5
 8006344:	e008      	b.n	8006358 <HAL_GPIO_Init+0x228>
 8006346:	2304      	movs	r3, #4
 8006348:	e006      	b.n	8006358 <HAL_GPIO_Init+0x228>
 800634a:	2303      	movs	r3, #3
 800634c:	e004      	b.n	8006358 <HAL_GPIO_Init+0x228>
 800634e:	2302      	movs	r3, #2
 8006350:	e002      	b.n	8006358 <HAL_GPIO_Init+0x228>
 8006352:	2301      	movs	r3, #1
 8006354:	e000      	b.n	8006358 <HAL_GPIO_Init+0x228>
 8006356:	2300      	movs	r3, #0
 8006358:	69fa      	ldr	r2, [r7, #28]
 800635a:	f002 0203 	and.w	r2, r2, #3
 800635e:	0092      	lsls	r2, r2, #2
 8006360:	4093      	lsls	r3, r2
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	4313      	orrs	r3, r2
 8006366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006368:	4935      	ldr	r1, [pc, #212]	; (8006440 <HAL_GPIO_Init+0x310>)
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	089b      	lsrs	r3, r3, #2
 800636e:	3302      	adds	r3, #2
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006376:	4b3b      	ldr	r3, [pc, #236]	; (8006464 <HAL_GPIO_Init+0x334>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	43db      	mvns	r3, r3
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	4013      	ands	r3, r2
 8006384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800639a:	4a32      	ldr	r2, [pc, #200]	; (8006464 <HAL_GPIO_Init+0x334>)
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80063a0:	4b30      	ldr	r3, [pc, #192]	; (8006464 <HAL_GPIO_Init+0x334>)
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	43db      	mvns	r3, r3
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	4013      	ands	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063c4:	4a27      	ldr	r2, [pc, #156]	; (8006464 <HAL_GPIO_Init+0x334>)
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80063ca:	4b26      	ldr	r3, [pc, #152]	; (8006464 <HAL_GPIO_Init+0x334>)
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	43db      	mvns	r3, r3
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	4013      	ands	r3, r2
 80063d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063ee:	4a1d      	ldr	r2, [pc, #116]	; (8006464 <HAL_GPIO_Init+0x334>)
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063f4:	4b1b      	ldr	r3, [pc, #108]	; (8006464 <HAL_GPIO_Init+0x334>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	43db      	mvns	r3, r3
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	4013      	ands	r3, r2
 8006402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006418:	4a12      	ldr	r2, [pc, #72]	; (8006464 <HAL_GPIO_Init+0x334>)
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	3301      	adds	r3, #1
 8006422:	61fb      	str	r3, [r7, #28]
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	2b0f      	cmp	r3, #15
 8006428:	f67f ae90 	bls.w	800614c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800642c:	bf00      	nop
 800642e:	bf00      	nop
 8006430:	3724      	adds	r7, #36	; 0x24
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40023800 	.word	0x40023800
 8006440:	40013800 	.word	0x40013800
 8006444:	40020000 	.word	0x40020000
 8006448:	40020400 	.word	0x40020400
 800644c:	40020800 	.word	0x40020800
 8006450:	40020c00 	.word	0x40020c00
 8006454:	40021000 	.word	0x40021000
 8006458:	40021400 	.word	0x40021400
 800645c:	40021800 	.word	0x40021800
 8006460:	40021c00 	.word	0x40021c00
 8006464:	40013c00 	.word	0x40013c00

08006468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	460b      	mov	r3, r1
 8006472:	807b      	strh	r3, [r7, #2]
 8006474:	4613      	mov	r3, r2
 8006476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006478:	787b      	ldrb	r3, [r7, #1]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800647e:	887a      	ldrh	r2, [r7, #2]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006484:	e003      	b.n	800648e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006486:	887b      	ldrh	r3, [r7, #2]
 8006488:	041a      	lsls	r2, r3, #16
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	619a      	str	r2, [r3, #24]
}
 800648e:	bf00      	nop
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800649a:	b480      	push	{r7}
 800649c:	b085      	sub	sp, #20
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	460b      	mov	r3, r1
 80064a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80064ac:	887a      	ldrh	r2, [r7, #2]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4013      	ands	r3, r2
 80064b2:	041a      	lsls	r2, r3, #16
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	43d9      	mvns	r1, r3
 80064b8:	887b      	ldrh	r3, [r7, #2]
 80064ba:	400b      	ands	r3, r1
 80064bc:	431a      	orrs	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	619a      	str	r2, [r3, #24]
}
 80064c2:	bf00      	nop
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
	...

080064d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e12b      	b.n	800673a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d106      	bne.n	80064fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7fd fb42 	bl	8003b80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2224      	movs	r2, #36	; 0x24
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0201 	bic.w	r2, r2, #1
 8006512:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006522:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006532:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006534:	f002 f88a 	bl	800864c <HAL_RCC_GetPCLK1Freq>
 8006538:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	4a81      	ldr	r2, [pc, #516]	; (8006744 <HAL_I2C_Init+0x274>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d807      	bhi.n	8006554 <HAL_I2C_Init+0x84>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4a80      	ldr	r2, [pc, #512]	; (8006748 <HAL_I2C_Init+0x278>)
 8006548:	4293      	cmp	r3, r2
 800654a:	bf94      	ite	ls
 800654c:	2301      	movls	r3, #1
 800654e:	2300      	movhi	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	e006      	b.n	8006562 <HAL_I2C_Init+0x92>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4a7d      	ldr	r2, [pc, #500]	; (800674c <HAL_I2C_Init+0x27c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	bf94      	ite	ls
 800655c:	2301      	movls	r3, #1
 800655e:	2300      	movhi	r3, #0
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e0e7      	b.n	800673a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4a78      	ldr	r2, [pc, #480]	; (8006750 <HAL_I2C_Init+0x280>)
 800656e:	fba2 2303 	umull	r2, r3, r2, r3
 8006572:	0c9b      	lsrs	r3, r3, #18
 8006574:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	430a      	orrs	r2, r1
 8006588:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	4a6a      	ldr	r2, [pc, #424]	; (8006744 <HAL_I2C_Init+0x274>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d802      	bhi.n	80065a4 <HAL_I2C_Init+0xd4>
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	3301      	adds	r3, #1
 80065a2:	e009      	b.n	80065b8 <HAL_I2C_Init+0xe8>
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80065aa:	fb02 f303 	mul.w	r3, r2, r3
 80065ae:	4a69      	ldr	r2, [pc, #420]	; (8006754 <HAL_I2C_Init+0x284>)
 80065b0:	fba2 2303 	umull	r2, r3, r2, r3
 80065b4:	099b      	lsrs	r3, r3, #6
 80065b6:	3301      	adds	r3, #1
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	6812      	ldr	r2, [r2, #0]
 80065bc:	430b      	orrs	r3, r1
 80065be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80065ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	495c      	ldr	r1, [pc, #368]	; (8006744 <HAL_I2C_Init+0x274>)
 80065d4:	428b      	cmp	r3, r1
 80065d6:	d819      	bhi.n	800660c <HAL_I2C_Init+0x13c>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	1e59      	subs	r1, r3, #1
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80065e6:	1c59      	adds	r1, r3, #1
 80065e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065ec:	400b      	ands	r3, r1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <HAL_I2C_Init+0x138>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	1e59      	subs	r1, r3, #1
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8006600:	3301      	adds	r3, #1
 8006602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006606:	e051      	b.n	80066ac <HAL_I2C_Init+0x1dc>
 8006608:	2304      	movs	r3, #4
 800660a:	e04f      	b.n	80066ac <HAL_I2C_Init+0x1dc>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d111      	bne.n	8006638 <HAL_I2C_Init+0x168>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	1e58      	subs	r0, r3, #1
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6859      	ldr	r1, [r3, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	440b      	add	r3, r1
 8006622:	fbb0 f3f3 	udiv	r3, r0, r3
 8006626:	3301      	adds	r3, #1
 8006628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800662c:	2b00      	cmp	r3, #0
 800662e:	bf0c      	ite	eq
 8006630:	2301      	moveq	r3, #1
 8006632:	2300      	movne	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	e012      	b.n	800665e <HAL_I2C_Init+0x18e>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	1e58      	subs	r0, r3, #1
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6859      	ldr	r1, [r3, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	440b      	add	r3, r1
 8006646:	0099      	lsls	r1, r3, #2
 8006648:	440b      	add	r3, r1
 800664a:	fbb0 f3f3 	udiv	r3, r0, r3
 800664e:	3301      	adds	r3, #1
 8006650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006654:	2b00      	cmp	r3, #0
 8006656:	bf0c      	ite	eq
 8006658:	2301      	moveq	r3, #1
 800665a:	2300      	movne	r3, #0
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <HAL_I2C_Init+0x196>
 8006662:	2301      	movs	r3, #1
 8006664:	e022      	b.n	80066ac <HAL_I2C_Init+0x1dc>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10e      	bne.n	800668c <HAL_I2C_Init+0x1bc>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	1e58      	subs	r0, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6859      	ldr	r1, [r3, #4]
 8006676:	460b      	mov	r3, r1
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	440b      	add	r3, r1
 800667c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006680:	3301      	adds	r3, #1
 8006682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800668a:	e00f      	b.n	80066ac <HAL_I2C_Init+0x1dc>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	1e58      	subs	r0, r3, #1
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6859      	ldr	r1, [r3, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	440b      	add	r3, r1
 800669a:	0099      	lsls	r1, r3, #2
 800669c:	440b      	add	r3, r1
 800669e:	fbb0 f3f3 	udiv	r3, r0, r3
 80066a2:	3301      	adds	r3, #1
 80066a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066ac:	6879      	ldr	r1, [r7, #4]
 80066ae:	6809      	ldr	r1, [r1, #0]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69da      	ldr	r2, [r3, #28]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80066da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6911      	ldr	r1, [r2, #16]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	68d2      	ldr	r2, [r2, #12]
 80066e6:	4311      	orrs	r1, r2
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6812      	ldr	r2, [r2, #0]
 80066ec:	430b      	orrs	r3, r1
 80066ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	695a      	ldr	r2, [r3, #20]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0201 	orr.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2220      	movs	r2, #32
 8006726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	000186a0 	.word	0x000186a0
 8006748:	001e847f 	.word	0x001e847f
 800674c:	003d08ff 	.word	0x003d08ff
 8006750:	431bde83 	.word	0x431bde83
 8006754:	10624dd3 	.word	0x10624dd3

08006758 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	607a      	str	r2, [r7, #4]
 8006762:	461a      	mov	r2, r3
 8006764:	460b      	mov	r3, r1
 8006766:	817b      	strh	r3, [r7, #10]
 8006768:	4613      	mov	r3, r2
 800676a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800676c:	f7fe ff3c 	bl	80055e8 <HAL_GetTick>
 8006770:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b20      	cmp	r3, #32
 800677c:	f040 80e0 	bne.w	8006940 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	2319      	movs	r3, #25
 8006786:	2201      	movs	r2, #1
 8006788:	4970      	ldr	r1, [pc, #448]	; (800694c <HAL_I2C_Master_Transmit+0x1f4>)
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f001 f910 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006796:	2302      	movs	r3, #2
 8006798:	e0d3      	b.n	8006942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <HAL_I2C_Master_Transmit+0x50>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e0cc      	b.n	8006942 <HAL_I2C_Master_Transmit+0x1ea>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d007      	beq.n	80067ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f042 0201 	orr.w	r2, r2, #1
 80067cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2221      	movs	r2, #33	; 0x21
 80067e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2210      	movs	r2, #16
 80067ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	893a      	ldrh	r2, [r7, #8]
 80067fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006804:	b29a      	uxth	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	4a50      	ldr	r2, [pc, #320]	; (8006950 <HAL_I2C_Master_Transmit+0x1f8>)
 800680e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006810:	8979      	ldrh	r1, [r7, #10]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	6a3a      	ldr	r2, [r7, #32]
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 fdfc 	bl	8007414 <I2C_MasterRequestWrite>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e08d      	b.n	8006942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006826:	2300      	movs	r3, #0
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	613b      	str	r3, [r7, #16]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800683c:	e066      	b.n	800690c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	6a39      	ldr	r1, [r7, #32]
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f001 f98a 	bl	8007b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00d      	beq.n	800686a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	2b04      	cmp	r3, #4
 8006854:	d107      	bne.n	8006866 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006864:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e06b      	b.n	8006942 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	781a      	ldrb	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006884:	b29b      	uxth	r3, r3
 8006886:	3b01      	subs	r3, #1
 8006888:	b29a      	uxth	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d11b      	bne.n	80068e0 <HAL_I2C_Master_Transmit+0x188>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d017      	beq.n	80068e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	781a      	ldrb	r2, [r3, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	6a39      	ldr	r1, [r7, #32]
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f001 f97a 	bl	8007bde <I2C_WaitOnBTFFlagUntilTimeout>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00d      	beq.n	800690c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d107      	bne.n	8006908 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006906:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e01a      	b.n	8006942 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006910:	2b00      	cmp	r3, #0
 8006912:	d194      	bne.n	800683e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	e000      	b.n	8006942 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006940:	2302      	movs	r3, #2
  }
}
 8006942:	4618      	mov	r0, r3
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	00100002 	.word	0x00100002
 8006950:	ffff0000 	.word	0xffff0000

08006954 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08c      	sub	sp, #48	; 0x30
 8006958:	af02      	add	r7, sp, #8
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	607a      	str	r2, [r7, #4]
 800695e:	461a      	mov	r2, r3
 8006960:	460b      	mov	r3, r1
 8006962:	817b      	strh	r3, [r7, #10]
 8006964:	4613      	mov	r3, r2
 8006966:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006968:	f7fe fe3e 	bl	80055e8 <HAL_GetTick>
 800696c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b20      	cmp	r3, #32
 8006978:	f040 820b 	bne.w	8006d92 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	2319      	movs	r3, #25
 8006982:	2201      	movs	r2, #1
 8006984:	497c      	ldr	r1, [pc, #496]	; (8006b78 <HAL_I2C_Master_Receive+0x224>)
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f001 f812 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006992:	2302      	movs	r3, #2
 8006994:	e1fe      	b.n	8006d94 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <HAL_I2C_Master_Receive+0x50>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e1f7      	b.n	8006d94 <HAL_I2C_Master_Receive+0x440>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d007      	beq.n	80069ca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f042 0201 	orr.w	r2, r2, #1
 80069c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2222      	movs	r2, #34	; 0x22
 80069de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2210      	movs	r2, #16
 80069e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	893a      	ldrh	r2, [r7, #8]
 80069fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4a5c      	ldr	r2, [pc, #368]	; (8006b7c <HAL_I2C_Master_Receive+0x228>)
 8006a0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006a0c:	8979      	ldrh	r1, [r7, #10]
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 fd80 	bl	8007518 <I2C_MasterRequestRead>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e1b8      	b.n	8006d94 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d113      	bne.n	8006a52 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	623b      	str	r3, [r7, #32]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	623b      	str	r3, [r7, #32]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	623b      	str	r3, [r7, #32]
 8006a3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	e18c      	b.n	8006d6c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d11b      	bne.n	8006a92 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	61fb      	str	r3, [r7, #28]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	61fb      	str	r3, [r7, #28]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	61fb      	str	r3, [r7, #28]
 8006a7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	e16c      	b.n	8006d6c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d11b      	bne.n	8006ad2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aa8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ab8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aba:	2300      	movs	r3, #0
 8006abc:	61bb      	str	r3, [r7, #24]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	61bb      	str	r3, [r7, #24]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	61bb      	str	r3, [r7, #24]
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	e14c      	b.n	8006d6c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ae0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	617b      	str	r3, [r7, #20]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	617b      	str	r3, [r7, #20]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	617b      	str	r3, [r7, #20]
 8006af6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006af8:	e138      	b.n	8006d6c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	f200 80f1 	bhi.w	8006ce6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d123      	bne.n	8006b54 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f001 f8a5 	bl	8007c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e139      	b.n	8006d94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	691a      	ldr	r2, [r3, #16]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b52:	e10b      	b.n	8006d6c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d14e      	bne.n	8006bfa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b62:	2200      	movs	r2, #0
 8006b64:	4906      	ldr	r1, [pc, #24]	; (8006b80 <HAL_I2C_Master_Receive+0x22c>)
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f000 ff22 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d008      	beq.n	8006b84 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e10e      	b.n	8006d94 <HAL_I2C_Master_Receive+0x440>
 8006b76:	bf00      	nop
 8006b78:	00100002 	.word	0x00100002
 8006b7c:	ffff0000 	.word	0xffff0000
 8006b80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691a      	ldr	r2, [r3, #16]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	b2d2      	uxtb	r2, r2
 8006ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	691a      	ldr	r2, [r3, #16]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	b2d2      	uxtb	r2, r2
 8006bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be2:	3b01      	subs	r3, #1
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bf8:	e0b8      	b.n	8006d6c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	2200      	movs	r2, #0
 8006c02:	4966      	ldr	r1, [pc, #408]	; (8006d9c <HAL_I2C_Master_Receive+0x448>)
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 fed3 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e0bf      	b.n	8006d94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2e:	b2d2      	uxtb	r2, r2
 8006c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c40:	3b01      	subs	r3, #1
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	494f      	ldr	r1, [pc, #316]	; (8006d9c <HAL_I2C_Master_Receive+0x448>)
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 fea5 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e091      	b.n	8006d94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	691a      	ldr	r2, [r3, #16]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c92:	1c5a      	adds	r2, r3, #1
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	691a      	ldr	r2, [r3, #16]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	b2d2      	uxtb	r2, r2
 8006cbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ce4:	e042      	b.n	8006d6c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 ffb8 	bl	8007c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e04c      	b.n	8006d94 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	691a      	ldr	r2, [r3, #16]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d16:	3b01      	subs	r3, #1
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	f003 0304 	and.w	r3, r3, #4
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d118      	bne.n	8006d6c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	691a      	ldr	r2, [r3, #16]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	3b01      	subs	r3, #1
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f47f aec2 	bne.w	8006afa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e000      	b.n	8006d94 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006d92:	2302      	movs	r3, #2
  }
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3728      	adds	r7, #40	; 0x28
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	00010004 	.word	0x00010004

08006da0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af02      	add	r7, sp, #8
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	4608      	mov	r0, r1
 8006daa:	4611      	mov	r1, r2
 8006dac:	461a      	mov	r2, r3
 8006dae:	4603      	mov	r3, r0
 8006db0:	817b      	strh	r3, [r7, #10]
 8006db2:	460b      	mov	r3, r1
 8006db4:	813b      	strh	r3, [r7, #8]
 8006db6:	4613      	mov	r3, r2
 8006db8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006dba:	f7fe fc15 	bl	80055e8 <HAL_GetTick>
 8006dbe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b20      	cmp	r3, #32
 8006dca:	f040 80d9 	bne.w	8006f80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	2319      	movs	r3, #25
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	496d      	ldr	r1, [pc, #436]	; (8006f8c <HAL_I2C_Mem_Write+0x1ec>)
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 fde9 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006de4:	2302      	movs	r3, #2
 8006de6:	e0cc      	b.n	8006f82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d101      	bne.n	8006df6 <HAL_I2C_Mem_Write+0x56>
 8006df2:	2302      	movs	r3, #2
 8006df4:	e0c5      	b.n	8006f82 <HAL_I2C_Mem_Write+0x1e2>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d007      	beq.n	8006e1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f042 0201 	orr.w	r2, r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2221      	movs	r2, #33	; 0x21
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2240      	movs	r2, #64	; 0x40
 8006e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a3a      	ldr	r2, [r7, #32]
 8006e46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4a4d      	ldr	r2, [pc, #308]	; (8006f90 <HAL_I2C_Mem_Write+0x1f0>)
 8006e5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e5e:	88f8      	ldrh	r0, [r7, #6]
 8006e60:	893a      	ldrh	r2, [r7, #8]
 8006e62:	8979      	ldrh	r1, [r7, #10]
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	9301      	str	r3, [sp, #4]
 8006e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 fc20 	bl	80076b4 <I2C_RequestMemoryWrite>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d052      	beq.n	8006f20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e081      	b.n	8006f82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 fe6a 	bl	8007b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00d      	beq.n	8006eaa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d107      	bne.n	8006ea6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ea4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e06b      	b.n	8006f82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	781a      	ldrb	r2, [r3, #0]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d11b      	bne.n	8006f20 <HAL_I2C_Mem_Write+0x180>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d017      	beq.n	8006f20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef4:	781a      	ldrb	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1aa      	bne.n	8006e7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 fe56 	bl	8007bde <I2C_WaitOnBTFFlagUntilTimeout>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00d      	beq.n	8006f54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d107      	bne.n	8006f50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e016      	b.n	8006f82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e000      	b.n	8006f82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006f80:	2302      	movs	r3, #2
  }
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3718      	adds	r7, #24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	00100002 	.word	0x00100002
 8006f90:	ffff0000 	.word	0xffff0000

08006f94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08c      	sub	sp, #48	; 0x30
 8006f98:	af02      	add	r7, sp, #8
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	817b      	strh	r3, [r7, #10]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	813b      	strh	r3, [r7, #8]
 8006faa:	4613      	mov	r3, r2
 8006fac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006fae:	f7fe fb1b 	bl	80055e8 <HAL_GetTick>
 8006fb2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b20      	cmp	r3, #32
 8006fbe:	f040 8208 	bne.w	80073d2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	2319      	movs	r3, #25
 8006fc8:	2201      	movs	r2, #1
 8006fca:	497b      	ldr	r1, [pc, #492]	; (80071b8 <HAL_I2C_Mem_Read+0x224>)
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 fcef 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d001      	beq.n	8006fdc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e1fb      	b.n	80073d4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d101      	bne.n	8006fea <HAL_I2C_Mem_Read+0x56>
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	e1f4      	b.n	80073d4 <HAL_I2C_Mem_Read+0x440>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d007      	beq.n	8007010 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f042 0201 	orr.w	r2, r2, #1
 800700e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800701e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2222      	movs	r2, #34	; 0x22
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2240      	movs	r2, #64	; 0x40
 800702c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800703a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007040:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007046:	b29a      	uxth	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4a5b      	ldr	r2, [pc, #364]	; (80071bc <HAL_I2C_Mem_Read+0x228>)
 8007050:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007052:	88f8      	ldrh	r0, [r7, #6]
 8007054:	893a      	ldrh	r2, [r7, #8]
 8007056:	8979      	ldrh	r1, [r7, #10]
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	9301      	str	r3, [sp, #4]
 800705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	4603      	mov	r3, r0
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 fbbc 	bl	80077e0 <I2C_RequestMemoryRead>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e1b0      	b.n	80073d4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007076:	2b00      	cmp	r3, #0
 8007078:	d113      	bne.n	80070a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800707a:	2300      	movs	r3, #0
 800707c:	623b      	str	r3, [r7, #32]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	623b      	str	r3, [r7, #32]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	623b      	str	r3, [r7, #32]
 800708e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	e184      	b.n	80073ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d11b      	bne.n	80070e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070ba:	2300      	movs	r3, #0
 80070bc:	61fb      	str	r3, [r7, #28]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	61fb      	str	r3, [r7, #28]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	61fb      	str	r3, [r7, #28]
 80070ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	e164      	b.n	80073ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d11b      	bne.n	8007122 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007108:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800710a:	2300      	movs	r3, #0
 800710c:	61bb      	str	r3, [r7, #24]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	61bb      	str	r3, [r7, #24]
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	e144      	b.n	80073ac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007122:	2300      	movs	r3, #0
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	617b      	str	r3, [r7, #20]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	617b      	str	r3, [r7, #20]
 8007136:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007138:	e138      	b.n	80073ac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800713e:	2b03      	cmp	r3, #3
 8007140:	f200 80f1 	bhi.w	8007326 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007148:	2b01      	cmp	r3, #1
 800714a:	d123      	bne.n	8007194 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800714c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800714e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 fd85 	bl	8007c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e139      	b.n	80073d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	691a      	ldr	r2, [r3, #16]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	b2d2      	uxtb	r2, r2
 800716c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800717c:	3b01      	subs	r3, #1
 800717e:	b29a      	uxth	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007188:	b29b      	uxth	r3, r3
 800718a:	3b01      	subs	r3, #1
 800718c:	b29a      	uxth	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007192:	e10b      	b.n	80073ac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007198:	2b02      	cmp	r3, #2
 800719a:	d14e      	bne.n	800723a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a2:	2200      	movs	r2, #0
 80071a4:	4906      	ldr	r1, [pc, #24]	; (80071c0 <HAL_I2C_Mem_Read+0x22c>)
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f000 fc02 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d008      	beq.n	80071c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e10e      	b.n	80073d4 <HAL_I2C_Mem_Read+0x440>
 80071b6:	bf00      	nop
 80071b8:	00100002 	.word	0x00100002
 80071bc:	ffff0000 	.word	0xffff0000
 80071c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	691a      	ldr	r2, [r3, #16]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	b2d2      	uxtb	r2, r2
 80071e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	1c5a      	adds	r2, r3, #1
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071f0:	3b01      	subs	r3, #1
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	3b01      	subs	r3, #1
 8007200:	b29a      	uxth	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	691a      	ldr	r2, [r3, #16]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007210:	b2d2      	uxtb	r2, r2
 8007212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007218:	1c5a      	adds	r2, r3, #1
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007222:	3b01      	subs	r3, #1
 8007224:	b29a      	uxth	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800722e:	b29b      	uxth	r3, r3
 8007230:	3b01      	subs	r3, #1
 8007232:	b29a      	uxth	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007238:	e0b8      	b.n	80073ac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007240:	2200      	movs	r2, #0
 8007242:	4966      	ldr	r1, [pc, #408]	; (80073dc <HAL_I2C_Mem_Read+0x448>)
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 fbb3 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e0bf      	b.n	80073d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007262:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	691a      	ldr	r2, [r3, #16]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	b2d2      	uxtb	r2, r2
 8007270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	1c5a      	adds	r2, r3, #1
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007280:	3b01      	subs	r3, #1
 8007282:	b29a      	uxth	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800728c:	b29b      	uxth	r3, r3
 800728e:	3b01      	subs	r3, #1
 8007290:	b29a      	uxth	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729c:	2200      	movs	r2, #0
 800729e:	494f      	ldr	r1, [pc, #316]	; (80073dc <HAL_I2C_Mem_Read+0x448>)
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 fb85 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e091      	b.n	80073d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	691a      	ldr	r2, [r3, #16]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	b2d2      	uxtb	r2, r2
 80072cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	1c5a      	adds	r2, r3, #1
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072dc:	3b01      	subs	r3, #1
 80072de:	b29a      	uxth	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	3b01      	subs	r3, #1
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	691a      	ldr	r2, [r3, #16]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	b2d2      	uxtb	r2, r2
 80072fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800730e:	3b01      	subs	r3, #1
 8007310:	b29a      	uxth	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800731a:	b29b      	uxth	r3, r3
 800731c:	3b01      	subs	r3, #1
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007324:	e042      	b.n	80073ac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007328:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 fc98 	bl	8007c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e04c      	b.n	80073d4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	691a      	ldr	r2, [r3, #16]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	b2d2      	uxtb	r2, r2
 8007346:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007356:	3b01      	subs	r3, #1
 8007358:	b29a      	uxth	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007362:	b29b      	uxth	r3, r3
 8007364:	3b01      	subs	r3, #1
 8007366:	b29a      	uxth	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	f003 0304 	and.w	r3, r3, #4
 8007376:	2b04      	cmp	r3, #4
 8007378:	d118      	bne.n	80073ac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	691a      	ldr	r2, [r3, #16]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	b2d2      	uxtb	r2, r2
 8007386:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007396:	3b01      	subs	r3, #1
 8007398:	b29a      	uxth	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	3b01      	subs	r3, #1
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f47f aec2 	bne.w	800713a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2220      	movs	r2, #32
 80073ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	e000      	b.n	80073d4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80073d2:	2302      	movs	r3, #2
  }
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3728      	adds	r7, #40	; 0x28
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	00010004 	.word	0x00010004

080073e0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ee:	b2db      	uxtb	r3, r3
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007408:	4618      	mov	r0, r3
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b088      	sub	sp, #32
 8007418:	af02      	add	r7, sp, #8
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	607a      	str	r2, [r7, #4]
 800741e:	603b      	str	r3, [r7, #0]
 8007420:	460b      	mov	r3, r1
 8007422:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2b08      	cmp	r3, #8
 800742e:	d006      	beq.n	800743e <I2C_MasterRequestWrite+0x2a>
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d003      	beq.n	800743e <I2C_MasterRequestWrite+0x2a>
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800743c:	d108      	bne.n	8007450 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	e00b      	b.n	8007468 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007454:	2b12      	cmp	r3, #18
 8007456:	d107      	bne.n	8007468 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007466:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 fa9b 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00d      	beq.n	800749c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800748e:	d103      	bne.n	8007498 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007496:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e035      	b.n	8007508 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074a4:	d108      	bne.n	80074b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80074a6:	897b      	ldrh	r3, [r7, #10]
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	461a      	mov	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80074b4:	611a      	str	r2, [r3, #16]
 80074b6:	e01b      	b.n	80074f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80074b8:	897b      	ldrh	r3, [r7, #10]
 80074ba:	11db      	asrs	r3, r3, #7
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	f003 0306 	and.w	r3, r3, #6
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f063 030f 	orn	r3, r3, #15
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	490e      	ldr	r1, [pc, #56]	; (8007510 <I2C_MasterRequestWrite+0xfc>)
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 fac1 	bl	8007a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e010      	b.n	8007508 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80074e6:	897b      	ldrh	r3, [r7, #10]
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	4907      	ldr	r1, [pc, #28]	; (8007514 <I2C_MasterRequestWrite+0x100>)
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 fab1 	bl	8007a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d001      	beq.n	8007506 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e000      	b.n	8007508 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	00010008 	.word	0x00010008
 8007514:	00010002 	.word	0x00010002

08007518 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b088      	sub	sp, #32
 800751c:	af02      	add	r7, sp, #8
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	607a      	str	r2, [r7, #4]
 8007522:	603b      	str	r3, [r7, #0]
 8007524:	460b      	mov	r3, r1
 8007526:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800753c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b08      	cmp	r3, #8
 8007542:	d006      	beq.n	8007552 <I2C_MasterRequestRead+0x3a>
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d003      	beq.n	8007552 <I2C_MasterRequestRead+0x3a>
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007550:	d108      	bne.n	8007564 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	e00b      	b.n	800757c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007568:	2b11      	cmp	r3, #17
 800756a:	d107      	bne.n	800757c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800757a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 fa11 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00d      	beq.n	80075b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800759e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075a2:	d103      	bne.n	80075ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e079      	b.n	80076a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075b8:	d108      	bne.n	80075cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80075ba:	897b      	ldrh	r3, [r7, #10]
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	f043 0301 	orr.w	r3, r3, #1
 80075c2:	b2da      	uxtb	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	611a      	str	r2, [r3, #16]
 80075ca:	e05f      	b.n	800768c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80075cc:	897b      	ldrh	r3, [r7, #10]
 80075ce:	11db      	asrs	r3, r3, #7
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	f003 0306 	and.w	r3, r3, #6
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	f063 030f 	orn	r3, r3, #15
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	4930      	ldr	r1, [pc, #192]	; (80076ac <I2C_MasterRequestRead+0x194>)
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 fa37 	bl	8007a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e054      	b.n	80076a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80075fa:	897b      	ldrh	r3, [r7, #10]
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	4929      	ldr	r1, [pc, #164]	; (80076b0 <I2C_MasterRequestRead+0x198>)
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 fa27 	bl	8007a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e044      	b.n	80076a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800761a:	2300      	movs	r3, #0
 800761c:	613b      	str	r3, [r7, #16]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	613b      	str	r3, [r7, #16]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	613b      	str	r3, [r7, #16]
 800762e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800763e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 f9af 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00d      	beq.n	8007674 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007666:	d103      	bne.n	8007670 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800766e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e017      	b.n	80076a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007674:	897b      	ldrh	r3, [r7, #10]
 8007676:	11db      	asrs	r3, r3, #7
 8007678:	b2db      	uxtb	r3, r3
 800767a:	f003 0306 	and.w	r3, r3, #6
 800767e:	b2db      	uxtb	r3, r3
 8007680:	f063 030e 	orn	r3, r3, #14
 8007684:	b2da      	uxtb	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	4907      	ldr	r1, [pc, #28]	; (80076b0 <I2C_MasterRequestRead+0x198>)
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 f9e3 	bl	8007a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e000      	b.n	80076a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	00010008 	.word	0x00010008
 80076b0:	00010002 	.word	0x00010002

080076b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af02      	add	r7, sp, #8
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	4608      	mov	r0, r1
 80076be:	4611      	mov	r1, r2
 80076c0:	461a      	mov	r2, r3
 80076c2:	4603      	mov	r3, r0
 80076c4:	817b      	strh	r3, [r7, #10]
 80076c6:	460b      	mov	r3, r1
 80076c8:	813b      	strh	r3, [r7, #8]
 80076ca:	4613      	mov	r3, r2
 80076cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 f960 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00d      	beq.n	8007712 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007704:	d103      	bne.n	800770e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800770c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e05f      	b.n	80077d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007712:	897b      	ldrh	r3, [r7, #10]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	461a      	mov	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007720:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	6a3a      	ldr	r2, [r7, #32]
 8007726:	492d      	ldr	r1, [pc, #180]	; (80077dc <I2C_RequestMemoryWrite+0x128>)
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 f998 	bl	8007a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e04c      	b.n	80077d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007738:	2300      	movs	r3, #0
 800773a:	617b      	str	r3, [r7, #20]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	617b      	str	r3, [r7, #20]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800774e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007750:	6a39      	ldr	r1, [r7, #32]
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 fa02 	bl	8007b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00d      	beq.n	800777a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	2b04      	cmp	r3, #4
 8007764:	d107      	bne.n	8007776 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007774:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e02b      	b.n	80077d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800777a:	88fb      	ldrh	r3, [r7, #6]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d105      	bne.n	800778c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007780:	893b      	ldrh	r3, [r7, #8]
 8007782:	b2da      	uxtb	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	611a      	str	r2, [r3, #16]
 800778a:	e021      	b.n	80077d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800778c:	893b      	ldrh	r3, [r7, #8]
 800778e:	0a1b      	lsrs	r3, r3, #8
 8007790:	b29b      	uxth	r3, r3
 8007792:	b2da      	uxtb	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800779a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800779c:	6a39      	ldr	r1, [r7, #32]
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f000 f9dc 	bl	8007b5c <I2C_WaitOnTXEFlagUntilTimeout>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00d      	beq.n	80077c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d107      	bne.n	80077c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e005      	b.n	80077d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077c6:	893b      	ldrh	r3, [r7, #8]
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3718      	adds	r7, #24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	00010002 	.word	0x00010002

080077e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b088      	sub	sp, #32
 80077e4:	af02      	add	r7, sp, #8
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	4608      	mov	r0, r1
 80077ea:	4611      	mov	r1, r2
 80077ec:	461a      	mov	r2, r3
 80077ee:	4603      	mov	r3, r0
 80077f0:	817b      	strh	r3, [r7, #10]
 80077f2:	460b      	mov	r3, r1
 80077f4:	813b      	strh	r3, [r7, #8]
 80077f6:	4613      	mov	r3, r2
 80077f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007808:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007818:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	2200      	movs	r2, #0
 8007822:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 f8c2 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00d      	beq.n	800784e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007840:	d103      	bne.n	800784a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007848:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e0aa      	b.n	80079a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800784e:	897b      	ldrh	r3, [r7, #10]
 8007850:	b2db      	uxtb	r3, r3
 8007852:	461a      	mov	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800785c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	6a3a      	ldr	r2, [r7, #32]
 8007862:	4952      	ldr	r1, [pc, #328]	; (80079ac <I2C_RequestMemoryRead+0x1cc>)
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 f8fa 	bl	8007a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e097      	b.n	80079a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007874:	2300      	movs	r3, #0
 8007876:	617b      	str	r3, [r7, #20]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	617b      	str	r3, [r7, #20]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	617b      	str	r3, [r7, #20]
 8007888:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800788a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800788c:	6a39      	ldr	r1, [r7, #32]
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 f964 	bl	8007b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00d      	beq.n	80078b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d107      	bne.n	80078b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e076      	b.n	80079a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078b6:	88fb      	ldrh	r3, [r7, #6]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d105      	bne.n	80078c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078bc:	893b      	ldrh	r3, [r7, #8]
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	611a      	str	r2, [r3, #16]
 80078c6:	e021      	b.n	800790c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80078c8:	893b      	ldrh	r3, [r7, #8]
 80078ca:	0a1b      	lsrs	r3, r3, #8
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078d8:	6a39      	ldr	r1, [r7, #32]
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 f93e 	bl	8007b5c <I2C_WaitOnTXEFlagUntilTimeout>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00d      	beq.n	8007902 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	d107      	bne.n	80078fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e050      	b.n	80079a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007902:	893b      	ldrh	r3, [r7, #8]
 8007904:	b2da      	uxtb	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800790c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800790e:	6a39      	ldr	r1, [r7, #32]
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f923 	bl	8007b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00d      	beq.n	8007938 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007920:	2b04      	cmp	r3, #4
 8007922:	d107      	bne.n	8007934 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007932:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e035      	b.n	80079a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007946:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	2200      	movs	r2, #0
 8007950:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f82b 	bl	80079b0 <I2C_WaitOnFlagUntilTimeout>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00d      	beq.n	800797c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800796a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800796e:	d103      	bne.n	8007978 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007976:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e013      	b.n	80079a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800797c:	897b      	ldrh	r3, [r7, #10]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	f043 0301 	orr.w	r3, r3, #1
 8007984:	b2da      	uxtb	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	6a3a      	ldr	r2, [r7, #32]
 8007990:	4906      	ldr	r1, [pc, #24]	; (80079ac <I2C_RequestMemoryRead+0x1cc>)
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 f863 	bl	8007a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	00010002 	.word	0x00010002

080079b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	603b      	str	r3, [r7, #0]
 80079bc:	4613      	mov	r3, r2
 80079be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079c0:	e025      	b.n	8007a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c8:	d021      	beq.n	8007a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ca:	f7fd fe0d 	bl	80055e8 <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d302      	bcc.n	80079e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d116      	bne.n	8007a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fa:	f043 0220 	orr.w	r2, r3, #32
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e023      	b.n	8007a56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	0c1b      	lsrs	r3, r3, #16
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d10d      	bne.n	8007a34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	43da      	mvns	r2, r3
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	4013      	ands	r3, r2
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	bf0c      	ite	eq
 8007a2a:	2301      	moveq	r3, #1
 8007a2c:	2300      	movne	r3, #0
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	461a      	mov	r2, r3
 8007a32:	e00c      	b.n	8007a4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	43da      	mvns	r2, r3
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	4013      	ands	r3, r2
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	bf0c      	ite	eq
 8007a46:	2301      	moveq	r3, #1
 8007a48:	2300      	movne	r3, #0
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	79fb      	ldrb	r3, [r7, #7]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d0b6      	beq.n	80079c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b084      	sub	sp, #16
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	607a      	str	r2, [r7, #4]
 8007a6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a6c:	e051      	b.n	8007b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a7c:	d123      	bne.n	8007ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	f043 0204 	orr.w	r2, r3, #4
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e046      	b.n	8007b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007acc:	d021      	beq.n	8007b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ace:	f7fd fd8b 	bl	80055e8 <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d302      	bcc.n	8007ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d116      	bne.n	8007b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2220      	movs	r2, #32
 8007aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afe:	f043 0220 	orr.w	r2, r3, #32
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e020      	b.n	8007b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	0c1b      	lsrs	r3, r3, #16
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d10c      	bne.n	8007b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	43da      	mvns	r2, r3
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	4013      	ands	r3, r2
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	bf14      	ite	ne
 8007b2e:	2301      	movne	r3, #1
 8007b30:	2300      	moveq	r3, #0
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	e00b      	b.n	8007b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	43da      	mvns	r2, r3
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	4013      	ands	r3, r2
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	bf14      	ite	ne
 8007b48:	2301      	movne	r3, #1
 8007b4a:	2300      	moveq	r3, #0
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d18d      	bne.n	8007a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b68:	e02d      	b.n	8007bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 f8ce 	bl	8007d0c <I2C_IsAcknowledgeFailed>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e02d      	b.n	8007bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b80:	d021      	beq.n	8007bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b82:	f7fd fd31 	bl	80055e8 <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d302      	bcc.n	8007b98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d116      	bne.n	8007bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb2:	f043 0220 	orr.w	r2, r3, #32
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e007      	b.n	8007bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd0:	2b80      	cmp	r3, #128	; 0x80
 8007bd2:	d1ca      	bne.n	8007b6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	60f8      	str	r0, [r7, #12]
 8007be6:	60b9      	str	r1, [r7, #8]
 8007be8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007bea:	e02d      	b.n	8007c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 f88d 	bl	8007d0c <I2C_IsAcknowledgeFailed>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e02d      	b.n	8007c58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c02:	d021      	beq.n	8007c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c04:	f7fd fcf0 	bl	80055e8 <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d302      	bcc.n	8007c1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d116      	bne.n	8007c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2220      	movs	r2, #32
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c34:	f043 0220 	orr.w	r2, r3, #32
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e007      	b.n	8007c58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	f003 0304 	and.w	r3, r3, #4
 8007c52:	2b04      	cmp	r3, #4
 8007c54:	d1ca      	bne.n	8007bec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c6c:	e042      	b.n	8007cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	f003 0310 	and.w	r3, r3, #16
 8007c78:	2b10      	cmp	r3, #16
 8007c7a:	d119      	bne.n	8007cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f06f 0210 	mvn.w	r2, #16
 8007c84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e029      	b.n	8007d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cb0:	f7fd fc9a 	bl	80055e8 <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d302      	bcc.n	8007cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d116      	bne.n	8007cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce0:	f043 0220 	orr.w	r2, r3, #32
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e007      	b.n	8007d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cfe:	2b40      	cmp	r3, #64	; 0x40
 8007d00:	d1b5      	bne.n	8007c6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d22:	d11b      	bne.n	8007d5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2220      	movs	r2, #32
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d48:	f043 0204 	orr.w	r2, r3, #4
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e000      	b.n	8007d5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
	...

08007d6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e267      	b.n	800824e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d075      	beq.n	8007e76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d8a:	4b88      	ldr	r3, [pc, #544]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f003 030c 	and.w	r3, r3, #12
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	d00c      	beq.n	8007db0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d96:	4b85      	ldr	r3, [pc, #532]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d9e:	2b08      	cmp	r3, #8
 8007da0:	d112      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007da2:	4b82      	ldr	r3, [pc, #520]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007dae:	d10b      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007db0:	4b7e      	ldr	r3, [pc, #504]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d05b      	beq.n	8007e74 <HAL_RCC_OscConfig+0x108>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d157      	bne.n	8007e74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e242      	b.n	800824e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dd0:	d106      	bne.n	8007de0 <HAL_RCC_OscConfig+0x74>
 8007dd2:	4b76      	ldr	r3, [pc, #472]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a75      	ldr	r2, [pc, #468]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ddc:	6013      	str	r3, [r2, #0]
 8007dde:	e01d      	b.n	8007e1c <HAL_RCC_OscConfig+0xb0>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007de8:	d10c      	bne.n	8007e04 <HAL_RCC_OscConfig+0x98>
 8007dea:	4b70      	ldr	r3, [pc, #448]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a6f      	ldr	r2, [pc, #444]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007df4:	6013      	str	r3, [r2, #0]
 8007df6:	4b6d      	ldr	r3, [pc, #436]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a6c      	ldr	r2, [pc, #432]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e00:	6013      	str	r3, [r2, #0]
 8007e02:	e00b      	b.n	8007e1c <HAL_RCC_OscConfig+0xb0>
 8007e04:	4b69      	ldr	r3, [pc, #420]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a68      	ldr	r2, [pc, #416]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	4b66      	ldr	r3, [pc, #408]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a65      	ldr	r2, [pc, #404]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d013      	beq.n	8007e4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e24:	f7fd fbe0 	bl	80055e8 <HAL_GetTick>
 8007e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e2a:	e008      	b.n	8007e3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e2c:	f7fd fbdc 	bl	80055e8 <HAL_GetTick>
 8007e30:	4602      	mov	r2, r0
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	2b64      	cmp	r3, #100	; 0x64
 8007e38:	d901      	bls.n	8007e3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e207      	b.n	800824e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e3e:	4b5b      	ldr	r3, [pc, #364]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d0f0      	beq.n	8007e2c <HAL_RCC_OscConfig+0xc0>
 8007e4a:	e014      	b.n	8007e76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e4c:	f7fd fbcc 	bl	80055e8 <HAL_GetTick>
 8007e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e52:	e008      	b.n	8007e66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e54:	f7fd fbc8 	bl	80055e8 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b64      	cmp	r3, #100	; 0x64
 8007e60:	d901      	bls.n	8007e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e1f3      	b.n	800824e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e66:	4b51      	ldr	r3, [pc, #324]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1f0      	bne.n	8007e54 <HAL_RCC_OscConfig+0xe8>
 8007e72:	e000      	b.n	8007e76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0302 	and.w	r3, r3, #2
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d063      	beq.n	8007f4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e82:	4b4a      	ldr	r3, [pc, #296]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f003 030c 	and.w	r3, r3, #12
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00b      	beq.n	8007ea6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e8e:	4b47      	ldr	r3, [pc, #284]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e96:	2b08      	cmp	r3, #8
 8007e98:	d11c      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e9a:	4b44      	ldr	r3, [pc, #272]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d116      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ea6:	4b41      	ldr	r3, [pc, #260]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d005      	beq.n	8007ebe <HAL_RCC_OscConfig+0x152>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d001      	beq.n	8007ebe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e1c7      	b.n	800824e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ebe:	4b3b      	ldr	r3, [pc, #236]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	00db      	lsls	r3, r3, #3
 8007ecc:	4937      	ldr	r1, [pc, #220]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ed2:	e03a      	b.n	8007f4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d020      	beq.n	8007f1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007edc:	4b34      	ldr	r3, [pc, #208]	; (8007fb0 <HAL_RCC_OscConfig+0x244>)
 8007ede:	2201      	movs	r2, #1
 8007ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee2:	f7fd fb81 	bl	80055e8 <HAL_GetTick>
 8007ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ee8:	e008      	b.n	8007efc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007eea:	f7fd fb7d 	bl	80055e8 <HAL_GetTick>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d901      	bls.n	8007efc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e1a8      	b.n	800824e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007efc:	4b2b      	ldr	r3, [pc, #172]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0f0      	beq.n	8007eea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f08:	4b28      	ldr	r3, [pc, #160]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	00db      	lsls	r3, r3, #3
 8007f16:	4925      	ldr	r1, [pc, #148]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	600b      	str	r3, [r1, #0]
 8007f1c:	e015      	b.n	8007f4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f1e:	4b24      	ldr	r3, [pc, #144]	; (8007fb0 <HAL_RCC_OscConfig+0x244>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f24:	f7fd fb60 	bl	80055e8 <HAL_GetTick>
 8007f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f2a:	e008      	b.n	8007f3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f2c:	f7fd fb5c 	bl	80055e8 <HAL_GetTick>
 8007f30:	4602      	mov	r2, r0
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d901      	bls.n	8007f3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e187      	b.n	800824e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f3e:	4b1b      	ldr	r3, [pc, #108]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0302 	and.w	r3, r3, #2
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1f0      	bne.n	8007f2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0308 	and.w	r3, r3, #8
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d036      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d016      	beq.n	8007f8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f5e:	4b15      	ldr	r3, [pc, #84]	; (8007fb4 <HAL_RCC_OscConfig+0x248>)
 8007f60:	2201      	movs	r2, #1
 8007f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f64:	f7fd fb40 	bl	80055e8 <HAL_GetTick>
 8007f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f6a:	e008      	b.n	8007f7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f6c:	f7fd fb3c 	bl	80055e8 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d901      	bls.n	8007f7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e167      	b.n	800824e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f7e:	4b0b      	ldr	r3, [pc, #44]	; (8007fac <HAL_RCC_OscConfig+0x240>)
 8007f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d0f0      	beq.n	8007f6c <HAL_RCC_OscConfig+0x200>
 8007f8a:	e01b      	b.n	8007fc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f8c:	4b09      	ldr	r3, [pc, #36]	; (8007fb4 <HAL_RCC_OscConfig+0x248>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f92:	f7fd fb29 	bl	80055e8 <HAL_GetTick>
 8007f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f98:	e00e      	b.n	8007fb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f9a:	f7fd fb25 	bl	80055e8 <HAL_GetTick>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d907      	bls.n	8007fb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e150      	b.n	800824e <HAL_RCC_OscConfig+0x4e2>
 8007fac:	40023800 	.word	0x40023800
 8007fb0:	42470000 	.word	0x42470000
 8007fb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fb8:	4b88      	ldr	r3, [pc, #544]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 8007fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1ea      	bne.n	8007f9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 8097 	beq.w	8008100 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fd6:	4b81      	ldr	r3, [pc, #516]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10f      	bne.n	8008002 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60bb      	str	r3, [r7, #8]
 8007fe6:	4b7d      	ldr	r3, [pc, #500]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fea:	4a7c      	ldr	r2, [pc, #496]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 8007fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8007ff2:	4b7a      	ldr	r3, [pc, #488]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ffa:	60bb      	str	r3, [r7, #8]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ffe:	2301      	movs	r3, #1
 8008000:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008002:	4b77      	ldr	r3, [pc, #476]	; (80081e0 <HAL_RCC_OscConfig+0x474>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800a:	2b00      	cmp	r3, #0
 800800c:	d118      	bne.n	8008040 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800800e:	4b74      	ldr	r3, [pc, #464]	; (80081e0 <HAL_RCC_OscConfig+0x474>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a73      	ldr	r2, [pc, #460]	; (80081e0 <HAL_RCC_OscConfig+0x474>)
 8008014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800801a:	f7fd fae5 	bl	80055e8 <HAL_GetTick>
 800801e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008020:	e008      	b.n	8008034 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008022:	f7fd fae1 	bl	80055e8 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	2b02      	cmp	r3, #2
 800802e:	d901      	bls.n	8008034 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e10c      	b.n	800824e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008034:	4b6a      	ldr	r3, [pc, #424]	; (80081e0 <HAL_RCC_OscConfig+0x474>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800803c:	2b00      	cmp	r3, #0
 800803e:	d0f0      	beq.n	8008022 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d106      	bne.n	8008056 <HAL_RCC_OscConfig+0x2ea>
 8008048:	4b64      	ldr	r3, [pc, #400]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 800804a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804c:	4a63      	ldr	r2, [pc, #396]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 800804e:	f043 0301 	orr.w	r3, r3, #1
 8008052:	6713      	str	r3, [r2, #112]	; 0x70
 8008054:	e01c      	b.n	8008090 <HAL_RCC_OscConfig+0x324>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	2b05      	cmp	r3, #5
 800805c:	d10c      	bne.n	8008078 <HAL_RCC_OscConfig+0x30c>
 800805e:	4b5f      	ldr	r3, [pc, #380]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 8008060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008062:	4a5e      	ldr	r2, [pc, #376]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 8008064:	f043 0304 	orr.w	r3, r3, #4
 8008068:	6713      	str	r3, [r2, #112]	; 0x70
 800806a:	4b5c      	ldr	r3, [pc, #368]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 800806c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800806e:	4a5b      	ldr	r2, [pc, #364]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 8008070:	f043 0301 	orr.w	r3, r3, #1
 8008074:	6713      	str	r3, [r2, #112]	; 0x70
 8008076:	e00b      	b.n	8008090 <HAL_RCC_OscConfig+0x324>
 8008078:	4b58      	ldr	r3, [pc, #352]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 800807a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807c:	4a57      	ldr	r2, [pc, #348]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 800807e:	f023 0301 	bic.w	r3, r3, #1
 8008082:	6713      	str	r3, [r2, #112]	; 0x70
 8008084:	4b55      	ldr	r3, [pc, #340]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 8008086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008088:	4a54      	ldr	r2, [pc, #336]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 800808a:	f023 0304 	bic.w	r3, r3, #4
 800808e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d015      	beq.n	80080c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008098:	f7fd faa6 	bl	80055e8 <HAL_GetTick>
 800809c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800809e:	e00a      	b.n	80080b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080a0:	f7fd faa2 	bl	80055e8 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d901      	bls.n	80080b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e0cb      	b.n	800824e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080b6:	4b49      	ldr	r3, [pc, #292]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 80080b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ba:	f003 0302 	and.w	r3, r3, #2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d0ee      	beq.n	80080a0 <HAL_RCC_OscConfig+0x334>
 80080c2:	e014      	b.n	80080ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080c4:	f7fd fa90 	bl	80055e8 <HAL_GetTick>
 80080c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080ca:	e00a      	b.n	80080e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080cc:	f7fd fa8c 	bl	80055e8 <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080da:	4293      	cmp	r3, r2
 80080dc:	d901      	bls.n	80080e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e0b5      	b.n	800824e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080e2:	4b3e      	ldr	r3, [pc, #248]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 80080e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e6:	f003 0302 	and.w	r3, r3, #2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1ee      	bne.n	80080cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d105      	bne.n	8008100 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080f4:	4b39      	ldr	r3, [pc, #228]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 80080f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f8:	4a38      	ldr	r2, [pc, #224]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 80080fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 80a1 	beq.w	800824c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800810a:	4b34      	ldr	r3, [pc, #208]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f003 030c 	and.w	r3, r3, #12
 8008112:	2b08      	cmp	r3, #8
 8008114:	d05c      	beq.n	80081d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	2b02      	cmp	r3, #2
 800811c:	d141      	bne.n	80081a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800811e:	4b31      	ldr	r3, [pc, #196]	; (80081e4 <HAL_RCC_OscConfig+0x478>)
 8008120:	2200      	movs	r2, #0
 8008122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008124:	f7fd fa60 	bl	80055e8 <HAL_GetTick>
 8008128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800812a:	e008      	b.n	800813e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800812c:	f7fd fa5c 	bl	80055e8 <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	2b02      	cmp	r3, #2
 8008138:	d901      	bls.n	800813e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e087      	b.n	800824e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800813e:	4b27      	ldr	r3, [pc, #156]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1f0      	bne.n	800812c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	69da      	ldr	r2, [r3, #28]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a1b      	ldr	r3, [r3, #32]
 8008152:	431a      	orrs	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008158:	019b      	lsls	r3, r3, #6
 800815a:	431a      	orrs	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008160:	085b      	lsrs	r3, r3, #1
 8008162:	3b01      	subs	r3, #1
 8008164:	041b      	lsls	r3, r3, #16
 8008166:	431a      	orrs	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816c:	061b      	lsls	r3, r3, #24
 800816e:	491b      	ldr	r1, [pc, #108]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 8008170:	4313      	orrs	r3, r2
 8008172:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008174:	4b1b      	ldr	r3, [pc, #108]	; (80081e4 <HAL_RCC_OscConfig+0x478>)
 8008176:	2201      	movs	r2, #1
 8008178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800817a:	f7fd fa35 	bl	80055e8 <HAL_GetTick>
 800817e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008180:	e008      	b.n	8008194 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008182:	f7fd fa31 	bl	80055e8 <HAL_GetTick>
 8008186:	4602      	mov	r2, r0
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	2b02      	cmp	r3, #2
 800818e:	d901      	bls.n	8008194 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e05c      	b.n	800824e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008194:	4b11      	ldr	r3, [pc, #68]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d0f0      	beq.n	8008182 <HAL_RCC_OscConfig+0x416>
 80081a0:	e054      	b.n	800824c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081a2:	4b10      	ldr	r3, [pc, #64]	; (80081e4 <HAL_RCC_OscConfig+0x478>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081a8:	f7fd fa1e 	bl	80055e8 <HAL_GetTick>
 80081ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081ae:	e008      	b.n	80081c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081b0:	f7fd fa1a 	bl	80055e8 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d901      	bls.n	80081c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e045      	b.n	800824e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081c2:	4b06      	ldr	r3, [pc, #24]	; (80081dc <HAL_RCC_OscConfig+0x470>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1f0      	bne.n	80081b0 <HAL_RCC_OscConfig+0x444>
 80081ce:	e03d      	b.n	800824c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d107      	bne.n	80081e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e038      	b.n	800824e <HAL_RCC_OscConfig+0x4e2>
 80081dc:	40023800 	.word	0x40023800
 80081e0:	40007000 	.word	0x40007000
 80081e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80081e8:	4b1b      	ldr	r3, [pc, #108]	; (8008258 <HAL_RCC_OscConfig+0x4ec>)
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d028      	beq.n	8008248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008200:	429a      	cmp	r2, r3
 8008202:	d121      	bne.n	8008248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800820e:	429a      	cmp	r2, r3
 8008210:	d11a      	bne.n	8008248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008218:	4013      	ands	r3, r2
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800821e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008220:	4293      	cmp	r3, r2
 8008222:	d111      	bne.n	8008248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822e:	085b      	lsrs	r3, r3, #1
 8008230:	3b01      	subs	r3, #1
 8008232:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008234:	429a      	cmp	r2, r3
 8008236:	d107      	bne.n	8008248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008242:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008244:	429a      	cmp	r2, r3
 8008246:	d001      	beq.n	800824c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e000      	b.n	800824e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	40023800 	.word	0x40023800

0800825c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	e0cc      	b.n	800840a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008270:	4b68      	ldr	r3, [pc, #416]	; (8008414 <HAL_RCC_ClockConfig+0x1b8>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0307 	and.w	r3, r3, #7
 8008278:	683a      	ldr	r2, [r7, #0]
 800827a:	429a      	cmp	r2, r3
 800827c:	d90c      	bls.n	8008298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800827e:	4b65      	ldr	r3, [pc, #404]	; (8008414 <HAL_RCC_ClockConfig+0x1b8>)
 8008280:	683a      	ldr	r2, [r7, #0]
 8008282:	b2d2      	uxtb	r2, r2
 8008284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008286:	4b63      	ldr	r3, [pc, #396]	; (8008414 <HAL_RCC_ClockConfig+0x1b8>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0307 	and.w	r3, r3, #7
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	429a      	cmp	r2, r3
 8008292:	d001      	beq.n	8008298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e0b8      	b.n	800840a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0302 	and.w	r3, r3, #2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d020      	beq.n	80082e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0304 	and.w	r3, r3, #4
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d005      	beq.n	80082bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082b0:	4b59      	ldr	r3, [pc, #356]	; (8008418 <HAL_RCC_ClockConfig+0x1bc>)
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	4a58      	ldr	r2, [pc, #352]	; (8008418 <HAL_RCC_ClockConfig+0x1bc>)
 80082b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0308 	and.w	r3, r3, #8
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d005      	beq.n	80082d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082c8:	4b53      	ldr	r3, [pc, #332]	; (8008418 <HAL_RCC_ClockConfig+0x1bc>)
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	4a52      	ldr	r2, [pc, #328]	; (8008418 <HAL_RCC_ClockConfig+0x1bc>)
 80082ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80082d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082d4:	4b50      	ldr	r3, [pc, #320]	; (8008418 <HAL_RCC_ClockConfig+0x1bc>)
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	494d      	ldr	r1, [pc, #308]	; (8008418 <HAL_RCC_ClockConfig+0x1bc>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0301 	and.w	r3, r3, #1
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d044      	beq.n	800837c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d107      	bne.n	800830a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082fa:	4b47      	ldr	r3, [pc, #284]	; (8008418 <HAL_RCC_ClockConfig+0x1bc>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d119      	bne.n	800833a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e07f      	b.n	800840a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	2b02      	cmp	r3, #2
 8008310:	d003      	beq.n	800831a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008316:	2b03      	cmp	r3, #3
 8008318:	d107      	bne.n	800832a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800831a:	4b3f      	ldr	r3, [pc, #252]	; (8008418 <HAL_RCC_ClockConfig+0x1bc>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d109      	bne.n	800833a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e06f      	b.n	800840a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800832a:	4b3b      	ldr	r3, [pc, #236]	; (8008418 <HAL_RCC_ClockConfig+0x1bc>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e067      	b.n	800840a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800833a:	4b37      	ldr	r3, [pc, #220]	; (8008418 <HAL_RCC_ClockConfig+0x1bc>)
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f023 0203 	bic.w	r2, r3, #3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	4934      	ldr	r1, [pc, #208]	; (8008418 <HAL_RCC_ClockConfig+0x1bc>)
 8008348:	4313      	orrs	r3, r2
 800834a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800834c:	f7fd f94c 	bl	80055e8 <HAL_GetTick>
 8008350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008352:	e00a      	b.n	800836a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008354:	f7fd f948 	bl	80055e8 <HAL_GetTick>
 8008358:	4602      	mov	r2, r0
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008362:	4293      	cmp	r3, r2
 8008364:	d901      	bls.n	800836a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e04f      	b.n	800840a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800836a:	4b2b      	ldr	r3, [pc, #172]	; (8008418 <HAL_RCC_ClockConfig+0x1bc>)
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f003 020c 	and.w	r2, r3, #12
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	429a      	cmp	r2, r3
 800837a:	d1eb      	bne.n	8008354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800837c:	4b25      	ldr	r3, [pc, #148]	; (8008414 <HAL_RCC_ClockConfig+0x1b8>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0307 	and.w	r3, r3, #7
 8008384:	683a      	ldr	r2, [r7, #0]
 8008386:	429a      	cmp	r2, r3
 8008388:	d20c      	bcs.n	80083a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800838a:	4b22      	ldr	r3, [pc, #136]	; (8008414 <HAL_RCC_ClockConfig+0x1b8>)
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	b2d2      	uxtb	r2, r2
 8008390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008392:	4b20      	ldr	r3, [pc, #128]	; (8008414 <HAL_RCC_ClockConfig+0x1b8>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	429a      	cmp	r2, r3
 800839e:	d001      	beq.n	80083a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e032      	b.n	800840a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0304 	and.w	r3, r3, #4
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d008      	beq.n	80083c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083b0:	4b19      	ldr	r3, [pc, #100]	; (8008418 <HAL_RCC_ClockConfig+0x1bc>)
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	4916      	ldr	r1, [pc, #88]	; (8008418 <HAL_RCC_ClockConfig+0x1bc>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0308 	and.w	r3, r3, #8
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d009      	beq.n	80083e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083ce:	4b12      	ldr	r3, [pc, #72]	; (8008418 <HAL_RCC_ClockConfig+0x1bc>)
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	00db      	lsls	r3, r3, #3
 80083dc:	490e      	ldr	r1, [pc, #56]	; (8008418 <HAL_RCC_ClockConfig+0x1bc>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80083e2:	f000 f821 	bl	8008428 <HAL_RCC_GetSysClockFreq>
 80083e6:	4602      	mov	r2, r0
 80083e8:	4b0b      	ldr	r3, [pc, #44]	; (8008418 <HAL_RCC_ClockConfig+0x1bc>)
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	091b      	lsrs	r3, r3, #4
 80083ee:	f003 030f 	and.w	r3, r3, #15
 80083f2:	490a      	ldr	r1, [pc, #40]	; (800841c <HAL_RCC_ClockConfig+0x1c0>)
 80083f4:	5ccb      	ldrb	r3, [r1, r3]
 80083f6:	fa22 f303 	lsr.w	r3, r2, r3
 80083fa:	4a09      	ldr	r2, [pc, #36]	; (8008420 <HAL_RCC_ClockConfig+0x1c4>)
 80083fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80083fe:	4b09      	ldr	r3, [pc, #36]	; (8008424 <HAL_RCC_ClockConfig+0x1c8>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4618      	mov	r0, r3
 8008404:	f7fb ff84 	bl	8004310 <HAL_InitTick>

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	40023c00 	.word	0x40023c00
 8008418:	40023800 	.word	0x40023800
 800841c:	08010adc 	.word	0x08010adc
 8008420:	2000000c 	.word	0x2000000c
 8008424:	20000010 	.word	0x20000010

08008428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800842c:	b094      	sub	sp, #80	; 0x50
 800842e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008430:	2300      	movs	r3, #0
 8008432:	647b      	str	r3, [r7, #68]	; 0x44
 8008434:	2300      	movs	r3, #0
 8008436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008438:	2300      	movs	r3, #0
 800843a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800843c:	2300      	movs	r3, #0
 800843e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008440:	4b79      	ldr	r3, [pc, #484]	; (8008628 <HAL_RCC_GetSysClockFreq+0x200>)
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f003 030c 	and.w	r3, r3, #12
 8008448:	2b08      	cmp	r3, #8
 800844a:	d00d      	beq.n	8008468 <HAL_RCC_GetSysClockFreq+0x40>
 800844c:	2b08      	cmp	r3, #8
 800844e:	f200 80e1 	bhi.w	8008614 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008452:	2b00      	cmp	r3, #0
 8008454:	d002      	beq.n	800845c <HAL_RCC_GetSysClockFreq+0x34>
 8008456:	2b04      	cmp	r3, #4
 8008458:	d003      	beq.n	8008462 <HAL_RCC_GetSysClockFreq+0x3a>
 800845a:	e0db      	b.n	8008614 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800845c:	4b73      	ldr	r3, [pc, #460]	; (800862c <HAL_RCC_GetSysClockFreq+0x204>)
 800845e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008460:	e0db      	b.n	800861a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008462:	4b73      	ldr	r3, [pc, #460]	; (8008630 <HAL_RCC_GetSysClockFreq+0x208>)
 8008464:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008466:	e0d8      	b.n	800861a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008468:	4b6f      	ldr	r3, [pc, #444]	; (8008628 <HAL_RCC_GetSysClockFreq+0x200>)
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008470:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008472:	4b6d      	ldr	r3, [pc, #436]	; (8008628 <HAL_RCC_GetSysClockFreq+0x200>)
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d063      	beq.n	8008546 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800847e:	4b6a      	ldr	r3, [pc, #424]	; (8008628 <HAL_RCC_GetSysClockFreq+0x200>)
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	099b      	lsrs	r3, r3, #6
 8008484:	2200      	movs	r2, #0
 8008486:	63bb      	str	r3, [r7, #56]	; 0x38
 8008488:	63fa      	str	r2, [r7, #60]	; 0x3c
 800848a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008490:	633b      	str	r3, [r7, #48]	; 0x30
 8008492:	2300      	movs	r3, #0
 8008494:	637b      	str	r3, [r7, #52]	; 0x34
 8008496:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800849a:	4622      	mov	r2, r4
 800849c:	462b      	mov	r3, r5
 800849e:	f04f 0000 	mov.w	r0, #0
 80084a2:	f04f 0100 	mov.w	r1, #0
 80084a6:	0159      	lsls	r1, r3, #5
 80084a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084ac:	0150      	lsls	r0, r2, #5
 80084ae:	4602      	mov	r2, r0
 80084b0:	460b      	mov	r3, r1
 80084b2:	4621      	mov	r1, r4
 80084b4:	1a51      	subs	r1, r2, r1
 80084b6:	6139      	str	r1, [r7, #16]
 80084b8:	4629      	mov	r1, r5
 80084ba:	eb63 0301 	sbc.w	r3, r3, r1
 80084be:	617b      	str	r3, [r7, #20]
 80084c0:	f04f 0200 	mov.w	r2, #0
 80084c4:	f04f 0300 	mov.w	r3, #0
 80084c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80084cc:	4659      	mov	r1, fp
 80084ce:	018b      	lsls	r3, r1, #6
 80084d0:	4651      	mov	r1, sl
 80084d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80084d6:	4651      	mov	r1, sl
 80084d8:	018a      	lsls	r2, r1, #6
 80084da:	4651      	mov	r1, sl
 80084dc:	ebb2 0801 	subs.w	r8, r2, r1
 80084e0:	4659      	mov	r1, fp
 80084e2:	eb63 0901 	sbc.w	r9, r3, r1
 80084e6:	f04f 0200 	mov.w	r2, #0
 80084ea:	f04f 0300 	mov.w	r3, #0
 80084ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80084f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80084f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80084fa:	4690      	mov	r8, r2
 80084fc:	4699      	mov	r9, r3
 80084fe:	4623      	mov	r3, r4
 8008500:	eb18 0303 	adds.w	r3, r8, r3
 8008504:	60bb      	str	r3, [r7, #8]
 8008506:	462b      	mov	r3, r5
 8008508:	eb49 0303 	adc.w	r3, r9, r3
 800850c:	60fb      	str	r3, [r7, #12]
 800850e:	f04f 0200 	mov.w	r2, #0
 8008512:	f04f 0300 	mov.w	r3, #0
 8008516:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800851a:	4629      	mov	r1, r5
 800851c:	024b      	lsls	r3, r1, #9
 800851e:	4621      	mov	r1, r4
 8008520:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008524:	4621      	mov	r1, r4
 8008526:	024a      	lsls	r2, r1, #9
 8008528:	4610      	mov	r0, r2
 800852a:	4619      	mov	r1, r3
 800852c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800852e:	2200      	movs	r2, #0
 8008530:	62bb      	str	r3, [r7, #40]	; 0x28
 8008532:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008534:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008538:	f7f8 fbd6 	bl	8000ce8 <__aeabi_uldivmod>
 800853c:	4602      	mov	r2, r0
 800853e:	460b      	mov	r3, r1
 8008540:	4613      	mov	r3, r2
 8008542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008544:	e058      	b.n	80085f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008546:	4b38      	ldr	r3, [pc, #224]	; (8008628 <HAL_RCC_GetSysClockFreq+0x200>)
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	099b      	lsrs	r3, r3, #6
 800854c:	2200      	movs	r2, #0
 800854e:	4618      	mov	r0, r3
 8008550:	4611      	mov	r1, r2
 8008552:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008556:	623b      	str	r3, [r7, #32]
 8008558:	2300      	movs	r3, #0
 800855a:	627b      	str	r3, [r7, #36]	; 0x24
 800855c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008560:	4642      	mov	r2, r8
 8008562:	464b      	mov	r3, r9
 8008564:	f04f 0000 	mov.w	r0, #0
 8008568:	f04f 0100 	mov.w	r1, #0
 800856c:	0159      	lsls	r1, r3, #5
 800856e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008572:	0150      	lsls	r0, r2, #5
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	4641      	mov	r1, r8
 800857a:	ebb2 0a01 	subs.w	sl, r2, r1
 800857e:	4649      	mov	r1, r9
 8008580:	eb63 0b01 	sbc.w	fp, r3, r1
 8008584:	f04f 0200 	mov.w	r2, #0
 8008588:	f04f 0300 	mov.w	r3, #0
 800858c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008590:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008594:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008598:	ebb2 040a 	subs.w	r4, r2, sl
 800859c:	eb63 050b 	sbc.w	r5, r3, fp
 80085a0:	f04f 0200 	mov.w	r2, #0
 80085a4:	f04f 0300 	mov.w	r3, #0
 80085a8:	00eb      	lsls	r3, r5, #3
 80085aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085ae:	00e2      	lsls	r2, r4, #3
 80085b0:	4614      	mov	r4, r2
 80085b2:	461d      	mov	r5, r3
 80085b4:	4643      	mov	r3, r8
 80085b6:	18e3      	adds	r3, r4, r3
 80085b8:	603b      	str	r3, [r7, #0]
 80085ba:	464b      	mov	r3, r9
 80085bc:	eb45 0303 	adc.w	r3, r5, r3
 80085c0:	607b      	str	r3, [r7, #4]
 80085c2:	f04f 0200 	mov.w	r2, #0
 80085c6:	f04f 0300 	mov.w	r3, #0
 80085ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80085ce:	4629      	mov	r1, r5
 80085d0:	028b      	lsls	r3, r1, #10
 80085d2:	4621      	mov	r1, r4
 80085d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80085d8:	4621      	mov	r1, r4
 80085da:	028a      	lsls	r2, r1, #10
 80085dc:	4610      	mov	r0, r2
 80085de:	4619      	mov	r1, r3
 80085e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085e2:	2200      	movs	r2, #0
 80085e4:	61bb      	str	r3, [r7, #24]
 80085e6:	61fa      	str	r2, [r7, #28]
 80085e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085ec:	f7f8 fb7c 	bl	8000ce8 <__aeabi_uldivmod>
 80085f0:	4602      	mov	r2, r0
 80085f2:	460b      	mov	r3, r1
 80085f4:	4613      	mov	r3, r2
 80085f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80085f8:	4b0b      	ldr	r3, [pc, #44]	; (8008628 <HAL_RCC_GetSysClockFreq+0x200>)
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	0c1b      	lsrs	r3, r3, #16
 80085fe:	f003 0303 	and.w	r3, r3, #3
 8008602:	3301      	adds	r3, #1
 8008604:	005b      	lsls	r3, r3, #1
 8008606:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008608:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800860a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800860c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008610:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008612:	e002      	b.n	800861a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008614:	4b05      	ldr	r3, [pc, #20]	; (800862c <HAL_RCC_GetSysClockFreq+0x204>)
 8008616:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800861a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800861c:	4618      	mov	r0, r3
 800861e:	3750      	adds	r7, #80	; 0x50
 8008620:	46bd      	mov	sp, r7
 8008622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008626:	bf00      	nop
 8008628:	40023800 	.word	0x40023800
 800862c:	00f42400 	.word	0x00f42400
 8008630:	007a1200 	.word	0x007a1200

08008634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008634:	b480      	push	{r7}
 8008636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008638:	4b03      	ldr	r3, [pc, #12]	; (8008648 <HAL_RCC_GetHCLKFreq+0x14>)
 800863a:	681b      	ldr	r3, [r3, #0]
}
 800863c:	4618      	mov	r0, r3
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	2000000c 	.word	0x2000000c

0800864c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008650:	f7ff fff0 	bl	8008634 <HAL_RCC_GetHCLKFreq>
 8008654:	4602      	mov	r2, r0
 8008656:	4b05      	ldr	r3, [pc, #20]	; (800866c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	0a9b      	lsrs	r3, r3, #10
 800865c:	f003 0307 	and.w	r3, r3, #7
 8008660:	4903      	ldr	r1, [pc, #12]	; (8008670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008662:	5ccb      	ldrb	r3, [r1, r3]
 8008664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008668:	4618      	mov	r0, r3
 800866a:	bd80      	pop	{r7, pc}
 800866c:	40023800 	.word	0x40023800
 8008670:	08010aec 	.word	0x08010aec

08008674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008678:	f7ff ffdc 	bl	8008634 <HAL_RCC_GetHCLKFreq>
 800867c:	4602      	mov	r2, r0
 800867e:	4b05      	ldr	r3, [pc, #20]	; (8008694 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	0b5b      	lsrs	r3, r3, #13
 8008684:	f003 0307 	and.w	r3, r3, #7
 8008688:	4903      	ldr	r1, [pc, #12]	; (8008698 <HAL_RCC_GetPCLK2Freq+0x24>)
 800868a:	5ccb      	ldrb	r3, [r1, r3]
 800868c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008690:	4618      	mov	r0, r3
 8008692:	bd80      	pop	{r7, pc}
 8008694:	40023800 	.word	0x40023800
 8008698:	08010aec 	.word	0x08010aec

0800869c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	220f      	movs	r2, #15
 80086aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80086ac:	4b12      	ldr	r3, [pc, #72]	; (80086f8 <HAL_RCC_GetClockConfig+0x5c>)
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f003 0203 	and.w	r2, r3, #3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80086b8:	4b0f      	ldr	r3, [pc, #60]	; (80086f8 <HAL_RCC_GetClockConfig+0x5c>)
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80086c4:	4b0c      	ldr	r3, [pc, #48]	; (80086f8 <HAL_RCC_GetClockConfig+0x5c>)
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80086d0:	4b09      	ldr	r3, [pc, #36]	; (80086f8 <HAL_RCC_GetClockConfig+0x5c>)
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	08db      	lsrs	r3, r3, #3
 80086d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80086de:	4b07      	ldr	r3, [pc, #28]	; (80086fc <HAL_RCC_GetClockConfig+0x60>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0207 	and.w	r2, r3, #7
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	601a      	str	r2, [r3, #0]
}
 80086ea:	bf00      	nop
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	40023800 	.word	0x40023800
 80086fc:	40023c00 	.word	0x40023c00

08008700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d101      	bne.n	8008712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e041      	b.n	8008796 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d106      	bne.n	800872c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7fc fbe8 	bl	8004efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2202      	movs	r2, #2
 8008730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	3304      	adds	r3, #4
 800873c:	4619      	mov	r1, r3
 800873e:	4610      	mov	r0, r2
 8008740:	f001 f858 	bl	80097f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
	...

080087a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d001      	beq.n	80087b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e046      	b.n	8008846 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2202      	movs	r2, #2
 80087bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a23      	ldr	r2, [pc, #140]	; (8008854 <HAL_TIM_Base_Start+0xb4>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d022      	beq.n	8008810 <HAL_TIM_Base_Start+0x70>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d2:	d01d      	beq.n	8008810 <HAL_TIM_Base_Start+0x70>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a1f      	ldr	r2, [pc, #124]	; (8008858 <HAL_TIM_Base_Start+0xb8>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d018      	beq.n	8008810 <HAL_TIM_Base_Start+0x70>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a1e      	ldr	r2, [pc, #120]	; (800885c <HAL_TIM_Base_Start+0xbc>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d013      	beq.n	8008810 <HAL_TIM_Base_Start+0x70>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a1c      	ldr	r2, [pc, #112]	; (8008860 <HAL_TIM_Base_Start+0xc0>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d00e      	beq.n	8008810 <HAL_TIM_Base_Start+0x70>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a1b      	ldr	r2, [pc, #108]	; (8008864 <HAL_TIM_Base_Start+0xc4>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d009      	beq.n	8008810 <HAL_TIM_Base_Start+0x70>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a19      	ldr	r2, [pc, #100]	; (8008868 <HAL_TIM_Base_Start+0xc8>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d004      	beq.n	8008810 <HAL_TIM_Base_Start+0x70>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a18      	ldr	r2, [pc, #96]	; (800886c <HAL_TIM_Base_Start+0xcc>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d111      	bne.n	8008834 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f003 0307 	and.w	r3, r3, #7
 800881a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2b06      	cmp	r3, #6
 8008820:	d010      	beq.n	8008844 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f042 0201 	orr.w	r2, r2, #1
 8008830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008832:	e007      	b.n	8008844 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f042 0201 	orr.w	r2, r2, #1
 8008842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	40010000 	.word	0x40010000
 8008858:	40000400 	.word	0x40000400
 800885c:	40000800 	.word	0x40000800
 8008860:	40000c00 	.word	0x40000c00
 8008864:	40010400 	.word	0x40010400
 8008868:	40014000 	.word	0x40014000
 800886c:	40001800 	.word	0x40001800

08008870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b01      	cmp	r3, #1
 8008882:	d001      	beq.n	8008888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e04e      	b.n	8008926 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2202      	movs	r2, #2
 800888c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f042 0201 	orr.w	r2, r2, #1
 800889e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a23      	ldr	r2, [pc, #140]	; (8008934 <HAL_TIM_Base_Start_IT+0xc4>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d022      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x80>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088b2:	d01d      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x80>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a1f      	ldr	r2, [pc, #124]	; (8008938 <HAL_TIM_Base_Start_IT+0xc8>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d018      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x80>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a1e      	ldr	r2, [pc, #120]	; (800893c <HAL_TIM_Base_Start_IT+0xcc>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d013      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x80>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a1c      	ldr	r2, [pc, #112]	; (8008940 <HAL_TIM_Base_Start_IT+0xd0>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d00e      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x80>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a1b      	ldr	r2, [pc, #108]	; (8008944 <HAL_TIM_Base_Start_IT+0xd4>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d009      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x80>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a19      	ldr	r2, [pc, #100]	; (8008948 <HAL_TIM_Base_Start_IT+0xd8>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d004      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x80>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a18      	ldr	r2, [pc, #96]	; (800894c <HAL_TIM_Base_Start_IT+0xdc>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d111      	bne.n	8008914 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f003 0307 	and.w	r3, r3, #7
 80088fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2b06      	cmp	r3, #6
 8008900:	d010      	beq.n	8008924 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f042 0201 	orr.w	r2, r2, #1
 8008910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008912:	e007      	b.n	8008924 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f042 0201 	orr.w	r2, r2, #1
 8008922:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	40010000 	.word	0x40010000
 8008938:	40000400 	.word	0x40000400
 800893c:	40000800 	.word	0x40000800
 8008940:	40000c00 	.word	0x40000c00
 8008944:	40010400 	.word	0x40010400
 8008948:	40014000 	.word	0x40014000
 800894c:	40001800 	.word	0x40001800

08008950 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d101      	bne.n	8008962 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e041      	b.n	80089e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	d106      	bne.n	800897c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f839 	bl	80089ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2202      	movs	r2, #2
 8008980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	3304      	adds	r3, #4
 800898c:	4619      	mov	r1, r3
 800898e:	4610      	mov	r0, r2
 8008990:	f000 ff30 	bl	80097f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b083      	sub	sp, #12
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80089f6:	bf00      	nop
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
	...

08008a04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d109      	bne.n	8008a28 <HAL_TIM_PWM_Start+0x24>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	bf14      	ite	ne
 8008a20:	2301      	movne	r3, #1
 8008a22:	2300      	moveq	r3, #0
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	e022      	b.n	8008a6e <HAL_TIM_PWM_Start+0x6a>
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	2b04      	cmp	r3, #4
 8008a2c:	d109      	bne.n	8008a42 <HAL_TIM_PWM_Start+0x3e>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	bf14      	ite	ne
 8008a3a:	2301      	movne	r3, #1
 8008a3c:	2300      	moveq	r3, #0
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	e015      	b.n	8008a6e <HAL_TIM_PWM_Start+0x6a>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d109      	bne.n	8008a5c <HAL_TIM_PWM_Start+0x58>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	bf14      	ite	ne
 8008a54:	2301      	movne	r3, #1
 8008a56:	2300      	moveq	r3, #0
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	e008      	b.n	8008a6e <HAL_TIM_PWM_Start+0x6a>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	bf14      	ite	ne
 8008a68:	2301      	movne	r3, #1
 8008a6a:	2300      	moveq	r3, #0
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e07c      	b.n	8008b70 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d104      	bne.n	8008a86 <HAL_TIM_PWM_Start+0x82>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a84:	e013      	b.n	8008aae <HAL_TIM_PWM_Start+0xaa>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b04      	cmp	r3, #4
 8008a8a:	d104      	bne.n	8008a96 <HAL_TIM_PWM_Start+0x92>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a94:	e00b      	b.n	8008aae <HAL_TIM_PWM_Start+0xaa>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b08      	cmp	r3, #8
 8008a9a:	d104      	bne.n	8008aa6 <HAL_TIM_PWM_Start+0xa2>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008aa4:	e003      	b.n	8008aae <HAL_TIM_PWM_Start+0xaa>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f001 fb42 	bl	800a140 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a2d      	ldr	r2, [pc, #180]	; (8008b78 <HAL_TIM_PWM_Start+0x174>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d004      	beq.n	8008ad0 <HAL_TIM_PWM_Start+0xcc>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a2c      	ldr	r2, [pc, #176]	; (8008b7c <HAL_TIM_PWM_Start+0x178>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d101      	bne.n	8008ad4 <HAL_TIM_PWM_Start+0xd0>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e000      	b.n	8008ad6 <HAL_TIM_PWM_Start+0xd2>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d007      	beq.n	8008aea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ae8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a22      	ldr	r2, [pc, #136]	; (8008b78 <HAL_TIM_PWM_Start+0x174>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d022      	beq.n	8008b3a <HAL_TIM_PWM_Start+0x136>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008afc:	d01d      	beq.n	8008b3a <HAL_TIM_PWM_Start+0x136>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a1f      	ldr	r2, [pc, #124]	; (8008b80 <HAL_TIM_PWM_Start+0x17c>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d018      	beq.n	8008b3a <HAL_TIM_PWM_Start+0x136>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a1d      	ldr	r2, [pc, #116]	; (8008b84 <HAL_TIM_PWM_Start+0x180>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d013      	beq.n	8008b3a <HAL_TIM_PWM_Start+0x136>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a1c      	ldr	r2, [pc, #112]	; (8008b88 <HAL_TIM_PWM_Start+0x184>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d00e      	beq.n	8008b3a <HAL_TIM_PWM_Start+0x136>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a16      	ldr	r2, [pc, #88]	; (8008b7c <HAL_TIM_PWM_Start+0x178>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d009      	beq.n	8008b3a <HAL_TIM_PWM_Start+0x136>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a18      	ldr	r2, [pc, #96]	; (8008b8c <HAL_TIM_PWM_Start+0x188>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d004      	beq.n	8008b3a <HAL_TIM_PWM_Start+0x136>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a16      	ldr	r2, [pc, #88]	; (8008b90 <HAL_TIM_PWM_Start+0x18c>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d111      	bne.n	8008b5e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f003 0307 	and.w	r3, r3, #7
 8008b44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2b06      	cmp	r3, #6
 8008b4a:	d010      	beq.n	8008b6e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f042 0201 	orr.w	r2, r2, #1
 8008b5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b5c:	e007      	b.n	8008b6e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f042 0201 	orr.w	r2, r2, #1
 8008b6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	40010000 	.word	0x40010000
 8008b7c:	40010400 	.word	0x40010400
 8008b80:	40000400 	.word	0x40000400
 8008b84:	40000800 	.word	0x40000800
 8008b88:	40000c00 	.word	0x40000c00
 8008b8c:	40014000 	.word	0x40014000
 8008b90:	40001800 	.word	0x40001800

08008b94 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d101      	bne.n	8008ba6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e041      	b.n	8008c2a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d106      	bne.n	8008bc0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f839 	bl	8008c32 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	3304      	adds	r3, #4
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	4610      	mov	r0, r2
 8008bd4:	f000 fe0e 	bl	80097f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008c3a:	bf00      	nop
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
	...

08008c48 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d104      	bne.n	8008c62 <HAL_TIM_IC_Start+0x1a>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	e013      	b.n	8008c8a <HAL_TIM_IC_Start+0x42>
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b04      	cmp	r3, #4
 8008c66:	d104      	bne.n	8008c72 <HAL_TIM_IC_Start+0x2a>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	e00b      	b.n	8008c8a <HAL_TIM_IC_Start+0x42>
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b08      	cmp	r3, #8
 8008c76:	d104      	bne.n	8008c82 <HAL_TIM_IC_Start+0x3a>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	e003      	b.n	8008c8a <HAL_TIM_IC_Start+0x42>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d104      	bne.n	8008c9c <HAL_TIM_IC_Start+0x54>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	e013      	b.n	8008cc4 <HAL_TIM_IC_Start+0x7c>
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	2b04      	cmp	r3, #4
 8008ca0:	d104      	bne.n	8008cac <HAL_TIM_IC_Start+0x64>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	e00b      	b.n	8008cc4 <HAL_TIM_IC_Start+0x7c>
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	2b08      	cmp	r3, #8
 8008cb0:	d104      	bne.n	8008cbc <HAL_TIM_IC_Start+0x74>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	e003      	b.n	8008cc4 <HAL_TIM_IC_Start+0x7c>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d102      	bne.n	8008cd2 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ccc:	7bbb      	ldrb	r3, [r7, #14]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d001      	beq.n	8008cd6 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e081      	b.n	8008dda <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d104      	bne.n	8008ce6 <HAL_TIM_IC_Start+0x9e>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ce4:	e013      	b.n	8008d0e <HAL_TIM_IC_Start+0xc6>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	d104      	bne.n	8008cf6 <HAL_TIM_IC_Start+0xae>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cf4:	e00b      	b.n	8008d0e <HAL_TIM_IC_Start+0xc6>
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b08      	cmp	r3, #8
 8008cfa:	d104      	bne.n	8008d06 <HAL_TIM_IC_Start+0xbe>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2202      	movs	r2, #2
 8008d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d04:	e003      	b.n	8008d0e <HAL_TIM_IC_Start+0xc6>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2202      	movs	r2, #2
 8008d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d104      	bne.n	8008d1e <HAL_TIM_IC_Start+0xd6>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2202      	movs	r2, #2
 8008d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d1c:	e013      	b.n	8008d46 <HAL_TIM_IC_Start+0xfe>
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2b04      	cmp	r3, #4
 8008d22:	d104      	bne.n	8008d2e <HAL_TIM_IC_Start+0xe6>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2202      	movs	r2, #2
 8008d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d2c:	e00b      	b.n	8008d46 <HAL_TIM_IC_Start+0xfe>
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	2b08      	cmp	r3, #8
 8008d32:	d104      	bne.n	8008d3e <HAL_TIM_IC_Start+0xf6>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2202      	movs	r2, #2
 8008d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d3c:	e003      	b.n	8008d46 <HAL_TIM_IC_Start+0xfe>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2202      	movs	r2, #2
 8008d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	6839      	ldr	r1, [r7, #0]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f001 f9f6 	bl	800a140 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a22      	ldr	r2, [pc, #136]	; (8008de4 <HAL_TIM_IC_Start+0x19c>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d022      	beq.n	8008da4 <HAL_TIM_IC_Start+0x15c>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d66:	d01d      	beq.n	8008da4 <HAL_TIM_IC_Start+0x15c>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a1e      	ldr	r2, [pc, #120]	; (8008de8 <HAL_TIM_IC_Start+0x1a0>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d018      	beq.n	8008da4 <HAL_TIM_IC_Start+0x15c>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a1d      	ldr	r2, [pc, #116]	; (8008dec <HAL_TIM_IC_Start+0x1a4>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d013      	beq.n	8008da4 <HAL_TIM_IC_Start+0x15c>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a1b      	ldr	r2, [pc, #108]	; (8008df0 <HAL_TIM_IC_Start+0x1a8>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d00e      	beq.n	8008da4 <HAL_TIM_IC_Start+0x15c>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a1a      	ldr	r2, [pc, #104]	; (8008df4 <HAL_TIM_IC_Start+0x1ac>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d009      	beq.n	8008da4 <HAL_TIM_IC_Start+0x15c>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a18      	ldr	r2, [pc, #96]	; (8008df8 <HAL_TIM_IC_Start+0x1b0>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d004      	beq.n	8008da4 <HAL_TIM_IC_Start+0x15c>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a17      	ldr	r2, [pc, #92]	; (8008dfc <HAL_TIM_IC_Start+0x1b4>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d111      	bne.n	8008dc8 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f003 0307 	and.w	r3, r3, #7
 8008dae:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b06      	cmp	r3, #6
 8008db4:	d010      	beq.n	8008dd8 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f042 0201 	orr.w	r2, r2, #1
 8008dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dc6:	e007      	b.n	8008dd8 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f042 0201 	orr.w	r2, r2, #1
 8008dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	40010000 	.word	0x40010000
 8008de8:	40000400 	.word	0x40000400
 8008dec:	40000800 	.word	0x40000800
 8008df0:	40000c00 	.word	0x40000c00
 8008df4:	40010400 	.word	0x40010400
 8008df8:	40014000 	.word	0x40014000
 8008dfc:	40001800 	.word	0x40001800

08008e00 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d104      	bne.n	8008e1e <HAL_TIM_IC_Start_IT+0x1e>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	e013      	b.n	8008e46 <HAL_TIM_IC_Start_IT+0x46>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b04      	cmp	r3, #4
 8008e22:	d104      	bne.n	8008e2e <HAL_TIM_IC_Start_IT+0x2e>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	e00b      	b.n	8008e46 <HAL_TIM_IC_Start_IT+0x46>
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	2b08      	cmp	r3, #8
 8008e32:	d104      	bne.n	8008e3e <HAL_TIM_IC_Start_IT+0x3e>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	e003      	b.n	8008e46 <HAL_TIM_IC_Start_IT+0x46>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d104      	bne.n	8008e58 <HAL_TIM_IC_Start_IT+0x58>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	e013      	b.n	8008e80 <HAL_TIM_IC_Start_IT+0x80>
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	2b04      	cmp	r3, #4
 8008e5c:	d104      	bne.n	8008e68 <HAL_TIM_IC_Start_IT+0x68>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	e00b      	b.n	8008e80 <HAL_TIM_IC_Start_IT+0x80>
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	2b08      	cmp	r3, #8
 8008e6c:	d104      	bne.n	8008e78 <HAL_TIM_IC_Start_IT+0x78>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	e003      	b.n	8008e80 <HAL_TIM_IC_Start_IT+0x80>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d102      	bne.n	8008e8e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e88:	7b7b      	ldrb	r3, [r7, #13]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d001      	beq.n	8008e92 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e0cc      	b.n	800902c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d104      	bne.n	8008ea2 <HAL_TIM_IC_Start_IT+0xa2>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ea0:	e013      	b.n	8008eca <HAL_TIM_IC_Start_IT+0xca>
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	2b04      	cmp	r3, #4
 8008ea6:	d104      	bne.n	8008eb2 <HAL_TIM_IC_Start_IT+0xb2>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2202      	movs	r2, #2
 8008eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008eb0:	e00b      	b.n	8008eca <HAL_TIM_IC_Start_IT+0xca>
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b08      	cmp	r3, #8
 8008eb6:	d104      	bne.n	8008ec2 <HAL_TIM_IC_Start_IT+0xc2>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2202      	movs	r2, #2
 8008ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ec0:	e003      	b.n	8008eca <HAL_TIM_IC_Start_IT+0xca>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d104      	bne.n	8008eda <HAL_TIM_IC_Start_IT+0xda>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ed8:	e013      	b.n	8008f02 <HAL_TIM_IC_Start_IT+0x102>
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b04      	cmp	r3, #4
 8008ede:	d104      	bne.n	8008eea <HAL_TIM_IC_Start_IT+0xea>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ee8:	e00b      	b.n	8008f02 <HAL_TIM_IC_Start_IT+0x102>
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2b08      	cmp	r3, #8
 8008eee:	d104      	bne.n	8008efa <HAL_TIM_IC_Start_IT+0xfa>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2202      	movs	r2, #2
 8008ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ef8:	e003      	b.n	8008f02 <HAL_TIM_IC_Start_IT+0x102>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2202      	movs	r2, #2
 8008efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	2b0c      	cmp	r3, #12
 8008f06:	d841      	bhi.n	8008f8c <HAL_TIM_IC_Start_IT+0x18c>
 8008f08:	a201      	add	r2, pc, #4	; (adr r2, 8008f10 <HAL_TIM_IC_Start_IT+0x110>)
 8008f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0e:	bf00      	nop
 8008f10:	08008f45 	.word	0x08008f45
 8008f14:	08008f8d 	.word	0x08008f8d
 8008f18:	08008f8d 	.word	0x08008f8d
 8008f1c:	08008f8d 	.word	0x08008f8d
 8008f20:	08008f57 	.word	0x08008f57
 8008f24:	08008f8d 	.word	0x08008f8d
 8008f28:	08008f8d 	.word	0x08008f8d
 8008f2c:	08008f8d 	.word	0x08008f8d
 8008f30:	08008f69 	.word	0x08008f69
 8008f34:	08008f8d 	.word	0x08008f8d
 8008f38:	08008f8d 	.word	0x08008f8d
 8008f3c:	08008f8d 	.word	0x08008f8d
 8008f40:	08008f7b 	.word	0x08008f7b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68da      	ldr	r2, [r3, #12]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f042 0202 	orr.w	r2, r2, #2
 8008f52:	60da      	str	r2, [r3, #12]
      break;
 8008f54:	e01d      	b.n	8008f92 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68da      	ldr	r2, [r3, #12]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f042 0204 	orr.w	r2, r2, #4
 8008f64:	60da      	str	r2, [r3, #12]
      break;
 8008f66:	e014      	b.n	8008f92 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68da      	ldr	r2, [r3, #12]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f042 0208 	orr.w	r2, r2, #8
 8008f76:	60da      	str	r2, [r3, #12]
      break;
 8008f78:	e00b      	b.n	8008f92 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68da      	ldr	r2, [r3, #12]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f042 0210 	orr.w	r2, r2, #16
 8008f88:	60da      	str	r2, [r3, #12]
      break;
 8008f8a:	e002      	b.n	8008f92 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f90:	bf00      	nop
  }

  if (status == HAL_OK)
 8008f92:	7bfb      	ldrb	r3, [r7, #15]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d148      	bne.n	800902a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f001 f8cd 	bl	800a140 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a22      	ldr	r2, [pc, #136]	; (8009034 <HAL_TIM_IC_Start_IT+0x234>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d022      	beq.n	8008ff6 <HAL_TIM_IC_Start_IT+0x1f6>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fb8:	d01d      	beq.n	8008ff6 <HAL_TIM_IC_Start_IT+0x1f6>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a1e      	ldr	r2, [pc, #120]	; (8009038 <HAL_TIM_IC_Start_IT+0x238>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d018      	beq.n	8008ff6 <HAL_TIM_IC_Start_IT+0x1f6>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a1c      	ldr	r2, [pc, #112]	; (800903c <HAL_TIM_IC_Start_IT+0x23c>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d013      	beq.n	8008ff6 <HAL_TIM_IC_Start_IT+0x1f6>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a1b      	ldr	r2, [pc, #108]	; (8009040 <HAL_TIM_IC_Start_IT+0x240>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d00e      	beq.n	8008ff6 <HAL_TIM_IC_Start_IT+0x1f6>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a19      	ldr	r2, [pc, #100]	; (8009044 <HAL_TIM_IC_Start_IT+0x244>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d009      	beq.n	8008ff6 <HAL_TIM_IC_Start_IT+0x1f6>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a18      	ldr	r2, [pc, #96]	; (8009048 <HAL_TIM_IC_Start_IT+0x248>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d004      	beq.n	8008ff6 <HAL_TIM_IC_Start_IT+0x1f6>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a16      	ldr	r2, [pc, #88]	; (800904c <HAL_TIM_IC_Start_IT+0x24c>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d111      	bne.n	800901a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f003 0307 	and.w	r3, r3, #7
 8009000:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2b06      	cmp	r3, #6
 8009006:	d010      	beq.n	800902a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0201 	orr.w	r2, r2, #1
 8009016:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009018:	e007      	b.n	800902a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f042 0201 	orr.w	r2, r2, #1
 8009028:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800902a:	7bfb      	ldrb	r3, [r7, #15]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	40010000 	.word	0x40010000
 8009038:	40000400 	.word	0x40000400
 800903c:	40000800 	.word	0x40000800
 8009040:	40000c00 	.word	0x40000c00
 8009044:	40010400 	.word	0x40010400
 8009048:	40014000 	.word	0x40014000
 800904c:	40001800 	.word	0x40001800

08009050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	f003 0302 	and.w	r3, r3, #2
 8009062:	2b02      	cmp	r3, #2
 8009064:	d122      	bne.n	80090ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	f003 0302 	and.w	r3, r3, #2
 8009070:	2b02      	cmp	r3, #2
 8009072:	d11b      	bne.n	80090ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f06f 0202 	mvn.w	r2, #2
 800907c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	f003 0303 	and.w	r3, r3, #3
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7fa fe2a 	bl	8003cec <HAL_TIM_IC_CaptureCallback>
 8009098:	e005      	b.n	80090a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fb8c 	bl	80097b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fb93 	bl	80097cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	f003 0304 	and.w	r3, r3, #4
 80090b6:	2b04      	cmp	r3, #4
 80090b8:	d122      	bne.n	8009100 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	f003 0304 	and.w	r3, r3, #4
 80090c4:	2b04      	cmp	r3, #4
 80090c6:	d11b      	bne.n	8009100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f06f 0204 	mvn.w	r2, #4
 80090d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2202      	movs	r2, #2
 80090d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d003      	beq.n	80090ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7fa fe00 	bl	8003cec <HAL_TIM_IC_CaptureCallback>
 80090ec:	e005      	b.n	80090fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fb62 	bl	80097b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fb69 	bl	80097cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	f003 0308 	and.w	r3, r3, #8
 800910a:	2b08      	cmp	r3, #8
 800910c:	d122      	bne.n	8009154 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	f003 0308 	and.w	r3, r3, #8
 8009118:	2b08      	cmp	r3, #8
 800911a:	d11b      	bne.n	8009154 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f06f 0208 	mvn.w	r2, #8
 8009124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2204      	movs	r2, #4
 800912a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	f003 0303 	and.w	r3, r3, #3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d003      	beq.n	8009142 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7fa fdd6 	bl	8003cec <HAL_TIM_IC_CaptureCallback>
 8009140:	e005      	b.n	800914e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fb38 	bl	80097b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 fb3f 	bl	80097cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	f003 0310 	and.w	r3, r3, #16
 800915e:	2b10      	cmp	r3, #16
 8009160:	d122      	bne.n	80091a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	f003 0310 	and.w	r3, r3, #16
 800916c:	2b10      	cmp	r3, #16
 800916e:	d11b      	bne.n	80091a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f06f 0210 	mvn.w	r2, #16
 8009178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2208      	movs	r2, #8
 800917e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800918a:	2b00      	cmp	r3, #0
 800918c:	d003      	beq.n	8009196 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7fa fdac 	bl	8003cec <HAL_TIM_IC_CaptureCallback>
 8009194:	e005      	b.n	80091a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fb0e 	bl	80097b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fb15 	bl	80097cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d10e      	bne.n	80091d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d107      	bne.n	80091d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f06f 0201 	mvn.w	r2, #1
 80091cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7fa fe64 	bl	8003e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091de:	2b80      	cmp	r3, #128	; 0x80
 80091e0:	d10e      	bne.n	8009200 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ec:	2b80      	cmp	r3, #128	; 0x80
 80091ee:	d107      	bne.n	8009200 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80091f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f001 f89e 	bl	800a33c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800920a:	2b40      	cmp	r3, #64	; 0x40
 800920c:	d10e      	bne.n	800922c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009218:	2b40      	cmp	r3, #64	; 0x40
 800921a:	d107      	bne.n	800922c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fada 	bl	80097e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	f003 0320 	and.w	r3, r3, #32
 8009236:	2b20      	cmp	r3, #32
 8009238:	d10e      	bne.n	8009258 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	f003 0320 	and.w	r3, r3, #32
 8009244:	2b20      	cmp	r3, #32
 8009246:	d107      	bne.n	8009258 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f06f 0220 	mvn.w	r2, #32
 8009250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f001 f868 	bl	800a328 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009258:	bf00      	nop
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009276:	2b01      	cmp	r3, #1
 8009278:	d101      	bne.n	800927e <HAL_TIM_IC_ConfigChannel+0x1e>
 800927a:	2302      	movs	r3, #2
 800927c:	e088      	b.n	8009390 <HAL_TIM_IC_ConfigChannel+0x130>
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d11b      	bne.n	80092c4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6818      	ldr	r0, [r3, #0]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	6819      	ldr	r1, [r3, #0]
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	685a      	ldr	r2, [r3, #4]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	f000 fd8c 	bl	8009db8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	699a      	ldr	r2, [r3, #24]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f022 020c 	bic.w	r2, r2, #12
 80092ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6999      	ldr	r1, [r3, #24]
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	689a      	ldr	r2, [r3, #8]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	430a      	orrs	r2, r1
 80092c0:	619a      	str	r2, [r3, #24]
 80092c2:	e060      	b.n	8009386 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b04      	cmp	r3, #4
 80092c8:	d11c      	bne.n	8009304 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6818      	ldr	r0, [r3, #0]
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	6819      	ldr	r1, [r3, #0]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	f000 fe10 	bl	8009efe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	699a      	ldr	r2, [r3, #24]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80092ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	6999      	ldr	r1, [r3, #24]
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	021a      	lsls	r2, r3, #8
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	430a      	orrs	r2, r1
 8009300:	619a      	str	r2, [r3, #24]
 8009302:	e040      	b.n	8009386 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b08      	cmp	r3, #8
 8009308:	d11b      	bne.n	8009342 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6818      	ldr	r0, [r3, #0]
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	6819      	ldr	r1, [r3, #0]
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	685a      	ldr	r2, [r3, #4]
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	f000 fe5d 	bl	8009fd8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	69da      	ldr	r2, [r3, #28]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f022 020c 	bic.w	r2, r2, #12
 800932c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	69d9      	ldr	r1, [r3, #28]
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	689a      	ldr	r2, [r3, #8]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	61da      	str	r2, [r3, #28]
 8009340:	e021      	b.n	8009386 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2b0c      	cmp	r3, #12
 8009346:	d11c      	bne.n	8009382 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6818      	ldr	r0, [r3, #0]
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	6819      	ldr	r1, [r3, #0]
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	f000 fe7a 	bl	800a050 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	69da      	ldr	r2, [r3, #28]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800936a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	69d9      	ldr	r1, [r3, #28]
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	021a      	lsls	r2, r3, #8
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	430a      	orrs	r2, r1
 800937e:	61da      	str	r2, [r3, #28]
 8009380:	e001      	b.n	8009386 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800938e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d101      	bne.n	80093b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80093b2:	2302      	movs	r3, #2
 80093b4:	e0ae      	b.n	8009514 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2b0c      	cmp	r3, #12
 80093c2:	f200 809f 	bhi.w	8009504 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80093c6:	a201      	add	r2, pc, #4	; (adr r2, 80093cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80093c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093cc:	08009401 	.word	0x08009401
 80093d0:	08009505 	.word	0x08009505
 80093d4:	08009505 	.word	0x08009505
 80093d8:	08009505 	.word	0x08009505
 80093dc:	08009441 	.word	0x08009441
 80093e0:	08009505 	.word	0x08009505
 80093e4:	08009505 	.word	0x08009505
 80093e8:	08009505 	.word	0x08009505
 80093ec:	08009483 	.word	0x08009483
 80093f0:	08009505 	.word	0x08009505
 80093f4:	08009505 	.word	0x08009505
 80093f8:	08009505 	.word	0x08009505
 80093fc:	080094c3 	.word	0x080094c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68b9      	ldr	r1, [r7, #8]
 8009406:	4618      	mov	r0, r3
 8009408:	f000 fa94 	bl	8009934 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	699a      	ldr	r2, [r3, #24]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f042 0208 	orr.w	r2, r2, #8
 800941a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	699a      	ldr	r2, [r3, #24]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0204 	bic.w	r2, r2, #4
 800942a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6999      	ldr	r1, [r3, #24]
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	691a      	ldr	r2, [r3, #16]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	619a      	str	r2, [r3, #24]
      break;
 800943e:	e064      	b.n	800950a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68b9      	ldr	r1, [r7, #8]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 fae4 	bl	8009a14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	699a      	ldr	r2, [r3, #24]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800945a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	699a      	ldr	r2, [r3, #24]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800946a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6999      	ldr	r1, [r3, #24]
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	021a      	lsls	r2, r3, #8
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	430a      	orrs	r2, r1
 800947e:	619a      	str	r2, [r3, #24]
      break;
 8009480:	e043      	b.n	800950a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68b9      	ldr	r1, [r7, #8]
 8009488:	4618      	mov	r0, r3
 800948a:	f000 fb39 	bl	8009b00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	69da      	ldr	r2, [r3, #28]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f042 0208 	orr.w	r2, r2, #8
 800949c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	69da      	ldr	r2, [r3, #28]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f022 0204 	bic.w	r2, r2, #4
 80094ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	69d9      	ldr	r1, [r3, #28]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	691a      	ldr	r2, [r3, #16]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	430a      	orrs	r2, r1
 80094be:	61da      	str	r2, [r3, #28]
      break;
 80094c0:	e023      	b.n	800950a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68b9      	ldr	r1, [r7, #8]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 fb8d 	bl	8009be8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	69da      	ldr	r2, [r3, #28]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	69da      	ldr	r2, [r3, #28]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	69d9      	ldr	r1, [r3, #28]
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	021a      	lsls	r2, r3, #8
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	430a      	orrs	r2, r1
 8009500:	61da      	str	r2, [r3, #28]
      break;
 8009502:	e002      	b.n	800950a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	75fb      	strb	r3, [r7, #23]
      break;
 8009508:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009512:	7dfb      	ldrb	r3, [r7, #23]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3718      	adds	r7, #24
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009530:	2b01      	cmp	r3, #1
 8009532:	d101      	bne.n	8009538 <HAL_TIM_ConfigClockSource+0x1c>
 8009534:	2302      	movs	r3, #2
 8009536:	e0b4      	b.n	80096a2 <HAL_TIM_ConfigClockSource+0x186>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2202      	movs	r2, #2
 8009544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800955e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009570:	d03e      	beq.n	80095f0 <HAL_TIM_ConfigClockSource+0xd4>
 8009572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009576:	f200 8087 	bhi.w	8009688 <HAL_TIM_ConfigClockSource+0x16c>
 800957a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800957e:	f000 8086 	beq.w	800968e <HAL_TIM_ConfigClockSource+0x172>
 8009582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009586:	d87f      	bhi.n	8009688 <HAL_TIM_ConfigClockSource+0x16c>
 8009588:	2b70      	cmp	r3, #112	; 0x70
 800958a:	d01a      	beq.n	80095c2 <HAL_TIM_ConfigClockSource+0xa6>
 800958c:	2b70      	cmp	r3, #112	; 0x70
 800958e:	d87b      	bhi.n	8009688 <HAL_TIM_ConfigClockSource+0x16c>
 8009590:	2b60      	cmp	r3, #96	; 0x60
 8009592:	d050      	beq.n	8009636 <HAL_TIM_ConfigClockSource+0x11a>
 8009594:	2b60      	cmp	r3, #96	; 0x60
 8009596:	d877      	bhi.n	8009688 <HAL_TIM_ConfigClockSource+0x16c>
 8009598:	2b50      	cmp	r3, #80	; 0x50
 800959a:	d03c      	beq.n	8009616 <HAL_TIM_ConfigClockSource+0xfa>
 800959c:	2b50      	cmp	r3, #80	; 0x50
 800959e:	d873      	bhi.n	8009688 <HAL_TIM_ConfigClockSource+0x16c>
 80095a0:	2b40      	cmp	r3, #64	; 0x40
 80095a2:	d058      	beq.n	8009656 <HAL_TIM_ConfigClockSource+0x13a>
 80095a4:	2b40      	cmp	r3, #64	; 0x40
 80095a6:	d86f      	bhi.n	8009688 <HAL_TIM_ConfigClockSource+0x16c>
 80095a8:	2b30      	cmp	r3, #48	; 0x30
 80095aa:	d064      	beq.n	8009676 <HAL_TIM_ConfigClockSource+0x15a>
 80095ac:	2b30      	cmp	r3, #48	; 0x30
 80095ae:	d86b      	bhi.n	8009688 <HAL_TIM_ConfigClockSource+0x16c>
 80095b0:	2b20      	cmp	r3, #32
 80095b2:	d060      	beq.n	8009676 <HAL_TIM_ConfigClockSource+0x15a>
 80095b4:	2b20      	cmp	r3, #32
 80095b6:	d867      	bhi.n	8009688 <HAL_TIM_ConfigClockSource+0x16c>
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d05c      	beq.n	8009676 <HAL_TIM_ConfigClockSource+0x15a>
 80095bc:	2b10      	cmp	r3, #16
 80095be:	d05a      	beq.n	8009676 <HAL_TIM_ConfigClockSource+0x15a>
 80095c0:	e062      	b.n	8009688 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6818      	ldr	r0, [r3, #0]
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	6899      	ldr	r1, [r3, #8]
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	685a      	ldr	r2, [r3, #4]
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	f000 fd95 	bl	800a100 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80095e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	609a      	str	r2, [r3, #8]
      break;
 80095ee:	e04f      	b.n	8009690 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6818      	ldr	r0, [r3, #0]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	6899      	ldr	r1, [r3, #8]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	f000 fd7e 	bl	800a100 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	689a      	ldr	r2, [r3, #8]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009612:	609a      	str	r2, [r3, #8]
      break;
 8009614:	e03c      	b.n	8009690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6818      	ldr	r0, [r3, #0]
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	6859      	ldr	r1, [r3, #4]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	461a      	mov	r2, r3
 8009624:	f000 fc3c 	bl	8009ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2150      	movs	r1, #80	; 0x50
 800962e:	4618      	mov	r0, r3
 8009630:	f000 fd4b 	bl	800a0ca <TIM_ITRx_SetConfig>
      break;
 8009634:	e02c      	b.n	8009690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	6859      	ldr	r1, [r3, #4]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	461a      	mov	r2, r3
 8009644:	f000 fc98 	bl	8009f78 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2160      	movs	r1, #96	; 0x60
 800964e:	4618      	mov	r0, r3
 8009650:	f000 fd3b 	bl	800a0ca <TIM_ITRx_SetConfig>
      break;
 8009654:	e01c      	b.n	8009690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6818      	ldr	r0, [r3, #0]
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	6859      	ldr	r1, [r3, #4]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	461a      	mov	r2, r3
 8009664:	f000 fc1c 	bl	8009ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2140      	movs	r1, #64	; 0x40
 800966e:	4618      	mov	r0, r3
 8009670:	f000 fd2b 	bl	800a0ca <TIM_ITRx_SetConfig>
      break;
 8009674:	e00c      	b.n	8009690 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4619      	mov	r1, r3
 8009680:	4610      	mov	r0, r2
 8009682:	f000 fd22 	bl	800a0ca <TIM_ITRx_SetConfig>
      break;
 8009686:	e003      	b.n	8009690 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	73fb      	strb	r3, [r7, #15]
      break;
 800968c:	e000      	b.n	8009690 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800968e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d101      	bne.n	80096c2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80096be:	2302      	movs	r3, #2
 80096c0:	e031      	b.n	8009726 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2201      	movs	r2, #1
 80096c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2202      	movs	r2, #2
 80096ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fadd 	bl	8009c94 <TIM_SlaveTimer_SetConfig>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d009      	beq.n	80096f4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e018      	b.n	8009726 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68da      	ldr	r2, [r3, #12]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009702:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68da      	ldr	r2, [r3, #12]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009712:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
	...

08009730 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800973a:	2300      	movs	r3, #0
 800973c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2b0c      	cmp	r3, #12
 8009742:	d831      	bhi.n	80097a8 <HAL_TIM_ReadCapturedValue+0x78>
 8009744:	a201      	add	r2, pc, #4	; (adr r2, 800974c <HAL_TIM_ReadCapturedValue+0x1c>)
 8009746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974a:	bf00      	nop
 800974c:	08009781 	.word	0x08009781
 8009750:	080097a9 	.word	0x080097a9
 8009754:	080097a9 	.word	0x080097a9
 8009758:	080097a9 	.word	0x080097a9
 800975c:	0800978b 	.word	0x0800978b
 8009760:	080097a9 	.word	0x080097a9
 8009764:	080097a9 	.word	0x080097a9
 8009768:	080097a9 	.word	0x080097a9
 800976c:	08009795 	.word	0x08009795
 8009770:	080097a9 	.word	0x080097a9
 8009774:	080097a9 	.word	0x080097a9
 8009778:	080097a9 	.word	0x080097a9
 800977c:	0800979f 	.word	0x0800979f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009786:	60fb      	str	r3, [r7, #12]

      break;
 8009788:	e00f      	b.n	80097aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009790:	60fb      	str	r3, [r7, #12]

      break;
 8009792:	e00a      	b.n	80097aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800979a:	60fb      	str	r3, [r7, #12]

      break;
 800979c:	e005      	b.n	80097aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a4:	60fb      	str	r3, [r7, #12]

      break;
 80097a6:	e000      	b.n	80097aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80097a8:	bf00      	nop
  }

  return tmpreg;
 80097aa:	68fb      	ldr	r3, [r7, #12]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a40      	ldr	r2, [pc, #256]	; (8009908 <TIM_Base_SetConfig+0x114>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d013      	beq.n	8009834 <TIM_Base_SetConfig+0x40>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009812:	d00f      	beq.n	8009834 <TIM_Base_SetConfig+0x40>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a3d      	ldr	r2, [pc, #244]	; (800990c <TIM_Base_SetConfig+0x118>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d00b      	beq.n	8009834 <TIM_Base_SetConfig+0x40>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a3c      	ldr	r2, [pc, #240]	; (8009910 <TIM_Base_SetConfig+0x11c>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d007      	beq.n	8009834 <TIM_Base_SetConfig+0x40>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a3b      	ldr	r2, [pc, #236]	; (8009914 <TIM_Base_SetConfig+0x120>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d003      	beq.n	8009834 <TIM_Base_SetConfig+0x40>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4a3a      	ldr	r2, [pc, #232]	; (8009918 <TIM_Base_SetConfig+0x124>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d108      	bne.n	8009846 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800983a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	4313      	orrs	r3, r2
 8009844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a2f      	ldr	r2, [pc, #188]	; (8009908 <TIM_Base_SetConfig+0x114>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d02b      	beq.n	80098a6 <TIM_Base_SetConfig+0xb2>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009854:	d027      	beq.n	80098a6 <TIM_Base_SetConfig+0xb2>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a2c      	ldr	r2, [pc, #176]	; (800990c <TIM_Base_SetConfig+0x118>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d023      	beq.n	80098a6 <TIM_Base_SetConfig+0xb2>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a2b      	ldr	r2, [pc, #172]	; (8009910 <TIM_Base_SetConfig+0x11c>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d01f      	beq.n	80098a6 <TIM_Base_SetConfig+0xb2>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a2a      	ldr	r2, [pc, #168]	; (8009914 <TIM_Base_SetConfig+0x120>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d01b      	beq.n	80098a6 <TIM_Base_SetConfig+0xb2>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a29      	ldr	r2, [pc, #164]	; (8009918 <TIM_Base_SetConfig+0x124>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d017      	beq.n	80098a6 <TIM_Base_SetConfig+0xb2>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a28      	ldr	r2, [pc, #160]	; (800991c <TIM_Base_SetConfig+0x128>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d013      	beq.n	80098a6 <TIM_Base_SetConfig+0xb2>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4a27      	ldr	r2, [pc, #156]	; (8009920 <TIM_Base_SetConfig+0x12c>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d00f      	beq.n	80098a6 <TIM_Base_SetConfig+0xb2>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a26      	ldr	r2, [pc, #152]	; (8009924 <TIM_Base_SetConfig+0x130>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d00b      	beq.n	80098a6 <TIM_Base_SetConfig+0xb2>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a25      	ldr	r2, [pc, #148]	; (8009928 <TIM_Base_SetConfig+0x134>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d007      	beq.n	80098a6 <TIM_Base_SetConfig+0xb2>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a24      	ldr	r2, [pc, #144]	; (800992c <TIM_Base_SetConfig+0x138>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d003      	beq.n	80098a6 <TIM_Base_SetConfig+0xb2>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a23      	ldr	r2, [pc, #140]	; (8009930 <TIM_Base_SetConfig+0x13c>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d108      	bne.n	80098b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	4313      	orrs	r3, r2
 80098b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	689a      	ldr	r2, [r3, #8]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4a0a      	ldr	r2, [pc, #40]	; (8009908 <TIM_Base_SetConfig+0x114>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d003      	beq.n	80098ec <TIM_Base_SetConfig+0xf8>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4a0c      	ldr	r2, [pc, #48]	; (8009918 <TIM_Base_SetConfig+0x124>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d103      	bne.n	80098f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	691a      	ldr	r2, [r3, #16]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	615a      	str	r2, [r3, #20]
}
 80098fa:	bf00      	nop
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	40010000 	.word	0x40010000
 800990c:	40000400 	.word	0x40000400
 8009910:	40000800 	.word	0x40000800
 8009914:	40000c00 	.word	0x40000c00
 8009918:	40010400 	.word	0x40010400
 800991c:	40014000 	.word	0x40014000
 8009920:	40014400 	.word	0x40014400
 8009924:	40014800 	.word	0x40014800
 8009928:	40001800 	.word	0x40001800
 800992c:	40001c00 	.word	0x40001c00
 8009930:	40002000 	.word	0x40002000

08009934 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009934:	b480      	push	{r7}
 8009936:	b087      	sub	sp, #28
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	f023 0201 	bic.w	r2, r3, #1
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	699b      	ldr	r3, [r3, #24]
 800995a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f023 0303 	bic.w	r3, r3, #3
 800996a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	4313      	orrs	r3, r2
 8009974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f023 0302 	bic.w	r3, r3, #2
 800997c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	697a      	ldr	r2, [r7, #20]
 8009984:	4313      	orrs	r3, r2
 8009986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a20      	ldr	r2, [pc, #128]	; (8009a0c <TIM_OC1_SetConfig+0xd8>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d003      	beq.n	8009998 <TIM_OC1_SetConfig+0x64>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a1f      	ldr	r2, [pc, #124]	; (8009a10 <TIM_OC1_SetConfig+0xdc>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d10c      	bne.n	80099b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	f023 0308 	bic.w	r3, r3, #8
 800999e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	697a      	ldr	r2, [r7, #20]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	f023 0304 	bic.w	r3, r3, #4
 80099b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a15      	ldr	r2, [pc, #84]	; (8009a0c <TIM_OC1_SetConfig+0xd8>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d003      	beq.n	80099c2 <TIM_OC1_SetConfig+0x8e>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a14      	ldr	r2, [pc, #80]	; (8009a10 <TIM_OC1_SetConfig+0xdc>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d111      	bne.n	80099e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	693a      	ldr	r2, [r7, #16]
 80099d8:	4313      	orrs	r3, r2
 80099da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	699b      	ldr	r3, [r3, #24]
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	697a      	ldr	r2, [r7, #20]
 80099fe:	621a      	str	r2, [r3, #32]
}
 8009a00:	bf00      	nop
 8009a02:	371c      	adds	r7, #28
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	40010000 	.word	0x40010000
 8009a10:	40010400 	.word	0x40010400

08009a14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b087      	sub	sp, #28
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a1b      	ldr	r3, [r3, #32]
 8009a22:	f023 0210 	bic.w	r2, r3, #16
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	021b      	lsls	r3, r3, #8
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	f023 0320 	bic.w	r3, r3, #32
 8009a5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	011b      	lsls	r3, r3, #4
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a22      	ldr	r2, [pc, #136]	; (8009af8 <TIM_OC2_SetConfig+0xe4>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d003      	beq.n	8009a7c <TIM_OC2_SetConfig+0x68>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a21      	ldr	r2, [pc, #132]	; (8009afc <TIM_OC2_SetConfig+0xe8>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d10d      	bne.n	8009a98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	011b      	lsls	r3, r3, #4
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a17      	ldr	r2, [pc, #92]	; (8009af8 <TIM_OC2_SetConfig+0xe4>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d003      	beq.n	8009aa8 <TIM_OC2_SetConfig+0x94>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a16      	ldr	r2, [pc, #88]	; (8009afc <TIM_OC2_SetConfig+0xe8>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d113      	bne.n	8009ad0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009aae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	695b      	ldr	r3, [r3, #20]
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	693a      	ldr	r2, [r7, #16]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	693a      	ldr	r2, [r7, #16]
 8009ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	621a      	str	r2, [r3, #32]
}
 8009aea:	bf00      	nop
 8009aec:	371c      	adds	r7, #28
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	40010000 	.word	0x40010000
 8009afc:	40010400 	.word	0x40010400

08009b00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b087      	sub	sp, #28
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a1b      	ldr	r3, [r3, #32]
 8009b0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	69db      	ldr	r3, [r3, #28]
 8009b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f023 0303 	bic.w	r3, r3, #3
 8009b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	021b      	lsls	r3, r3, #8
 8009b50:	697a      	ldr	r2, [r7, #20]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a21      	ldr	r2, [pc, #132]	; (8009be0 <TIM_OC3_SetConfig+0xe0>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d003      	beq.n	8009b66 <TIM_OC3_SetConfig+0x66>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a20      	ldr	r2, [pc, #128]	; (8009be4 <TIM_OC3_SetConfig+0xe4>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d10d      	bne.n	8009b82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	021b      	lsls	r3, r3, #8
 8009b74:	697a      	ldr	r2, [r7, #20]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a16      	ldr	r2, [pc, #88]	; (8009be0 <TIM_OC3_SetConfig+0xe0>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d003      	beq.n	8009b92 <TIM_OC3_SetConfig+0x92>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a15      	ldr	r2, [pc, #84]	; (8009be4 <TIM_OC3_SetConfig+0xe4>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d113      	bne.n	8009bba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	011b      	lsls	r3, r3, #4
 8009ba8:	693a      	ldr	r2, [r7, #16]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	011b      	lsls	r3, r3, #4
 8009bb4:	693a      	ldr	r2, [r7, #16]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	685a      	ldr	r2, [r3, #4]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	697a      	ldr	r2, [r7, #20]
 8009bd2:	621a      	str	r2, [r3, #32]
}
 8009bd4:	bf00      	nop
 8009bd6:	371c      	adds	r7, #28
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr
 8009be0:	40010000 	.word	0x40010000
 8009be4:	40010400 	.word	0x40010400

08009be8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b087      	sub	sp, #28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a1b      	ldr	r3, [r3, #32]
 8009bf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	021b      	lsls	r3, r3, #8
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	031b      	lsls	r3, r3, #12
 8009c3a:	693a      	ldr	r2, [r7, #16]
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a12      	ldr	r2, [pc, #72]	; (8009c8c <TIM_OC4_SetConfig+0xa4>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d003      	beq.n	8009c50 <TIM_OC4_SetConfig+0x68>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a11      	ldr	r2, [pc, #68]	; (8009c90 <TIM_OC4_SetConfig+0xa8>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d109      	bne.n	8009c64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	695b      	ldr	r3, [r3, #20]
 8009c5c:	019b      	lsls	r3, r3, #6
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	4313      	orrs	r3, r2
 8009c62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	697a      	ldr	r2, [r7, #20]
 8009c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	685a      	ldr	r2, [r3, #4]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	693a      	ldr	r2, [r7, #16]
 8009c7c:	621a      	str	r2, [r3, #32]
}
 8009c7e:	bf00      	nop
 8009c80:	371c      	adds	r7, #28
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	40010000 	.word	0x40010000
 8009c90:	40010400 	.word	0x40010400

08009c94 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cb0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	693a      	ldr	r2, [r7, #16]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	f023 0307 	bic.w	r3, r3, #7
 8009cc2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	693a      	ldr	r2, [r7, #16]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	2b70      	cmp	r3, #112	; 0x70
 8009cdc:	d01a      	beq.n	8009d14 <TIM_SlaveTimer_SetConfig+0x80>
 8009cde:	2b70      	cmp	r3, #112	; 0x70
 8009ce0:	d860      	bhi.n	8009da4 <TIM_SlaveTimer_SetConfig+0x110>
 8009ce2:	2b60      	cmp	r3, #96	; 0x60
 8009ce4:	d054      	beq.n	8009d90 <TIM_SlaveTimer_SetConfig+0xfc>
 8009ce6:	2b60      	cmp	r3, #96	; 0x60
 8009ce8:	d85c      	bhi.n	8009da4 <TIM_SlaveTimer_SetConfig+0x110>
 8009cea:	2b50      	cmp	r3, #80	; 0x50
 8009cec:	d046      	beq.n	8009d7c <TIM_SlaveTimer_SetConfig+0xe8>
 8009cee:	2b50      	cmp	r3, #80	; 0x50
 8009cf0:	d858      	bhi.n	8009da4 <TIM_SlaveTimer_SetConfig+0x110>
 8009cf2:	2b40      	cmp	r3, #64	; 0x40
 8009cf4:	d019      	beq.n	8009d2a <TIM_SlaveTimer_SetConfig+0x96>
 8009cf6:	2b40      	cmp	r3, #64	; 0x40
 8009cf8:	d854      	bhi.n	8009da4 <TIM_SlaveTimer_SetConfig+0x110>
 8009cfa:	2b30      	cmp	r3, #48	; 0x30
 8009cfc:	d055      	beq.n	8009daa <TIM_SlaveTimer_SetConfig+0x116>
 8009cfe:	2b30      	cmp	r3, #48	; 0x30
 8009d00:	d850      	bhi.n	8009da4 <TIM_SlaveTimer_SetConfig+0x110>
 8009d02:	2b20      	cmp	r3, #32
 8009d04:	d051      	beq.n	8009daa <TIM_SlaveTimer_SetConfig+0x116>
 8009d06:	2b20      	cmp	r3, #32
 8009d08:	d84c      	bhi.n	8009da4 <TIM_SlaveTimer_SetConfig+0x110>
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d04d      	beq.n	8009daa <TIM_SlaveTimer_SetConfig+0x116>
 8009d0e:	2b10      	cmp	r3, #16
 8009d10:	d04b      	beq.n	8009daa <TIM_SlaveTimer_SetConfig+0x116>
 8009d12:	e047      	b.n	8009da4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6818      	ldr	r0, [r3, #0]
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	68d9      	ldr	r1, [r3, #12]
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	689a      	ldr	r2, [r3, #8]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	f000 f9ec 	bl	800a100 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8009d28:	e040      	b.n	8009dac <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b05      	cmp	r3, #5
 8009d30:	d101      	bne.n	8009d36 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e03b      	b.n	8009dae <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	6a1b      	ldr	r3, [r3, #32]
 8009d3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	6a1a      	ldr	r2, [r3, #32]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f022 0201 	bic.w	r2, r2, #1
 8009d4c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d5c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	011b      	lsls	r3, r3, #4
 8009d64:	68ba      	ldr	r2, [r7, #8]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	621a      	str	r2, [r3, #32]
      break;
 8009d7a:	e017      	b.n	8009dac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6818      	ldr	r0, [r3, #0]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	6899      	ldr	r1, [r3, #8]
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	461a      	mov	r2, r3
 8009d8a:	f000 f889 	bl	8009ea0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009d8e:	e00d      	b.n	8009dac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6818      	ldr	r0, [r3, #0]
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	6899      	ldr	r1, [r3, #8]
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	f000 f8eb 	bl	8009f78 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009da2:	e003      	b.n	8009dac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	75fb      	strb	r3, [r7, #23]
      break;
 8009da8:	e000      	b.n	8009dac <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009daa:	bf00      	nop
  }

  return status;
 8009dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3718      	adds	r7, #24
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
	...

08009db8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b087      	sub	sp, #28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
 8009dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	f023 0201 	bic.w	r2, r3, #1
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	699b      	ldr	r3, [r3, #24]
 8009dd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6a1b      	ldr	r3, [r3, #32]
 8009ddc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	4a28      	ldr	r2, [pc, #160]	; (8009e84 <TIM_TI1_SetConfig+0xcc>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d01b      	beq.n	8009e1e <TIM_TI1_SetConfig+0x66>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dec:	d017      	beq.n	8009e1e <TIM_TI1_SetConfig+0x66>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	4a25      	ldr	r2, [pc, #148]	; (8009e88 <TIM_TI1_SetConfig+0xd0>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d013      	beq.n	8009e1e <TIM_TI1_SetConfig+0x66>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	4a24      	ldr	r2, [pc, #144]	; (8009e8c <TIM_TI1_SetConfig+0xd4>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d00f      	beq.n	8009e1e <TIM_TI1_SetConfig+0x66>
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	4a23      	ldr	r2, [pc, #140]	; (8009e90 <TIM_TI1_SetConfig+0xd8>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d00b      	beq.n	8009e1e <TIM_TI1_SetConfig+0x66>
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	4a22      	ldr	r2, [pc, #136]	; (8009e94 <TIM_TI1_SetConfig+0xdc>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d007      	beq.n	8009e1e <TIM_TI1_SetConfig+0x66>
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	4a21      	ldr	r2, [pc, #132]	; (8009e98 <TIM_TI1_SetConfig+0xe0>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d003      	beq.n	8009e1e <TIM_TI1_SetConfig+0x66>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	4a20      	ldr	r2, [pc, #128]	; (8009e9c <TIM_TI1_SetConfig+0xe4>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d101      	bne.n	8009e22 <TIM_TI1_SetConfig+0x6a>
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e000      	b.n	8009e24 <TIM_TI1_SetConfig+0x6c>
 8009e22:	2300      	movs	r3, #0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d008      	beq.n	8009e3a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	f023 0303 	bic.w	r3, r3, #3
 8009e2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009e30:	697a      	ldr	r2, [r7, #20]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	617b      	str	r3, [r7, #20]
 8009e38:	e003      	b.n	8009e42 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	f043 0301 	orr.w	r3, r3, #1
 8009e40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	011b      	lsls	r3, r3, #4
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	697a      	ldr	r2, [r7, #20]
 8009e52:	4313      	orrs	r3, r2
 8009e54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	f023 030a 	bic.w	r3, r3, #10
 8009e5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	f003 030a 	and.w	r3, r3, #10
 8009e64:	693a      	ldr	r2, [r7, #16]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	697a      	ldr	r2, [r7, #20]
 8009e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	693a      	ldr	r2, [r7, #16]
 8009e74:	621a      	str	r2, [r3, #32]
}
 8009e76:	bf00      	nop
 8009e78:	371c      	adds	r7, #28
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	40010000 	.word	0x40010000
 8009e88:	40000400 	.word	0x40000400
 8009e8c:	40000800 	.word	0x40000800
 8009e90:	40000c00 	.word	0x40000c00
 8009e94:	40010400 	.word	0x40010400
 8009e98:	40014000 	.word	0x40014000
 8009e9c:	40001800 	.word	0x40001800

08009ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b087      	sub	sp, #28
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6a1b      	ldr	r3, [r3, #32]
 8009eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	f023 0201 	bic.w	r2, r3, #1
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	011b      	lsls	r3, r3, #4
 8009ed0:	693a      	ldr	r2, [r7, #16]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	f023 030a 	bic.w	r3, r3, #10
 8009edc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	621a      	str	r2, [r3, #32]
}
 8009ef2:	bf00      	nop
 8009ef4:	371c      	adds	r7, #28
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr

08009efe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b087      	sub	sp, #28
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	60f8      	str	r0, [r7, #12]
 8009f06:	60b9      	str	r1, [r7, #8]
 8009f08:	607a      	str	r2, [r7, #4]
 8009f0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6a1b      	ldr	r3, [r3, #32]
 8009f10:	f023 0210 	bic.w	r2, r3, #16
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	021b      	lsls	r3, r3, #8
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	031b      	lsls	r3, r3, #12
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	697a      	ldr	r2, [r7, #20]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	011b      	lsls	r3, r3, #4
 8009f56:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	621a      	str	r2, [r3, #32]
}
 8009f6c:	bf00      	nop
 8009f6e:	371c      	adds	r7, #28
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b087      	sub	sp, #28
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6a1b      	ldr	r3, [r3, #32]
 8009f88:	f023 0210 	bic.w	r2, r3, #16
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009fa2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	031b      	lsls	r3, r3, #12
 8009fa8:	697a      	ldr	r2, [r7, #20]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009fb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	011b      	lsls	r3, r3, #4
 8009fba:	693a      	ldr	r2, [r7, #16]
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	697a      	ldr	r2, [r7, #20]
 8009fc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	621a      	str	r2, [r3, #32]
}
 8009fcc:	bf00      	nop
 8009fce:	371c      	adds	r7, #28
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b087      	sub	sp, #28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
 8009fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6a1b      	ldr	r3, [r3, #32]
 8009fea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	69db      	ldr	r3, [r3, #28]
 8009ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6a1b      	ldr	r3, [r3, #32]
 8009ffc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f023 0303 	bic.w	r3, r3, #3
 800a004:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a006:	697a      	ldr	r2, [r7, #20]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a014:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	011b      	lsls	r3, r3, #4
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	697a      	ldr	r2, [r7, #20]
 800a01e:	4313      	orrs	r3, r2
 800a020:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a028:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	021b      	lsls	r3, r3, #8
 800a02e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a032:	693a      	ldr	r2, [r7, #16]
 800a034:	4313      	orrs	r3, r2
 800a036:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	697a      	ldr	r2, [r7, #20]
 800a03c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	693a      	ldr	r2, [r7, #16]
 800a042:	621a      	str	r2, [r3, #32]
}
 800a044:	bf00      	nop
 800a046:	371c      	adds	r7, #28
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a050:	b480      	push	{r7}
 800a052:	b087      	sub	sp, #28
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
 800a05c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	69db      	ldr	r3, [r3, #28]
 800a06e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6a1b      	ldr	r3, [r3, #32]
 800a074:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a07c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	021b      	lsls	r3, r3, #8
 800a082:	697a      	ldr	r2, [r7, #20]
 800a084:	4313      	orrs	r3, r2
 800a086:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a08e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	031b      	lsls	r3, r3, #12
 800a094:	b29b      	uxth	r3, r3
 800a096:	697a      	ldr	r2, [r7, #20]
 800a098:	4313      	orrs	r3, r2
 800a09a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a0a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	031b      	lsls	r3, r3, #12
 800a0a8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	621a      	str	r2, [r3, #32]
}
 800a0be:	bf00      	nop
 800a0c0:	371c      	adds	r7, #28
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr

0800a0ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0ca:	b480      	push	{r7}
 800a0cc:	b085      	sub	sp, #20
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	f043 0307 	orr.w	r3, r3, #7
 800a0ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	609a      	str	r2, [r3, #8]
}
 800a0f4:	bf00      	nop
 800a0f6:	3714      	adds	r7, #20
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a100:	b480      	push	{r7}
 800a102:	b087      	sub	sp, #28
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
 800a10c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a11a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	021a      	lsls	r2, r3, #8
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	431a      	orrs	r2, r3
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	4313      	orrs	r3, r2
 800a128:	697a      	ldr	r2, [r7, #20]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	697a      	ldr	r2, [r7, #20]
 800a132:	609a      	str	r2, [r3, #8]
}
 800a134:	bf00      	nop
 800a136:	371c      	adds	r7, #28
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	f003 031f 	and.w	r3, r3, #31
 800a152:	2201      	movs	r2, #1
 800a154:	fa02 f303 	lsl.w	r3, r2, r3
 800a158:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6a1a      	ldr	r2, [r3, #32]
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	43db      	mvns	r3, r3
 800a162:	401a      	ands	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6a1a      	ldr	r2, [r3, #32]
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	f003 031f 	and.w	r3, r3, #31
 800a172:	6879      	ldr	r1, [r7, #4]
 800a174:	fa01 f303 	lsl.w	r3, r1, r3
 800a178:	431a      	orrs	r2, r3
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	621a      	str	r2, [r3, #32]
}
 800a17e:	bf00      	nop
 800a180:	371c      	adds	r7, #28
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
	...

0800a18c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d101      	bne.n	800a1a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a1a0:	2302      	movs	r3, #2
 800a1a2:	e05a      	b.n	800a25a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a21      	ldr	r2, [pc, #132]	; (800a268 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d022      	beq.n	800a22e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1f0:	d01d      	beq.n	800a22e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a1d      	ldr	r2, [pc, #116]	; (800a26c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d018      	beq.n	800a22e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a1b      	ldr	r2, [pc, #108]	; (800a270 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d013      	beq.n	800a22e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a1a      	ldr	r2, [pc, #104]	; (800a274 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d00e      	beq.n	800a22e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a18      	ldr	r2, [pc, #96]	; (800a278 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d009      	beq.n	800a22e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a17      	ldr	r2, [pc, #92]	; (800a27c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d004      	beq.n	800a22e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a15      	ldr	r2, [pc, #84]	; (800a280 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d10c      	bne.n	800a248 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3714      	adds	r7, #20
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	40010000 	.word	0x40010000
 800a26c:	40000400 	.word	0x40000400
 800a270:	40000800 	.word	0x40000800
 800a274:	40000c00 	.word	0x40000c00
 800a278:	40010400 	.word	0x40010400
 800a27c:	40014000 	.word	0x40014000
 800a280:	40001800 	.word	0x40001800

0800a284 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a28e:	2300      	movs	r3, #0
 800a290:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d101      	bne.n	800a2a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a29c:	2302      	movs	r3, #2
 800a29e:	e03d      	b.n	800a31c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	695b      	ldr	r3, [r3, #20]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	69db      	ldr	r3, [r3, #28]
 800a306:	4313      	orrs	r3, r2
 800a308:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3714      	adds	r7, #20
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a344:	bf00      	nop
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d101      	bne.n	800a362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	e03f      	b.n	800a3e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d106      	bne.n	800a37c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f7fb f812 	bl	80053a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2224      	movs	r2, #36	; 0x24
 800a380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68da      	ldr	r2, [r3, #12]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a392:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fde9 	bl	800af6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	691a      	ldr	r2, [r3, #16]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a3a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	695a      	ldr	r2, [r3, #20]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a3b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	68da      	ldr	r2, [r3, #12]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a3c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2220      	movs	r2, #32
 800a3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2220      	movs	r2, #32
 800a3dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b08a      	sub	sp, #40	; 0x28
 800a3ee:	af02      	add	r7, sp, #8
 800a3f0:	60f8      	str	r0, [r7, #12]
 800a3f2:	60b9      	str	r1, [r7, #8]
 800a3f4:	603b      	str	r3, [r7, #0]
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a404:	b2db      	uxtb	r3, r3
 800a406:	2b20      	cmp	r3, #32
 800a408:	d17c      	bne.n	800a504 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <HAL_UART_Transmit+0x2c>
 800a410:	88fb      	ldrh	r3, [r7, #6]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d101      	bne.n	800a41a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e075      	b.n	800a506 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a420:	2b01      	cmp	r3, #1
 800a422:	d101      	bne.n	800a428 <HAL_UART_Transmit+0x3e>
 800a424:	2302      	movs	r3, #2
 800a426:	e06e      	b.n	800a506 <HAL_UART_Transmit+0x11c>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2221      	movs	r2, #33	; 0x21
 800a43a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a43e:	f7fb f8d3 	bl	80055e8 <HAL_GetTick>
 800a442:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	88fa      	ldrh	r2, [r7, #6]
 800a448:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	88fa      	ldrh	r2, [r7, #6]
 800a44e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a458:	d108      	bne.n	800a46c <HAL_UART_Transmit+0x82>
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d104      	bne.n	800a46c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a462:	2300      	movs	r3, #0
 800a464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	61bb      	str	r3, [r7, #24]
 800a46a:	e003      	b.n	800a474 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a470:	2300      	movs	r3, #0
 800a472:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a47c:	e02a      	b.n	800a4d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	2200      	movs	r2, #0
 800a486:	2180      	movs	r1, #128	; 0x80
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f000 fb29 	bl	800aae0 <UART_WaitOnFlagUntilTimeout>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d001      	beq.n	800a498 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a494:	2303      	movs	r3, #3
 800a496:	e036      	b.n	800a506 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10b      	bne.n	800a4b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	881b      	ldrh	r3, [r3, #0]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	3302      	adds	r3, #2
 800a4b2:	61bb      	str	r3, [r7, #24]
 800a4b4:	e007      	b.n	800a4c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	781a      	ldrb	r2, [r3, #0]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1cf      	bne.n	800a47e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	2140      	movs	r1, #64	; 0x40
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f000 faf9 	bl	800aae0 <UART_WaitOnFlagUntilTimeout>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e006      	b.n	800a506 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2220      	movs	r2, #32
 800a4fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a500:	2300      	movs	r3, #0
 800a502:	e000      	b.n	800a506 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a504:	2302      	movs	r3, #2
  }
}
 800a506:	4618      	mov	r0, r3
 800a508:	3720      	adds	r7, #32
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	60f8      	str	r0, [r7, #12]
 800a516:	60b9      	str	r1, [r7, #8]
 800a518:	4613      	mov	r3, r2
 800a51a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a522:	b2db      	uxtb	r3, r3
 800a524:	2b20      	cmp	r3, #32
 800a526:	d11d      	bne.n	800a564 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d002      	beq.n	800a534 <HAL_UART_Receive_IT+0x26>
 800a52e:	88fb      	ldrh	r3, [r7, #6]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e016      	b.n	800a566 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d101      	bne.n	800a546 <HAL_UART_Receive_IT+0x38>
 800a542:	2302      	movs	r3, #2
 800a544:	e00f      	b.n	800a566 <HAL_UART_Receive_IT+0x58>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a554:	88fb      	ldrh	r3, [r7, #6]
 800a556:	461a      	mov	r2, r3
 800a558:	68b9      	ldr	r1, [r7, #8]
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f000 fb2e 	bl	800abbc <UART_Start_Receive_IT>
 800a560:	4603      	mov	r3, r0
 800a562:	e000      	b.n	800a566 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a564:	2302      	movs	r3, #2
  }
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
	...

0800a570 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b0ba      	sub	sp, #232	; 0xe8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	695b      	ldr	r3, [r3, #20]
 800a592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a596:	2300      	movs	r3, #0
 800a598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a59c:	2300      	movs	r3, #0
 800a59e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a5a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5a6:	f003 030f 	and.w	r3, r3, #15
 800a5aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a5ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10f      	bne.n	800a5d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5ba:	f003 0320 	and.w	r3, r3, #32
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d009      	beq.n	800a5d6 <HAL_UART_IRQHandler+0x66>
 800a5c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5c6:	f003 0320 	and.w	r3, r3, #32
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d003      	beq.n	800a5d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fc11 	bl	800adf6 <UART_Receive_IT>
      return;
 800a5d4:	e256      	b.n	800aa84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a5d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f000 80de 	beq.w	800a79c <HAL_UART_IRQHandler+0x22c>
 800a5e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5e4:	f003 0301 	and.w	r3, r3, #1
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d106      	bne.n	800a5fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f000 80d1 	beq.w	800a79c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a5fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5fe:	f003 0301 	and.w	r3, r3, #1
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00b      	beq.n	800a61e <HAL_UART_IRQHandler+0xae>
 800a606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a60a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d005      	beq.n	800a61e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a616:	f043 0201 	orr.w	r2, r3, #1
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a61e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a622:	f003 0304 	and.w	r3, r3, #4
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00b      	beq.n	800a642 <HAL_UART_IRQHandler+0xd2>
 800a62a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a62e:	f003 0301 	and.w	r3, r3, #1
 800a632:	2b00      	cmp	r3, #0
 800a634:	d005      	beq.n	800a642 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63a:	f043 0202 	orr.w	r2, r3, #2
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a646:	f003 0302 	and.w	r3, r3, #2
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00b      	beq.n	800a666 <HAL_UART_IRQHandler+0xf6>
 800a64e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	2b00      	cmp	r3, #0
 800a658:	d005      	beq.n	800a666 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65e:	f043 0204 	orr.w	r2, r3, #4
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a66a:	f003 0308 	and.w	r3, r3, #8
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d011      	beq.n	800a696 <HAL_UART_IRQHandler+0x126>
 800a672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a676:	f003 0320 	and.w	r3, r3, #32
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d105      	bne.n	800a68a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a67e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a682:	f003 0301 	and.w	r3, r3, #1
 800a686:	2b00      	cmp	r3, #0
 800a688:	d005      	beq.n	800a696 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68e:	f043 0208 	orr.w	r2, r3, #8
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f000 81ed 	beq.w	800aa7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a6a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6a4:	f003 0320 	and.w	r3, r3, #32
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d008      	beq.n	800a6be <HAL_UART_IRQHandler+0x14e>
 800a6ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6b0:	f003 0320 	and.w	r3, r3, #32
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d002      	beq.n	800a6be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 fb9c 	bl	800adf6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	695b      	ldr	r3, [r3, #20]
 800a6c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6c8:	2b40      	cmp	r3, #64	; 0x40
 800a6ca:	bf0c      	ite	eq
 800a6cc:	2301      	moveq	r3, #1
 800a6ce:	2300      	movne	r3, #0
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6da:	f003 0308 	and.w	r3, r3, #8
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d103      	bne.n	800a6ea <HAL_UART_IRQHandler+0x17a>
 800a6e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d04f      	beq.n	800a78a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 faa4 	bl	800ac38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6fa:	2b40      	cmp	r3, #64	; 0x40
 800a6fc:	d141      	bne.n	800a782 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	3314      	adds	r3, #20
 800a704:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a708:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a70c:	e853 3f00 	ldrex	r3, [r3]
 800a710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a714:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a71c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	3314      	adds	r3, #20
 800a726:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a72a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a72e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a732:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a736:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a73a:	e841 2300 	strex	r3, r2, [r1]
 800a73e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d1d9      	bne.n	800a6fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d013      	beq.n	800a77a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a756:	4a7d      	ldr	r2, [pc, #500]	; (800a94c <HAL_UART_IRQHandler+0x3dc>)
 800a758:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fb fcc4 	bl	80060ec <HAL_DMA_Abort_IT>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d016      	beq.n	800a798 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a774:	4610      	mov	r0, r2
 800a776:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a778:	e00e      	b.n	800a798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f99a 	bl	800aab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a780:	e00a      	b.n	800a798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f996 	bl	800aab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a788:	e006      	b.n	800a798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f992 	bl	800aab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a796:	e170      	b.n	800aa7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a798:	bf00      	nop
    return;
 800a79a:	e16e      	b.n	800aa7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	f040 814a 	bne.w	800aa3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a7a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7aa:	f003 0310 	and.w	r3, r3, #16
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f000 8143 	beq.w	800aa3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7b8:	f003 0310 	and.w	r3, r3, #16
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f000 813c 	beq.w	800aa3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	60bb      	str	r3, [r7, #8]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	60bb      	str	r3, [r7, #8]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	60bb      	str	r3, [r7, #8]
 800a7d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	695b      	ldr	r3, [r3, #20]
 800a7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e2:	2b40      	cmp	r3, #64	; 0x40
 800a7e4:	f040 80b4 	bne.w	800a950 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a7f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f000 8140 	beq.w	800aa7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a806:	429a      	cmp	r2, r3
 800a808:	f080 8139 	bcs.w	800aa7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a812:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a818:	69db      	ldr	r3, [r3, #28]
 800a81a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a81e:	f000 8088 	beq.w	800a932 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	330c      	adds	r3, #12
 800a828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a82c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a830:	e853 3f00 	ldrex	r3, [r3]
 800a834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a838:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a83c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	330c      	adds	r3, #12
 800a84a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a84e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a856:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a85a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a85e:	e841 2300 	strex	r3, r2, [r1]
 800a862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d1d9      	bne.n	800a822 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	3314      	adds	r3, #20
 800a874:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a878:	e853 3f00 	ldrex	r3, [r3]
 800a87c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a87e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a880:	f023 0301 	bic.w	r3, r3, #1
 800a884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	3314      	adds	r3, #20
 800a88e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a892:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a896:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a898:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a89a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a89e:	e841 2300 	strex	r3, r2, [r1]
 800a8a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a8a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1e1      	bne.n	800a86e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	3314      	adds	r3, #20
 800a8b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8b4:	e853 3f00 	ldrex	r3, [r3]
 800a8b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a8ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	3314      	adds	r3, #20
 800a8ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a8ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a8d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a8d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a8d6:	e841 2300 	strex	r3, r2, [r1]
 800a8da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a8dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d1e3      	bne.n	800a8aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2220      	movs	r2, #32
 800a8e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	330c      	adds	r3, #12
 800a8f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8fa:	e853 3f00 	ldrex	r3, [r3]
 800a8fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a902:	f023 0310 	bic.w	r3, r3, #16
 800a906:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	330c      	adds	r3, #12
 800a910:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a914:	65ba      	str	r2, [r7, #88]	; 0x58
 800a916:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a918:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a91a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a91c:	e841 2300 	strex	r3, r2, [r1]
 800a920:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1e3      	bne.n	800a8f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7fb fb6d 	bl	800600c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	1ad3      	subs	r3, r2, r3
 800a93e:	b29b      	uxth	r3, r3
 800a940:	4619      	mov	r1, r3
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 f8c0 	bl	800aac8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a948:	e099      	b.n	800aa7e <HAL_UART_IRQHandler+0x50e>
 800a94a:	bf00      	nop
 800a94c:	0800acff 	.word	0x0800acff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a958:	b29b      	uxth	r3, r3
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a964:	b29b      	uxth	r3, r3
 800a966:	2b00      	cmp	r3, #0
 800a968:	f000 808b 	beq.w	800aa82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a96c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a970:	2b00      	cmp	r3, #0
 800a972:	f000 8086 	beq.w	800aa82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	330c      	adds	r3, #12
 800a97c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a980:	e853 3f00 	ldrex	r3, [r3]
 800a984:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a988:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a98c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	330c      	adds	r3, #12
 800a996:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a99a:	647a      	str	r2, [r7, #68]	; 0x44
 800a99c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a9a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9a2:	e841 2300 	strex	r3, r2, [r1]
 800a9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a9a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1e3      	bne.n	800a976 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	3314      	adds	r3, #20
 800a9b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b8:	e853 3f00 	ldrex	r3, [r3]
 800a9bc:	623b      	str	r3, [r7, #32]
   return(result);
 800a9be:	6a3b      	ldr	r3, [r7, #32]
 800a9c0:	f023 0301 	bic.w	r3, r3, #1
 800a9c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	3314      	adds	r3, #20
 800a9ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a9d2:	633a      	str	r2, [r7, #48]	; 0x30
 800a9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9da:	e841 2300 	strex	r3, r2, [r1]
 800a9de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1e3      	bne.n	800a9ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2220      	movs	r2, #32
 800a9ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	330c      	adds	r3, #12
 800a9fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	e853 3f00 	ldrex	r3, [r3]
 800aa02:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f023 0310 	bic.w	r3, r3, #16
 800aa0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	330c      	adds	r3, #12
 800aa14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800aa18:	61fa      	str	r2, [r7, #28]
 800aa1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1c:	69b9      	ldr	r1, [r7, #24]
 800aa1e:	69fa      	ldr	r2, [r7, #28]
 800aa20:	e841 2300 	strex	r3, r2, [r1]
 800aa24:	617b      	str	r3, [r7, #20]
   return(result);
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1e3      	bne.n	800a9f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa30:	4619      	mov	r1, r3
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 f848 	bl	800aac8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa38:	e023      	b.n	800aa82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aa3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d009      	beq.n	800aa5a <HAL_UART_IRQHandler+0x4ea>
 800aa46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d003      	beq.n	800aa5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 f967 	bl	800ad26 <UART_Transmit_IT>
    return;
 800aa58:	e014      	b.n	800aa84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aa5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00e      	beq.n	800aa84 <HAL_UART_IRQHandler+0x514>
 800aa66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d008      	beq.n	800aa84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 f9a7 	bl	800adc6 <UART_EndTransmit_IT>
    return;
 800aa78:	e004      	b.n	800aa84 <HAL_UART_IRQHandler+0x514>
    return;
 800aa7a:	bf00      	nop
 800aa7c:	e002      	b.n	800aa84 <HAL_UART_IRQHandler+0x514>
      return;
 800aa7e:	bf00      	nop
 800aa80:	e000      	b.n	800aa84 <HAL_UART_IRQHandler+0x514>
      return;
 800aa82:	bf00      	nop
  }
}
 800aa84:	37e8      	adds	r7, #232	; 0xe8
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop

0800aa8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aa94:	bf00      	nop
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800aaa8:	bf00      	nop
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	460b      	mov	r3, r1
 800aad2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aad4:	bf00      	nop
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b090      	sub	sp, #64	; 0x40
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	603b      	str	r3, [r7, #0]
 800aaec:	4613      	mov	r3, r2
 800aaee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aaf0:	e050      	b.n	800ab94 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aaf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf8:	d04c      	beq.n	800ab94 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800aafa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d007      	beq.n	800ab10 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab00:	f7fa fd72 	bl	80055e8 <HAL_GetTick>
 800ab04:	4602      	mov	r2, r0
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d241      	bcs.n	800ab94 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	330c      	adds	r3, #12
 800ab16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1a:	e853 3f00 	ldrex	r3, [r3]
 800ab1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	330c      	adds	r3, #12
 800ab2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ab30:	637a      	str	r2, [r7, #52]	; 0x34
 800ab32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab38:	e841 2300 	strex	r3, r2, [r1]
 800ab3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1e5      	bne.n	800ab10 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	3314      	adds	r3, #20
 800ab4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	e853 3f00 	ldrex	r3, [r3]
 800ab52:	613b      	str	r3, [r7, #16]
   return(result);
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	f023 0301 	bic.w	r3, r3, #1
 800ab5a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	3314      	adds	r3, #20
 800ab62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab64:	623a      	str	r2, [r7, #32]
 800ab66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab68:	69f9      	ldr	r1, [r7, #28]
 800ab6a:	6a3a      	ldr	r2, [r7, #32]
 800ab6c:	e841 2300 	strex	r3, r2, [r1]
 800ab70:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1e5      	bne.n	800ab44 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2220      	movs	r2, #32
 800ab7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2220      	movs	r2, #32
 800ab84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ab90:	2303      	movs	r3, #3
 800ab92:	e00f      	b.n	800abb4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	bf0c      	ite	eq
 800aba4:	2301      	moveq	r3, #1
 800aba6:	2300      	movne	r3, #0
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	461a      	mov	r2, r3
 800abac:	79fb      	ldrb	r3, [r7, #7]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d09f      	beq.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3740      	adds	r7, #64	; 0x40
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	4613      	mov	r3, r2
 800abc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	88fa      	ldrh	r2, [r7, #6]
 800abd4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	88fa      	ldrh	r2, [r7, #6]
 800abda:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2222      	movs	r2, #34	; 0x22
 800abe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2200      	movs	r2, #0
 800abee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d007      	beq.n	800ac0a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68da      	ldr	r2, [r3, #12]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac08:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	695a      	ldr	r2, [r3, #20]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f042 0201 	orr.w	r2, r2, #1
 800ac18:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68da      	ldr	r2, [r3, #12]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f042 0220 	orr.w	r2, r2, #32
 800ac28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b095      	sub	sp, #84	; 0x54
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	330c      	adds	r3, #12
 800ac46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac4a:	e853 3f00 	ldrex	r3, [r3]
 800ac4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac56:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	330c      	adds	r3, #12
 800ac5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac60:	643a      	str	r2, [r7, #64]	; 0x40
 800ac62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac68:	e841 2300 	strex	r3, r2, [r1]
 800ac6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d1e5      	bne.n	800ac40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	3314      	adds	r3, #20
 800ac7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7c:	6a3b      	ldr	r3, [r7, #32]
 800ac7e:	e853 3f00 	ldrex	r3, [r3]
 800ac82:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	f023 0301 	bic.w	r3, r3, #1
 800ac8a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	3314      	adds	r3, #20
 800ac92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac94:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac9c:	e841 2300 	strex	r3, r2, [r1]
 800aca0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1e5      	bne.n	800ac74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acac:	2b01      	cmp	r3, #1
 800acae:	d119      	bne.n	800ace4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	330c      	adds	r3, #12
 800acb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	e853 3f00 	ldrex	r3, [r3]
 800acbe:	60bb      	str	r3, [r7, #8]
   return(result);
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	f023 0310 	bic.w	r3, r3, #16
 800acc6:	647b      	str	r3, [r7, #68]	; 0x44
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	330c      	adds	r3, #12
 800acce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acd0:	61ba      	str	r2, [r7, #24]
 800acd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd4:	6979      	ldr	r1, [r7, #20]
 800acd6:	69ba      	ldr	r2, [r7, #24]
 800acd8:	e841 2300 	strex	r3, r2, [r1]
 800acdc:	613b      	str	r3, [r7, #16]
   return(result);
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d1e5      	bne.n	800acb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2220      	movs	r2, #32
 800ace8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800acf2:	bf00      	nop
 800acf4:	3754      	adds	r7, #84	; 0x54
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b084      	sub	sp, #16
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2200      	movs	r2, #0
 800ad16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f7ff fecb 	bl	800aab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad1e:	bf00      	nop
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b085      	sub	sp, #20
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	2b21      	cmp	r3, #33	; 0x21
 800ad38:	d13e      	bne.n	800adb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad42:	d114      	bne.n	800ad6e <UART_Transmit_IT+0x48>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d110      	bne.n	800ad6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a1b      	ldr	r3, [r3, #32]
 800ad50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	881b      	ldrh	r3, [r3, #0]
 800ad56:	461a      	mov	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a1b      	ldr	r3, [r3, #32]
 800ad66:	1c9a      	adds	r2, r3, #2
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	621a      	str	r2, [r3, #32]
 800ad6c:	e008      	b.n	800ad80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6a1b      	ldr	r3, [r3, #32]
 800ad72:	1c59      	adds	r1, r3, #1
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	6211      	str	r1, [r2, #32]
 800ad78:	781a      	ldrb	r2, [r3, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	3b01      	subs	r3, #1
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10f      	bne.n	800adb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	68da      	ldr	r2, [r3, #12]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ada2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	68da      	ldr	r2, [r3, #12]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800adb4:	2300      	movs	r3, #0
 800adb6:	e000      	b.n	800adba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800adb8:	2302      	movs	r3, #2
  }
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3714      	adds	r7, #20
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr

0800adc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b082      	sub	sp, #8
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	68da      	ldr	r2, [r3, #12]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800addc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2220      	movs	r2, #32
 800ade2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f7ff fe50 	bl	800aa8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b08c      	sub	sp, #48	; 0x30
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	2b22      	cmp	r3, #34	; 0x22
 800ae08:	f040 80ab 	bne.w	800af62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae14:	d117      	bne.n	800ae46 <UART_Receive_IT+0x50>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d113      	bne.n	800ae46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae3e:	1c9a      	adds	r2, r3, #2
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	629a      	str	r2, [r3, #40]	; 0x28
 800ae44:	e026      	b.n	800ae94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae58:	d007      	beq.n	800ae6a <UART_Receive_IT+0x74>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10a      	bne.n	800ae78 <UART_Receive_IT+0x82>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d106      	bne.n	800ae78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	b2da      	uxtb	r2, r3
 800ae72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae74:	701a      	strb	r2, [r3, #0]
 800ae76:	e008      	b.n	800ae8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae84:	b2da      	uxtb	r2, r3
 800ae86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae8e:	1c5a      	adds	r2, r3, #1
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	4619      	mov	r1, r3
 800aea2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d15a      	bne.n	800af5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	68da      	ldr	r2, [r3, #12]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f022 0220 	bic.w	r2, r2, #32
 800aeb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68da      	ldr	r2, [r3, #12]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aec6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	695a      	ldr	r2, [r3, #20]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f022 0201 	bic.w	r2, r2, #1
 800aed6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2220      	movs	r2, #32
 800aedc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d135      	bne.n	800af54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	330c      	adds	r3, #12
 800aef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	e853 3f00 	ldrex	r3, [r3]
 800aefc:	613b      	str	r3, [r7, #16]
   return(result);
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	f023 0310 	bic.w	r3, r3, #16
 800af04:	627b      	str	r3, [r7, #36]	; 0x24
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	330c      	adds	r3, #12
 800af0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af0e:	623a      	str	r2, [r7, #32]
 800af10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af12:	69f9      	ldr	r1, [r7, #28]
 800af14:	6a3a      	ldr	r2, [r7, #32]
 800af16:	e841 2300 	strex	r3, r2, [r1]
 800af1a:	61bb      	str	r3, [r7, #24]
   return(result);
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d1e5      	bne.n	800aeee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f003 0310 	and.w	r3, r3, #16
 800af2c:	2b10      	cmp	r3, #16
 800af2e:	d10a      	bne.n	800af46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800af30:	2300      	movs	r3, #0
 800af32:	60fb      	str	r3, [r7, #12]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	60fb      	str	r3, [r7, #12]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	60fb      	str	r3, [r7, #12]
 800af44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af4a:	4619      	mov	r1, r3
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f7ff fdbb 	bl	800aac8 <HAL_UARTEx_RxEventCallback>
 800af52:	e002      	b.n	800af5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f7ff fda3 	bl	800aaa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800af5a:	2300      	movs	r3, #0
 800af5c:	e002      	b.n	800af64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800af5e:	2300      	movs	r3, #0
 800af60:	e000      	b.n	800af64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800af62:	2302      	movs	r3, #2
  }
}
 800af64:	4618      	mov	r0, r3
 800af66:	3730      	adds	r7, #48	; 0x30
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af70:	b0c0      	sub	sp, #256	; 0x100
 800af72:	af00      	add	r7, sp, #0
 800af74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800af84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af88:	68d9      	ldr	r1, [r3, #12]
 800af8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	ea40 0301 	orr.w	r3, r0, r1
 800af94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af9a:	689a      	ldr	r2, [r3, #8]
 800af9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	431a      	orrs	r2, r3
 800afa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afa8:	695b      	ldr	r3, [r3, #20]
 800afaa:	431a      	orrs	r2, r3
 800afac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afb0:	69db      	ldr	r3, [r3, #28]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800afb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800afc4:	f021 010c 	bic.w	r1, r1, #12
 800afc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800afd2:	430b      	orrs	r3, r1
 800afd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800afd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800afe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afe6:	6999      	ldr	r1, [r3, #24]
 800afe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	ea40 0301 	orr.w	r3, r0, r1
 800aff2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	4b8f      	ldr	r3, [pc, #572]	; (800b238 <UART_SetConfig+0x2cc>)
 800affc:	429a      	cmp	r2, r3
 800affe:	d005      	beq.n	800b00c <UART_SetConfig+0xa0>
 800b000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	4b8d      	ldr	r3, [pc, #564]	; (800b23c <UART_SetConfig+0x2d0>)
 800b008:	429a      	cmp	r2, r3
 800b00a:	d104      	bne.n	800b016 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b00c:	f7fd fb32 	bl	8008674 <HAL_RCC_GetPCLK2Freq>
 800b010:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b014:	e003      	b.n	800b01e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b016:	f7fd fb19 	bl	800864c <HAL_RCC_GetPCLK1Freq>
 800b01a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b01e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b022:	69db      	ldr	r3, [r3, #28]
 800b024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b028:	f040 810c 	bne.w	800b244 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b02c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b030:	2200      	movs	r2, #0
 800b032:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b036:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b03a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b03e:	4622      	mov	r2, r4
 800b040:	462b      	mov	r3, r5
 800b042:	1891      	adds	r1, r2, r2
 800b044:	65b9      	str	r1, [r7, #88]	; 0x58
 800b046:	415b      	adcs	r3, r3
 800b048:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b04a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b04e:	4621      	mov	r1, r4
 800b050:	eb12 0801 	adds.w	r8, r2, r1
 800b054:	4629      	mov	r1, r5
 800b056:	eb43 0901 	adc.w	r9, r3, r1
 800b05a:	f04f 0200 	mov.w	r2, #0
 800b05e:	f04f 0300 	mov.w	r3, #0
 800b062:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b066:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b06a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b06e:	4690      	mov	r8, r2
 800b070:	4699      	mov	r9, r3
 800b072:	4623      	mov	r3, r4
 800b074:	eb18 0303 	adds.w	r3, r8, r3
 800b078:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b07c:	462b      	mov	r3, r5
 800b07e:	eb49 0303 	adc.w	r3, r9, r3
 800b082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b092:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b096:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b09a:	460b      	mov	r3, r1
 800b09c:	18db      	adds	r3, r3, r3
 800b09e:	653b      	str	r3, [r7, #80]	; 0x50
 800b0a0:	4613      	mov	r3, r2
 800b0a2:	eb42 0303 	adc.w	r3, r2, r3
 800b0a6:	657b      	str	r3, [r7, #84]	; 0x54
 800b0a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b0ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b0b0:	f7f5 fe1a 	bl	8000ce8 <__aeabi_uldivmod>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	4b61      	ldr	r3, [pc, #388]	; (800b240 <UART_SetConfig+0x2d4>)
 800b0ba:	fba3 2302 	umull	r2, r3, r3, r2
 800b0be:	095b      	lsrs	r3, r3, #5
 800b0c0:	011c      	lsls	r4, r3, #4
 800b0c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b0cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b0d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b0d4:	4642      	mov	r2, r8
 800b0d6:	464b      	mov	r3, r9
 800b0d8:	1891      	adds	r1, r2, r2
 800b0da:	64b9      	str	r1, [r7, #72]	; 0x48
 800b0dc:	415b      	adcs	r3, r3
 800b0de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b0e4:	4641      	mov	r1, r8
 800b0e6:	eb12 0a01 	adds.w	sl, r2, r1
 800b0ea:	4649      	mov	r1, r9
 800b0ec:	eb43 0b01 	adc.w	fp, r3, r1
 800b0f0:	f04f 0200 	mov.w	r2, #0
 800b0f4:	f04f 0300 	mov.w	r3, #0
 800b0f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b0fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b104:	4692      	mov	sl, r2
 800b106:	469b      	mov	fp, r3
 800b108:	4643      	mov	r3, r8
 800b10a:	eb1a 0303 	adds.w	r3, sl, r3
 800b10e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b112:	464b      	mov	r3, r9
 800b114:	eb4b 0303 	adc.w	r3, fp, r3
 800b118:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b11c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b128:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b12c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b130:	460b      	mov	r3, r1
 800b132:	18db      	adds	r3, r3, r3
 800b134:	643b      	str	r3, [r7, #64]	; 0x40
 800b136:	4613      	mov	r3, r2
 800b138:	eb42 0303 	adc.w	r3, r2, r3
 800b13c:	647b      	str	r3, [r7, #68]	; 0x44
 800b13e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b142:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b146:	f7f5 fdcf 	bl	8000ce8 <__aeabi_uldivmod>
 800b14a:	4602      	mov	r2, r0
 800b14c:	460b      	mov	r3, r1
 800b14e:	4611      	mov	r1, r2
 800b150:	4b3b      	ldr	r3, [pc, #236]	; (800b240 <UART_SetConfig+0x2d4>)
 800b152:	fba3 2301 	umull	r2, r3, r3, r1
 800b156:	095b      	lsrs	r3, r3, #5
 800b158:	2264      	movs	r2, #100	; 0x64
 800b15a:	fb02 f303 	mul.w	r3, r2, r3
 800b15e:	1acb      	subs	r3, r1, r3
 800b160:	00db      	lsls	r3, r3, #3
 800b162:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b166:	4b36      	ldr	r3, [pc, #216]	; (800b240 <UART_SetConfig+0x2d4>)
 800b168:	fba3 2302 	umull	r2, r3, r3, r2
 800b16c:	095b      	lsrs	r3, r3, #5
 800b16e:	005b      	lsls	r3, r3, #1
 800b170:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b174:	441c      	add	r4, r3
 800b176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b17a:	2200      	movs	r2, #0
 800b17c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b180:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b184:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b188:	4642      	mov	r2, r8
 800b18a:	464b      	mov	r3, r9
 800b18c:	1891      	adds	r1, r2, r2
 800b18e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b190:	415b      	adcs	r3, r3
 800b192:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b194:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b198:	4641      	mov	r1, r8
 800b19a:	1851      	adds	r1, r2, r1
 800b19c:	6339      	str	r1, [r7, #48]	; 0x30
 800b19e:	4649      	mov	r1, r9
 800b1a0:	414b      	adcs	r3, r1
 800b1a2:	637b      	str	r3, [r7, #52]	; 0x34
 800b1a4:	f04f 0200 	mov.w	r2, #0
 800b1a8:	f04f 0300 	mov.w	r3, #0
 800b1ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b1b0:	4659      	mov	r1, fp
 800b1b2:	00cb      	lsls	r3, r1, #3
 800b1b4:	4651      	mov	r1, sl
 800b1b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1ba:	4651      	mov	r1, sl
 800b1bc:	00ca      	lsls	r2, r1, #3
 800b1be:	4610      	mov	r0, r2
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	4642      	mov	r2, r8
 800b1c6:	189b      	adds	r3, r3, r2
 800b1c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1cc:	464b      	mov	r3, r9
 800b1ce:	460a      	mov	r2, r1
 800b1d0:	eb42 0303 	adc.w	r3, r2, r3
 800b1d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b1e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b1e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	18db      	adds	r3, r3, r3
 800b1f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1f2:	4613      	mov	r3, r2
 800b1f4:	eb42 0303 	adc.w	r3, r2, r3
 800b1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b1fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b202:	f7f5 fd71 	bl	8000ce8 <__aeabi_uldivmod>
 800b206:	4602      	mov	r2, r0
 800b208:	460b      	mov	r3, r1
 800b20a:	4b0d      	ldr	r3, [pc, #52]	; (800b240 <UART_SetConfig+0x2d4>)
 800b20c:	fba3 1302 	umull	r1, r3, r3, r2
 800b210:	095b      	lsrs	r3, r3, #5
 800b212:	2164      	movs	r1, #100	; 0x64
 800b214:	fb01 f303 	mul.w	r3, r1, r3
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	00db      	lsls	r3, r3, #3
 800b21c:	3332      	adds	r3, #50	; 0x32
 800b21e:	4a08      	ldr	r2, [pc, #32]	; (800b240 <UART_SetConfig+0x2d4>)
 800b220:	fba2 2303 	umull	r2, r3, r2, r3
 800b224:	095b      	lsrs	r3, r3, #5
 800b226:	f003 0207 	and.w	r2, r3, #7
 800b22a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4422      	add	r2, r4
 800b232:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b234:	e106      	b.n	800b444 <UART_SetConfig+0x4d8>
 800b236:	bf00      	nop
 800b238:	40011000 	.word	0x40011000
 800b23c:	40011400 	.word	0x40011400
 800b240:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b248:	2200      	movs	r2, #0
 800b24a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b24e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b252:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b256:	4642      	mov	r2, r8
 800b258:	464b      	mov	r3, r9
 800b25a:	1891      	adds	r1, r2, r2
 800b25c:	6239      	str	r1, [r7, #32]
 800b25e:	415b      	adcs	r3, r3
 800b260:	627b      	str	r3, [r7, #36]	; 0x24
 800b262:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b266:	4641      	mov	r1, r8
 800b268:	1854      	adds	r4, r2, r1
 800b26a:	4649      	mov	r1, r9
 800b26c:	eb43 0501 	adc.w	r5, r3, r1
 800b270:	f04f 0200 	mov.w	r2, #0
 800b274:	f04f 0300 	mov.w	r3, #0
 800b278:	00eb      	lsls	r3, r5, #3
 800b27a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b27e:	00e2      	lsls	r2, r4, #3
 800b280:	4614      	mov	r4, r2
 800b282:	461d      	mov	r5, r3
 800b284:	4643      	mov	r3, r8
 800b286:	18e3      	adds	r3, r4, r3
 800b288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b28c:	464b      	mov	r3, r9
 800b28e:	eb45 0303 	adc.w	r3, r5, r3
 800b292:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b2a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b2a6:	f04f 0200 	mov.w	r2, #0
 800b2aa:	f04f 0300 	mov.w	r3, #0
 800b2ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b2b2:	4629      	mov	r1, r5
 800b2b4:	008b      	lsls	r3, r1, #2
 800b2b6:	4621      	mov	r1, r4
 800b2b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2bc:	4621      	mov	r1, r4
 800b2be:	008a      	lsls	r2, r1, #2
 800b2c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b2c4:	f7f5 fd10 	bl	8000ce8 <__aeabi_uldivmod>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4b60      	ldr	r3, [pc, #384]	; (800b450 <UART_SetConfig+0x4e4>)
 800b2ce:	fba3 2302 	umull	r2, r3, r3, r2
 800b2d2:	095b      	lsrs	r3, r3, #5
 800b2d4:	011c      	lsls	r4, r3, #4
 800b2d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b2e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b2e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b2e8:	4642      	mov	r2, r8
 800b2ea:	464b      	mov	r3, r9
 800b2ec:	1891      	adds	r1, r2, r2
 800b2ee:	61b9      	str	r1, [r7, #24]
 800b2f0:	415b      	adcs	r3, r3
 800b2f2:	61fb      	str	r3, [r7, #28]
 800b2f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b2f8:	4641      	mov	r1, r8
 800b2fa:	1851      	adds	r1, r2, r1
 800b2fc:	6139      	str	r1, [r7, #16]
 800b2fe:	4649      	mov	r1, r9
 800b300:	414b      	adcs	r3, r1
 800b302:	617b      	str	r3, [r7, #20]
 800b304:	f04f 0200 	mov.w	r2, #0
 800b308:	f04f 0300 	mov.w	r3, #0
 800b30c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b310:	4659      	mov	r1, fp
 800b312:	00cb      	lsls	r3, r1, #3
 800b314:	4651      	mov	r1, sl
 800b316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b31a:	4651      	mov	r1, sl
 800b31c:	00ca      	lsls	r2, r1, #3
 800b31e:	4610      	mov	r0, r2
 800b320:	4619      	mov	r1, r3
 800b322:	4603      	mov	r3, r0
 800b324:	4642      	mov	r2, r8
 800b326:	189b      	adds	r3, r3, r2
 800b328:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b32c:	464b      	mov	r3, r9
 800b32e:	460a      	mov	r2, r1
 800b330:	eb42 0303 	adc.w	r3, r2, r3
 800b334:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	67bb      	str	r3, [r7, #120]	; 0x78
 800b342:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b344:	f04f 0200 	mov.w	r2, #0
 800b348:	f04f 0300 	mov.w	r3, #0
 800b34c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b350:	4649      	mov	r1, r9
 800b352:	008b      	lsls	r3, r1, #2
 800b354:	4641      	mov	r1, r8
 800b356:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b35a:	4641      	mov	r1, r8
 800b35c:	008a      	lsls	r2, r1, #2
 800b35e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b362:	f7f5 fcc1 	bl	8000ce8 <__aeabi_uldivmod>
 800b366:	4602      	mov	r2, r0
 800b368:	460b      	mov	r3, r1
 800b36a:	4611      	mov	r1, r2
 800b36c:	4b38      	ldr	r3, [pc, #224]	; (800b450 <UART_SetConfig+0x4e4>)
 800b36e:	fba3 2301 	umull	r2, r3, r3, r1
 800b372:	095b      	lsrs	r3, r3, #5
 800b374:	2264      	movs	r2, #100	; 0x64
 800b376:	fb02 f303 	mul.w	r3, r2, r3
 800b37a:	1acb      	subs	r3, r1, r3
 800b37c:	011b      	lsls	r3, r3, #4
 800b37e:	3332      	adds	r3, #50	; 0x32
 800b380:	4a33      	ldr	r2, [pc, #204]	; (800b450 <UART_SetConfig+0x4e4>)
 800b382:	fba2 2303 	umull	r2, r3, r2, r3
 800b386:	095b      	lsrs	r3, r3, #5
 800b388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b38c:	441c      	add	r4, r3
 800b38e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b392:	2200      	movs	r2, #0
 800b394:	673b      	str	r3, [r7, #112]	; 0x70
 800b396:	677a      	str	r2, [r7, #116]	; 0x74
 800b398:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b39c:	4642      	mov	r2, r8
 800b39e:	464b      	mov	r3, r9
 800b3a0:	1891      	adds	r1, r2, r2
 800b3a2:	60b9      	str	r1, [r7, #8]
 800b3a4:	415b      	adcs	r3, r3
 800b3a6:	60fb      	str	r3, [r7, #12]
 800b3a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b3ac:	4641      	mov	r1, r8
 800b3ae:	1851      	adds	r1, r2, r1
 800b3b0:	6039      	str	r1, [r7, #0]
 800b3b2:	4649      	mov	r1, r9
 800b3b4:	414b      	adcs	r3, r1
 800b3b6:	607b      	str	r3, [r7, #4]
 800b3b8:	f04f 0200 	mov.w	r2, #0
 800b3bc:	f04f 0300 	mov.w	r3, #0
 800b3c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b3c4:	4659      	mov	r1, fp
 800b3c6:	00cb      	lsls	r3, r1, #3
 800b3c8:	4651      	mov	r1, sl
 800b3ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3ce:	4651      	mov	r1, sl
 800b3d0:	00ca      	lsls	r2, r1, #3
 800b3d2:	4610      	mov	r0, r2
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	4642      	mov	r2, r8
 800b3da:	189b      	adds	r3, r3, r2
 800b3dc:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3de:	464b      	mov	r3, r9
 800b3e0:	460a      	mov	r2, r1
 800b3e2:	eb42 0303 	adc.w	r3, r2, r3
 800b3e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	663b      	str	r3, [r7, #96]	; 0x60
 800b3f2:	667a      	str	r2, [r7, #100]	; 0x64
 800b3f4:	f04f 0200 	mov.w	r2, #0
 800b3f8:	f04f 0300 	mov.w	r3, #0
 800b3fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b400:	4649      	mov	r1, r9
 800b402:	008b      	lsls	r3, r1, #2
 800b404:	4641      	mov	r1, r8
 800b406:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b40a:	4641      	mov	r1, r8
 800b40c:	008a      	lsls	r2, r1, #2
 800b40e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b412:	f7f5 fc69 	bl	8000ce8 <__aeabi_uldivmod>
 800b416:	4602      	mov	r2, r0
 800b418:	460b      	mov	r3, r1
 800b41a:	4b0d      	ldr	r3, [pc, #52]	; (800b450 <UART_SetConfig+0x4e4>)
 800b41c:	fba3 1302 	umull	r1, r3, r3, r2
 800b420:	095b      	lsrs	r3, r3, #5
 800b422:	2164      	movs	r1, #100	; 0x64
 800b424:	fb01 f303 	mul.w	r3, r1, r3
 800b428:	1ad3      	subs	r3, r2, r3
 800b42a:	011b      	lsls	r3, r3, #4
 800b42c:	3332      	adds	r3, #50	; 0x32
 800b42e:	4a08      	ldr	r2, [pc, #32]	; (800b450 <UART_SetConfig+0x4e4>)
 800b430:	fba2 2303 	umull	r2, r3, r2, r3
 800b434:	095b      	lsrs	r3, r3, #5
 800b436:	f003 020f 	and.w	r2, r3, #15
 800b43a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4422      	add	r2, r4
 800b442:	609a      	str	r2, [r3, #8]
}
 800b444:	bf00      	nop
 800b446:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b44a:	46bd      	mov	sp, r7
 800b44c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b450:	51eb851f 	.word	0x51eb851f

0800b454 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	4603      	mov	r3, r0
 800b45c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b45e:	2300      	movs	r3, #0
 800b460:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b466:	2b84      	cmp	r3, #132	; 0x84
 800b468:	d005      	beq.n	800b476 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b46a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	4413      	add	r3, r2
 800b472:	3303      	adds	r3, #3
 800b474:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b476:	68fb      	ldr	r3, [r7, #12]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b488:	f000 faf6 	bl	800ba78 <vTaskStartScheduler>
  
  return osOK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	bd80      	pop	{r7, pc}

0800b492 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b492:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b494:	b089      	sub	sp, #36	; 0x24
 800b496:	af04      	add	r7, sp, #16
 800b498:	6078      	str	r0, [r7, #4]
 800b49a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	695b      	ldr	r3, [r3, #20]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d020      	beq.n	800b4e6 <osThreadCreate+0x54>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	699b      	ldr	r3, [r3, #24]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d01c      	beq.n	800b4e6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	685c      	ldr	r4, [r3, #4]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	691e      	ldr	r6, [r3, #16]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7ff ffc8 	bl	800b454 <makeFreeRtosPriority>
 800b4c4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b4ce:	9202      	str	r2, [sp, #8]
 800b4d0:	9301      	str	r3, [sp, #4]
 800b4d2:	9100      	str	r1, [sp, #0]
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	4632      	mov	r2, r6
 800b4d8:	4629      	mov	r1, r5
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f000 f8ed 	bl	800b6ba <xTaskCreateStatic>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	60fb      	str	r3, [r7, #12]
 800b4e4:	e01c      	b.n	800b520 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	685c      	ldr	r4, [r3, #4]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b4f2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7ff ffaa 	bl	800b454 <makeFreeRtosPriority>
 800b500:	4602      	mov	r2, r0
 800b502:	f107 030c 	add.w	r3, r7, #12
 800b506:	9301      	str	r3, [sp, #4]
 800b508:	9200      	str	r2, [sp, #0]
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	4632      	mov	r2, r6
 800b50e:	4629      	mov	r1, r5
 800b510:	4620      	mov	r0, r4
 800b512:	f000 f92f 	bl	800b774 <xTaskCreate>
 800b516:	4603      	mov	r3, r0
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d001      	beq.n	800b520 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b51c:	2300      	movs	r3, #0
 800b51e:	e000      	b.n	800b522 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b520:	68fb      	ldr	r3, [r7, #12]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3714      	adds	r7, #20
 800b526:	46bd      	mov	sp, r7
 800b528:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b52a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b084      	sub	sp, #16
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d001      	beq.n	800b540 <osDelay+0x16>
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	e000      	b.n	800b542 <osDelay+0x18>
 800b540:	2301      	movs	r3, #1
 800b542:	4618      	mov	r0, r3
 800b544:	f000 fa64 	bl	800ba10 <vTaskDelay>
  
  return osOK;
 800b548:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b552:	b480      	push	{r7}
 800b554:	b083      	sub	sp, #12
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f103 0208 	add.w	r2, r3, #8
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f04f 32ff 	mov.w	r2, #4294967295
 800b56a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f103 0208 	add.w	r2, r3, #8
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f103 0208 	add.w	r2, r3, #8
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b586:	bf00      	nop
 800b588:	370c      	adds	r7, #12
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr

0800b592 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b592:	b480      	push	{r7}
 800b594:	b083      	sub	sp, #12
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2200      	movs	r2, #0
 800b59e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	68fa      	ldr	r2, [r7, #12]
 800b5c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	689a      	ldr	r2, [r3, #8]
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	689b      	ldr	r3, [r3, #8]
 800b5ce:	683a      	ldr	r2, [r7, #0]
 800b5d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	683a      	ldr	r2, [r7, #0]
 800b5d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	1c5a      	adds	r2, r3, #1
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	601a      	str	r2, [r3, #0]
}
 800b5e8:	bf00      	nop
 800b5ea:	3714      	adds	r7, #20
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b60a:	d103      	bne.n	800b614 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	691b      	ldr	r3, [r3, #16]
 800b610:	60fb      	str	r3, [r7, #12]
 800b612:	e00c      	b.n	800b62e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	3308      	adds	r3, #8
 800b618:	60fb      	str	r3, [r7, #12]
 800b61a:	e002      	b.n	800b622 <vListInsert+0x2e>
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	60fb      	str	r3, [r7, #12]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	68ba      	ldr	r2, [r7, #8]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d2f6      	bcs.n	800b61c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	685a      	ldr	r2, [r3, #4]
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	683a      	ldr	r2, [r7, #0]
 800b63c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	683a      	ldr	r2, [r7, #0]
 800b648:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	1c5a      	adds	r2, r3, #1
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	601a      	str	r2, [r3, #0]
}
 800b65a:	bf00      	nop
 800b65c:	3714      	adds	r7, #20
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b666:	b480      	push	{r7}
 800b668:	b085      	sub	sp, #20
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	6892      	ldr	r2, [r2, #8]
 800b67c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	6852      	ldr	r2, [r2, #4]
 800b686:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d103      	bne.n	800b69a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	689a      	ldr	r2, [r3, #8]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	1e5a      	subs	r2, r3, #1
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3714      	adds	r7, #20
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr

0800b6ba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b08e      	sub	sp, #56	; 0x38
 800b6be:	af04      	add	r7, sp, #16
 800b6c0:	60f8      	str	r0, [r7, #12]
 800b6c2:	60b9      	str	r1, [r7, #8]
 800b6c4:	607a      	str	r2, [r7, #4]
 800b6c6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d10a      	bne.n	800b6e4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b6e0:	bf00      	nop
 800b6e2:	e7fe      	b.n	800b6e2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10a      	bne.n	800b700 <xTaskCreateStatic+0x46>
	__asm volatile
 800b6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	61fb      	str	r3, [r7, #28]
}
 800b6fc:	bf00      	nop
 800b6fe:	e7fe      	b.n	800b6fe <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b700:	23a0      	movs	r3, #160	; 0xa0
 800b702:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	2ba0      	cmp	r3, #160	; 0xa0
 800b708:	d00a      	beq.n	800b720 <xTaskCreateStatic+0x66>
	__asm volatile
 800b70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	61bb      	str	r3, [r7, #24]
}
 800b71c:	bf00      	nop
 800b71e:	e7fe      	b.n	800b71e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b720:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b724:	2b00      	cmp	r3, #0
 800b726:	d01e      	beq.n	800b766 <xTaskCreateStatic+0xac>
 800b728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d01b      	beq.n	800b766 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b730:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b734:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b736:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73a:	2202      	movs	r2, #2
 800b73c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b740:	2300      	movs	r3, #0
 800b742:	9303      	str	r3, [sp, #12]
 800b744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b746:	9302      	str	r3, [sp, #8]
 800b748:	f107 0314 	add.w	r3, r7, #20
 800b74c:	9301      	str	r3, [sp, #4]
 800b74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	68b9      	ldr	r1, [r7, #8]
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f000 f851 	bl	800b800 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b75e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b760:	f000 f8ec 	bl	800b93c <prvAddNewTaskToReadyList>
 800b764:	e001      	b.n	800b76a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b766:	2300      	movs	r3, #0
 800b768:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b76a:	697b      	ldr	r3, [r7, #20]
	}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3728      	adds	r7, #40	; 0x28
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b774:	b580      	push	{r7, lr}
 800b776:	b08c      	sub	sp, #48	; 0x30
 800b778:	af04      	add	r7, sp, #16
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	603b      	str	r3, [r7, #0]
 800b780:	4613      	mov	r3, r2
 800b782:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b784:	88fb      	ldrh	r3, [r7, #6]
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	4618      	mov	r0, r3
 800b78a:	f000 fef5 	bl	800c578 <pvPortMalloc>
 800b78e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00e      	beq.n	800b7b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b796:	20a0      	movs	r0, #160	; 0xa0
 800b798:	f000 feee 	bl	800c578 <pvPortMalloc>
 800b79c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d003      	beq.n	800b7ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	697a      	ldr	r2, [r7, #20]
 800b7a8:	631a      	str	r2, [r3, #48]	; 0x30
 800b7aa:	e005      	b.n	800b7b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b7ac:	6978      	ldr	r0, [r7, #20]
 800b7ae:	f000 ffaf 	bl	800c710 <vPortFree>
 800b7b2:	e001      	b.n	800b7b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d017      	beq.n	800b7ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b7be:	69fb      	ldr	r3, [r7, #28]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b7c6:	88fa      	ldrh	r2, [r7, #6]
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	9303      	str	r3, [sp, #12]
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	9302      	str	r3, [sp, #8]
 800b7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d2:	9301      	str	r3, [sp, #4]
 800b7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	68b9      	ldr	r1, [r7, #8]
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f000 f80f 	bl	800b800 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b7e2:	69f8      	ldr	r0, [r7, #28]
 800b7e4:	f000 f8aa 	bl	800b93c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	61bb      	str	r3, [r7, #24]
 800b7ec:	e002      	b.n	800b7f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b7ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b7f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b7f4:	69bb      	ldr	r3, [r7, #24]
	}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3720      	adds	r7, #32
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
	...

0800b800 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b088      	sub	sp, #32
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	607a      	str	r2, [r7, #4]
 800b80c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b818:	3b01      	subs	r3, #1
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	4413      	add	r3, r2
 800b81e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	f023 0307 	bic.w	r3, r3, #7
 800b826:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	f003 0307 	and.w	r3, r3, #7
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00a      	beq.n	800b848 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b836:	f383 8811 	msr	BASEPRI, r3
 800b83a:	f3bf 8f6f 	isb	sy
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	617b      	str	r3, [r7, #20]
}
 800b844:	bf00      	nop
 800b846:	e7fe      	b.n	800b846 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d01f      	beq.n	800b88e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b84e:	2300      	movs	r3, #0
 800b850:	61fb      	str	r3, [r7, #28]
 800b852:	e012      	b.n	800b87a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	4413      	add	r3, r2
 800b85a:	7819      	ldrb	r1, [r3, #0]
 800b85c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	4413      	add	r3, r2
 800b862:	3334      	adds	r3, #52	; 0x34
 800b864:	460a      	mov	r2, r1
 800b866:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b868:	68ba      	ldr	r2, [r7, #8]
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	4413      	add	r3, r2
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d006      	beq.n	800b882 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	3301      	adds	r3, #1
 800b878:	61fb      	str	r3, [r7, #28]
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	2b0f      	cmp	r3, #15
 800b87e:	d9e9      	bls.n	800b854 <prvInitialiseNewTask+0x54>
 800b880:	e000      	b.n	800b884 <prvInitialiseNewTask+0x84>
			{
				break;
 800b882:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b886:	2200      	movs	r2, #0
 800b888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b88c:	e003      	b.n	800b896 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b890:	2200      	movs	r2, #0
 800b892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b898:	2b06      	cmp	r3, #6
 800b89a:	d901      	bls.n	800b8a0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b89c:	2306      	movs	r3, #6
 800b89e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8aa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7ff fe6b 	bl	800b592 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8be:	3318      	adds	r3, #24
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7ff fe66 	bl	800b592 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ce:	f1c3 0207 	rsb	r2, r3, #7
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ee:	334c      	adds	r3, #76	; 0x4c
 800b8f0:	224c      	movs	r2, #76	; 0x4c
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f001 feb1 	bl	800d65c <memset>
 800b8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fc:	4a0c      	ldr	r2, [pc, #48]	; (800b930 <prvInitialiseNewTask+0x130>)
 800b8fe:	651a      	str	r2, [r3, #80]	; 0x50
 800b900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b902:	4a0c      	ldr	r2, [pc, #48]	; (800b934 <prvInitialiseNewTask+0x134>)
 800b904:	655a      	str	r2, [r3, #84]	; 0x54
 800b906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b908:	4a0b      	ldr	r2, [pc, #44]	; (800b938 <prvInitialiseNewTask+0x138>)
 800b90a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b90c:	683a      	ldr	r2, [r7, #0]
 800b90e:	68f9      	ldr	r1, [r7, #12]
 800b910:	69b8      	ldr	r0, [r7, #24]
 800b912:	f000 fc1f 	bl	800c154 <pxPortInitialiseStack>
 800b916:	4602      	mov	r2, r0
 800b918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d002      	beq.n	800b928 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b926:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b928:	bf00      	nop
 800b92a:	3720      	adds	r7, #32
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	20004964 	.word	0x20004964
 800b934:	200049cc 	.word	0x200049cc
 800b938:	20004a34 	.word	0x20004a34

0800b93c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b944:	f000 fd36 	bl	800c3b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b948:	4b2a      	ldr	r3, [pc, #168]	; (800b9f4 <prvAddNewTaskToReadyList+0xb8>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	3301      	adds	r3, #1
 800b94e:	4a29      	ldr	r2, [pc, #164]	; (800b9f4 <prvAddNewTaskToReadyList+0xb8>)
 800b950:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b952:	4b29      	ldr	r3, [pc, #164]	; (800b9f8 <prvAddNewTaskToReadyList+0xbc>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d109      	bne.n	800b96e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b95a:	4a27      	ldr	r2, [pc, #156]	; (800b9f8 <prvAddNewTaskToReadyList+0xbc>)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b960:	4b24      	ldr	r3, [pc, #144]	; (800b9f4 <prvAddNewTaskToReadyList+0xb8>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b01      	cmp	r3, #1
 800b966:	d110      	bne.n	800b98a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b968:	f000 facc 	bl	800bf04 <prvInitialiseTaskLists>
 800b96c:	e00d      	b.n	800b98a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b96e:	4b23      	ldr	r3, [pc, #140]	; (800b9fc <prvAddNewTaskToReadyList+0xc0>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d109      	bne.n	800b98a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b976:	4b20      	ldr	r3, [pc, #128]	; (800b9f8 <prvAddNewTaskToReadyList+0xbc>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b980:	429a      	cmp	r2, r3
 800b982:	d802      	bhi.n	800b98a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b984:	4a1c      	ldr	r2, [pc, #112]	; (800b9f8 <prvAddNewTaskToReadyList+0xbc>)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b98a:	4b1d      	ldr	r3, [pc, #116]	; (800ba00 <prvAddNewTaskToReadyList+0xc4>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	3301      	adds	r3, #1
 800b990:	4a1b      	ldr	r2, [pc, #108]	; (800ba00 <prvAddNewTaskToReadyList+0xc4>)
 800b992:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b998:	2201      	movs	r2, #1
 800b99a:	409a      	lsls	r2, r3
 800b99c:	4b19      	ldr	r3, [pc, #100]	; (800ba04 <prvAddNewTaskToReadyList+0xc8>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	4a18      	ldr	r2, [pc, #96]	; (800ba04 <prvAddNewTaskToReadyList+0xc8>)
 800b9a4:	6013      	str	r3, [r2, #0]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	4413      	add	r3, r2
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	4a15      	ldr	r2, [pc, #84]	; (800ba08 <prvAddNewTaskToReadyList+0xcc>)
 800b9b4:	441a      	add	r2, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	3304      	adds	r3, #4
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	4610      	mov	r0, r2
 800b9be:	f7ff fdf5 	bl	800b5ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b9c2:	f000 fd27 	bl	800c414 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b9c6:	4b0d      	ldr	r3, [pc, #52]	; (800b9fc <prvAddNewTaskToReadyList+0xc0>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00e      	beq.n	800b9ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b9ce:	4b0a      	ldr	r3, [pc, #40]	; (800b9f8 <prvAddNewTaskToReadyList+0xbc>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d207      	bcs.n	800b9ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b9dc:	4b0b      	ldr	r3, [pc, #44]	; (800ba0c <prvAddNewTaskToReadyList+0xd0>)
 800b9de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9e2:	601a      	str	r2, [r3, #0]
 800b9e4:	f3bf 8f4f 	dsb	sy
 800b9e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9ec:	bf00      	nop
 800b9ee:	3708      	adds	r7, #8
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	20000d10 	.word	0x20000d10
 800b9f8:	20000c10 	.word	0x20000c10
 800b9fc:	20000d1c 	.word	0x20000d1c
 800ba00:	20000d2c 	.word	0x20000d2c
 800ba04:	20000d18 	.word	0x20000d18
 800ba08:	20000c14 	.word	0x20000c14
 800ba0c:	e000ed04 	.word	0xe000ed04

0800ba10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d017      	beq.n	800ba52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ba22:	4b13      	ldr	r3, [pc, #76]	; (800ba70 <vTaskDelay+0x60>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00a      	beq.n	800ba40 <vTaskDelay+0x30>
	__asm volatile
 800ba2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2e:	f383 8811 	msr	BASEPRI, r3
 800ba32:	f3bf 8f6f 	isb	sy
 800ba36:	f3bf 8f4f 	dsb	sy
 800ba3a:	60bb      	str	r3, [r7, #8]
}
 800ba3c:	bf00      	nop
 800ba3e:	e7fe      	b.n	800ba3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ba40:	f000 f884 	bl	800bb4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ba44:	2100      	movs	r1, #0
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 fb1e 	bl	800c088 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ba4c:	f000 f88c 	bl	800bb68 <xTaskResumeAll>
 800ba50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d107      	bne.n	800ba68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ba58:	4b06      	ldr	r3, [pc, #24]	; (800ba74 <vTaskDelay+0x64>)
 800ba5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba5e:	601a      	str	r2, [r3, #0]
 800ba60:	f3bf 8f4f 	dsb	sy
 800ba64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba68:	bf00      	nop
 800ba6a:	3710      	adds	r7, #16
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	20000d38 	.word	0x20000d38
 800ba74:	e000ed04 	.word	0xe000ed04

0800ba78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b08a      	sub	sp, #40	; 0x28
 800ba7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ba82:	2300      	movs	r3, #0
 800ba84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ba86:	463a      	mov	r2, r7
 800ba88:	1d39      	adds	r1, r7, #4
 800ba8a:	f107 0308 	add.w	r3, r7, #8
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7f7 f960 	bl	8002d54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ba94:	6839      	ldr	r1, [r7, #0]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	68ba      	ldr	r2, [r7, #8]
 800ba9a:	9202      	str	r2, [sp, #8]
 800ba9c:	9301      	str	r3, [sp, #4]
 800ba9e:	2300      	movs	r3, #0
 800baa0:	9300      	str	r3, [sp, #0]
 800baa2:	2300      	movs	r3, #0
 800baa4:	460a      	mov	r2, r1
 800baa6:	4921      	ldr	r1, [pc, #132]	; (800bb2c <vTaskStartScheduler+0xb4>)
 800baa8:	4821      	ldr	r0, [pc, #132]	; (800bb30 <vTaskStartScheduler+0xb8>)
 800baaa:	f7ff fe06 	bl	800b6ba <xTaskCreateStatic>
 800baae:	4603      	mov	r3, r0
 800bab0:	4a20      	ldr	r2, [pc, #128]	; (800bb34 <vTaskStartScheduler+0xbc>)
 800bab2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bab4:	4b1f      	ldr	r3, [pc, #124]	; (800bb34 <vTaskStartScheduler+0xbc>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d002      	beq.n	800bac2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800babc:	2301      	movs	r3, #1
 800babe:	617b      	str	r3, [r7, #20]
 800bac0:	e001      	b.n	800bac6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bac2:	2300      	movs	r3, #0
 800bac4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d11b      	bne.n	800bb04 <vTaskStartScheduler+0x8c>
	__asm volatile
 800bacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad0:	f383 8811 	msr	BASEPRI, r3
 800bad4:	f3bf 8f6f 	isb	sy
 800bad8:	f3bf 8f4f 	dsb	sy
 800badc:	613b      	str	r3, [r7, #16]
}
 800bade:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bae0:	4b15      	ldr	r3, [pc, #84]	; (800bb38 <vTaskStartScheduler+0xc0>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	334c      	adds	r3, #76	; 0x4c
 800bae6:	4a15      	ldr	r2, [pc, #84]	; (800bb3c <vTaskStartScheduler+0xc4>)
 800bae8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800baea:	4b15      	ldr	r3, [pc, #84]	; (800bb40 <vTaskStartScheduler+0xc8>)
 800baec:	f04f 32ff 	mov.w	r2, #4294967295
 800baf0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800baf2:	4b14      	ldr	r3, [pc, #80]	; (800bb44 <vTaskStartScheduler+0xcc>)
 800baf4:	2201      	movs	r2, #1
 800baf6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800baf8:	4b13      	ldr	r3, [pc, #76]	; (800bb48 <vTaskStartScheduler+0xd0>)
 800bafa:	2200      	movs	r2, #0
 800bafc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bafe:	f000 fbb7 	bl	800c270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bb02:	e00e      	b.n	800bb22 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb0a:	d10a      	bne.n	800bb22 <vTaskStartScheduler+0xaa>
	__asm volatile
 800bb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb10:	f383 8811 	msr	BASEPRI, r3
 800bb14:	f3bf 8f6f 	isb	sy
 800bb18:	f3bf 8f4f 	dsb	sy
 800bb1c:	60fb      	str	r3, [r7, #12]
}
 800bb1e:	bf00      	nop
 800bb20:	e7fe      	b.n	800bb20 <vTaskStartScheduler+0xa8>
}
 800bb22:	bf00      	nop
 800bb24:	3718      	adds	r7, #24
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	08010ad4 	.word	0x08010ad4
 800bb30:	0800bed5 	.word	0x0800bed5
 800bb34:	20000d34 	.word	0x20000d34
 800bb38:	20000c10 	.word	0x20000c10
 800bb3c:	20000074 	.word	0x20000074
 800bb40:	20000d30 	.word	0x20000d30
 800bb44:	20000d1c 	.word	0x20000d1c
 800bb48:	20000d14 	.word	0x20000d14

0800bb4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bb50:	4b04      	ldr	r3, [pc, #16]	; (800bb64 <vTaskSuspendAll+0x18>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	3301      	adds	r3, #1
 800bb56:	4a03      	ldr	r2, [pc, #12]	; (800bb64 <vTaskSuspendAll+0x18>)
 800bb58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bb5a:	bf00      	nop
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr
 800bb64:	20000d38 	.word	0x20000d38

0800bb68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bb72:	2300      	movs	r3, #0
 800bb74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bb76:	4b41      	ldr	r3, [pc, #260]	; (800bc7c <xTaskResumeAll+0x114>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d10a      	bne.n	800bb94 <xTaskResumeAll+0x2c>
	__asm volatile
 800bb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb82:	f383 8811 	msr	BASEPRI, r3
 800bb86:	f3bf 8f6f 	isb	sy
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	603b      	str	r3, [r7, #0]
}
 800bb90:	bf00      	nop
 800bb92:	e7fe      	b.n	800bb92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bb94:	f000 fc0e 	bl	800c3b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bb98:	4b38      	ldr	r3, [pc, #224]	; (800bc7c <xTaskResumeAll+0x114>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	4a37      	ldr	r2, [pc, #220]	; (800bc7c <xTaskResumeAll+0x114>)
 800bba0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bba2:	4b36      	ldr	r3, [pc, #216]	; (800bc7c <xTaskResumeAll+0x114>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d161      	bne.n	800bc6e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bbaa:	4b35      	ldr	r3, [pc, #212]	; (800bc80 <xTaskResumeAll+0x118>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d05d      	beq.n	800bc6e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bbb2:	e02e      	b.n	800bc12 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbb4:	4b33      	ldr	r3, [pc, #204]	; (800bc84 <xTaskResumeAll+0x11c>)
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	68db      	ldr	r3, [r3, #12]
 800bbba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	3318      	adds	r3, #24
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7ff fd50 	bl	800b666 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	3304      	adds	r3, #4
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7ff fd4b 	bl	800b666 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	409a      	lsls	r2, r3
 800bbd8:	4b2b      	ldr	r3, [pc, #172]	; (800bc88 <xTaskResumeAll+0x120>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	4a2a      	ldr	r2, [pc, #168]	; (800bc88 <xTaskResumeAll+0x120>)
 800bbe0:	6013      	str	r3, [r2, #0]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	4413      	add	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	4a27      	ldr	r2, [pc, #156]	; (800bc8c <xTaskResumeAll+0x124>)
 800bbf0:	441a      	add	r2, r3
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	3304      	adds	r3, #4
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	4610      	mov	r0, r2
 800bbfa:	f7ff fcd7 	bl	800b5ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc02:	4b23      	ldr	r3, [pc, #140]	; (800bc90 <xTaskResumeAll+0x128>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d302      	bcc.n	800bc12 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bc0c:	4b21      	ldr	r3, [pc, #132]	; (800bc94 <xTaskResumeAll+0x12c>)
 800bc0e:	2201      	movs	r2, #1
 800bc10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc12:	4b1c      	ldr	r3, [pc, #112]	; (800bc84 <xTaskResumeAll+0x11c>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d1cc      	bne.n	800bbb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d001      	beq.n	800bc24 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bc20:	f000 fa12 	bl	800c048 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bc24:	4b1c      	ldr	r3, [pc, #112]	; (800bc98 <xTaskResumeAll+0x130>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d010      	beq.n	800bc52 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bc30:	f000 f836 	bl	800bca0 <xTaskIncrementTick>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d002      	beq.n	800bc40 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bc3a:	4b16      	ldr	r3, [pc, #88]	; (800bc94 <xTaskResumeAll+0x12c>)
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	3b01      	subs	r3, #1
 800bc44:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d1f1      	bne.n	800bc30 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800bc4c:	4b12      	ldr	r3, [pc, #72]	; (800bc98 <xTaskResumeAll+0x130>)
 800bc4e:	2200      	movs	r2, #0
 800bc50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bc52:	4b10      	ldr	r3, [pc, #64]	; (800bc94 <xTaskResumeAll+0x12c>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d009      	beq.n	800bc6e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bc5e:	4b0f      	ldr	r3, [pc, #60]	; (800bc9c <xTaskResumeAll+0x134>)
 800bc60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc64:	601a      	str	r2, [r3, #0]
 800bc66:	f3bf 8f4f 	dsb	sy
 800bc6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc6e:	f000 fbd1 	bl	800c414 <vPortExitCritical>

	return xAlreadyYielded;
 800bc72:	68bb      	ldr	r3, [r7, #8]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	20000d38 	.word	0x20000d38
 800bc80:	20000d10 	.word	0x20000d10
 800bc84:	20000cd0 	.word	0x20000cd0
 800bc88:	20000d18 	.word	0x20000d18
 800bc8c:	20000c14 	.word	0x20000c14
 800bc90:	20000c10 	.word	0x20000c10
 800bc94:	20000d24 	.word	0x20000d24
 800bc98:	20000d20 	.word	0x20000d20
 800bc9c:	e000ed04 	.word	0xe000ed04

0800bca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b086      	sub	sp, #24
 800bca4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bca6:	2300      	movs	r3, #0
 800bca8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcaa:	4b4e      	ldr	r3, [pc, #312]	; (800bde4 <xTaskIncrementTick+0x144>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f040 808e 	bne.w	800bdd0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bcb4:	4b4c      	ldr	r3, [pc, #304]	; (800bde8 <xTaskIncrementTick+0x148>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bcbc:	4a4a      	ldr	r2, [pc, #296]	; (800bde8 <xTaskIncrementTick+0x148>)
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d120      	bne.n	800bd0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bcc8:	4b48      	ldr	r3, [pc, #288]	; (800bdec <xTaskIncrementTick+0x14c>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d00a      	beq.n	800bce8 <xTaskIncrementTick+0x48>
	__asm volatile
 800bcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd6:	f383 8811 	msr	BASEPRI, r3
 800bcda:	f3bf 8f6f 	isb	sy
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	603b      	str	r3, [r7, #0]
}
 800bce4:	bf00      	nop
 800bce6:	e7fe      	b.n	800bce6 <xTaskIncrementTick+0x46>
 800bce8:	4b40      	ldr	r3, [pc, #256]	; (800bdec <xTaskIncrementTick+0x14c>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	60fb      	str	r3, [r7, #12]
 800bcee:	4b40      	ldr	r3, [pc, #256]	; (800bdf0 <xTaskIncrementTick+0x150>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a3e      	ldr	r2, [pc, #248]	; (800bdec <xTaskIncrementTick+0x14c>)
 800bcf4:	6013      	str	r3, [r2, #0]
 800bcf6:	4a3e      	ldr	r2, [pc, #248]	; (800bdf0 <xTaskIncrementTick+0x150>)
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6013      	str	r3, [r2, #0]
 800bcfc:	4b3d      	ldr	r3, [pc, #244]	; (800bdf4 <xTaskIncrementTick+0x154>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	3301      	adds	r3, #1
 800bd02:	4a3c      	ldr	r2, [pc, #240]	; (800bdf4 <xTaskIncrementTick+0x154>)
 800bd04:	6013      	str	r3, [r2, #0]
 800bd06:	f000 f99f 	bl	800c048 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bd0a:	4b3b      	ldr	r3, [pc, #236]	; (800bdf8 <xTaskIncrementTick+0x158>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	693a      	ldr	r2, [r7, #16]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d348      	bcc.n	800bda6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd14:	4b35      	ldr	r3, [pc, #212]	; (800bdec <xTaskIncrementTick+0x14c>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d104      	bne.n	800bd28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd1e:	4b36      	ldr	r3, [pc, #216]	; (800bdf8 <xTaskIncrementTick+0x158>)
 800bd20:	f04f 32ff 	mov.w	r2, #4294967295
 800bd24:	601a      	str	r2, [r3, #0]
					break;
 800bd26:	e03e      	b.n	800bda6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd28:	4b30      	ldr	r3, [pc, #192]	; (800bdec <xTaskIncrementTick+0x14c>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	68db      	ldr	r3, [r3, #12]
 800bd30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bd38:	693a      	ldr	r2, [r7, #16]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d203      	bcs.n	800bd48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bd40:	4a2d      	ldr	r2, [pc, #180]	; (800bdf8 <xTaskIncrementTick+0x158>)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bd46:	e02e      	b.n	800bda6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	3304      	adds	r3, #4
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7ff fc8a 	bl	800b666 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d004      	beq.n	800bd64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	3318      	adds	r3, #24
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7ff fc81 	bl	800b666 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd68:	2201      	movs	r2, #1
 800bd6a:	409a      	lsls	r2, r3
 800bd6c:	4b23      	ldr	r3, [pc, #140]	; (800bdfc <xTaskIncrementTick+0x15c>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4313      	orrs	r3, r2
 800bd72:	4a22      	ldr	r2, [pc, #136]	; (800bdfc <xTaskIncrementTick+0x15c>)
 800bd74:	6013      	str	r3, [r2, #0]
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	4413      	add	r3, r2
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	4a1f      	ldr	r2, [pc, #124]	; (800be00 <xTaskIncrementTick+0x160>)
 800bd84:	441a      	add	r2, r3
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	3304      	adds	r3, #4
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	4610      	mov	r0, r2
 800bd8e:	f7ff fc0d 	bl	800b5ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd96:	4b1b      	ldr	r3, [pc, #108]	; (800be04 <xTaskIncrementTick+0x164>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d3b9      	bcc.n	800bd14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bda0:	2301      	movs	r3, #1
 800bda2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bda4:	e7b6      	b.n	800bd14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bda6:	4b17      	ldr	r3, [pc, #92]	; (800be04 <xTaskIncrementTick+0x164>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdac:	4914      	ldr	r1, [pc, #80]	; (800be00 <xTaskIncrementTick+0x160>)
 800bdae:	4613      	mov	r3, r2
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	4413      	add	r3, r2
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	440b      	add	r3, r1
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d901      	bls.n	800bdc2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bdc2:	4b11      	ldr	r3, [pc, #68]	; (800be08 <xTaskIncrementTick+0x168>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d007      	beq.n	800bdda <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	617b      	str	r3, [r7, #20]
 800bdce:	e004      	b.n	800bdda <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bdd0:	4b0e      	ldr	r3, [pc, #56]	; (800be0c <xTaskIncrementTick+0x16c>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	4a0d      	ldr	r2, [pc, #52]	; (800be0c <xTaskIncrementTick+0x16c>)
 800bdd8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bdda:	697b      	ldr	r3, [r7, #20]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3718      	adds	r7, #24
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	20000d38 	.word	0x20000d38
 800bde8:	20000d14 	.word	0x20000d14
 800bdec:	20000cc8 	.word	0x20000cc8
 800bdf0:	20000ccc 	.word	0x20000ccc
 800bdf4:	20000d28 	.word	0x20000d28
 800bdf8:	20000d30 	.word	0x20000d30
 800bdfc:	20000d18 	.word	0x20000d18
 800be00:	20000c14 	.word	0x20000c14
 800be04:	20000c10 	.word	0x20000c10
 800be08:	20000d24 	.word	0x20000d24
 800be0c:	20000d20 	.word	0x20000d20

0800be10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800be10:	b480      	push	{r7}
 800be12:	b087      	sub	sp, #28
 800be14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800be16:	4b29      	ldr	r3, [pc, #164]	; (800bebc <vTaskSwitchContext+0xac>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d003      	beq.n	800be26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800be1e:	4b28      	ldr	r3, [pc, #160]	; (800bec0 <vTaskSwitchContext+0xb0>)
 800be20:	2201      	movs	r2, #1
 800be22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800be24:	e044      	b.n	800beb0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800be26:	4b26      	ldr	r3, [pc, #152]	; (800bec0 <vTaskSwitchContext+0xb0>)
 800be28:	2200      	movs	r2, #0
 800be2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be2c:	4b25      	ldr	r3, [pc, #148]	; (800bec4 <vTaskSwitchContext+0xb4>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	fab3 f383 	clz	r3, r3
 800be38:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800be3a:	7afb      	ldrb	r3, [r7, #11]
 800be3c:	f1c3 031f 	rsb	r3, r3, #31
 800be40:	617b      	str	r3, [r7, #20]
 800be42:	4921      	ldr	r1, [pc, #132]	; (800bec8 <vTaskSwitchContext+0xb8>)
 800be44:	697a      	ldr	r2, [r7, #20]
 800be46:	4613      	mov	r3, r2
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	4413      	add	r3, r2
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	440b      	add	r3, r1
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d10a      	bne.n	800be6c <vTaskSwitchContext+0x5c>
	__asm volatile
 800be56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5a:	f383 8811 	msr	BASEPRI, r3
 800be5e:	f3bf 8f6f 	isb	sy
 800be62:	f3bf 8f4f 	dsb	sy
 800be66:	607b      	str	r3, [r7, #4]
}
 800be68:	bf00      	nop
 800be6a:	e7fe      	b.n	800be6a <vTaskSwitchContext+0x5a>
 800be6c:	697a      	ldr	r2, [r7, #20]
 800be6e:	4613      	mov	r3, r2
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	4413      	add	r3, r2
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	4a14      	ldr	r2, [pc, #80]	; (800bec8 <vTaskSwitchContext+0xb8>)
 800be78:	4413      	add	r3, r2
 800be7a:	613b      	str	r3, [r7, #16]
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	685a      	ldr	r2, [r3, #4]
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	605a      	str	r2, [r3, #4]
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	685a      	ldr	r2, [r3, #4]
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	3308      	adds	r3, #8
 800be8e:	429a      	cmp	r2, r3
 800be90:	d104      	bne.n	800be9c <vTaskSwitchContext+0x8c>
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	685a      	ldr	r2, [r3, #4]
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	605a      	str	r2, [r3, #4]
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	4a0a      	ldr	r2, [pc, #40]	; (800becc <vTaskSwitchContext+0xbc>)
 800bea4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bea6:	4b09      	ldr	r3, [pc, #36]	; (800becc <vTaskSwitchContext+0xbc>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	334c      	adds	r3, #76	; 0x4c
 800beac:	4a08      	ldr	r2, [pc, #32]	; (800bed0 <vTaskSwitchContext+0xc0>)
 800beae:	6013      	str	r3, [r2, #0]
}
 800beb0:	bf00      	nop
 800beb2:	371c      	adds	r7, #28
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr
 800bebc:	20000d38 	.word	0x20000d38
 800bec0:	20000d24 	.word	0x20000d24
 800bec4:	20000d18 	.word	0x20000d18
 800bec8:	20000c14 	.word	0x20000c14
 800becc:	20000c10 	.word	0x20000c10
 800bed0:	20000074 	.word	0x20000074

0800bed4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bedc:	f000 f852 	bl	800bf84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bee0:	4b06      	ldr	r3, [pc, #24]	; (800befc <prvIdleTask+0x28>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d9f9      	bls.n	800bedc <prvIdleTask+0x8>
			{
				taskYIELD();
 800bee8:	4b05      	ldr	r3, [pc, #20]	; (800bf00 <prvIdleTask+0x2c>)
 800beea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beee:	601a      	str	r2, [r3, #0]
 800bef0:	f3bf 8f4f 	dsb	sy
 800bef4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bef8:	e7f0      	b.n	800bedc <prvIdleTask+0x8>
 800befa:	bf00      	nop
 800befc:	20000c14 	.word	0x20000c14
 800bf00:	e000ed04 	.word	0xe000ed04

0800bf04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	607b      	str	r3, [r7, #4]
 800bf0e:	e00c      	b.n	800bf2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	4613      	mov	r3, r2
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4413      	add	r3, r2
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	4a12      	ldr	r2, [pc, #72]	; (800bf64 <prvInitialiseTaskLists+0x60>)
 800bf1c:	4413      	add	r3, r2
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7ff fb17 	bl	800b552 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	3301      	adds	r3, #1
 800bf28:	607b      	str	r3, [r7, #4]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2b06      	cmp	r3, #6
 800bf2e:	d9ef      	bls.n	800bf10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf30:	480d      	ldr	r0, [pc, #52]	; (800bf68 <prvInitialiseTaskLists+0x64>)
 800bf32:	f7ff fb0e 	bl	800b552 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf36:	480d      	ldr	r0, [pc, #52]	; (800bf6c <prvInitialiseTaskLists+0x68>)
 800bf38:	f7ff fb0b 	bl	800b552 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf3c:	480c      	ldr	r0, [pc, #48]	; (800bf70 <prvInitialiseTaskLists+0x6c>)
 800bf3e:	f7ff fb08 	bl	800b552 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf42:	480c      	ldr	r0, [pc, #48]	; (800bf74 <prvInitialiseTaskLists+0x70>)
 800bf44:	f7ff fb05 	bl	800b552 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf48:	480b      	ldr	r0, [pc, #44]	; (800bf78 <prvInitialiseTaskLists+0x74>)
 800bf4a:	f7ff fb02 	bl	800b552 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf4e:	4b0b      	ldr	r3, [pc, #44]	; (800bf7c <prvInitialiseTaskLists+0x78>)
 800bf50:	4a05      	ldr	r2, [pc, #20]	; (800bf68 <prvInitialiseTaskLists+0x64>)
 800bf52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf54:	4b0a      	ldr	r3, [pc, #40]	; (800bf80 <prvInitialiseTaskLists+0x7c>)
 800bf56:	4a05      	ldr	r2, [pc, #20]	; (800bf6c <prvInitialiseTaskLists+0x68>)
 800bf58:	601a      	str	r2, [r3, #0]
}
 800bf5a:	bf00      	nop
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	20000c14 	.word	0x20000c14
 800bf68:	20000ca0 	.word	0x20000ca0
 800bf6c:	20000cb4 	.word	0x20000cb4
 800bf70:	20000cd0 	.word	0x20000cd0
 800bf74:	20000ce4 	.word	0x20000ce4
 800bf78:	20000cfc 	.word	0x20000cfc
 800bf7c:	20000cc8 	.word	0x20000cc8
 800bf80:	20000ccc 	.word	0x20000ccc

0800bf84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf8a:	e019      	b.n	800bfc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bf8c:	f000 fa12 	bl	800c3b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf90:	4b10      	ldr	r3, [pc, #64]	; (800bfd4 <prvCheckTasksWaitingTermination+0x50>)
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	3304      	adds	r3, #4
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7ff fb62 	bl	800b666 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bfa2:	4b0d      	ldr	r3, [pc, #52]	; (800bfd8 <prvCheckTasksWaitingTermination+0x54>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	4a0b      	ldr	r2, [pc, #44]	; (800bfd8 <prvCheckTasksWaitingTermination+0x54>)
 800bfaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bfac:	4b0b      	ldr	r3, [pc, #44]	; (800bfdc <prvCheckTasksWaitingTermination+0x58>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	3b01      	subs	r3, #1
 800bfb2:	4a0a      	ldr	r2, [pc, #40]	; (800bfdc <prvCheckTasksWaitingTermination+0x58>)
 800bfb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bfb6:	f000 fa2d 	bl	800c414 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 f810 	bl	800bfe0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfc0:	4b06      	ldr	r3, [pc, #24]	; (800bfdc <prvCheckTasksWaitingTermination+0x58>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d1e1      	bne.n	800bf8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bfc8:	bf00      	nop
 800bfca:	bf00      	nop
 800bfcc:	3708      	adds	r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	20000ce4 	.word	0x20000ce4
 800bfd8:	20000d10 	.word	0x20000d10
 800bfdc:	20000cf8 	.word	0x20000cf8

0800bfe0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b084      	sub	sp, #16
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	334c      	adds	r3, #76	; 0x4c
 800bfec:	4618      	mov	r0, r3
 800bfee:	f001 fb51 	bl	800d694 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d108      	bne.n	800c00e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c000:	4618      	mov	r0, r3
 800c002:	f000 fb85 	bl	800c710 <vPortFree>
				vPortFree( pxTCB );
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 fb82 	bl	800c710 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c00c:	e018      	b.n	800c040 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c014:	2b01      	cmp	r3, #1
 800c016:	d103      	bne.n	800c020 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 fb79 	bl	800c710 <vPortFree>
	}
 800c01e:	e00f      	b.n	800c040 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c026:	2b02      	cmp	r3, #2
 800c028:	d00a      	beq.n	800c040 <prvDeleteTCB+0x60>
	__asm volatile
 800c02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02e:	f383 8811 	msr	BASEPRI, r3
 800c032:	f3bf 8f6f 	isb	sy
 800c036:	f3bf 8f4f 	dsb	sy
 800c03a:	60fb      	str	r3, [r7, #12]
}
 800c03c:	bf00      	nop
 800c03e:	e7fe      	b.n	800c03e <prvDeleteTCB+0x5e>
	}
 800c040:	bf00      	nop
 800c042:	3710      	adds	r7, #16
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c04e:	4b0c      	ldr	r3, [pc, #48]	; (800c080 <prvResetNextTaskUnblockTime+0x38>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d104      	bne.n	800c062 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c058:	4b0a      	ldr	r3, [pc, #40]	; (800c084 <prvResetNextTaskUnblockTime+0x3c>)
 800c05a:	f04f 32ff 	mov.w	r2, #4294967295
 800c05e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c060:	e008      	b.n	800c074 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c062:	4b07      	ldr	r3, [pc, #28]	; (800c080 <prvResetNextTaskUnblockTime+0x38>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	4a04      	ldr	r2, [pc, #16]	; (800c084 <prvResetNextTaskUnblockTime+0x3c>)
 800c072:	6013      	str	r3, [r2, #0]
}
 800c074:	bf00      	nop
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr
 800c080:	20000cc8 	.word	0x20000cc8
 800c084:	20000d30 	.word	0x20000d30

0800c088 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c092:	4b29      	ldr	r3, [pc, #164]	; (800c138 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c098:	4b28      	ldr	r3, [pc, #160]	; (800c13c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	3304      	adds	r3, #4
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7ff fae1 	bl	800b666 <uxListRemove>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d10b      	bne.n	800c0c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c0aa:	4b24      	ldr	r3, [pc, #144]	; (800c13c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c0b6:	43da      	mvns	r2, r3
 800c0b8:	4b21      	ldr	r3, [pc, #132]	; (800c140 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4013      	ands	r3, r2
 800c0be:	4a20      	ldr	r2, [pc, #128]	; (800c140 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c0c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c8:	d10a      	bne.n	800c0e0 <prvAddCurrentTaskToDelayedList+0x58>
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d007      	beq.n	800c0e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0d0:	4b1a      	ldr	r3, [pc, #104]	; (800c13c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	3304      	adds	r3, #4
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	481a      	ldr	r0, [pc, #104]	; (800c144 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c0da:	f7ff fa67 	bl	800b5ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c0de:	e026      	b.n	800c12e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c0e0:	68fa      	ldr	r2, [r7, #12]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c0e8:	4b14      	ldr	r3, [pc, #80]	; (800c13c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	68ba      	ldr	r2, [r7, #8]
 800c0ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c0f0:	68ba      	ldr	r2, [r7, #8]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d209      	bcs.n	800c10c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0f8:	4b13      	ldr	r3, [pc, #76]	; (800c148 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	4b0f      	ldr	r3, [pc, #60]	; (800c13c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	3304      	adds	r3, #4
 800c102:	4619      	mov	r1, r3
 800c104:	4610      	mov	r0, r2
 800c106:	f7ff fa75 	bl	800b5f4 <vListInsert>
}
 800c10a:	e010      	b.n	800c12e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c10c:	4b0f      	ldr	r3, [pc, #60]	; (800c14c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	4b0a      	ldr	r3, [pc, #40]	; (800c13c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	3304      	adds	r3, #4
 800c116:	4619      	mov	r1, r3
 800c118:	4610      	mov	r0, r2
 800c11a:	f7ff fa6b 	bl	800b5f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c11e:	4b0c      	ldr	r3, [pc, #48]	; (800c150 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	68ba      	ldr	r2, [r7, #8]
 800c124:	429a      	cmp	r2, r3
 800c126:	d202      	bcs.n	800c12e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c128:	4a09      	ldr	r2, [pc, #36]	; (800c150 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	6013      	str	r3, [r2, #0]
}
 800c12e:	bf00      	nop
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	20000d14 	.word	0x20000d14
 800c13c:	20000c10 	.word	0x20000c10
 800c140:	20000d18 	.word	0x20000d18
 800c144:	20000cfc 	.word	0x20000cfc
 800c148:	20000ccc 	.word	0x20000ccc
 800c14c:	20000cc8 	.word	0x20000cc8
 800c150:	20000d30 	.word	0x20000d30

0800c154 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c154:	b480      	push	{r7}
 800c156:	b085      	sub	sp, #20
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	3b04      	subs	r3, #4
 800c164:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c16c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	3b04      	subs	r3, #4
 800c172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	f023 0201 	bic.w	r2, r3, #1
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	3b04      	subs	r3, #4
 800c182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c184:	4a0c      	ldr	r2, [pc, #48]	; (800c1b8 <pxPortInitialiseStack+0x64>)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	3b14      	subs	r3, #20
 800c18e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	3b04      	subs	r3, #4
 800c19a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f06f 0202 	mvn.w	r2, #2
 800c1a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	3b20      	subs	r3, #32
 800c1a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3714      	adds	r7, #20
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr
 800c1b8:	0800c1bd 	.word	0x0800c1bd

0800c1bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1c6:	4b12      	ldr	r3, [pc, #72]	; (800c210 <prvTaskExitError+0x54>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ce:	d00a      	beq.n	800c1e6 <prvTaskExitError+0x2a>
	__asm volatile
 800c1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d4:	f383 8811 	msr	BASEPRI, r3
 800c1d8:	f3bf 8f6f 	isb	sy
 800c1dc:	f3bf 8f4f 	dsb	sy
 800c1e0:	60fb      	str	r3, [r7, #12]
}
 800c1e2:	bf00      	nop
 800c1e4:	e7fe      	b.n	800c1e4 <prvTaskExitError+0x28>
	__asm volatile
 800c1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ea:	f383 8811 	msr	BASEPRI, r3
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	f3bf 8f4f 	dsb	sy
 800c1f6:	60bb      	str	r3, [r7, #8]
}
 800c1f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c1fa:	bf00      	nop
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d0fc      	beq.n	800c1fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c202:	bf00      	nop
 800c204:	bf00      	nop
 800c206:	3714      	adds	r7, #20
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr
 800c210:	20000018 	.word	0x20000018
	...

0800c220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c220:	4b07      	ldr	r3, [pc, #28]	; (800c240 <pxCurrentTCBConst2>)
 800c222:	6819      	ldr	r1, [r3, #0]
 800c224:	6808      	ldr	r0, [r1, #0]
 800c226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22a:	f380 8809 	msr	PSP, r0
 800c22e:	f3bf 8f6f 	isb	sy
 800c232:	f04f 0000 	mov.w	r0, #0
 800c236:	f380 8811 	msr	BASEPRI, r0
 800c23a:	4770      	bx	lr
 800c23c:	f3af 8000 	nop.w

0800c240 <pxCurrentTCBConst2>:
 800c240:	20000c10 	.word	0x20000c10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c244:	bf00      	nop
 800c246:	bf00      	nop

0800c248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c248:	4808      	ldr	r0, [pc, #32]	; (800c26c <prvPortStartFirstTask+0x24>)
 800c24a:	6800      	ldr	r0, [r0, #0]
 800c24c:	6800      	ldr	r0, [r0, #0]
 800c24e:	f380 8808 	msr	MSP, r0
 800c252:	f04f 0000 	mov.w	r0, #0
 800c256:	f380 8814 	msr	CONTROL, r0
 800c25a:	b662      	cpsie	i
 800c25c:	b661      	cpsie	f
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	f3bf 8f6f 	isb	sy
 800c266:	df00      	svc	0
 800c268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c26a:	bf00      	nop
 800c26c:	e000ed08 	.word	0xe000ed08

0800c270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c276:	4b46      	ldr	r3, [pc, #280]	; (800c390 <xPortStartScheduler+0x120>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a46      	ldr	r2, [pc, #280]	; (800c394 <xPortStartScheduler+0x124>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d10a      	bne.n	800c296 <xPortStartScheduler+0x26>
	__asm volatile
 800c280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c284:	f383 8811 	msr	BASEPRI, r3
 800c288:	f3bf 8f6f 	isb	sy
 800c28c:	f3bf 8f4f 	dsb	sy
 800c290:	613b      	str	r3, [r7, #16]
}
 800c292:	bf00      	nop
 800c294:	e7fe      	b.n	800c294 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c296:	4b3e      	ldr	r3, [pc, #248]	; (800c390 <xPortStartScheduler+0x120>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a3f      	ldr	r2, [pc, #252]	; (800c398 <xPortStartScheduler+0x128>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d10a      	bne.n	800c2b6 <xPortStartScheduler+0x46>
	__asm volatile
 800c2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	60fb      	str	r3, [r7, #12]
}
 800c2b2:	bf00      	nop
 800c2b4:	e7fe      	b.n	800c2b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c2b6:	4b39      	ldr	r3, [pc, #228]	; (800c39c <xPortStartScheduler+0x12c>)
 800c2b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	b2db      	uxtb	r3, r3
 800c2c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	22ff      	movs	r2, #255	; 0xff
 800c2c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2d0:	78fb      	ldrb	r3, [r7, #3]
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c2d8:	b2da      	uxtb	r2, r3
 800c2da:	4b31      	ldr	r3, [pc, #196]	; (800c3a0 <xPortStartScheduler+0x130>)
 800c2dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2de:	4b31      	ldr	r3, [pc, #196]	; (800c3a4 <xPortStartScheduler+0x134>)
 800c2e0:	2207      	movs	r2, #7
 800c2e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2e4:	e009      	b.n	800c2fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c2e6:	4b2f      	ldr	r3, [pc, #188]	; (800c3a4 <xPortStartScheduler+0x134>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	4a2d      	ldr	r2, [pc, #180]	; (800c3a4 <xPortStartScheduler+0x134>)
 800c2ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c2f0:	78fb      	ldrb	r3, [r7, #3]
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	005b      	lsls	r3, r3, #1
 800c2f6:	b2db      	uxtb	r3, r3
 800c2f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2fa:	78fb      	ldrb	r3, [r7, #3]
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c302:	2b80      	cmp	r3, #128	; 0x80
 800c304:	d0ef      	beq.n	800c2e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c306:	4b27      	ldr	r3, [pc, #156]	; (800c3a4 <xPortStartScheduler+0x134>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f1c3 0307 	rsb	r3, r3, #7
 800c30e:	2b04      	cmp	r3, #4
 800c310:	d00a      	beq.n	800c328 <xPortStartScheduler+0xb8>
	__asm volatile
 800c312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c316:	f383 8811 	msr	BASEPRI, r3
 800c31a:	f3bf 8f6f 	isb	sy
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	60bb      	str	r3, [r7, #8]
}
 800c324:	bf00      	nop
 800c326:	e7fe      	b.n	800c326 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c328:	4b1e      	ldr	r3, [pc, #120]	; (800c3a4 <xPortStartScheduler+0x134>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	021b      	lsls	r3, r3, #8
 800c32e:	4a1d      	ldr	r2, [pc, #116]	; (800c3a4 <xPortStartScheduler+0x134>)
 800c330:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c332:	4b1c      	ldr	r3, [pc, #112]	; (800c3a4 <xPortStartScheduler+0x134>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c33a:	4a1a      	ldr	r2, [pc, #104]	; (800c3a4 <xPortStartScheduler+0x134>)
 800c33c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	b2da      	uxtb	r2, r3
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c346:	4b18      	ldr	r3, [pc, #96]	; (800c3a8 <xPortStartScheduler+0x138>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a17      	ldr	r2, [pc, #92]	; (800c3a8 <xPortStartScheduler+0x138>)
 800c34c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c350:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c352:	4b15      	ldr	r3, [pc, #84]	; (800c3a8 <xPortStartScheduler+0x138>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4a14      	ldr	r2, [pc, #80]	; (800c3a8 <xPortStartScheduler+0x138>)
 800c358:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c35c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c35e:	f000 f8dd 	bl	800c51c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c362:	4b12      	ldr	r3, [pc, #72]	; (800c3ac <xPortStartScheduler+0x13c>)
 800c364:	2200      	movs	r2, #0
 800c366:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c368:	f000 f8fc 	bl	800c564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c36c:	4b10      	ldr	r3, [pc, #64]	; (800c3b0 <xPortStartScheduler+0x140>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a0f      	ldr	r2, [pc, #60]	; (800c3b0 <xPortStartScheduler+0x140>)
 800c372:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c376:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c378:	f7ff ff66 	bl	800c248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c37c:	f7ff fd48 	bl	800be10 <vTaskSwitchContext>
	prvTaskExitError();
 800c380:	f7ff ff1c 	bl	800c1bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c384:	2300      	movs	r3, #0
}
 800c386:	4618      	mov	r0, r3
 800c388:	3718      	adds	r7, #24
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	e000ed00 	.word	0xe000ed00
 800c394:	410fc271 	.word	0x410fc271
 800c398:	410fc270 	.word	0x410fc270
 800c39c:	e000e400 	.word	0xe000e400
 800c3a0:	20000d3c 	.word	0x20000d3c
 800c3a4:	20000d40 	.word	0x20000d40
 800c3a8:	e000ed20 	.word	0xe000ed20
 800c3ac:	20000018 	.word	0x20000018
 800c3b0:	e000ef34 	.word	0xe000ef34

0800c3b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
	__asm volatile
 800c3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3be:	f383 8811 	msr	BASEPRI, r3
 800c3c2:	f3bf 8f6f 	isb	sy
 800c3c6:	f3bf 8f4f 	dsb	sy
 800c3ca:	607b      	str	r3, [r7, #4]
}
 800c3cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3ce:	4b0f      	ldr	r3, [pc, #60]	; (800c40c <vPortEnterCritical+0x58>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	4a0d      	ldr	r2, [pc, #52]	; (800c40c <vPortEnterCritical+0x58>)
 800c3d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3d8:	4b0c      	ldr	r3, [pc, #48]	; (800c40c <vPortEnterCritical+0x58>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	d10f      	bne.n	800c400 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c3e0:	4b0b      	ldr	r3, [pc, #44]	; (800c410 <vPortEnterCritical+0x5c>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d00a      	beq.n	800c400 <vPortEnterCritical+0x4c>
	__asm volatile
 800c3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ee:	f383 8811 	msr	BASEPRI, r3
 800c3f2:	f3bf 8f6f 	isb	sy
 800c3f6:	f3bf 8f4f 	dsb	sy
 800c3fa:	603b      	str	r3, [r7, #0]
}
 800c3fc:	bf00      	nop
 800c3fe:	e7fe      	b.n	800c3fe <vPortEnterCritical+0x4a>
	}
}
 800c400:	bf00      	nop
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr
 800c40c:	20000018 	.word	0x20000018
 800c410:	e000ed04 	.word	0xe000ed04

0800c414 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c414:	b480      	push	{r7}
 800c416:	b083      	sub	sp, #12
 800c418:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c41a:	4b12      	ldr	r3, [pc, #72]	; (800c464 <vPortExitCritical+0x50>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d10a      	bne.n	800c438 <vPortExitCritical+0x24>
	__asm volatile
 800c422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c426:	f383 8811 	msr	BASEPRI, r3
 800c42a:	f3bf 8f6f 	isb	sy
 800c42e:	f3bf 8f4f 	dsb	sy
 800c432:	607b      	str	r3, [r7, #4]
}
 800c434:	bf00      	nop
 800c436:	e7fe      	b.n	800c436 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c438:	4b0a      	ldr	r3, [pc, #40]	; (800c464 <vPortExitCritical+0x50>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	3b01      	subs	r3, #1
 800c43e:	4a09      	ldr	r2, [pc, #36]	; (800c464 <vPortExitCritical+0x50>)
 800c440:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c442:	4b08      	ldr	r3, [pc, #32]	; (800c464 <vPortExitCritical+0x50>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d105      	bne.n	800c456 <vPortExitCritical+0x42>
 800c44a:	2300      	movs	r3, #0
 800c44c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c454:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c456:	bf00      	nop
 800c458:	370c      	adds	r7, #12
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr
 800c462:	bf00      	nop
 800c464:	20000018 	.word	0x20000018
	...

0800c470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c470:	f3ef 8009 	mrs	r0, PSP
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	4b15      	ldr	r3, [pc, #84]	; (800c4d0 <pxCurrentTCBConst>)
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	f01e 0f10 	tst.w	lr, #16
 800c480:	bf08      	it	eq
 800c482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48a:	6010      	str	r0, [r2, #0]
 800c48c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c490:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c494:	f380 8811 	msr	BASEPRI, r0
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f7ff fcb6 	bl	800be10 <vTaskSwitchContext>
 800c4a4:	f04f 0000 	mov.w	r0, #0
 800c4a8:	f380 8811 	msr	BASEPRI, r0
 800c4ac:	bc09      	pop	{r0, r3}
 800c4ae:	6819      	ldr	r1, [r3, #0]
 800c4b0:	6808      	ldr	r0, [r1, #0]
 800c4b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b6:	f01e 0f10 	tst.w	lr, #16
 800c4ba:	bf08      	it	eq
 800c4bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4c0:	f380 8809 	msr	PSP, r0
 800c4c4:	f3bf 8f6f 	isb	sy
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop
 800c4cc:	f3af 8000 	nop.w

0800c4d0 <pxCurrentTCBConst>:
 800c4d0:	20000c10 	.word	0x20000c10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4d4:	bf00      	nop
 800c4d6:	bf00      	nop

0800c4d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e2:	f383 8811 	msr	BASEPRI, r3
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	f3bf 8f4f 	dsb	sy
 800c4ee:	607b      	str	r3, [r7, #4]
}
 800c4f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c4f2:	f7ff fbd5 	bl	800bca0 <xTaskIncrementTick>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d003      	beq.n	800c504 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c4fc:	4b06      	ldr	r3, [pc, #24]	; (800c518 <SysTick_Handler+0x40>)
 800c4fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c502:	601a      	str	r2, [r3, #0]
 800c504:	2300      	movs	r3, #0
 800c506:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	f383 8811 	msr	BASEPRI, r3
}
 800c50e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c510:	bf00      	nop
 800c512:	3708      	adds	r7, #8
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	e000ed04 	.word	0xe000ed04

0800c51c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c51c:	b480      	push	{r7}
 800c51e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c520:	4b0b      	ldr	r3, [pc, #44]	; (800c550 <vPortSetupTimerInterrupt+0x34>)
 800c522:	2200      	movs	r2, #0
 800c524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c526:	4b0b      	ldr	r3, [pc, #44]	; (800c554 <vPortSetupTimerInterrupt+0x38>)
 800c528:	2200      	movs	r2, #0
 800c52a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c52c:	4b0a      	ldr	r3, [pc, #40]	; (800c558 <vPortSetupTimerInterrupt+0x3c>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a0a      	ldr	r2, [pc, #40]	; (800c55c <vPortSetupTimerInterrupt+0x40>)
 800c532:	fba2 2303 	umull	r2, r3, r2, r3
 800c536:	099b      	lsrs	r3, r3, #6
 800c538:	4a09      	ldr	r2, [pc, #36]	; (800c560 <vPortSetupTimerInterrupt+0x44>)
 800c53a:	3b01      	subs	r3, #1
 800c53c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c53e:	4b04      	ldr	r3, [pc, #16]	; (800c550 <vPortSetupTimerInterrupt+0x34>)
 800c540:	2207      	movs	r2, #7
 800c542:	601a      	str	r2, [r3, #0]
}
 800c544:	bf00      	nop
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	e000e010 	.word	0xe000e010
 800c554:	e000e018 	.word	0xe000e018
 800c558:	2000000c 	.word	0x2000000c
 800c55c:	10624dd3 	.word	0x10624dd3
 800c560:	e000e014 	.word	0xe000e014

0800c564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c564:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c574 <vPortEnableVFP+0x10>
 800c568:	6801      	ldr	r1, [r0, #0]
 800c56a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c56e:	6001      	str	r1, [r0, #0]
 800c570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c572:	bf00      	nop
 800c574:	e000ed88 	.word	0xe000ed88

0800c578 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b08a      	sub	sp, #40	; 0x28
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c580:	2300      	movs	r3, #0
 800c582:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c584:	f7ff fae2 	bl	800bb4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c588:	4b5b      	ldr	r3, [pc, #364]	; (800c6f8 <pvPortMalloc+0x180>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d101      	bne.n	800c594 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c590:	f000 f920 	bl	800c7d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c594:	4b59      	ldr	r3, [pc, #356]	; (800c6fc <pvPortMalloc+0x184>)
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4013      	ands	r3, r2
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	f040 8093 	bne.w	800c6c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d01d      	beq.n	800c5e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c5a8:	2208      	movs	r2, #8
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	4413      	add	r3, r2
 800c5ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f003 0307 	and.w	r3, r3, #7
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d014      	beq.n	800c5e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f023 0307 	bic.w	r3, r3, #7
 800c5c0:	3308      	adds	r3, #8
 800c5c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f003 0307 	and.w	r3, r3, #7
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00a      	beq.n	800c5e4 <pvPortMalloc+0x6c>
	__asm volatile
 800c5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d2:	f383 8811 	msr	BASEPRI, r3
 800c5d6:	f3bf 8f6f 	isb	sy
 800c5da:	f3bf 8f4f 	dsb	sy
 800c5de:	617b      	str	r3, [r7, #20]
}
 800c5e0:	bf00      	nop
 800c5e2:	e7fe      	b.n	800c5e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d06e      	beq.n	800c6c8 <pvPortMalloc+0x150>
 800c5ea:	4b45      	ldr	r3, [pc, #276]	; (800c700 <pvPortMalloc+0x188>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d869      	bhi.n	800c6c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c5f4:	4b43      	ldr	r3, [pc, #268]	; (800c704 <pvPortMalloc+0x18c>)
 800c5f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c5f8:	4b42      	ldr	r3, [pc, #264]	; (800c704 <pvPortMalloc+0x18c>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5fe:	e004      	b.n	800c60a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	429a      	cmp	r2, r3
 800c612:	d903      	bls.n	800c61c <pvPortMalloc+0xa4>
 800c614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d1f1      	bne.n	800c600 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c61c:	4b36      	ldr	r3, [pc, #216]	; (800c6f8 <pvPortMalloc+0x180>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c622:	429a      	cmp	r2, r3
 800c624:	d050      	beq.n	800c6c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c626:	6a3b      	ldr	r3, [r7, #32]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2208      	movs	r2, #8
 800c62c:	4413      	add	r3, r2
 800c62e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c632:	681a      	ldr	r2, [r3, #0]
 800c634:	6a3b      	ldr	r3, [r7, #32]
 800c636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63a:	685a      	ldr	r2, [r3, #4]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	1ad2      	subs	r2, r2, r3
 800c640:	2308      	movs	r3, #8
 800c642:	005b      	lsls	r3, r3, #1
 800c644:	429a      	cmp	r2, r3
 800c646:	d91f      	bls.n	800c688 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4413      	add	r3, r2
 800c64e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c650:	69bb      	ldr	r3, [r7, #24]
 800c652:	f003 0307 	and.w	r3, r3, #7
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00a      	beq.n	800c670 <pvPortMalloc+0xf8>
	__asm volatile
 800c65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65e:	f383 8811 	msr	BASEPRI, r3
 800c662:	f3bf 8f6f 	isb	sy
 800c666:	f3bf 8f4f 	dsb	sy
 800c66a:	613b      	str	r3, [r7, #16]
}
 800c66c:	bf00      	nop
 800c66e:	e7fe      	b.n	800c66e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c672:	685a      	ldr	r2, [r3, #4]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	1ad2      	subs	r2, r2, r3
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c682:	69b8      	ldr	r0, [r7, #24]
 800c684:	f000 f908 	bl	800c898 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c688:	4b1d      	ldr	r3, [pc, #116]	; (800c700 <pvPortMalloc+0x188>)
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	1ad3      	subs	r3, r2, r3
 800c692:	4a1b      	ldr	r2, [pc, #108]	; (800c700 <pvPortMalloc+0x188>)
 800c694:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c696:	4b1a      	ldr	r3, [pc, #104]	; (800c700 <pvPortMalloc+0x188>)
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	4b1b      	ldr	r3, [pc, #108]	; (800c708 <pvPortMalloc+0x190>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d203      	bcs.n	800c6aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c6a2:	4b17      	ldr	r3, [pc, #92]	; (800c700 <pvPortMalloc+0x188>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4a18      	ldr	r2, [pc, #96]	; (800c708 <pvPortMalloc+0x190>)
 800c6a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ac:	685a      	ldr	r2, [r3, #4]
 800c6ae:	4b13      	ldr	r3, [pc, #76]	; (800c6fc <pvPortMalloc+0x184>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	431a      	orrs	r2, r3
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c6be:	4b13      	ldr	r3, [pc, #76]	; (800c70c <pvPortMalloc+0x194>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	4a11      	ldr	r2, [pc, #68]	; (800c70c <pvPortMalloc+0x194>)
 800c6c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c6c8:	f7ff fa4e 	bl	800bb68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	f003 0307 	and.w	r3, r3, #7
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d00a      	beq.n	800c6ec <pvPortMalloc+0x174>
	__asm volatile
 800c6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6da:	f383 8811 	msr	BASEPRI, r3
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f3bf 8f4f 	dsb	sy
 800c6e6:	60fb      	str	r3, [r7, #12]
}
 800c6e8:	bf00      	nop
 800c6ea:	e7fe      	b.n	800c6ea <pvPortMalloc+0x172>
	return pvReturn;
 800c6ec:	69fb      	ldr	r3, [r7, #28]
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3728      	adds	r7, #40	; 0x28
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	2000494c 	.word	0x2000494c
 800c6fc:	20004960 	.word	0x20004960
 800c700:	20004950 	.word	0x20004950
 800c704:	20004944 	.word	0x20004944
 800c708:	20004954 	.word	0x20004954
 800c70c:	20004958 	.word	0x20004958

0800c710 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b086      	sub	sp, #24
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d04d      	beq.n	800c7be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c722:	2308      	movs	r3, #8
 800c724:	425b      	negs	r3, r3
 800c726:	697a      	ldr	r2, [r7, #20]
 800c728:	4413      	add	r3, r2
 800c72a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	685a      	ldr	r2, [r3, #4]
 800c734:	4b24      	ldr	r3, [pc, #144]	; (800c7c8 <vPortFree+0xb8>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4013      	ands	r3, r2
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d10a      	bne.n	800c754 <vPortFree+0x44>
	__asm volatile
 800c73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	60fb      	str	r3, [r7, #12]
}
 800c750:	bf00      	nop
 800c752:	e7fe      	b.n	800c752 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d00a      	beq.n	800c772 <vPortFree+0x62>
	__asm volatile
 800c75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c760:	f383 8811 	msr	BASEPRI, r3
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	60bb      	str	r3, [r7, #8]
}
 800c76e:	bf00      	nop
 800c770:	e7fe      	b.n	800c770 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	685a      	ldr	r2, [r3, #4]
 800c776:	4b14      	ldr	r3, [pc, #80]	; (800c7c8 <vPortFree+0xb8>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4013      	ands	r3, r2
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d01e      	beq.n	800c7be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d11a      	bne.n	800c7be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	685a      	ldr	r2, [r3, #4]
 800c78c:	4b0e      	ldr	r3, [pc, #56]	; (800c7c8 <vPortFree+0xb8>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	43db      	mvns	r3, r3
 800c792:	401a      	ands	r2, r3
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c798:	f7ff f9d8 	bl	800bb4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	685a      	ldr	r2, [r3, #4]
 800c7a0:	4b0a      	ldr	r3, [pc, #40]	; (800c7cc <vPortFree+0xbc>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	4a09      	ldr	r2, [pc, #36]	; (800c7cc <vPortFree+0xbc>)
 800c7a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c7aa:	6938      	ldr	r0, [r7, #16]
 800c7ac:	f000 f874 	bl	800c898 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c7b0:	4b07      	ldr	r3, [pc, #28]	; (800c7d0 <vPortFree+0xc0>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	4a06      	ldr	r2, [pc, #24]	; (800c7d0 <vPortFree+0xc0>)
 800c7b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c7ba:	f7ff f9d5 	bl	800bb68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c7be:	bf00      	nop
 800c7c0:	3718      	adds	r7, #24
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	20004960 	.word	0x20004960
 800c7cc:	20004950 	.word	0x20004950
 800c7d0:	2000495c 	.word	0x2000495c

0800c7d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c7da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c7de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c7e0:	4b27      	ldr	r3, [pc, #156]	; (800c880 <prvHeapInit+0xac>)
 800c7e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f003 0307 	and.w	r3, r3, #7
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d00c      	beq.n	800c808 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	3307      	adds	r3, #7
 800c7f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f023 0307 	bic.w	r3, r3, #7
 800c7fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7fc:	68ba      	ldr	r2, [r7, #8]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	1ad3      	subs	r3, r2, r3
 800c802:	4a1f      	ldr	r2, [pc, #124]	; (800c880 <prvHeapInit+0xac>)
 800c804:	4413      	add	r3, r2
 800c806:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c80c:	4a1d      	ldr	r2, [pc, #116]	; (800c884 <prvHeapInit+0xb0>)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c812:	4b1c      	ldr	r3, [pc, #112]	; (800c884 <prvHeapInit+0xb0>)
 800c814:	2200      	movs	r2, #0
 800c816:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	68ba      	ldr	r2, [r7, #8]
 800c81c:	4413      	add	r3, r2
 800c81e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c820:	2208      	movs	r2, #8
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	1a9b      	subs	r3, r3, r2
 800c826:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f023 0307 	bic.w	r3, r3, #7
 800c82e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	4a15      	ldr	r2, [pc, #84]	; (800c888 <prvHeapInit+0xb4>)
 800c834:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c836:	4b14      	ldr	r3, [pc, #80]	; (800c888 <prvHeapInit+0xb4>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2200      	movs	r2, #0
 800c83c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c83e:	4b12      	ldr	r3, [pc, #72]	; (800c888 <prvHeapInit+0xb4>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2200      	movs	r2, #0
 800c844:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	1ad2      	subs	r2, r2, r3
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c854:	4b0c      	ldr	r3, [pc, #48]	; (800c888 <prvHeapInit+0xb4>)
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	4a0a      	ldr	r2, [pc, #40]	; (800c88c <prvHeapInit+0xb8>)
 800c862:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	4a09      	ldr	r2, [pc, #36]	; (800c890 <prvHeapInit+0xbc>)
 800c86a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c86c:	4b09      	ldr	r3, [pc, #36]	; (800c894 <prvHeapInit+0xc0>)
 800c86e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c872:	601a      	str	r2, [r3, #0]
}
 800c874:	bf00      	nop
 800c876:	3714      	adds	r7, #20
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr
 800c880:	20000d44 	.word	0x20000d44
 800c884:	20004944 	.word	0x20004944
 800c888:	2000494c 	.word	0x2000494c
 800c88c:	20004954 	.word	0x20004954
 800c890:	20004950 	.word	0x20004950
 800c894:	20004960 	.word	0x20004960

0800c898 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c898:	b480      	push	{r7}
 800c89a:	b085      	sub	sp, #20
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c8a0:	4b28      	ldr	r3, [pc, #160]	; (800c944 <prvInsertBlockIntoFreeList+0xac>)
 800c8a2:	60fb      	str	r3, [r7, #12]
 800c8a4:	e002      	b.n	800c8ac <prvInsertBlockIntoFreeList+0x14>
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	60fb      	str	r3, [r7, #12]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d8f7      	bhi.n	800c8a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	685b      	ldr	r3, [r3, #4]
 800c8be:	68ba      	ldr	r2, [r7, #8]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d108      	bne.n	800c8da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	685a      	ldr	r2, [r3, #4]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	441a      	add	r2, r3
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	68ba      	ldr	r2, [r7, #8]
 800c8e4:	441a      	add	r2, r3
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d118      	bne.n	800c920 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	4b15      	ldr	r3, [pc, #84]	; (800c948 <prvInsertBlockIntoFreeList+0xb0>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d00d      	beq.n	800c916 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	685a      	ldr	r2, [r3, #4]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	441a      	add	r2, r3
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	601a      	str	r2, [r3, #0]
 800c914:	e008      	b.n	800c928 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c916:	4b0c      	ldr	r3, [pc, #48]	; (800c948 <prvInsertBlockIntoFreeList+0xb0>)
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	601a      	str	r2, [r3, #0]
 800c91e:	e003      	b.n	800c928 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c928:	68fa      	ldr	r2, [r7, #12]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d002      	beq.n	800c936 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c936:	bf00      	nop
 800c938:	3714      	adds	r7, #20
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr
 800c942:	bf00      	nop
 800c944:	20004944 	.word	0x20004944
 800c948:	2000494c 	.word	0x2000494c

0800c94c <gcvt>:
 800c94c:	b530      	push	{r4, r5, lr}
 800c94e:	2200      	movs	r2, #0
 800c950:	b085      	sub	sp, #20
 800c952:	460c      	mov	r4, r1
 800c954:	4605      	mov	r5, r0
 800c956:	2300      	movs	r3, #0
 800c958:	ec51 0b10 	vmov	r0, r1, d0
 800c95c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c960:	f7f4 f8bc 	bl	8000adc <__aeabi_dcmplt>
 800c964:	ed9d 0b02 	vldr	d0, [sp, #8]
 800c968:	4622      	mov	r2, r4
 800c96a:	b118      	cbz	r0, 800c974 <gcvt+0x28>
 800c96c:	232d      	movs	r3, #45	; 0x2d
 800c96e:	f802 3b01 	strb.w	r3, [r2], #1
 800c972:	3d01      	subs	r5, #1
 800c974:	2300      	movs	r3, #0
 800c976:	4806      	ldr	r0, [pc, #24]	; (800c990 <gcvt+0x44>)
 800c978:	9300      	str	r3, [sp, #0]
 800c97a:	4629      	mov	r1, r5
 800c97c:	2367      	movs	r3, #103	; 0x67
 800c97e:	6800      	ldr	r0, [r0, #0]
 800c980:	f002 fada 	bl	800ef38 <_gcvt>
 800c984:	2800      	cmp	r0, #0
 800c986:	bf14      	ite	ne
 800c988:	4620      	movne	r0, r4
 800c98a:	2000      	moveq	r0, #0
 800c98c:	b005      	add	sp, #20
 800c98e:	bd30      	pop	{r4, r5, pc}
 800c990:	20000074 	.word	0x20000074

0800c994 <__cvt>:
 800c994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c998:	ec55 4b10 	vmov	r4, r5, d0
 800c99c:	2d00      	cmp	r5, #0
 800c99e:	460e      	mov	r6, r1
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	462b      	mov	r3, r5
 800c9a4:	bfbb      	ittet	lt
 800c9a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c9aa:	461d      	movlt	r5, r3
 800c9ac:	2300      	movge	r3, #0
 800c9ae:	232d      	movlt	r3, #45	; 0x2d
 800c9b0:	700b      	strb	r3, [r1, #0]
 800c9b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c9b8:	4691      	mov	r9, r2
 800c9ba:	f023 0820 	bic.w	r8, r3, #32
 800c9be:	bfbc      	itt	lt
 800c9c0:	4622      	movlt	r2, r4
 800c9c2:	4614      	movlt	r4, r2
 800c9c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c9c8:	d005      	beq.n	800c9d6 <__cvt+0x42>
 800c9ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c9ce:	d100      	bne.n	800c9d2 <__cvt+0x3e>
 800c9d0:	3601      	adds	r6, #1
 800c9d2:	2102      	movs	r1, #2
 800c9d4:	e000      	b.n	800c9d8 <__cvt+0x44>
 800c9d6:	2103      	movs	r1, #3
 800c9d8:	ab03      	add	r3, sp, #12
 800c9da:	9301      	str	r3, [sp, #4]
 800c9dc:	ab02      	add	r3, sp, #8
 800c9de:	9300      	str	r3, [sp, #0]
 800c9e0:	ec45 4b10 	vmov	d0, r4, r5
 800c9e4:	4653      	mov	r3, sl
 800c9e6:	4632      	mov	r2, r6
 800c9e8:	f000 ffa2 	bl	800d930 <_dtoa_r>
 800c9ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c9f0:	4607      	mov	r7, r0
 800c9f2:	d102      	bne.n	800c9fa <__cvt+0x66>
 800c9f4:	f019 0f01 	tst.w	r9, #1
 800c9f8:	d022      	beq.n	800ca40 <__cvt+0xac>
 800c9fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c9fe:	eb07 0906 	add.w	r9, r7, r6
 800ca02:	d110      	bne.n	800ca26 <__cvt+0x92>
 800ca04:	783b      	ldrb	r3, [r7, #0]
 800ca06:	2b30      	cmp	r3, #48	; 0x30
 800ca08:	d10a      	bne.n	800ca20 <__cvt+0x8c>
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	4620      	mov	r0, r4
 800ca10:	4629      	mov	r1, r5
 800ca12:	f7f4 f859 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca16:	b918      	cbnz	r0, 800ca20 <__cvt+0x8c>
 800ca18:	f1c6 0601 	rsb	r6, r6, #1
 800ca1c:	f8ca 6000 	str.w	r6, [sl]
 800ca20:	f8da 3000 	ldr.w	r3, [sl]
 800ca24:	4499      	add	r9, r3
 800ca26:	2200      	movs	r2, #0
 800ca28:	2300      	movs	r3, #0
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	4629      	mov	r1, r5
 800ca2e:	f7f4 f84b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca32:	b108      	cbz	r0, 800ca38 <__cvt+0xa4>
 800ca34:	f8cd 900c 	str.w	r9, [sp, #12]
 800ca38:	2230      	movs	r2, #48	; 0x30
 800ca3a:	9b03      	ldr	r3, [sp, #12]
 800ca3c:	454b      	cmp	r3, r9
 800ca3e:	d307      	bcc.n	800ca50 <__cvt+0xbc>
 800ca40:	9b03      	ldr	r3, [sp, #12]
 800ca42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca44:	1bdb      	subs	r3, r3, r7
 800ca46:	4638      	mov	r0, r7
 800ca48:	6013      	str	r3, [r2, #0]
 800ca4a:	b004      	add	sp, #16
 800ca4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca50:	1c59      	adds	r1, r3, #1
 800ca52:	9103      	str	r1, [sp, #12]
 800ca54:	701a      	strb	r2, [r3, #0]
 800ca56:	e7f0      	b.n	800ca3a <__cvt+0xa6>

0800ca58 <__exponent>:
 800ca58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2900      	cmp	r1, #0
 800ca5e:	bfb8      	it	lt
 800ca60:	4249      	neglt	r1, r1
 800ca62:	f803 2b02 	strb.w	r2, [r3], #2
 800ca66:	bfb4      	ite	lt
 800ca68:	222d      	movlt	r2, #45	; 0x2d
 800ca6a:	222b      	movge	r2, #43	; 0x2b
 800ca6c:	2909      	cmp	r1, #9
 800ca6e:	7042      	strb	r2, [r0, #1]
 800ca70:	dd2a      	ble.n	800cac8 <__exponent+0x70>
 800ca72:	f10d 0207 	add.w	r2, sp, #7
 800ca76:	4617      	mov	r7, r2
 800ca78:	260a      	movs	r6, #10
 800ca7a:	4694      	mov	ip, r2
 800ca7c:	fb91 f5f6 	sdiv	r5, r1, r6
 800ca80:	fb06 1415 	mls	r4, r6, r5, r1
 800ca84:	3430      	adds	r4, #48	; 0x30
 800ca86:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ca8a:	460c      	mov	r4, r1
 800ca8c:	2c63      	cmp	r4, #99	; 0x63
 800ca8e:	f102 32ff 	add.w	r2, r2, #4294967295
 800ca92:	4629      	mov	r1, r5
 800ca94:	dcf1      	bgt.n	800ca7a <__exponent+0x22>
 800ca96:	3130      	adds	r1, #48	; 0x30
 800ca98:	f1ac 0402 	sub.w	r4, ip, #2
 800ca9c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800caa0:	1c41      	adds	r1, r0, #1
 800caa2:	4622      	mov	r2, r4
 800caa4:	42ba      	cmp	r2, r7
 800caa6:	d30a      	bcc.n	800cabe <__exponent+0x66>
 800caa8:	f10d 0209 	add.w	r2, sp, #9
 800caac:	eba2 020c 	sub.w	r2, r2, ip
 800cab0:	42bc      	cmp	r4, r7
 800cab2:	bf88      	it	hi
 800cab4:	2200      	movhi	r2, #0
 800cab6:	4413      	add	r3, r2
 800cab8:	1a18      	subs	r0, r3, r0
 800caba:	b003      	add	sp, #12
 800cabc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cabe:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cac2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cac6:	e7ed      	b.n	800caa4 <__exponent+0x4c>
 800cac8:	2330      	movs	r3, #48	; 0x30
 800caca:	3130      	adds	r1, #48	; 0x30
 800cacc:	7083      	strb	r3, [r0, #2]
 800cace:	70c1      	strb	r1, [r0, #3]
 800cad0:	1d03      	adds	r3, r0, #4
 800cad2:	e7f1      	b.n	800cab8 <__exponent+0x60>

0800cad4 <_printf_float>:
 800cad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad8:	ed2d 8b02 	vpush	{d8}
 800cadc:	b08d      	sub	sp, #52	; 0x34
 800cade:	460c      	mov	r4, r1
 800cae0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cae4:	4616      	mov	r6, r2
 800cae6:	461f      	mov	r7, r3
 800cae8:	4605      	mov	r5, r0
 800caea:	f000 fdbf 	bl	800d66c <_localeconv_r>
 800caee:	f8d0 a000 	ldr.w	sl, [r0]
 800caf2:	4650      	mov	r0, sl
 800caf4:	f7f3 fbbc 	bl	8000270 <strlen>
 800caf8:	2300      	movs	r3, #0
 800cafa:	930a      	str	r3, [sp, #40]	; 0x28
 800cafc:	6823      	ldr	r3, [r4, #0]
 800cafe:	9305      	str	r3, [sp, #20]
 800cb00:	f8d8 3000 	ldr.w	r3, [r8]
 800cb04:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cb08:	3307      	adds	r3, #7
 800cb0a:	f023 0307 	bic.w	r3, r3, #7
 800cb0e:	f103 0208 	add.w	r2, r3, #8
 800cb12:	f8c8 2000 	str.w	r2, [r8]
 800cb16:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cb1e:	9307      	str	r3, [sp, #28]
 800cb20:	f8cd 8018 	str.w	r8, [sp, #24]
 800cb24:	ee08 0a10 	vmov	s16, r0
 800cb28:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800cb2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb30:	4b9e      	ldr	r3, [pc, #632]	; (800cdac <_printf_float+0x2d8>)
 800cb32:	f04f 32ff 	mov.w	r2, #4294967295
 800cb36:	f7f3 fff9 	bl	8000b2c <__aeabi_dcmpun>
 800cb3a:	bb88      	cbnz	r0, 800cba0 <_printf_float+0xcc>
 800cb3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb40:	4b9a      	ldr	r3, [pc, #616]	; (800cdac <_printf_float+0x2d8>)
 800cb42:	f04f 32ff 	mov.w	r2, #4294967295
 800cb46:	f7f3 ffd3 	bl	8000af0 <__aeabi_dcmple>
 800cb4a:	bb48      	cbnz	r0, 800cba0 <_printf_float+0xcc>
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	2300      	movs	r3, #0
 800cb50:	4640      	mov	r0, r8
 800cb52:	4649      	mov	r1, r9
 800cb54:	f7f3 ffc2 	bl	8000adc <__aeabi_dcmplt>
 800cb58:	b110      	cbz	r0, 800cb60 <_printf_float+0x8c>
 800cb5a:	232d      	movs	r3, #45	; 0x2d
 800cb5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb60:	4a93      	ldr	r2, [pc, #588]	; (800cdb0 <_printf_float+0x2dc>)
 800cb62:	4b94      	ldr	r3, [pc, #592]	; (800cdb4 <_printf_float+0x2e0>)
 800cb64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cb68:	bf94      	ite	ls
 800cb6a:	4690      	movls	r8, r2
 800cb6c:	4698      	movhi	r8, r3
 800cb6e:	2303      	movs	r3, #3
 800cb70:	6123      	str	r3, [r4, #16]
 800cb72:	9b05      	ldr	r3, [sp, #20]
 800cb74:	f023 0304 	bic.w	r3, r3, #4
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	f04f 0900 	mov.w	r9, #0
 800cb7e:	9700      	str	r7, [sp, #0]
 800cb80:	4633      	mov	r3, r6
 800cb82:	aa0b      	add	r2, sp, #44	; 0x2c
 800cb84:	4621      	mov	r1, r4
 800cb86:	4628      	mov	r0, r5
 800cb88:	f000 f9da 	bl	800cf40 <_printf_common>
 800cb8c:	3001      	adds	r0, #1
 800cb8e:	f040 8090 	bne.w	800ccb2 <_printf_float+0x1de>
 800cb92:	f04f 30ff 	mov.w	r0, #4294967295
 800cb96:	b00d      	add	sp, #52	; 0x34
 800cb98:	ecbd 8b02 	vpop	{d8}
 800cb9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba0:	4642      	mov	r2, r8
 800cba2:	464b      	mov	r3, r9
 800cba4:	4640      	mov	r0, r8
 800cba6:	4649      	mov	r1, r9
 800cba8:	f7f3 ffc0 	bl	8000b2c <__aeabi_dcmpun>
 800cbac:	b140      	cbz	r0, 800cbc0 <_printf_float+0xec>
 800cbae:	464b      	mov	r3, r9
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	bfbc      	itt	lt
 800cbb4:	232d      	movlt	r3, #45	; 0x2d
 800cbb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cbba:	4a7f      	ldr	r2, [pc, #508]	; (800cdb8 <_printf_float+0x2e4>)
 800cbbc:	4b7f      	ldr	r3, [pc, #508]	; (800cdbc <_printf_float+0x2e8>)
 800cbbe:	e7d1      	b.n	800cb64 <_printf_float+0x90>
 800cbc0:	6863      	ldr	r3, [r4, #4]
 800cbc2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cbc6:	9206      	str	r2, [sp, #24]
 800cbc8:	1c5a      	adds	r2, r3, #1
 800cbca:	d13f      	bne.n	800cc4c <_printf_float+0x178>
 800cbcc:	2306      	movs	r3, #6
 800cbce:	6063      	str	r3, [r4, #4]
 800cbd0:	9b05      	ldr	r3, [sp, #20]
 800cbd2:	6861      	ldr	r1, [r4, #4]
 800cbd4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cbd8:	2300      	movs	r3, #0
 800cbda:	9303      	str	r3, [sp, #12]
 800cbdc:	ab0a      	add	r3, sp, #40	; 0x28
 800cbde:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cbe2:	ab09      	add	r3, sp, #36	; 0x24
 800cbe4:	ec49 8b10 	vmov	d0, r8, r9
 800cbe8:	9300      	str	r3, [sp, #0]
 800cbea:	6022      	str	r2, [r4, #0]
 800cbec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	f7ff fecf 	bl	800c994 <__cvt>
 800cbf6:	9b06      	ldr	r3, [sp, #24]
 800cbf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbfa:	2b47      	cmp	r3, #71	; 0x47
 800cbfc:	4680      	mov	r8, r0
 800cbfe:	d108      	bne.n	800cc12 <_printf_float+0x13e>
 800cc00:	1cc8      	adds	r0, r1, #3
 800cc02:	db02      	blt.n	800cc0a <_printf_float+0x136>
 800cc04:	6863      	ldr	r3, [r4, #4]
 800cc06:	4299      	cmp	r1, r3
 800cc08:	dd41      	ble.n	800cc8e <_printf_float+0x1ba>
 800cc0a:	f1ab 0302 	sub.w	r3, fp, #2
 800cc0e:	fa5f fb83 	uxtb.w	fp, r3
 800cc12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cc16:	d820      	bhi.n	800cc5a <_printf_float+0x186>
 800cc18:	3901      	subs	r1, #1
 800cc1a:	465a      	mov	r2, fp
 800cc1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cc20:	9109      	str	r1, [sp, #36]	; 0x24
 800cc22:	f7ff ff19 	bl	800ca58 <__exponent>
 800cc26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc28:	1813      	adds	r3, r2, r0
 800cc2a:	2a01      	cmp	r2, #1
 800cc2c:	4681      	mov	r9, r0
 800cc2e:	6123      	str	r3, [r4, #16]
 800cc30:	dc02      	bgt.n	800cc38 <_printf_float+0x164>
 800cc32:	6822      	ldr	r2, [r4, #0]
 800cc34:	07d2      	lsls	r2, r2, #31
 800cc36:	d501      	bpl.n	800cc3c <_printf_float+0x168>
 800cc38:	3301      	adds	r3, #1
 800cc3a:	6123      	str	r3, [r4, #16]
 800cc3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d09c      	beq.n	800cb7e <_printf_float+0xaa>
 800cc44:	232d      	movs	r3, #45	; 0x2d
 800cc46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc4a:	e798      	b.n	800cb7e <_printf_float+0xaa>
 800cc4c:	9a06      	ldr	r2, [sp, #24]
 800cc4e:	2a47      	cmp	r2, #71	; 0x47
 800cc50:	d1be      	bne.n	800cbd0 <_printf_float+0xfc>
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d1bc      	bne.n	800cbd0 <_printf_float+0xfc>
 800cc56:	2301      	movs	r3, #1
 800cc58:	e7b9      	b.n	800cbce <_printf_float+0xfa>
 800cc5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cc5e:	d118      	bne.n	800cc92 <_printf_float+0x1be>
 800cc60:	2900      	cmp	r1, #0
 800cc62:	6863      	ldr	r3, [r4, #4]
 800cc64:	dd0b      	ble.n	800cc7e <_printf_float+0x1aa>
 800cc66:	6121      	str	r1, [r4, #16]
 800cc68:	b913      	cbnz	r3, 800cc70 <_printf_float+0x19c>
 800cc6a:	6822      	ldr	r2, [r4, #0]
 800cc6c:	07d0      	lsls	r0, r2, #31
 800cc6e:	d502      	bpl.n	800cc76 <_printf_float+0x1a2>
 800cc70:	3301      	adds	r3, #1
 800cc72:	440b      	add	r3, r1
 800cc74:	6123      	str	r3, [r4, #16]
 800cc76:	65a1      	str	r1, [r4, #88]	; 0x58
 800cc78:	f04f 0900 	mov.w	r9, #0
 800cc7c:	e7de      	b.n	800cc3c <_printf_float+0x168>
 800cc7e:	b913      	cbnz	r3, 800cc86 <_printf_float+0x1b2>
 800cc80:	6822      	ldr	r2, [r4, #0]
 800cc82:	07d2      	lsls	r2, r2, #31
 800cc84:	d501      	bpl.n	800cc8a <_printf_float+0x1b6>
 800cc86:	3302      	adds	r3, #2
 800cc88:	e7f4      	b.n	800cc74 <_printf_float+0x1a0>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e7f2      	b.n	800cc74 <_printf_float+0x1a0>
 800cc8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cc92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc94:	4299      	cmp	r1, r3
 800cc96:	db05      	blt.n	800cca4 <_printf_float+0x1d0>
 800cc98:	6823      	ldr	r3, [r4, #0]
 800cc9a:	6121      	str	r1, [r4, #16]
 800cc9c:	07d8      	lsls	r0, r3, #31
 800cc9e:	d5ea      	bpl.n	800cc76 <_printf_float+0x1a2>
 800cca0:	1c4b      	adds	r3, r1, #1
 800cca2:	e7e7      	b.n	800cc74 <_printf_float+0x1a0>
 800cca4:	2900      	cmp	r1, #0
 800cca6:	bfd4      	ite	le
 800cca8:	f1c1 0202 	rsble	r2, r1, #2
 800ccac:	2201      	movgt	r2, #1
 800ccae:	4413      	add	r3, r2
 800ccb0:	e7e0      	b.n	800cc74 <_printf_float+0x1a0>
 800ccb2:	6823      	ldr	r3, [r4, #0]
 800ccb4:	055a      	lsls	r2, r3, #21
 800ccb6:	d407      	bmi.n	800ccc8 <_printf_float+0x1f4>
 800ccb8:	6923      	ldr	r3, [r4, #16]
 800ccba:	4642      	mov	r2, r8
 800ccbc:	4631      	mov	r1, r6
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	47b8      	blx	r7
 800ccc2:	3001      	adds	r0, #1
 800ccc4:	d12c      	bne.n	800cd20 <_printf_float+0x24c>
 800ccc6:	e764      	b.n	800cb92 <_printf_float+0xbe>
 800ccc8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cccc:	f240 80e0 	bls.w	800ce90 <_printf_float+0x3bc>
 800ccd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	f7f3 fef6 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d034      	beq.n	800cd4a <_printf_float+0x276>
 800cce0:	4a37      	ldr	r2, [pc, #220]	; (800cdc0 <_printf_float+0x2ec>)
 800cce2:	2301      	movs	r3, #1
 800cce4:	4631      	mov	r1, r6
 800cce6:	4628      	mov	r0, r5
 800cce8:	47b8      	blx	r7
 800ccea:	3001      	adds	r0, #1
 800ccec:	f43f af51 	beq.w	800cb92 <_printf_float+0xbe>
 800ccf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	db02      	blt.n	800ccfe <_printf_float+0x22a>
 800ccf8:	6823      	ldr	r3, [r4, #0]
 800ccfa:	07d8      	lsls	r0, r3, #31
 800ccfc:	d510      	bpl.n	800cd20 <_printf_float+0x24c>
 800ccfe:	ee18 3a10 	vmov	r3, s16
 800cd02:	4652      	mov	r2, sl
 800cd04:	4631      	mov	r1, r6
 800cd06:	4628      	mov	r0, r5
 800cd08:	47b8      	blx	r7
 800cd0a:	3001      	adds	r0, #1
 800cd0c:	f43f af41 	beq.w	800cb92 <_printf_float+0xbe>
 800cd10:	f04f 0800 	mov.w	r8, #0
 800cd14:	f104 091a 	add.w	r9, r4, #26
 800cd18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd1a:	3b01      	subs	r3, #1
 800cd1c:	4543      	cmp	r3, r8
 800cd1e:	dc09      	bgt.n	800cd34 <_printf_float+0x260>
 800cd20:	6823      	ldr	r3, [r4, #0]
 800cd22:	079b      	lsls	r3, r3, #30
 800cd24:	f100 8107 	bmi.w	800cf36 <_printf_float+0x462>
 800cd28:	68e0      	ldr	r0, [r4, #12]
 800cd2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd2c:	4298      	cmp	r0, r3
 800cd2e:	bfb8      	it	lt
 800cd30:	4618      	movlt	r0, r3
 800cd32:	e730      	b.n	800cb96 <_printf_float+0xc2>
 800cd34:	2301      	movs	r3, #1
 800cd36:	464a      	mov	r2, r9
 800cd38:	4631      	mov	r1, r6
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	47b8      	blx	r7
 800cd3e:	3001      	adds	r0, #1
 800cd40:	f43f af27 	beq.w	800cb92 <_printf_float+0xbe>
 800cd44:	f108 0801 	add.w	r8, r8, #1
 800cd48:	e7e6      	b.n	800cd18 <_printf_float+0x244>
 800cd4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	dc39      	bgt.n	800cdc4 <_printf_float+0x2f0>
 800cd50:	4a1b      	ldr	r2, [pc, #108]	; (800cdc0 <_printf_float+0x2ec>)
 800cd52:	2301      	movs	r3, #1
 800cd54:	4631      	mov	r1, r6
 800cd56:	4628      	mov	r0, r5
 800cd58:	47b8      	blx	r7
 800cd5a:	3001      	adds	r0, #1
 800cd5c:	f43f af19 	beq.w	800cb92 <_printf_float+0xbe>
 800cd60:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cd64:	4313      	orrs	r3, r2
 800cd66:	d102      	bne.n	800cd6e <_printf_float+0x29a>
 800cd68:	6823      	ldr	r3, [r4, #0]
 800cd6a:	07d9      	lsls	r1, r3, #31
 800cd6c:	d5d8      	bpl.n	800cd20 <_printf_float+0x24c>
 800cd6e:	ee18 3a10 	vmov	r3, s16
 800cd72:	4652      	mov	r2, sl
 800cd74:	4631      	mov	r1, r6
 800cd76:	4628      	mov	r0, r5
 800cd78:	47b8      	blx	r7
 800cd7a:	3001      	adds	r0, #1
 800cd7c:	f43f af09 	beq.w	800cb92 <_printf_float+0xbe>
 800cd80:	f04f 0900 	mov.w	r9, #0
 800cd84:	f104 0a1a 	add.w	sl, r4, #26
 800cd88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd8a:	425b      	negs	r3, r3
 800cd8c:	454b      	cmp	r3, r9
 800cd8e:	dc01      	bgt.n	800cd94 <_printf_float+0x2c0>
 800cd90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd92:	e792      	b.n	800ccba <_printf_float+0x1e6>
 800cd94:	2301      	movs	r3, #1
 800cd96:	4652      	mov	r2, sl
 800cd98:	4631      	mov	r1, r6
 800cd9a:	4628      	mov	r0, r5
 800cd9c:	47b8      	blx	r7
 800cd9e:	3001      	adds	r0, #1
 800cda0:	f43f aef7 	beq.w	800cb92 <_printf_float+0xbe>
 800cda4:	f109 0901 	add.w	r9, r9, #1
 800cda8:	e7ee      	b.n	800cd88 <_printf_float+0x2b4>
 800cdaa:	bf00      	nop
 800cdac:	7fefffff 	.word	0x7fefffff
 800cdb0:	08010bf5 	.word	0x08010bf5
 800cdb4:	08010bf9 	.word	0x08010bf9
 800cdb8:	08010bfd 	.word	0x08010bfd
 800cdbc:	08010c01 	.word	0x08010c01
 800cdc0:	08010c05 	.word	0x08010c05
 800cdc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	bfa8      	it	ge
 800cdcc:	461a      	movge	r2, r3
 800cdce:	2a00      	cmp	r2, #0
 800cdd0:	4691      	mov	r9, r2
 800cdd2:	dc37      	bgt.n	800ce44 <_printf_float+0x370>
 800cdd4:	f04f 0b00 	mov.w	fp, #0
 800cdd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cddc:	f104 021a 	add.w	r2, r4, #26
 800cde0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cde2:	9305      	str	r3, [sp, #20]
 800cde4:	eba3 0309 	sub.w	r3, r3, r9
 800cde8:	455b      	cmp	r3, fp
 800cdea:	dc33      	bgt.n	800ce54 <_printf_float+0x380>
 800cdec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	db3b      	blt.n	800ce6c <_printf_float+0x398>
 800cdf4:	6823      	ldr	r3, [r4, #0]
 800cdf6:	07da      	lsls	r2, r3, #31
 800cdf8:	d438      	bmi.n	800ce6c <_printf_float+0x398>
 800cdfa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cdfe:	eba2 0903 	sub.w	r9, r2, r3
 800ce02:	9b05      	ldr	r3, [sp, #20]
 800ce04:	1ad2      	subs	r2, r2, r3
 800ce06:	4591      	cmp	r9, r2
 800ce08:	bfa8      	it	ge
 800ce0a:	4691      	movge	r9, r2
 800ce0c:	f1b9 0f00 	cmp.w	r9, #0
 800ce10:	dc35      	bgt.n	800ce7e <_printf_float+0x3aa>
 800ce12:	f04f 0800 	mov.w	r8, #0
 800ce16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce1a:	f104 0a1a 	add.w	sl, r4, #26
 800ce1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce22:	1a9b      	subs	r3, r3, r2
 800ce24:	eba3 0309 	sub.w	r3, r3, r9
 800ce28:	4543      	cmp	r3, r8
 800ce2a:	f77f af79 	ble.w	800cd20 <_printf_float+0x24c>
 800ce2e:	2301      	movs	r3, #1
 800ce30:	4652      	mov	r2, sl
 800ce32:	4631      	mov	r1, r6
 800ce34:	4628      	mov	r0, r5
 800ce36:	47b8      	blx	r7
 800ce38:	3001      	adds	r0, #1
 800ce3a:	f43f aeaa 	beq.w	800cb92 <_printf_float+0xbe>
 800ce3e:	f108 0801 	add.w	r8, r8, #1
 800ce42:	e7ec      	b.n	800ce1e <_printf_float+0x34a>
 800ce44:	4613      	mov	r3, r2
 800ce46:	4631      	mov	r1, r6
 800ce48:	4642      	mov	r2, r8
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	47b8      	blx	r7
 800ce4e:	3001      	adds	r0, #1
 800ce50:	d1c0      	bne.n	800cdd4 <_printf_float+0x300>
 800ce52:	e69e      	b.n	800cb92 <_printf_float+0xbe>
 800ce54:	2301      	movs	r3, #1
 800ce56:	4631      	mov	r1, r6
 800ce58:	4628      	mov	r0, r5
 800ce5a:	9205      	str	r2, [sp, #20]
 800ce5c:	47b8      	blx	r7
 800ce5e:	3001      	adds	r0, #1
 800ce60:	f43f ae97 	beq.w	800cb92 <_printf_float+0xbe>
 800ce64:	9a05      	ldr	r2, [sp, #20]
 800ce66:	f10b 0b01 	add.w	fp, fp, #1
 800ce6a:	e7b9      	b.n	800cde0 <_printf_float+0x30c>
 800ce6c:	ee18 3a10 	vmov	r3, s16
 800ce70:	4652      	mov	r2, sl
 800ce72:	4631      	mov	r1, r6
 800ce74:	4628      	mov	r0, r5
 800ce76:	47b8      	blx	r7
 800ce78:	3001      	adds	r0, #1
 800ce7a:	d1be      	bne.n	800cdfa <_printf_float+0x326>
 800ce7c:	e689      	b.n	800cb92 <_printf_float+0xbe>
 800ce7e:	9a05      	ldr	r2, [sp, #20]
 800ce80:	464b      	mov	r3, r9
 800ce82:	4442      	add	r2, r8
 800ce84:	4631      	mov	r1, r6
 800ce86:	4628      	mov	r0, r5
 800ce88:	47b8      	blx	r7
 800ce8a:	3001      	adds	r0, #1
 800ce8c:	d1c1      	bne.n	800ce12 <_printf_float+0x33e>
 800ce8e:	e680      	b.n	800cb92 <_printf_float+0xbe>
 800ce90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce92:	2a01      	cmp	r2, #1
 800ce94:	dc01      	bgt.n	800ce9a <_printf_float+0x3c6>
 800ce96:	07db      	lsls	r3, r3, #31
 800ce98:	d53a      	bpl.n	800cf10 <_printf_float+0x43c>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	4642      	mov	r2, r8
 800ce9e:	4631      	mov	r1, r6
 800cea0:	4628      	mov	r0, r5
 800cea2:	47b8      	blx	r7
 800cea4:	3001      	adds	r0, #1
 800cea6:	f43f ae74 	beq.w	800cb92 <_printf_float+0xbe>
 800ceaa:	ee18 3a10 	vmov	r3, s16
 800ceae:	4652      	mov	r2, sl
 800ceb0:	4631      	mov	r1, r6
 800ceb2:	4628      	mov	r0, r5
 800ceb4:	47b8      	blx	r7
 800ceb6:	3001      	adds	r0, #1
 800ceb8:	f43f ae6b 	beq.w	800cb92 <_printf_float+0xbe>
 800cebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cec0:	2200      	movs	r2, #0
 800cec2:	2300      	movs	r3, #0
 800cec4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800cec8:	f7f3 fdfe 	bl	8000ac8 <__aeabi_dcmpeq>
 800cecc:	b9d8      	cbnz	r0, 800cf06 <_printf_float+0x432>
 800cece:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ced2:	f108 0201 	add.w	r2, r8, #1
 800ced6:	4631      	mov	r1, r6
 800ced8:	4628      	mov	r0, r5
 800ceda:	47b8      	blx	r7
 800cedc:	3001      	adds	r0, #1
 800cede:	d10e      	bne.n	800cefe <_printf_float+0x42a>
 800cee0:	e657      	b.n	800cb92 <_printf_float+0xbe>
 800cee2:	2301      	movs	r3, #1
 800cee4:	4652      	mov	r2, sl
 800cee6:	4631      	mov	r1, r6
 800cee8:	4628      	mov	r0, r5
 800ceea:	47b8      	blx	r7
 800ceec:	3001      	adds	r0, #1
 800ceee:	f43f ae50 	beq.w	800cb92 <_printf_float+0xbe>
 800cef2:	f108 0801 	add.w	r8, r8, #1
 800cef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cef8:	3b01      	subs	r3, #1
 800cefa:	4543      	cmp	r3, r8
 800cefc:	dcf1      	bgt.n	800cee2 <_printf_float+0x40e>
 800cefe:	464b      	mov	r3, r9
 800cf00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cf04:	e6da      	b.n	800ccbc <_printf_float+0x1e8>
 800cf06:	f04f 0800 	mov.w	r8, #0
 800cf0a:	f104 0a1a 	add.w	sl, r4, #26
 800cf0e:	e7f2      	b.n	800cef6 <_printf_float+0x422>
 800cf10:	2301      	movs	r3, #1
 800cf12:	4642      	mov	r2, r8
 800cf14:	e7df      	b.n	800ced6 <_printf_float+0x402>
 800cf16:	2301      	movs	r3, #1
 800cf18:	464a      	mov	r2, r9
 800cf1a:	4631      	mov	r1, r6
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	47b8      	blx	r7
 800cf20:	3001      	adds	r0, #1
 800cf22:	f43f ae36 	beq.w	800cb92 <_printf_float+0xbe>
 800cf26:	f108 0801 	add.w	r8, r8, #1
 800cf2a:	68e3      	ldr	r3, [r4, #12]
 800cf2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf2e:	1a5b      	subs	r3, r3, r1
 800cf30:	4543      	cmp	r3, r8
 800cf32:	dcf0      	bgt.n	800cf16 <_printf_float+0x442>
 800cf34:	e6f8      	b.n	800cd28 <_printf_float+0x254>
 800cf36:	f04f 0800 	mov.w	r8, #0
 800cf3a:	f104 0919 	add.w	r9, r4, #25
 800cf3e:	e7f4      	b.n	800cf2a <_printf_float+0x456>

0800cf40 <_printf_common>:
 800cf40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf44:	4616      	mov	r6, r2
 800cf46:	4699      	mov	r9, r3
 800cf48:	688a      	ldr	r2, [r1, #8]
 800cf4a:	690b      	ldr	r3, [r1, #16]
 800cf4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf50:	4293      	cmp	r3, r2
 800cf52:	bfb8      	it	lt
 800cf54:	4613      	movlt	r3, r2
 800cf56:	6033      	str	r3, [r6, #0]
 800cf58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf5c:	4607      	mov	r7, r0
 800cf5e:	460c      	mov	r4, r1
 800cf60:	b10a      	cbz	r2, 800cf66 <_printf_common+0x26>
 800cf62:	3301      	adds	r3, #1
 800cf64:	6033      	str	r3, [r6, #0]
 800cf66:	6823      	ldr	r3, [r4, #0]
 800cf68:	0699      	lsls	r1, r3, #26
 800cf6a:	bf42      	ittt	mi
 800cf6c:	6833      	ldrmi	r3, [r6, #0]
 800cf6e:	3302      	addmi	r3, #2
 800cf70:	6033      	strmi	r3, [r6, #0]
 800cf72:	6825      	ldr	r5, [r4, #0]
 800cf74:	f015 0506 	ands.w	r5, r5, #6
 800cf78:	d106      	bne.n	800cf88 <_printf_common+0x48>
 800cf7a:	f104 0a19 	add.w	sl, r4, #25
 800cf7e:	68e3      	ldr	r3, [r4, #12]
 800cf80:	6832      	ldr	r2, [r6, #0]
 800cf82:	1a9b      	subs	r3, r3, r2
 800cf84:	42ab      	cmp	r3, r5
 800cf86:	dc26      	bgt.n	800cfd6 <_printf_common+0x96>
 800cf88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf8c:	1e13      	subs	r3, r2, #0
 800cf8e:	6822      	ldr	r2, [r4, #0]
 800cf90:	bf18      	it	ne
 800cf92:	2301      	movne	r3, #1
 800cf94:	0692      	lsls	r2, r2, #26
 800cf96:	d42b      	bmi.n	800cff0 <_printf_common+0xb0>
 800cf98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf9c:	4649      	mov	r1, r9
 800cf9e:	4638      	mov	r0, r7
 800cfa0:	47c0      	blx	r8
 800cfa2:	3001      	adds	r0, #1
 800cfa4:	d01e      	beq.n	800cfe4 <_printf_common+0xa4>
 800cfa6:	6823      	ldr	r3, [r4, #0]
 800cfa8:	6922      	ldr	r2, [r4, #16]
 800cfaa:	f003 0306 	and.w	r3, r3, #6
 800cfae:	2b04      	cmp	r3, #4
 800cfb0:	bf02      	ittt	eq
 800cfb2:	68e5      	ldreq	r5, [r4, #12]
 800cfb4:	6833      	ldreq	r3, [r6, #0]
 800cfb6:	1aed      	subeq	r5, r5, r3
 800cfb8:	68a3      	ldr	r3, [r4, #8]
 800cfba:	bf0c      	ite	eq
 800cfbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cfc0:	2500      	movne	r5, #0
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	bfc4      	itt	gt
 800cfc6:	1a9b      	subgt	r3, r3, r2
 800cfc8:	18ed      	addgt	r5, r5, r3
 800cfca:	2600      	movs	r6, #0
 800cfcc:	341a      	adds	r4, #26
 800cfce:	42b5      	cmp	r5, r6
 800cfd0:	d11a      	bne.n	800d008 <_printf_common+0xc8>
 800cfd2:	2000      	movs	r0, #0
 800cfd4:	e008      	b.n	800cfe8 <_printf_common+0xa8>
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	4652      	mov	r2, sl
 800cfda:	4649      	mov	r1, r9
 800cfdc:	4638      	mov	r0, r7
 800cfde:	47c0      	blx	r8
 800cfe0:	3001      	adds	r0, #1
 800cfe2:	d103      	bne.n	800cfec <_printf_common+0xac>
 800cfe4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfec:	3501      	adds	r5, #1
 800cfee:	e7c6      	b.n	800cf7e <_printf_common+0x3e>
 800cff0:	18e1      	adds	r1, r4, r3
 800cff2:	1c5a      	adds	r2, r3, #1
 800cff4:	2030      	movs	r0, #48	; 0x30
 800cff6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cffa:	4422      	add	r2, r4
 800cffc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d000:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d004:	3302      	adds	r3, #2
 800d006:	e7c7      	b.n	800cf98 <_printf_common+0x58>
 800d008:	2301      	movs	r3, #1
 800d00a:	4622      	mov	r2, r4
 800d00c:	4649      	mov	r1, r9
 800d00e:	4638      	mov	r0, r7
 800d010:	47c0      	blx	r8
 800d012:	3001      	adds	r0, #1
 800d014:	d0e6      	beq.n	800cfe4 <_printf_common+0xa4>
 800d016:	3601      	adds	r6, #1
 800d018:	e7d9      	b.n	800cfce <_printf_common+0x8e>
	...

0800d01c <_printf_i>:
 800d01c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d020:	7e0f      	ldrb	r7, [r1, #24]
 800d022:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d024:	2f78      	cmp	r7, #120	; 0x78
 800d026:	4691      	mov	r9, r2
 800d028:	4680      	mov	r8, r0
 800d02a:	460c      	mov	r4, r1
 800d02c:	469a      	mov	sl, r3
 800d02e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d032:	d807      	bhi.n	800d044 <_printf_i+0x28>
 800d034:	2f62      	cmp	r7, #98	; 0x62
 800d036:	d80a      	bhi.n	800d04e <_printf_i+0x32>
 800d038:	2f00      	cmp	r7, #0
 800d03a:	f000 80d4 	beq.w	800d1e6 <_printf_i+0x1ca>
 800d03e:	2f58      	cmp	r7, #88	; 0x58
 800d040:	f000 80c0 	beq.w	800d1c4 <_printf_i+0x1a8>
 800d044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d048:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d04c:	e03a      	b.n	800d0c4 <_printf_i+0xa8>
 800d04e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d052:	2b15      	cmp	r3, #21
 800d054:	d8f6      	bhi.n	800d044 <_printf_i+0x28>
 800d056:	a101      	add	r1, pc, #4	; (adr r1, 800d05c <_printf_i+0x40>)
 800d058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d05c:	0800d0b5 	.word	0x0800d0b5
 800d060:	0800d0c9 	.word	0x0800d0c9
 800d064:	0800d045 	.word	0x0800d045
 800d068:	0800d045 	.word	0x0800d045
 800d06c:	0800d045 	.word	0x0800d045
 800d070:	0800d045 	.word	0x0800d045
 800d074:	0800d0c9 	.word	0x0800d0c9
 800d078:	0800d045 	.word	0x0800d045
 800d07c:	0800d045 	.word	0x0800d045
 800d080:	0800d045 	.word	0x0800d045
 800d084:	0800d045 	.word	0x0800d045
 800d088:	0800d1cd 	.word	0x0800d1cd
 800d08c:	0800d0f5 	.word	0x0800d0f5
 800d090:	0800d187 	.word	0x0800d187
 800d094:	0800d045 	.word	0x0800d045
 800d098:	0800d045 	.word	0x0800d045
 800d09c:	0800d1ef 	.word	0x0800d1ef
 800d0a0:	0800d045 	.word	0x0800d045
 800d0a4:	0800d0f5 	.word	0x0800d0f5
 800d0a8:	0800d045 	.word	0x0800d045
 800d0ac:	0800d045 	.word	0x0800d045
 800d0b0:	0800d18f 	.word	0x0800d18f
 800d0b4:	682b      	ldr	r3, [r5, #0]
 800d0b6:	1d1a      	adds	r2, r3, #4
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	602a      	str	r2, [r5, #0]
 800d0bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	e09f      	b.n	800d208 <_printf_i+0x1ec>
 800d0c8:	6820      	ldr	r0, [r4, #0]
 800d0ca:	682b      	ldr	r3, [r5, #0]
 800d0cc:	0607      	lsls	r7, r0, #24
 800d0ce:	f103 0104 	add.w	r1, r3, #4
 800d0d2:	6029      	str	r1, [r5, #0]
 800d0d4:	d501      	bpl.n	800d0da <_printf_i+0xbe>
 800d0d6:	681e      	ldr	r6, [r3, #0]
 800d0d8:	e003      	b.n	800d0e2 <_printf_i+0xc6>
 800d0da:	0646      	lsls	r6, r0, #25
 800d0dc:	d5fb      	bpl.n	800d0d6 <_printf_i+0xba>
 800d0de:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d0e2:	2e00      	cmp	r6, #0
 800d0e4:	da03      	bge.n	800d0ee <_printf_i+0xd2>
 800d0e6:	232d      	movs	r3, #45	; 0x2d
 800d0e8:	4276      	negs	r6, r6
 800d0ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0ee:	485a      	ldr	r0, [pc, #360]	; (800d258 <_printf_i+0x23c>)
 800d0f0:	230a      	movs	r3, #10
 800d0f2:	e012      	b.n	800d11a <_printf_i+0xfe>
 800d0f4:	682b      	ldr	r3, [r5, #0]
 800d0f6:	6820      	ldr	r0, [r4, #0]
 800d0f8:	1d19      	adds	r1, r3, #4
 800d0fa:	6029      	str	r1, [r5, #0]
 800d0fc:	0605      	lsls	r5, r0, #24
 800d0fe:	d501      	bpl.n	800d104 <_printf_i+0xe8>
 800d100:	681e      	ldr	r6, [r3, #0]
 800d102:	e002      	b.n	800d10a <_printf_i+0xee>
 800d104:	0641      	lsls	r1, r0, #25
 800d106:	d5fb      	bpl.n	800d100 <_printf_i+0xe4>
 800d108:	881e      	ldrh	r6, [r3, #0]
 800d10a:	4853      	ldr	r0, [pc, #332]	; (800d258 <_printf_i+0x23c>)
 800d10c:	2f6f      	cmp	r7, #111	; 0x6f
 800d10e:	bf0c      	ite	eq
 800d110:	2308      	moveq	r3, #8
 800d112:	230a      	movne	r3, #10
 800d114:	2100      	movs	r1, #0
 800d116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d11a:	6865      	ldr	r5, [r4, #4]
 800d11c:	60a5      	str	r5, [r4, #8]
 800d11e:	2d00      	cmp	r5, #0
 800d120:	bfa2      	ittt	ge
 800d122:	6821      	ldrge	r1, [r4, #0]
 800d124:	f021 0104 	bicge.w	r1, r1, #4
 800d128:	6021      	strge	r1, [r4, #0]
 800d12a:	b90e      	cbnz	r6, 800d130 <_printf_i+0x114>
 800d12c:	2d00      	cmp	r5, #0
 800d12e:	d04b      	beq.n	800d1c8 <_printf_i+0x1ac>
 800d130:	4615      	mov	r5, r2
 800d132:	fbb6 f1f3 	udiv	r1, r6, r3
 800d136:	fb03 6711 	mls	r7, r3, r1, r6
 800d13a:	5dc7      	ldrb	r7, [r0, r7]
 800d13c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d140:	4637      	mov	r7, r6
 800d142:	42bb      	cmp	r3, r7
 800d144:	460e      	mov	r6, r1
 800d146:	d9f4      	bls.n	800d132 <_printf_i+0x116>
 800d148:	2b08      	cmp	r3, #8
 800d14a:	d10b      	bne.n	800d164 <_printf_i+0x148>
 800d14c:	6823      	ldr	r3, [r4, #0]
 800d14e:	07de      	lsls	r6, r3, #31
 800d150:	d508      	bpl.n	800d164 <_printf_i+0x148>
 800d152:	6923      	ldr	r3, [r4, #16]
 800d154:	6861      	ldr	r1, [r4, #4]
 800d156:	4299      	cmp	r1, r3
 800d158:	bfde      	ittt	le
 800d15a:	2330      	movle	r3, #48	; 0x30
 800d15c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d160:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d164:	1b52      	subs	r2, r2, r5
 800d166:	6122      	str	r2, [r4, #16]
 800d168:	f8cd a000 	str.w	sl, [sp]
 800d16c:	464b      	mov	r3, r9
 800d16e:	aa03      	add	r2, sp, #12
 800d170:	4621      	mov	r1, r4
 800d172:	4640      	mov	r0, r8
 800d174:	f7ff fee4 	bl	800cf40 <_printf_common>
 800d178:	3001      	adds	r0, #1
 800d17a:	d14a      	bne.n	800d212 <_printf_i+0x1f6>
 800d17c:	f04f 30ff 	mov.w	r0, #4294967295
 800d180:	b004      	add	sp, #16
 800d182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d186:	6823      	ldr	r3, [r4, #0]
 800d188:	f043 0320 	orr.w	r3, r3, #32
 800d18c:	6023      	str	r3, [r4, #0]
 800d18e:	4833      	ldr	r0, [pc, #204]	; (800d25c <_printf_i+0x240>)
 800d190:	2778      	movs	r7, #120	; 0x78
 800d192:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d196:	6823      	ldr	r3, [r4, #0]
 800d198:	6829      	ldr	r1, [r5, #0]
 800d19a:	061f      	lsls	r7, r3, #24
 800d19c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d1a0:	d402      	bmi.n	800d1a8 <_printf_i+0x18c>
 800d1a2:	065f      	lsls	r7, r3, #25
 800d1a4:	bf48      	it	mi
 800d1a6:	b2b6      	uxthmi	r6, r6
 800d1a8:	07df      	lsls	r7, r3, #31
 800d1aa:	bf48      	it	mi
 800d1ac:	f043 0320 	orrmi.w	r3, r3, #32
 800d1b0:	6029      	str	r1, [r5, #0]
 800d1b2:	bf48      	it	mi
 800d1b4:	6023      	strmi	r3, [r4, #0]
 800d1b6:	b91e      	cbnz	r6, 800d1c0 <_printf_i+0x1a4>
 800d1b8:	6823      	ldr	r3, [r4, #0]
 800d1ba:	f023 0320 	bic.w	r3, r3, #32
 800d1be:	6023      	str	r3, [r4, #0]
 800d1c0:	2310      	movs	r3, #16
 800d1c2:	e7a7      	b.n	800d114 <_printf_i+0xf8>
 800d1c4:	4824      	ldr	r0, [pc, #144]	; (800d258 <_printf_i+0x23c>)
 800d1c6:	e7e4      	b.n	800d192 <_printf_i+0x176>
 800d1c8:	4615      	mov	r5, r2
 800d1ca:	e7bd      	b.n	800d148 <_printf_i+0x12c>
 800d1cc:	682b      	ldr	r3, [r5, #0]
 800d1ce:	6826      	ldr	r6, [r4, #0]
 800d1d0:	6961      	ldr	r1, [r4, #20]
 800d1d2:	1d18      	adds	r0, r3, #4
 800d1d4:	6028      	str	r0, [r5, #0]
 800d1d6:	0635      	lsls	r5, r6, #24
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	d501      	bpl.n	800d1e0 <_printf_i+0x1c4>
 800d1dc:	6019      	str	r1, [r3, #0]
 800d1de:	e002      	b.n	800d1e6 <_printf_i+0x1ca>
 800d1e0:	0670      	lsls	r0, r6, #25
 800d1e2:	d5fb      	bpl.n	800d1dc <_printf_i+0x1c0>
 800d1e4:	8019      	strh	r1, [r3, #0]
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	6123      	str	r3, [r4, #16]
 800d1ea:	4615      	mov	r5, r2
 800d1ec:	e7bc      	b.n	800d168 <_printf_i+0x14c>
 800d1ee:	682b      	ldr	r3, [r5, #0]
 800d1f0:	1d1a      	adds	r2, r3, #4
 800d1f2:	602a      	str	r2, [r5, #0]
 800d1f4:	681d      	ldr	r5, [r3, #0]
 800d1f6:	6862      	ldr	r2, [r4, #4]
 800d1f8:	2100      	movs	r1, #0
 800d1fa:	4628      	mov	r0, r5
 800d1fc:	f7f2 ffe8 	bl	80001d0 <memchr>
 800d200:	b108      	cbz	r0, 800d206 <_printf_i+0x1ea>
 800d202:	1b40      	subs	r0, r0, r5
 800d204:	6060      	str	r0, [r4, #4]
 800d206:	6863      	ldr	r3, [r4, #4]
 800d208:	6123      	str	r3, [r4, #16]
 800d20a:	2300      	movs	r3, #0
 800d20c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d210:	e7aa      	b.n	800d168 <_printf_i+0x14c>
 800d212:	6923      	ldr	r3, [r4, #16]
 800d214:	462a      	mov	r2, r5
 800d216:	4649      	mov	r1, r9
 800d218:	4640      	mov	r0, r8
 800d21a:	47d0      	blx	sl
 800d21c:	3001      	adds	r0, #1
 800d21e:	d0ad      	beq.n	800d17c <_printf_i+0x160>
 800d220:	6823      	ldr	r3, [r4, #0]
 800d222:	079b      	lsls	r3, r3, #30
 800d224:	d413      	bmi.n	800d24e <_printf_i+0x232>
 800d226:	68e0      	ldr	r0, [r4, #12]
 800d228:	9b03      	ldr	r3, [sp, #12]
 800d22a:	4298      	cmp	r0, r3
 800d22c:	bfb8      	it	lt
 800d22e:	4618      	movlt	r0, r3
 800d230:	e7a6      	b.n	800d180 <_printf_i+0x164>
 800d232:	2301      	movs	r3, #1
 800d234:	4632      	mov	r2, r6
 800d236:	4649      	mov	r1, r9
 800d238:	4640      	mov	r0, r8
 800d23a:	47d0      	blx	sl
 800d23c:	3001      	adds	r0, #1
 800d23e:	d09d      	beq.n	800d17c <_printf_i+0x160>
 800d240:	3501      	adds	r5, #1
 800d242:	68e3      	ldr	r3, [r4, #12]
 800d244:	9903      	ldr	r1, [sp, #12]
 800d246:	1a5b      	subs	r3, r3, r1
 800d248:	42ab      	cmp	r3, r5
 800d24a:	dcf2      	bgt.n	800d232 <_printf_i+0x216>
 800d24c:	e7eb      	b.n	800d226 <_printf_i+0x20a>
 800d24e:	2500      	movs	r5, #0
 800d250:	f104 0619 	add.w	r6, r4, #25
 800d254:	e7f5      	b.n	800d242 <_printf_i+0x226>
 800d256:	bf00      	nop
 800d258:	08010c07 	.word	0x08010c07
 800d25c:	08010c18 	.word	0x08010c18

0800d260 <std>:
 800d260:	2300      	movs	r3, #0
 800d262:	b510      	push	{r4, lr}
 800d264:	4604      	mov	r4, r0
 800d266:	e9c0 3300 	strd	r3, r3, [r0]
 800d26a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d26e:	6083      	str	r3, [r0, #8]
 800d270:	8181      	strh	r1, [r0, #12]
 800d272:	6643      	str	r3, [r0, #100]	; 0x64
 800d274:	81c2      	strh	r2, [r0, #14]
 800d276:	6183      	str	r3, [r0, #24]
 800d278:	4619      	mov	r1, r3
 800d27a:	2208      	movs	r2, #8
 800d27c:	305c      	adds	r0, #92	; 0x5c
 800d27e:	f000 f9ed 	bl	800d65c <memset>
 800d282:	4b05      	ldr	r3, [pc, #20]	; (800d298 <std+0x38>)
 800d284:	6263      	str	r3, [r4, #36]	; 0x24
 800d286:	4b05      	ldr	r3, [pc, #20]	; (800d29c <std+0x3c>)
 800d288:	62a3      	str	r3, [r4, #40]	; 0x28
 800d28a:	4b05      	ldr	r3, [pc, #20]	; (800d2a0 <std+0x40>)
 800d28c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d28e:	4b05      	ldr	r3, [pc, #20]	; (800d2a4 <std+0x44>)
 800d290:	6224      	str	r4, [r4, #32]
 800d292:	6323      	str	r3, [r4, #48]	; 0x30
 800d294:	bd10      	pop	{r4, pc}
 800d296:	bf00      	nop
 800d298:	0800d4ad 	.word	0x0800d4ad
 800d29c:	0800d4cf 	.word	0x0800d4cf
 800d2a0:	0800d507 	.word	0x0800d507
 800d2a4:	0800d52b 	.word	0x0800d52b

0800d2a8 <stdio_exit_handler>:
 800d2a8:	4a02      	ldr	r2, [pc, #8]	; (800d2b4 <stdio_exit_handler+0xc>)
 800d2aa:	4903      	ldr	r1, [pc, #12]	; (800d2b8 <stdio_exit_handler+0x10>)
 800d2ac:	4803      	ldr	r0, [pc, #12]	; (800d2bc <stdio_exit_handler+0x14>)
 800d2ae:	f000 b869 	b.w	800d384 <_fwalk_sglue>
 800d2b2:	bf00      	nop
 800d2b4:	2000001c 	.word	0x2000001c
 800d2b8:	0800f44d 	.word	0x0800f44d
 800d2bc:	20000028 	.word	0x20000028

0800d2c0 <cleanup_stdio>:
 800d2c0:	6841      	ldr	r1, [r0, #4]
 800d2c2:	4b0c      	ldr	r3, [pc, #48]	; (800d2f4 <cleanup_stdio+0x34>)
 800d2c4:	4299      	cmp	r1, r3
 800d2c6:	b510      	push	{r4, lr}
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	d001      	beq.n	800d2d0 <cleanup_stdio+0x10>
 800d2cc:	f002 f8be 	bl	800f44c <_fflush_r>
 800d2d0:	68a1      	ldr	r1, [r4, #8]
 800d2d2:	4b09      	ldr	r3, [pc, #36]	; (800d2f8 <cleanup_stdio+0x38>)
 800d2d4:	4299      	cmp	r1, r3
 800d2d6:	d002      	beq.n	800d2de <cleanup_stdio+0x1e>
 800d2d8:	4620      	mov	r0, r4
 800d2da:	f002 f8b7 	bl	800f44c <_fflush_r>
 800d2de:	68e1      	ldr	r1, [r4, #12]
 800d2e0:	4b06      	ldr	r3, [pc, #24]	; (800d2fc <cleanup_stdio+0x3c>)
 800d2e2:	4299      	cmp	r1, r3
 800d2e4:	d004      	beq.n	800d2f0 <cleanup_stdio+0x30>
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2ec:	f002 b8ae 	b.w	800f44c <_fflush_r>
 800d2f0:	bd10      	pop	{r4, pc}
 800d2f2:	bf00      	nop
 800d2f4:	20004964 	.word	0x20004964
 800d2f8:	200049cc 	.word	0x200049cc
 800d2fc:	20004a34 	.word	0x20004a34

0800d300 <global_stdio_init.part.0>:
 800d300:	b510      	push	{r4, lr}
 800d302:	4b0b      	ldr	r3, [pc, #44]	; (800d330 <global_stdio_init.part.0+0x30>)
 800d304:	4c0b      	ldr	r4, [pc, #44]	; (800d334 <global_stdio_init.part.0+0x34>)
 800d306:	4a0c      	ldr	r2, [pc, #48]	; (800d338 <global_stdio_init.part.0+0x38>)
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	4620      	mov	r0, r4
 800d30c:	2200      	movs	r2, #0
 800d30e:	2104      	movs	r1, #4
 800d310:	f7ff ffa6 	bl	800d260 <std>
 800d314:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d318:	2201      	movs	r2, #1
 800d31a:	2109      	movs	r1, #9
 800d31c:	f7ff ffa0 	bl	800d260 <std>
 800d320:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d324:	2202      	movs	r2, #2
 800d326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d32a:	2112      	movs	r1, #18
 800d32c:	f7ff bf98 	b.w	800d260 <std>
 800d330:	20004a9c 	.word	0x20004a9c
 800d334:	20004964 	.word	0x20004964
 800d338:	0800d2a9 	.word	0x0800d2a9

0800d33c <__sfp_lock_acquire>:
 800d33c:	4801      	ldr	r0, [pc, #4]	; (800d344 <__sfp_lock_acquire+0x8>)
 800d33e:	f000 ba5f 	b.w	800d800 <__retarget_lock_acquire_recursive>
 800d342:	bf00      	nop
 800d344:	20004aa5 	.word	0x20004aa5

0800d348 <__sfp_lock_release>:
 800d348:	4801      	ldr	r0, [pc, #4]	; (800d350 <__sfp_lock_release+0x8>)
 800d34a:	f000 ba5a 	b.w	800d802 <__retarget_lock_release_recursive>
 800d34e:	bf00      	nop
 800d350:	20004aa5 	.word	0x20004aa5

0800d354 <__sinit>:
 800d354:	b510      	push	{r4, lr}
 800d356:	4604      	mov	r4, r0
 800d358:	f7ff fff0 	bl	800d33c <__sfp_lock_acquire>
 800d35c:	6a23      	ldr	r3, [r4, #32]
 800d35e:	b11b      	cbz	r3, 800d368 <__sinit+0x14>
 800d360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d364:	f7ff bff0 	b.w	800d348 <__sfp_lock_release>
 800d368:	4b04      	ldr	r3, [pc, #16]	; (800d37c <__sinit+0x28>)
 800d36a:	6223      	str	r3, [r4, #32]
 800d36c:	4b04      	ldr	r3, [pc, #16]	; (800d380 <__sinit+0x2c>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d1f5      	bne.n	800d360 <__sinit+0xc>
 800d374:	f7ff ffc4 	bl	800d300 <global_stdio_init.part.0>
 800d378:	e7f2      	b.n	800d360 <__sinit+0xc>
 800d37a:	bf00      	nop
 800d37c:	0800d2c1 	.word	0x0800d2c1
 800d380:	20004a9c 	.word	0x20004a9c

0800d384 <_fwalk_sglue>:
 800d384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d388:	4607      	mov	r7, r0
 800d38a:	4688      	mov	r8, r1
 800d38c:	4614      	mov	r4, r2
 800d38e:	2600      	movs	r6, #0
 800d390:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d394:	f1b9 0901 	subs.w	r9, r9, #1
 800d398:	d505      	bpl.n	800d3a6 <_fwalk_sglue+0x22>
 800d39a:	6824      	ldr	r4, [r4, #0]
 800d39c:	2c00      	cmp	r4, #0
 800d39e:	d1f7      	bne.n	800d390 <_fwalk_sglue+0xc>
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3a6:	89ab      	ldrh	r3, [r5, #12]
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d907      	bls.n	800d3bc <_fwalk_sglue+0x38>
 800d3ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	d003      	beq.n	800d3bc <_fwalk_sglue+0x38>
 800d3b4:	4629      	mov	r1, r5
 800d3b6:	4638      	mov	r0, r7
 800d3b8:	47c0      	blx	r8
 800d3ba:	4306      	orrs	r6, r0
 800d3bc:	3568      	adds	r5, #104	; 0x68
 800d3be:	e7e9      	b.n	800d394 <_fwalk_sglue+0x10>

0800d3c0 <iprintf>:
 800d3c0:	b40f      	push	{r0, r1, r2, r3}
 800d3c2:	b507      	push	{r0, r1, r2, lr}
 800d3c4:	4906      	ldr	r1, [pc, #24]	; (800d3e0 <iprintf+0x20>)
 800d3c6:	ab04      	add	r3, sp, #16
 800d3c8:	6808      	ldr	r0, [r1, #0]
 800d3ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ce:	6881      	ldr	r1, [r0, #8]
 800d3d0:	9301      	str	r3, [sp, #4]
 800d3d2:	f001 fe9b 	bl	800f10c <_vfiprintf_r>
 800d3d6:	b003      	add	sp, #12
 800d3d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3dc:	b004      	add	sp, #16
 800d3de:	4770      	bx	lr
 800d3e0:	20000074 	.word	0x20000074

0800d3e4 <putchar>:
 800d3e4:	4b02      	ldr	r3, [pc, #8]	; (800d3f0 <putchar+0xc>)
 800d3e6:	4601      	mov	r1, r0
 800d3e8:	6818      	ldr	r0, [r3, #0]
 800d3ea:	6882      	ldr	r2, [r0, #8]
 800d3ec:	f002 b8b8 	b.w	800f560 <_putc_r>
 800d3f0:	20000074 	.word	0x20000074

0800d3f4 <_puts_r>:
 800d3f4:	6a03      	ldr	r3, [r0, #32]
 800d3f6:	b570      	push	{r4, r5, r6, lr}
 800d3f8:	6884      	ldr	r4, [r0, #8]
 800d3fa:	4605      	mov	r5, r0
 800d3fc:	460e      	mov	r6, r1
 800d3fe:	b90b      	cbnz	r3, 800d404 <_puts_r+0x10>
 800d400:	f7ff ffa8 	bl	800d354 <__sinit>
 800d404:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d406:	07db      	lsls	r3, r3, #31
 800d408:	d405      	bmi.n	800d416 <_puts_r+0x22>
 800d40a:	89a3      	ldrh	r3, [r4, #12]
 800d40c:	0598      	lsls	r0, r3, #22
 800d40e:	d402      	bmi.n	800d416 <_puts_r+0x22>
 800d410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d412:	f000 f9f5 	bl	800d800 <__retarget_lock_acquire_recursive>
 800d416:	89a3      	ldrh	r3, [r4, #12]
 800d418:	0719      	lsls	r1, r3, #28
 800d41a:	d513      	bpl.n	800d444 <_puts_r+0x50>
 800d41c:	6923      	ldr	r3, [r4, #16]
 800d41e:	b18b      	cbz	r3, 800d444 <_puts_r+0x50>
 800d420:	3e01      	subs	r6, #1
 800d422:	68a3      	ldr	r3, [r4, #8]
 800d424:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d428:	3b01      	subs	r3, #1
 800d42a:	60a3      	str	r3, [r4, #8]
 800d42c:	b9e9      	cbnz	r1, 800d46a <_puts_r+0x76>
 800d42e:	2b00      	cmp	r3, #0
 800d430:	da2e      	bge.n	800d490 <_puts_r+0x9c>
 800d432:	4622      	mov	r2, r4
 800d434:	210a      	movs	r1, #10
 800d436:	4628      	mov	r0, r5
 800d438:	f000 f87b 	bl	800d532 <__swbuf_r>
 800d43c:	3001      	adds	r0, #1
 800d43e:	d007      	beq.n	800d450 <_puts_r+0x5c>
 800d440:	250a      	movs	r5, #10
 800d442:	e007      	b.n	800d454 <_puts_r+0x60>
 800d444:	4621      	mov	r1, r4
 800d446:	4628      	mov	r0, r5
 800d448:	f000 f8b0 	bl	800d5ac <__swsetup_r>
 800d44c:	2800      	cmp	r0, #0
 800d44e:	d0e7      	beq.n	800d420 <_puts_r+0x2c>
 800d450:	f04f 35ff 	mov.w	r5, #4294967295
 800d454:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d456:	07da      	lsls	r2, r3, #31
 800d458:	d405      	bmi.n	800d466 <_puts_r+0x72>
 800d45a:	89a3      	ldrh	r3, [r4, #12]
 800d45c:	059b      	lsls	r3, r3, #22
 800d45e:	d402      	bmi.n	800d466 <_puts_r+0x72>
 800d460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d462:	f000 f9ce 	bl	800d802 <__retarget_lock_release_recursive>
 800d466:	4628      	mov	r0, r5
 800d468:	bd70      	pop	{r4, r5, r6, pc}
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	da04      	bge.n	800d478 <_puts_r+0x84>
 800d46e:	69a2      	ldr	r2, [r4, #24]
 800d470:	429a      	cmp	r2, r3
 800d472:	dc06      	bgt.n	800d482 <_puts_r+0x8e>
 800d474:	290a      	cmp	r1, #10
 800d476:	d004      	beq.n	800d482 <_puts_r+0x8e>
 800d478:	6823      	ldr	r3, [r4, #0]
 800d47a:	1c5a      	adds	r2, r3, #1
 800d47c:	6022      	str	r2, [r4, #0]
 800d47e:	7019      	strb	r1, [r3, #0]
 800d480:	e7cf      	b.n	800d422 <_puts_r+0x2e>
 800d482:	4622      	mov	r2, r4
 800d484:	4628      	mov	r0, r5
 800d486:	f000 f854 	bl	800d532 <__swbuf_r>
 800d48a:	3001      	adds	r0, #1
 800d48c:	d1c9      	bne.n	800d422 <_puts_r+0x2e>
 800d48e:	e7df      	b.n	800d450 <_puts_r+0x5c>
 800d490:	6823      	ldr	r3, [r4, #0]
 800d492:	250a      	movs	r5, #10
 800d494:	1c5a      	adds	r2, r3, #1
 800d496:	6022      	str	r2, [r4, #0]
 800d498:	701d      	strb	r5, [r3, #0]
 800d49a:	e7db      	b.n	800d454 <_puts_r+0x60>

0800d49c <puts>:
 800d49c:	4b02      	ldr	r3, [pc, #8]	; (800d4a8 <puts+0xc>)
 800d49e:	4601      	mov	r1, r0
 800d4a0:	6818      	ldr	r0, [r3, #0]
 800d4a2:	f7ff bfa7 	b.w	800d3f4 <_puts_r>
 800d4a6:	bf00      	nop
 800d4a8:	20000074 	.word	0x20000074

0800d4ac <__sread>:
 800d4ac:	b510      	push	{r4, lr}
 800d4ae:	460c      	mov	r4, r1
 800d4b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4b4:	f000 f956 	bl	800d764 <_read_r>
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	bfab      	itete	ge
 800d4bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4be:	89a3      	ldrhlt	r3, [r4, #12]
 800d4c0:	181b      	addge	r3, r3, r0
 800d4c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4c6:	bfac      	ite	ge
 800d4c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4ca:	81a3      	strhlt	r3, [r4, #12]
 800d4cc:	bd10      	pop	{r4, pc}

0800d4ce <__swrite>:
 800d4ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d2:	461f      	mov	r7, r3
 800d4d4:	898b      	ldrh	r3, [r1, #12]
 800d4d6:	05db      	lsls	r3, r3, #23
 800d4d8:	4605      	mov	r5, r0
 800d4da:	460c      	mov	r4, r1
 800d4dc:	4616      	mov	r6, r2
 800d4de:	d505      	bpl.n	800d4ec <__swrite+0x1e>
 800d4e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4e4:	2302      	movs	r3, #2
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	f000 f92a 	bl	800d740 <_lseek_r>
 800d4ec:	89a3      	ldrh	r3, [r4, #12]
 800d4ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4f6:	81a3      	strh	r3, [r4, #12]
 800d4f8:	4632      	mov	r2, r6
 800d4fa:	463b      	mov	r3, r7
 800d4fc:	4628      	mov	r0, r5
 800d4fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d502:	f000 b941 	b.w	800d788 <_write_r>

0800d506 <__sseek>:
 800d506:	b510      	push	{r4, lr}
 800d508:	460c      	mov	r4, r1
 800d50a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d50e:	f000 f917 	bl	800d740 <_lseek_r>
 800d512:	1c43      	adds	r3, r0, #1
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	bf15      	itete	ne
 800d518:	6560      	strne	r0, [r4, #84]	; 0x54
 800d51a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d51e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d522:	81a3      	strheq	r3, [r4, #12]
 800d524:	bf18      	it	ne
 800d526:	81a3      	strhne	r3, [r4, #12]
 800d528:	bd10      	pop	{r4, pc}

0800d52a <__sclose>:
 800d52a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d52e:	f000 b8a1 	b.w	800d674 <_close_r>

0800d532 <__swbuf_r>:
 800d532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d534:	460e      	mov	r6, r1
 800d536:	4614      	mov	r4, r2
 800d538:	4605      	mov	r5, r0
 800d53a:	b118      	cbz	r0, 800d544 <__swbuf_r+0x12>
 800d53c:	6a03      	ldr	r3, [r0, #32]
 800d53e:	b90b      	cbnz	r3, 800d544 <__swbuf_r+0x12>
 800d540:	f7ff ff08 	bl	800d354 <__sinit>
 800d544:	69a3      	ldr	r3, [r4, #24]
 800d546:	60a3      	str	r3, [r4, #8]
 800d548:	89a3      	ldrh	r3, [r4, #12]
 800d54a:	071a      	lsls	r2, r3, #28
 800d54c:	d525      	bpl.n	800d59a <__swbuf_r+0x68>
 800d54e:	6923      	ldr	r3, [r4, #16]
 800d550:	b31b      	cbz	r3, 800d59a <__swbuf_r+0x68>
 800d552:	6823      	ldr	r3, [r4, #0]
 800d554:	6922      	ldr	r2, [r4, #16]
 800d556:	1a98      	subs	r0, r3, r2
 800d558:	6963      	ldr	r3, [r4, #20]
 800d55a:	b2f6      	uxtb	r6, r6
 800d55c:	4283      	cmp	r3, r0
 800d55e:	4637      	mov	r7, r6
 800d560:	dc04      	bgt.n	800d56c <__swbuf_r+0x3a>
 800d562:	4621      	mov	r1, r4
 800d564:	4628      	mov	r0, r5
 800d566:	f001 ff71 	bl	800f44c <_fflush_r>
 800d56a:	b9e0      	cbnz	r0, 800d5a6 <__swbuf_r+0x74>
 800d56c:	68a3      	ldr	r3, [r4, #8]
 800d56e:	3b01      	subs	r3, #1
 800d570:	60a3      	str	r3, [r4, #8]
 800d572:	6823      	ldr	r3, [r4, #0]
 800d574:	1c5a      	adds	r2, r3, #1
 800d576:	6022      	str	r2, [r4, #0]
 800d578:	701e      	strb	r6, [r3, #0]
 800d57a:	6962      	ldr	r2, [r4, #20]
 800d57c:	1c43      	adds	r3, r0, #1
 800d57e:	429a      	cmp	r2, r3
 800d580:	d004      	beq.n	800d58c <__swbuf_r+0x5a>
 800d582:	89a3      	ldrh	r3, [r4, #12]
 800d584:	07db      	lsls	r3, r3, #31
 800d586:	d506      	bpl.n	800d596 <__swbuf_r+0x64>
 800d588:	2e0a      	cmp	r6, #10
 800d58a:	d104      	bne.n	800d596 <__swbuf_r+0x64>
 800d58c:	4621      	mov	r1, r4
 800d58e:	4628      	mov	r0, r5
 800d590:	f001 ff5c 	bl	800f44c <_fflush_r>
 800d594:	b938      	cbnz	r0, 800d5a6 <__swbuf_r+0x74>
 800d596:	4638      	mov	r0, r7
 800d598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d59a:	4621      	mov	r1, r4
 800d59c:	4628      	mov	r0, r5
 800d59e:	f000 f805 	bl	800d5ac <__swsetup_r>
 800d5a2:	2800      	cmp	r0, #0
 800d5a4:	d0d5      	beq.n	800d552 <__swbuf_r+0x20>
 800d5a6:	f04f 37ff 	mov.w	r7, #4294967295
 800d5aa:	e7f4      	b.n	800d596 <__swbuf_r+0x64>

0800d5ac <__swsetup_r>:
 800d5ac:	b538      	push	{r3, r4, r5, lr}
 800d5ae:	4b2a      	ldr	r3, [pc, #168]	; (800d658 <__swsetup_r+0xac>)
 800d5b0:	4605      	mov	r5, r0
 800d5b2:	6818      	ldr	r0, [r3, #0]
 800d5b4:	460c      	mov	r4, r1
 800d5b6:	b118      	cbz	r0, 800d5c0 <__swsetup_r+0x14>
 800d5b8:	6a03      	ldr	r3, [r0, #32]
 800d5ba:	b90b      	cbnz	r3, 800d5c0 <__swsetup_r+0x14>
 800d5bc:	f7ff feca 	bl	800d354 <__sinit>
 800d5c0:	89a3      	ldrh	r3, [r4, #12]
 800d5c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5c6:	0718      	lsls	r0, r3, #28
 800d5c8:	d422      	bmi.n	800d610 <__swsetup_r+0x64>
 800d5ca:	06d9      	lsls	r1, r3, #27
 800d5cc:	d407      	bmi.n	800d5de <__swsetup_r+0x32>
 800d5ce:	2309      	movs	r3, #9
 800d5d0:	602b      	str	r3, [r5, #0]
 800d5d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d5d6:	81a3      	strh	r3, [r4, #12]
 800d5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5dc:	e034      	b.n	800d648 <__swsetup_r+0x9c>
 800d5de:	0758      	lsls	r0, r3, #29
 800d5e0:	d512      	bpl.n	800d608 <__swsetup_r+0x5c>
 800d5e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5e4:	b141      	cbz	r1, 800d5f8 <__swsetup_r+0x4c>
 800d5e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5ea:	4299      	cmp	r1, r3
 800d5ec:	d002      	beq.n	800d5f4 <__swsetup_r+0x48>
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	f000 ff90 	bl	800e514 <_free_r>
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	6363      	str	r3, [r4, #52]	; 0x34
 800d5f8:	89a3      	ldrh	r3, [r4, #12]
 800d5fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d5fe:	81a3      	strh	r3, [r4, #12]
 800d600:	2300      	movs	r3, #0
 800d602:	6063      	str	r3, [r4, #4]
 800d604:	6923      	ldr	r3, [r4, #16]
 800d606:	6023      	str	r3, [r4, #0]
 800d608:	89a3      	ldrh	r3, [r4, #12]
 800d60a:	f043 0308 	orr.w	r3, r3, #8
 800d60e:	81a3      	strh	r3, [r4, #12]
 800d610:	6923      	ldr	r3, [r4, #16]
 800d612:	b94b      	cbnz	r3, 800d628 <__swsetup_r+0x7c>
 800d614:	89a3      	ldrh	r3, [r4, #12]
 800d616:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d61a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d61e:	d003      	beq.n	800d628 <__swsetup_r+0x7c>
 800d620:	4621      	mov	r1, r4
 800d622:	4628      	mov	r0, r5
 800d624:	f001 ff60 	bl	800f4e8 <__smakebuf_r>
 800d628:	89a0      	ldrh	r0, [r4, #12]
 800d62a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d62e:	f010 0301 	ands.w	r3, r0, #1
 800d632:	d00a      	beq.n	800d64a <__swsetup_r+0x9e>
 800d634:	2300      	movs	r3, #0
 800d636:	60a3      	str	r3, [r4, #8]
 800d638:	6963      	ldr	r3, [r4, #20]
 800d63a:	425b      	negs	r3, r3
 800d63c:	61a3      	str	r3, [r4, #24]
 800d63e:	6923      	ldr	r3, [r4, #16]
 800d640:	b943      	cbnz	r3, 800d654 <__swsetup_r+0xa8>
 800d642:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d646:	d1c4      	bne.n	800d5d2 <__swsetup_r+0x26>
 800d648:	bd38      	pop	{r3, r4, r5, pc}
 800d64a:	0781      	lsls	r1, r0, #30
 800d64c:	bf58      	it	pl
 800d64e:	6963      	ldrpl	r3, [r4, #20]
 800d650:	60a3      	str	r3, [r4, #8]
 800d652:	e7f4      	b.n	800d63e <__swsetup_r+0x92>
 800d654:	2000      	movs	r0, #0
 800d656:	e7f7      	b.n	800d648 <__swsetup_r+0x9c>
 800d658:	20000074 	.word	0x20000074

0800d65c <memset>:
 800d65c:	4402      	add	r2, r0
 800d65e:	4603      	mov	r3, r0
 800d660:	4293      	cmp	r3, r2
 800d662:	d100      	bne.n	800d666 <memset+0xa>
 800d664:	4770      	bx	lr
 800d666:	f803 1b01 	strb.w	r1, [r3], #1
 800d66a:	e7f9      	b.n	800d660 <memset+0x4>

0800d66c <_localeconv_r>:
 800d66c:	4800      	ldr	r0, [pc, #0]	; (800d670 <_localeconv_r+0x4>)
 800d66e:	4770      	bx	lr
 800d670:	20000168 	.word	0x20000168

0800d674 <_close_r>:
 800d674:	b538      	push	{r3, r4, r5, lr}
 800d676:	4d06      	ldr	r5, [pc, #24]	; (800d690 <_close_r+0x1c>)
 800d678:	2300      	movs	r3, #0
 800d67a:	4604      	mov	r4, r0
 800d67c:	4608      	mov	r0, r1
 800d67e:	602b      	str	r3, [r5, #0]
 800d680:	f7f6 ff8b 	bl	800459a <_close>
 800d684:	1c43      	adds	r3, r0, #1
 800d686:	d102      	bne.n	800d68e <_close_r+0x1a>
 800d688:	682b      	ldr	r3, [r5, #0]
 800d68a:	b103      	cbz	r3, 800d68e <_close_r+0x1a>
 800d68c:	6023      	str	r3, [r4, #0]
 800d68e:	bd38      	pop	{r3, r4, r5, pc}
 800d690:	20004aa0 	.word	0x20004aa0

0800d694 <_reclaim_reent>:
 800d694:	4b29      	ldr	r3, [pc, #164]	; (800d73c <_reclaim_reent+0xa8>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	4283      	cmp	r3, r0
 800d69a:	b570      	push	{r4, r5, r6, lr}
 800d69c:	4604      	mov	r4, r0
 800d69e:	d04b      	beq.n	800d738 <_reclaim_reent+0xa4>
 800d6a0:	69c3      	ldr	r3, [r0, #28]
 800d6a2:	b143      	cbz	r3, 800d6b6 <_reclaim_reent+0x22>
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d144      	bne.n	800d734 <_reclaim_reent+0xa0>
 800d6aa:	69e3      	ldr	r3, [r4, #28]
 800d6ac:	6819      	ldr	r1, [r3, #0]
 800d6ae:	b111      	cbz	r1, 800d6b6 <_reclaim_reent+0x22>
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	f000 ff2f 	bl	800e514 <_free_r>
 800d6b6:	6961      	ldr	r1, [r4, #20]
 800d6b8:	b111      	cbz	r1, 800d6c0 <_reclaim_reent+0x2c>
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	f000 ff2a 	bl	800e514 <_free_r>
 800d6c0:	69e1      	ldr	r1, [r4, #28]
 800d6c2:	b111      	cbz	r1, 800d6ca <_reclaim_reent+0x36>
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	f000 ff25 	bl	800e514 <_free_r>
 800d6ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d6cc:	b111      	cbz	r1, 800d6d4 <_reclaim_reent+0x40>
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	f000 ff20 	bl	800e514 <_free_r>
 800d6d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6d6:	b111      	cbz	r1, 800d6de <_reclaim_reent+0x4a>
 800d6d8:	4620      	mov	r0, r4
 800d6da:	f000 ff1b 	bl	800e514 <_free_r>
 800d6de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d6e0:	b111      	cbz	r1, 800d6e8 <_reclaim_reent+0x54>
 800d6e2:	4620      	mov	r0, r4
 800d6e4:	f000 ff16 	bl	800e514 <_free_r>
 800d6e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d6ea:	b111      	cbz	r1, 800d6f2 <_reclaim_reent+0x5e>
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	f000 ff11 	bl	800e514 <_free_r>
 800d6f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d6f4:	b111      	cbz	r1, 800d6fc <_reclaim_reent+0x68>
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	f000 ff0c 	bl	800e514 <_free_r>
 800d6fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d6fe:	b111      	cbz	r1, 800d706 <_reclaim_reent+0x72>
 800d700:	4620      	mov	r0, r4
 800d702:	f000 ff07 	bl	800e514 <_free_r>
 800d706:	6a23      	ldr	r3, [r4, #32]
 800d708:	b1b3      	cbz	r3, 800d738 <_reclaim_reent+0xa4>
 800d70a:	4620      	mov	r0, r4
 800d70c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d710:	4718      	bx	r3
 800d712:	5949      	ldr	r1, [r1, r5]
 800d714:	b941      	cbnz	r1, 800d728 <_reclaim_reent+0x94>
 800d716:	3504      	adds	r5, #4
 800d718:	69e3      	ldr	r3, [r4, #28]
 800d71a:	2d80      	cmp	r5, #128	; 0x80
 800d71c:	68d9      	ldr	r1, [r3, #12]
 800d71e:	d1f8      	bne.n	800d712 <_reclaim_reent+0x7e>
 800d720:	4620      	mov	r0, r4
 800d722:	f000 fef7 	bl	800e514 <_free_r>
 800d726:	e7c0      	b.n	800d6aa <_reclaim_reent+0x16>
 800d728:	680e      	ldr	r6, [r1, #0]
 800d72a:	4620      	mov	r0, r4
 800d72c:	f000 fef2 	bl	800e514 <_free_r>
 800d730:	4631      	mov	r1, r6
 800d732:	e7ef      	b.n	800d714 <_reclaim_reent+0x80>
 800d734:	2500      	movs	r5, #0
 800d736:	e7ef      	b.n	800d718 <_reclaim_reent+0x84>
 800d738:	bd70      	pop	{r4, r5, r6, pc}
 800d73a:	bf00      	nop
 800d73c:	20000074 	.word	0x20000074

0800d740 <_lseek_r>:
 800d740:	b538      	push	{r3, r4, r5, lr}
 800d742:	4d07      	ldr	r5, [pc, #28]	; (800d760 <_lseek_r+0x20>)
 800d744:	4604      	mov	r4, r0
 800d746:	4608      	mov	r0, r1
 800d748:	4611      	mov	r1, r2
 800d74a:	2200      	movs	r2, #0
 800d74c:	602a      	str	r2, [r5, #0]
 800d74e:	461a      	mov	r2, r3
 800d750:	f7f6 ff4a 	bl	80045e8 <_lseek>
 800d754:	1c43      	adds	r3, r0, #1
 800d756:	d102      	bne.n	800d75e <_lseek_r+0x1e>
 800d758:	682b      	ldr	r3, [r5, #0]
 800d75a:	b103      	cbz	r3, 800d75e <_lseek_r+0x1e>
 800d75c:	6023      	str	r3, [r4, #0]
 800d75e:	bd38      	pop	{r3, r4, r5, pc}
 800d760:	20004aa0 	.word	0x20004aa0

0800d764 <_read_r>:
 800d764:	b538      	push	{r3, r4, r5, lr}
 800d766:	4d07      	ldr	r5, [pc, #28]	; (800d784 <_read_r+0x20>)
 800d768:	4604      	mov	r4, r0
 800d76a:	4608      	mov	r0, r1
 800d76c:	4611      	mov	r1, r2
 800d76e:	2200      	movs	r2, #0
 800d770:	602a      	str	r2, [r5, #0]
 800d772:	461a      	mov	r2, r3
 800d774:	f7f6 fef4 	bl	8004560 <_read>
 800d778:	1c43      	adds	r3, r0, #1
 800d77a:	d102      	bne.n	800d782 <_read_r+0x1e>
 800d77c:	682b      	ldr	r3, [r5, #0]
 800d77e:	b103      	cbz	r3, 800d782 <_read_r+0x1e>
 800d780:	6023      	str	r3, [r4, #0]
 800d782:	bd38      	pop	{r3, r4, r5, pc}
 800d784:	20004aa0 	.word	0x20004aa0

0800d788 <_write_r>:
 800d788:	b538      	push	{r3, r4, r5, lr}
 800d78a:	4d07      	ldr	r5, [pc, #28]	; (800d7a8 <_write_r+0x20>)
 800d78c:	4604      	mov	r4, r0
 800d78e:	4608      	mov	r0, r1
 800d790:	4611      	mov	r1, r2
 800d792:	2200      	movs	r2, #0
 800d794:	602a      	str	r2, [r5, #0]
 800d796:	461a      	mov	r2, r3
 800d798:	f7f6 fa92 	bl	8003cc0 <_write>
 800d79c:	1c43      	adds	r3, r0, #1
 800d79e:	d102      	bne.n	800d7a6 <_write_r+0x1e>
 800d7a0:	682b      	ldr	r3, [r5, #0]
 800d7a2:	b103      	cbz	r3, 800d7a6 <_write_r+0x1e>
 800d7a4:	6023      	str	r3, [r4, #0]
 800d7a6:	bd38      	pop	{r3, r4, r5, pc}
 800d7a8:	20004aa0 	.word	0x20004aa0

0800d7ac <__errno>:
 800d7ac:	4b01      	ldr	r3, [pc, #4]	; (800d7b4 <__errno+0x8>)
 800d7ae:	6818      	ldr	r0, [r3, #0]
 800d7b0:	4770      	bx	lr
 800d7b2:	bf00      	nop
 800d7b4:	20000074 	.word	0x20000074

0800d7b8 <__libc_init_array>:
 800d7b8:	b570      	push	{r4, r5, r6, lr}
 800d7ba:	4d0d      	ldr	r5, [pc, #52]	; (800d7f0 <__libc_init_array+0x38>)
 800d7bc:	4c0d      	ldr	r4, [pc, #52]	; (800d7f4 <__libc_init_array+0x3c>)
 800d7be:	1b64      	subs	r4, r4, r5
 800d7c0:	10a4      	asrs	r4, r4, #2
 800d7c2:	2600      	movs	r6, #0
 800d7c4:	42a6      	cmp	r6, r4
 800d7c6:	d109      	bne.n	800d7dc <__libc_init_array+0x24>
 800d7c8:	4d0b      	ldr	r5, [pc, #44]	; (800d7f8 <__libc_init_array+0x40>)
 800d7ca:	4c0c      	ldr	r4, [pc, #48]	; (800d7fc <__libc_init_array+0x44>)
 800d7cc:	f002 ff20 	bl	8010610 <_init>
 800d7d0:	1b64      	subs	r4, r4, r5
 800d7d2:	10a4      	asrs	r4, r4, #2
 800d7d4:	2600      	movs	r6, #0
 800d7d6:	42a6      	cmp	r6, r4
 800d7d8:	d105      	bne.n	800d7e6 <__libc_init_array+0x2e>
 800d7da:	bd70      	pop	{r4, r5, r6, pc}
 800d7dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7e0:	4798      	blx	r3
 800d7e2:	3601      	adds	r6, #1
 800d7e4:	e7ee      	b.n	800d7c4 <__libc_init_array+0xc>
 800d7e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7ea:	4798      	blx	r3
 800d7ec:	3601      	adds	r6, #1
 800d7ee:	e7f2      	b.n	800d7d6 <__libc_init_array+0x1e>
 800d7f0:	08010ea0 	.word	0x08010ea0
 800d7f4:	08010ea0 	.word	0x08010ea0
 800d7f8:	08010ea0 	.word	0x08010ea0
 800d7fc:	08010ea4 	.word	0x08010ea4

0800d800 <__retarget_lock_acquire_recursive>:
 800d800:	4770      	bx	lr

0800d802 <__retarget_lock_release_recursive>:
 800d802:	4770      	bx	lr

0800d804 <memcpy>:
 800d804:	440a      	add	r2, r1
 800d806:	4291      	cmp	r1, r2
 800d808:	f100 33ff 	add.w	r3, r0, #4294967295
 800d80c:	d100      	bne.n	800d810 <memcpy+0xc>
 800d80e:	4770      	bx	lr
 800d810:	b510      	push	{r4, lr}
 800d812:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d816:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d81a:	4291      	cmp	r1, r2
 800d81c:	d1f9      	bne.n	800d812 <memcpy+0xe>
 800d81e:	bd10      	pop	{r4, pc}

0800d820 <quorem>:
 800d820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d824:	6903      	ldr	r3, [r0, #16]
 800d826:	690c      	ldr	r4, [r1, #16]
 800d828:	42a3      	cmp	r3, r4
 800d82a:	4607      	mov	r7, r0
 800d82c:	db7e      	blt.n	800d92c <quorem+0x10c>
 800d82e:	3c01      	subs	r4, #1
 800d830:	f101 0814 	add.w	r8, r1, #20
 800d834:	f100 0514 	add.w	r5, r0, #20
 800d838:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d83c:	9301      	str	r3, [sp, #4]
 800d83e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d842:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d846:	3301      	adds	r3, #1
 800d848:	429a      	cmp	r2, r3
 800d84a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d84e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d852:	fbb2 f6f3 	udiv	r6, r2, r3
 800d856:	d331      	bcc.n	800d8bc <quorem+0x9c>
 800d858:	f04f 0e00 	mov.w	lr, #0
 800d85c:	4640      	mov	r0, r8
 800d85e:	46ac      	mov	ip, r5
 800d860:	46f2      	mov	sl, lr
 800d862:	f850 2b04 	ldr.w	r2, [r0], #4
 800d866:	b293      	uxth	r3, r2
 800d868:	fb06 e303 	mla	r3, r6, r3, lr
 800d86c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d870:	0c1a      	lsrs	r2, r3, #16
 800d872:	b29b      	uxth	r3, r3
 800d874:	ebaa 0303 	sub.w	r3, sl, r3
 800d878:	f8dc a000 	ldr.w	sl, [ip]
 800d87c:	fa13 f38a 	uxtah	r3, r3, sl
 800d880:	fb06 220e 	mla	r2, r6, lr, r2
 800d884:	9300      	str	r3, [sp, #0]
 800d886:	9b00      	ldr	r3, [sp, #0]
 800d888:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d88c:	b292      	uxth	r2, r2
 800d88e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d892:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d896:	f8bd 3000 	ldrh.w	r3, [sp]
 800d89a:	4581      	cmp	r9, r0
 800d89c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d8a0:	f84c 3b04 	str.w	r3, [ip], #4
 800d8a4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d8a8:	d2db      	bcs.n	800d862 <quorem+0x42>
 800d8aa:	f855 300b 	ldr.w	r3, [r5, fp]
 800d8ae:	b92b      	cbnz	r3, 800d8bc <quorem+0x9c>
 800d8b0:	9b01      	ldr	r3, [sp, #4]
 800d8b2:	3b04      	subs	r3, #4
 800d8b4:	429d      	cmp	r5, r3
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	d32c      	bcc.n	800d914 <quorem+0xf4>
 800d8ba:	613c      	str	r4, [r7, #16]
 800d8bc:	4638      	mov	r0, r7
 800d8be:	f001 f9a5 	bl	800ec0c <__mcmp>
 800d8c2:	2800      	cmp	r0, #0
 800d8c4:	db22      	blt.n	800d90c <quorem+0xec>
 800d8c6:	3601      	adds	r6, #1
 800d8c8:	4629      	mov	r1, r5
 800d8ca:	2000      	movs	r0, #0
 800d8cc:	f858 2b04 	ldr.w	r2, [r8], #4
 800d8d0:	f8d1 c000 	ldr.w	ip, [r1]
 800d8d4:	b293      	uxth	r3, r2
 800d8d6:	1ac3      	subs	r3, r0, r3
 800d8d8:	0c12      	lsrs	r2, r2, #16
 800d8da:	fa13 f38c 	uxtah	r3, r3, ip
 800d8de:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d8e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d8ec:	45c1      	cmp	r9, r8
 800d8ee:	f841 3b04 	str.w	r3, [r1], #4
 800d8f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d8f6:	d2e9      	bcs.n	800d8cc <quorem+0xac>
 800d8f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d8fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d900:	b922      	cbnz	r2, 800d90c <quorem+0xec>
 800d902:	3b04      	subs	r3, #4
 800d904:	429d      	cmp	r5, r3
 800d906:	461a      	mov	r2, r3
 800d908:	d30a      	bcc.n	800d920 <quorem+0x100>
 800d90a:	613c      	str	r4, [r7, #16]
 800d90c:	4630      	mov	r0, r6
 800d90e:	b003      	add	sp, #12
 800d910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d914:	6812      	ldr	r2, [r2, #0]
 800d916:	3b04      	subs	r3, #4
 800d918:	2a00      	cmp	r2, #0
 800d91a:	d1ce      	bne.n	800d8ba <quorem+0x9a>
 800d91c:	3c01      	subs	r4, #1
 800d91e:	e7c9      	b.n	800d8b4 <quorem+0x94>
 800d920:	6812      	ldr	r2, [r2, #0]
 800d922:	3b04      	subs	r3, #4
 800d924:	2a00      	cmp	r2, #0
 800d926:	d1f0      	bne.n	800d90a <quorem+0xea>
 800d928:	3c01      	subs	r4, #1
 800d92a:	e7eb      	b.n	800d904 <quorem+0xe4>
 800d92c:	2000      	movs	r0, #0
 800d92e:	e7ee      	b.n	800d90e <quorem+0xee>

0800d930 <_dtoa_r>:
 800d930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d934:	ed2d 8b04 	vpush	{d8-d9}
 800d938:	69c5      	ldr	r5, [r0, #28]
 800d93a:	b093      	sub	sp, #76	; 0x4c
 800d93c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d940:	ec57 6b10 	vmov	r6, r7, d0
 800d944:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d948:	9107      	str	r1, [sp, #28]
 800d94a:	4604      	mov	r4, r0
 800d94c:	920a      	str	r2, [sp, #40]	; 0x28
 800d94e:	930d      	str	r3, [sp, #52]	; 0x34
 800d950:	b975      	cbnz	r5, 800d970 <_dtoa_r+0x40>
 800d952:	2010      	movs	r0, #16
 800d954:	f000 fe2a 	bl	800e5ac <malloc>
 800d958:	4602      	mov	r2, r0
 800d95a:	61e0      	str	r0, [r4, #28]
 800d95c:	b920      	cbnz	r0, 800d968 <_dtoa_r+0x38>
 800d95e:	4bae      	ldr	r3, [pc, #696]	; (800dc18 <_dtoa_r+0x2e8>)
 800d960:	21ef      	movs	r1, #239	; 0xef
 800d962:	48ae      	ldr	r0, [pc, #696]	; (800dc1c <_dtoa_r+0x2ec>)
 800d964:	f001 fe6a 	bl	800f63c <__assert_func>
 800d968:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d96c:	6005      	str	r5, [r0, #0]
 800d96e:	60c5      	str	r5, [r0, #12]
 800d970:	69e3      	ldr	r3, [r4, #28]
 800d972:	6819      	ldr	r1, [r3, #0]
 800d974:	b151      	cbz	r1, 800d98c <_dtoa_r+0x5c>
 800d976:	685a      	ldr	r2, [r3, #4]
 800d978:	604a      	str	r2, [r1, #4]
 800d97a:	2301      	movs	r3, #1
 800d97c:	4093      	lsls	r3, r2
 800d97e:	608b      	str	r3, [r1, #8]
 800d980:	4620      	mov	r0, r4
 800d982:	f000 ff07 	bl	800e794 <_Bfree>
 800d986:	69e3      	ldr	r3, [r4, #28]
 800d988:	2200      	movs	r2, #0
 800d98a:	601a      	str	r2, [r3, #0]
 800d98c:	1e3b      	subs	r3, r7, #0
 800d98e:	bfbb      	ittet	lt
 800d990:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d994:	9303      	strlt	r3, [sp, #12]
 800d996:	2300      	movge	r3, #0
 800d998:	2201      	movlt	r2, #1
 800d99a:	bfac      	ite	ge
 800d99c:	f8c8 3000 	strge.w	r3, [r8]
 800d9a0:	f8c8 2000 	strlt.w	r2, [r8]
 800d9a4:	4b9e      	ldr	r3, [pc, #632]	; (800dc20 <_dtoa_r+0x2f0>)
 800d9a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d9aa:	ea33 0308 	bics.w	r3, r3, r8
 800d9ae:	d11b      	bne.n	800d9e8 <_dtoa_r+0xb8>
 800d9b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d9b2:	f242 730f 	movw	r3, #9999	; 0x270f
 800d9b6:	6013      	str	r3, [r2, #0]
 800d9b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d9bc:	4333      	orrs	r3, r6
 800d9be:	f000 8593 	beq.w	800e4e8 <_dtoa_r+0xbb8>
 800d9c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9c4:	b963      	cbnz	r3, 800d9e0 <_dtoa_r+0xb0>
 800d9c6:	4b97      	ldr	r3, [pc, #604]	; (800dc24 <_dtoa_r+0x2f4>)
 800d9c8:	e027      	b.n	800da1a <_dtoa_r+0xea>
 800d9ca:	4b97      	ldr	r3, [pc, #604]	; (800dc28 <_dtoa_r+0x2f8>)
 800d9cc:	9300      	str	r3, [sp, #0]
 800d9ce:	3308      	adds	r3, #8
 800d9d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d9d2:	6013      	str	r3, [r2, #0]
 800d9d4:	9800      	ldr	r0, [sp, #0]
 800d9d6:	b013      	add	sp, #76	; 0x4c
 800d9d8:	ecbd 8b04 	vpop	{d8-d9}
 800d9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9e0:	4b90      	ldr	r3, [pc, #576]	; (800dc24 <_dtoa_r+0x2f4>)
 800d9e2:	9300      	str	r3, [sp, #0]
 800d9e4:	3303      	adds	r3, #3
 800d9e6:	e7f3      	b.n	800d9d0 <_dtoa_r+0xa0>
 800d9e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	ec51 0b17 	vmov	r0, r1, d7
 800d9f2:	eeb0 8a47 	vmov.f32	s16, s14
 800d9f6:	eef0 8a67 	vmov.f32	s17, s15
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	f7f3 f864 	bl	8000ac8 <__aeabi_dcmpeq>
 800da00:	4681      	mov	r9, r0
 800da02:	b160      	cbz	r0, 800da1e <_dtoa_r+0xee>
 800da04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da06:	2301      	movs	r3, #1
 800da08:	6013      	str	r3, [r2, #0]
 800da0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	f000 8568 	beq.w	800e4e2 <_dtoa_r+0xbb2>
 800da12:	4b86      	ldr	r3, [pc, #536]	; (800dc2c <_dtoa_r+0x2fc>)
 800da14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800da16:	6013      	str	r3, [r2, #0]
 800da18:	3b01      	subs	r3, #1
 800da1a:	9300      	str	r3, [sp, #0]
 800da1c:	e7da      	b.n	800d9d4 <_dtoa_r+0xa4>
 800da1e:	aa10      	add	r2, sp, #64	; 0x40
 800da20:	a911      	add	r1, sp, #68	; 0x44
 800da22:	4620      	mov	r0, r4
 800da24:	eeb0 0a48 	vmov.f32	s0, s16
 800da28:	eef0 0a68 	vmov.f32	s1, s17
 800da2c:	f001 f994 	bl	800ed58 <__d2b>
 800da30:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800da34:	4682      	mov	sl, r0
 800da36:	2d00      	cmp	r5, #0
 800da38:	d07f      	beq.n	800db3a <_dtoa_r+0x20a>
 800da3a:	ee18 3a90 	vmov	r3, s17
 800da3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da42:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800da46:	ec51 0b18 	vmov	r0, r1, d8
 800da4a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800da4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800da52:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800da56:	4619      	mov	r1, r3
 800da58:	2200      	movs	r2, #0
 800da5a:	4b75      	ldr	r3, [pc, #468]	; (800dc30 <_dtoa_r+0x300>)
 800da5c:	f7f2 fc14 	bl	8000288 <__aeabi_dsub>
 800da60:	a367      	add	r3, pc, #412	; (adr r3, 800dc00 <_dtoa_r+0x2d0>)
 800da62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da66:	f7f2 fdc7 	bl	80005f8 <__aeabi_dmul>
 800da6a:	a367      	add	r3, pc, #412	; (adr r3, 800dc08 <_dtoa_r+0x2d8>)
 800da6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da70:	f7f2 fc0c 	bl	800028c <__adddf3>
 800da74:	4606      	mov	r6, r0
 800da76:	4628      	mov	r0, r5
 800da78:	460f      	mov	r7, r1
 800da7a:	f7f2 fd53 	bl	8000524 <__aeabi_i2d>
 800da7e:	a364      	add	r3, pc, #400	; (adr r3, 800dc10 <_dtoa_r+0x2e0>)
 800da80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da84:	f7f2 fdb8 	bl	80005f8 <__aeabi_dmul>
 800da88:	4602      	mov	r2, r0
 800da8a:	460b      	mov	r3, r1
 800da8c:	4630      	mov	r0, r6
 800da8e:	4639      	mov	r1, r7
 800da90:	f7f2 fbfc 	bl	800028c <__adddf3>
 800da94:	4606      	mov	r6, r0
 800da96:	460f      	mov	r7, r1
 800da98:	f7f3 f85e 	bl	8000b58 <__aeabi_d2iz>
 800da9c:	2200      	movs	r2, #0
 800da9e:	4683      	mov	fp, r0
 800daa0:	2300      	movs	r3, #0
 800daa2:	4630      	mov	r0, r6
 800daa4:	4639      	mov	r1, r7
 800daa6:	f7f3 f819 	bl	8000adc <__aeabi_dcmplt>
 800daaa:	b148      	cbz	r0, 800dac0 <_dtoa_r+0x190>
 800daac:	4658      	mov	r0, fp
 800daae:	f7f2 fd39 	bl	8000524 <__aeabi_i2d>
 800dab2:	4632      	mov	r2, r6
 800dab4:	463b      	mov	r3, r7
 800dab6:	f7f3 f807 	bl	8000ac8 <__aeabi_dcmpeq>
 800daba:	b908      	cbnz	r0, 800dac0 <_dtoa_r+0x190>
 800dabc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dac0:	f1bb 0f16 	cmp.w	fp, #22
 800dac4:	d857      	bhi.n	800db76 <_dtoa_r+0x246>
 800dac6:	4b5b      	ldr	r3, [pc, #364]	; (800dc34 <_dtoa_r+0x304>)
 800dac8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad0:	ec51 0b18 	vmov	r0, r1, d8
 800dad4:	f7f3 f802 	bl	8000adc <__aeabi_dcmplt>
 800dad8:	2800      	cmp	r0, #0
 800dada:	d04e      	beq.n	800db7a <_dtoa_r+0x24a>
 800dadc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dae0:	2300      	movs	r3, #0
 800dae2:	930c      	str	r3, [sp, #48]	; 0x30
 800dae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dae6:	1b5b      	subs	r3, r3, r5
 800dae8:	1e5a      	subs	r2, r3, #1
 800daea:	bf45      	ittet	mi
 800daec:	f1c3 0301 	rsbmi	r3, r3, #1
 800daf0:	9305      	strmi	r3, [sp, #20]
 800daf2:	2300      	movpl	r3, #0
 800daf4:	2300      	movmi	r3, #0
 800daf6:	9206      	str	r2, [sp, #24]
 800daf8:	bf54      	ite	pl
 800dafa:	9305      	strpl	r3, [sp, #20]
 800dafc:	9306      	strmi	r3, [sp, #24]
 800dafe:	f1bb 0f00 	cmp.w	fp, #0
 800db02:	db3c      	blt.n	800db7e <_dtoa_r+0x24e>
 800db04:	9b06      	ldr	r3, [sp, #24]
 800db06:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800db0a:	445b      	add	r3, fp
 800db0c:	9306      	str	r3, [sp, #24]
 800db0e:	2300      	movs	r3, #0
 800db10:	9308      	str	r3, [sp, #32]
 800db12:	9b07      	ldr	r3, [sp, #28]
 800db14:	2b09      	cmp	r3, #9
 800db16:	d868      	bhi.n	800dbea <_dtoa_r+0x2ba>
 800db18:	2b05      	cmp	r3, #5
 800db1a:	bfc4      	itt	gt
 800db1c:	3b04      	subgt	r3, #4
 800db1e:	9307      	strgt	r3, [sp, #28]
 800db20:	9b07      	ldr	r3, [sp, #28]
 800db22:	f1a3 0302 	sub.w	r3, r3, #2
 800db26:	bfcc      	ite	gt
 800db28:	2500      	movgt	r5, #0
 800db2a:	2501      	movle	r5, #1
 800db2c:	2b03      	cmp	r3, #3
 800db2e:	f200 8085 	bhi.w	800dc3c <_dtoa_r+0x30c>
 800db32:	e8df f003 	tbb	[pc, r3]
 800db36:	3b2e      	.short	0x3b2e
 800db38:	5839      	.short	0x5839
 800db3a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800db3e:	441d      	add	r5, r3
 800db40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800db44:	2b20      	cmp	r3, #32
 800db46:	bfc1      	itttt	gt
 800db48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800db4c:	fa08 f803 	lslgt.w	r8, r8, r3
 800db50:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800db54:	fa26 f303 	lsrgt.w	r3, r6, r3
 800db58:	bfd6      	itet	le
 800db5a:	f1c3 0320 	rsble	r3, r3, #32
 800db5e:	ea48 0003 	orrgt.w	r0, r8, r3
 800db62:	fa06 f003 	lslle.w	r0, r6, r3
 800db66:	f7f2 fccd 	bl	8000504 <__aeabi_ui2d>
 800db6a:	2201      	movs	r2, #1
 800db6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800db70:	3d01      	subs	r5, #1
 800db72:	920e      	str	r2, [sp, #56]	; 0x38
 800db74:	e76f      	b.n	800da56 <_dtoa_r+0x126>
 800db76:	2301      	movs	r3, #1
 800db78:	e7b3      	b.n	800dae2 <_dtoa_r+0x1b2>
 800db7a:	900c      	str	r0, [sp, #48]	; 0x30
 800db7c:	e7b2      	b.n	800dae4 <_dtoa_r+0x1b4>
 800db7e:	9b05      	ldr	r3, [sp, #20]
 800db80:	eba3 030b 	sub.w	r3, r3, fp
 800db84:	9305      	str	r3, [sp, #20]
 800db86:	f1cb 0300 	rsb	r3, fp, #0
 800db8a:	9308      	str	r3, [sp, #32]
 800db8c:	2300      	movs	r3, #0
 800db8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800db90:	e7bf      	b.n	800db12 <_dtoa_r+0x1e2>
 800db92:	2300      	movs	r3, #0
 800db94:	9309      	str	r3, [sp, #36]	; 0x24
 800db96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db98:	2b00      	cmp	r3, #0
 800db9a:	dc52      	bgt.n	800dc42 <_dtoa_r+0x312>
 800db9c:	2301      	movs	r3, #1
 800db9e:	9301      	str	r3, [sp, #4]
 800dba0:	9304      	str	r3, [sp, #16]
 800dba2:	461a      	mov	r2, r3
 800dba4:	920a      	str	r2, [sp, #40]	; 0x28
 800dba6:	e00b      	b.n	800dbc0 <_dtoa_r+0x290>
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e7f3      	b.n	800db94 <_dtoa_r+0x264>
 800dbac:	2300      	movs	r3, #0
 800dbae:	9309      	str	r3, [sp, #36]	; 0x24
 800dbb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbb2:	445b      	add	r3, fp
 800dbb4:	9301      	str	r3, [sp, #4]
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	9304      	str	r3, [sp, #16]
 800dbbc:	bfb8      	it	lt
 800dbbe:	2301      	movlt	r3, #1
 800dbc0:	69e0      	ldr	r0, [r4, #28]
 800dbc2:	2100      	movs	r1, #0
 800dbc4:	2204      	movs	r2, #4
 800dbc6:	f102 0614 	add.w	r6, r2, #20
 800dbca:	429e      	cmp	r6, r3
 800dbcc:	d93d      	bls.n	800dc4a <_dtoa_r+0x31a>
 800dbce:	6041      	str	r1, [r0, #4]
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	f000 fd9f 	bl	800e714 <_Balloc>
 800dbd6:	9000      	str	r0, [sp, #0]
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	d139      	bne.n	800dc50 <_dtoa_r+0x320>
 800dbdc:	4b16      	ldr	r3, [pc, #88]	; (800dc38 <_dtoa_r+0x308>)
 800dbde:	4602      	mov	r2, r0
 800dbe0:	f240 11af 	movw	r1, #431	; 0x1af
 800dbe4:	e6bd      	b.n	800d962 <_dtoa_r+0x32>
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	e7e1      	b.n	800dbae <_dtoa_r+0x27e>
 800dbea:	2501      	movs	r5, #1
 800dbec:	2300      	movs	r3, #0
 800dbee:	9307      	str	r3, [sp, #28]
 800dbf0:	9509      	str	r5, [sp, #36]	; 0x24
 800dbf2:	f04f 33ff 	mov.w	r3, #4294967295
 800dbf6:	9301      	str	r3, [sp, #4]
 800dbf8:	9304      	str	r3, [sp, #16]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	2312      	movs	r3, #18
 800dbfe:	e7d1      	b.n	800dba4 <_dtoa_r+0x274>
 800dc00:	636f4361 	.word	0x636f4361
 800dc04:	3fd287a7 	.word	0x3fd287a7
 800dc08:	8b60c8b3 	.word	0x8b60c8b3
 800dc0c:	3fc68a28 	.word	0x3fc68a28
 800dc10:	509f79fb 	.word	0x509f79fb
 800dc14:	3fd34413 	.word	0x3fd34413
 800dc18:	08010c36 	.word	0x08010c36
 800dc1c:	08010c4d 	.word	0x08010c4d
 800dc20:	7ff00000 	.word	0x7ff00000
 800dc24:	08010c32 	.word	0x08010c32
 800dc28:	08010c29 	.word	0x08010c29
 800dc2c:	08010c06 	.word	0x08010c06
 800dc30:	3ff80000 	.word	0x3ff80000
 800dc34:	08010d38 	.word	0x08010d38
 800dc38:	08010ca5 	.word	0x08010ca5
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc40:	e7d7      	b.n	800dbf2 <_dtoa_r+0x2c2>
 800dc42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc44:	9301      	str	r3, [sp, #4]
 800dc46:	9304      	str	r3, [sp, #16]
 800dc48:	e7ba      	b.n	800dbc0 <_dtoa_r+0x290>
 800dc4a:	3101      	adds	r1, #1
 800dc4c:	0052      	lsls	r2, r2, #1
 800dc4e:	e7ba      	b.n	800dbc6 <_dtoa_r+0x296>
 800dc50:	69e3      	ldr	r3, [r4, #28]
 800dc52:	9a00      	ldr	r2, [sp, #0]
 800dc54:	601a      	str	r2, [r3, #0]
 800dc56:	9b04      	ldr	r3, [sp, #16]
 800dc58:	2b0e      	cmp	r3, #14
 800dc5a:	f200 80a8 	bhi.w	800ddae <_dtoa_r+0x47e>
 800dc5e:	2d00      	cmp	r5, #0
 800dc60:	f000 80a5 	beq.w	800ddae <_dtoa_r+0x47e>
 800dc64:	f1bb 0f00 	cmp.w	fp, #0
 800dc68:	dd38      	ble.n	800dcdc <_dtoa_r+0x3ac>
 800dc6a:	4bc0      	ldr	r3, [pc, #768]	; (800df6c <_dtoa_r+0x63c>)
 800dc6c:	f00b 020f 	and.w	r2, fp, #15
 800dc70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc74:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dc78:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dc7c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800dc80:	d019      	beq.n	800dcb6 <_dtoa_r+0x386>
 800dc82:	4bbb      	ldr	r3, [pc, #748]	; (800df70 <_dtoa_r+0x640>)
 800dc84:	ec51 0b18 	vmov	r0, r1, d8
 800dc88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dc8c:	f7f2 fdde 	bl	800084c <__aeabi_ddiv>
 800dc90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc94:	f008 080f 	and.w	r8, r8, #15
 800dc98:	2503      	movs	r5, #3
 800dc9a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800df70 <_dtoa_r+0x640>
 800dc9e:	f1b8 0f00 	cmp.w	r8, #0
 800dca2:	d10a      	bne.n	800dcba <_dtoa_r+0x38a>
 800dca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dca8:	4632      	mov	r2, r6
 800dcaa:	463b      	mov	r3, r7
 800dcac:	f7f2 fdce 	bl	800084c <__aeabi_ddiv>
 800dcb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcb4:	e02b      	b.n	800dd0e <_dtoa_r+0x3de>
 800dcb6:	2502      	movs	r5, #2
 800dcb8:	e7ef      	b.n	800dc9a <_dtoa_r+0x36a>
 800dcba:	f018 0f01 	tst.w	r8, #1
 800dcbe:	d008      	beq.n	800dcd2 <_dtoa_r+0x3a2>
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	4639      	mov	r1, r7
 800dcc4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dcc8:	f7f2 fc96 	bl	80005f8 <__aeabi_dmul>
 800dccc:	3501      	adds	r5, #1
 800dcce:	4606      	mov	r6, r0
 800dcd0:	460f      	mov	r7, r1
 800dcd2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dcd6:	f109 0908 	add.w	r9, r9, #8
 800dcda:	e7e0      	b.n	800dc9e <_dtoa_r+0x36e>
 800dcdc:	f000 809f 	beq.w	800de1e <_dtoa_r+0x4ee>
 800dce0:	f1cb 0600 	rsb	r6, fp, #0
 800dce4:	4ba1      	ldr	r3, [pc, #644]	; (800df6c <_dtoa_r+0x63c>)
 800dce6:	4fa2      	ldr	r7, [pc, #648]	; (800df70 <_dtoa_r+0x640>)
 800dce8:	f006 020f 	and.w	r2, r6, #15
 800dcec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf4:	ec51 0b18 	vmov	r0, r1, d8
 800dcf8:	f7f2 fc7e 	bl	80005f8 <__aeabi_dmul>
 800dcfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd00:	1136      	asrs	r6, r6, #4
 800dd02:	2300      	movs	r3, #0
 800dd04:	2502      	movs	r5, #2
 800dd06:	2e00      	cmp	r6, #0
 800dd08:	d17e      	bne.n	800de08 <_dtoa_r+0x4d8>
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d1d0      	bne.n	800dcb0 <_dtoa_r+0x380>
 800dd0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd10:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	f000 8084 	beq.w	800de22 <_dtoa_r+0x4f2>
 800dd1a:	4b96      	ldr	r3, [pc, #600]	; (800df74 <_dtoa_r+0x644>)
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	4640      	mov	r0, r8
 800dd20:	4649      	mov	r1, r9
 800dd22:	f7f2 fedb 	bl	8000adc <__aeabi_dcmplt>
 800dd26:	2800      	cmp	r0, #0
 800dd28:	d07b      	beq.n	800de22 <_dtoa_r+0x4f2>
 800dd2a:	9b04      	ldr	r3, [sp, #16]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d078      	beq.n	800de22 <_dtoa_r+0x4f2>
 800dd30:	9b01      	ldr	r3, [sp, #4]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	dd39      	ble.n	800ddaa <_dtoa_r+0x47a>
 800dd36:	4b90      	ldr	r3, [pc, #576]	; (800df78 <_dtoa_r+0x648>)
 800dd38:	2200      	movs	r2, #0
 800dd3a:	4640      	mov	r0, r8
 800dd3c:	4649      	mov	r1, r9
 800dd3e:	f7f2 fc5b 	bl	80005f8 <__aeabi_dmul>
 800dd42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd46:	9e01      	ldr	r6, [sp, #4]
 800dd48:	f10b 37ff 	add.w	r7, fp, #4294967295
 800dd4c:	3501      	adds	r5, #1
 800dd4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dd52:	4628      	mov	r0, r5
 800dd54:	f7f2 fbe6 	bl	8000524 <__aeabi_i2d>
 800dd58:	4642      	mov	r2, r8
 800dd5a:	464b      	mov	r3, r9
 800dd5c:	f7f2 fc4c 	bl	80005f8 <__aeabi_dmul>
 800dd60:	4b86      	ldr	r3, [pc, #536]	; (800df7c <_dtoa_r+0x64c>)
 800dd62:	2200      	movs	r2, #0
 800dd64:	f7f2 fa92 	bl	800028c <__adddf3>
 800dd68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dd6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd70:	9303      	str	r3, [sp, #12]
 800dd72:	2e00      	cmp	r6, #0
 800dd74:	d158      	bne.n	800de28 <_dtoa_r+0x4f8>
 800dd76:	4b82      	ldr	r3, [pc, #520]	; (800df80 <_dtoa_r+0x650>)
 800dd78:	2200      	movs	r2, #0
 800dd7a:	4640      	mov	r0, r8
 800dd7c:	4649      	mov	r1, r9
 800dd7e:	f7f2 fa83 	bl	8000288 <__aeabi_dsub>
 800dd82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd86:	4680      	mov	r8, r0
 800dd88:	4689      	mov	r9, r1
 800dd8a:	f7f2 fec5 	bl	8000b18 <__aeabi_dcmpgt>
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	f040 8296 	bne.w	800e2c0 <_dtoa_r+0x990>
 800dd94:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dd98:	4640      	mov	r0, r8
 800dd9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd9e:	4649      	mov	r1, r9
 800dda0:	f7f2 fe9c 	bl	8000adc <__aeabi_dcmplt>
 800dda4:	2800      	cmp	r0, #0
 800dda6:	f040 8289 	bne.w	800e2bc <_dtoa_r+0x98c>
 800ddaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ddae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	f2c0 814e 	blt.w	800e052 <_dtoa_r+0x722>
 800ddb6:	f1bb 0f0e 	cmp.w	fp, #14
 800ddba:	f300 814a 	bgt.w	800e052 <_dtoa_r+0x722>
 800ddbe:	4b6b      	ldr	r3, [pc, #428]	; (800df6c <_dtoa_r+0x63c>)
 800ddc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ddc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ddc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	f280 80dc 	bge.w	800df88 <_dtoa_r+0x658>
 800ddd0:	9b04      	ldr	r3, [sp, #16]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	f300 80d8 	bgt.w	800df88 <_dtoa_r+0x658>
 800ddd8:	f040 826f 	bne.w	800e2ba <_dtoa_r+0x98a>
 800dddc:	4b68      	ldr	r3, [pc, #416]	; (800df80 <_dtoa_r+0x650>)
 800ddde:	2200      	movs	r2, #0
 800dde0:	4640      	mov	r0, r8
 800dde2:	4649      	mov	r1, r9
 800dde4:	f7f2 fc08 	bl	80005f8 <__aeabi_dmul>
 800dde8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ddec:	f7f2 fe8a 	bl	8000b04 <__aeabi_dcmpge>
 800ddf0:	9e04      	ldr	r6, [sp, #16]
 800ddf2:	4637      	mov	r7, r6
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	f040 8245 	bne.w	800e284 <_dtoa_r+0x954>
 800ddfa:	9d00      	ldr	r5, [sp, #0]
 800ddfc:	2331      	movs	r3, #49	; 0x31
 800ddfe:	f805 3b01 	strb.w	r3, [r5], #1
 800de02:	f10b 0b01 	add.w	fp, fp, #1
 800de06:	e241      	b.n	800e28c <_dtoa_r+0x95c>
 800de08:	07f2      	lsls	r2, r6, #31
 800de0a:	d505      	bpl.n	800de18 <_dtoa_r+0x4e8>
 800de0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de10:	f7f2 fbf2 	bl	80005f8 <__aeabi_dmul>
 800de14:	3501      	adds	r5, #1
 800de16:	2301      	movs	r3, #1
 800de18:	1076      	asrs	r6, r6, #1
 800de1a:	3708      	adds	r7, #8
 800de1c:	e773      	b.n	800dd06 <_dtoa_r+0x3d6>
 800de1e:	2502      	movs	r5, #2
 800de20:	e775      	b.n	800dd0e <_dtoa_r+0x3de>
 800de22:	9e04      	ldr	r6, [sp, #16]
 800de24:	465f      	mov	r7, fp
 800de26:	e792      	b.n	800dd4e <_dtoa_r+0x41e>
 800de28:	9900      	ldr	r1, [sp, #0]
 800de2a:	4b50      	ldr	r3, [pc, #320]	; (800df6c <_dtoa_r+0x63c>)
 800de2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de30:	4431      	add	r1, r6
 800de32:	9102      	str	r1, [sp, #8]
 800de34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de36:	eeb0 9a47 	vmov.f32	s18, s14
 800de3a:	eef0 9a67 	vmov.f32	s19, s15
 800de3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800de42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800de46:	2900      	cmp	r1, #0
 800de48:	d044      	beq.n	800ded4 <_dtoa_r+0x5a4>
 800de4a:	494e      	ldr	r1, [pc, #312]	; (800df84 <_dtoa_r+0x654>)
 800de4c:	2000      	movs	r0, #0
 800de4e:	f7f2 fcfd 	bl	800084c <__aeabi_ddiv>
 800de52:	ec53 2b19 	vmov	r2, r3, d9
 800de56:	f7f2 fa17 	bl	8000288 <__aeabi_dsub>
 800de5a:	9d00      	ldr	r5, [sp, #0]
 800de5c:	ec41 0b19 	vmov	d9, r0, r1
 800de60:	4649      	mov	r1, r9
 800de62:	4640      	mov	r0, r8
 800de64:	f7f2 fe78 	bl	8000b58 <__aeabi_d2iz>
 800de68:	4606      	mov	r6, r0
 800de6a:	f7f2 fb5b 	bl	8000524 <__aeabi_i2d>
 800de6e:	4602      	mov	r2, r0
 800de70:	460b      	mov	r3, r1
 800de72:	4640      	mov	r0, r8
 800de74:	4649      	mov	r1, r9
 800de76:	f7f2 fa07 	bl	8000288 <__aeabi_dsub>
 800de7a:	3630      	adds	r6, #48	; 0x30
 800de7c:	f805 6b01 	strb.w	r6, [r5], #1
 800de80:	ec53 2b19 	vmov	r2, r3, d9
 800de84:	4680      	mov	r8, r0
 800de86:	4689      	mov	r9, r1
 800de88:	f7f2 fe28 	bl	8000adc <__aeabi_dcmplt>
 800de8c:	2800      	cmp	r0, #0
 800de8e:	d164      	bne.n	800df5a <_dtoa_r+0x62a>
 800de90:	4642      	mov	r2, r8
 800de92:	464b      	mov	r3, r9
 800de94:	4937      	ldr	r1, [pc, #220]	; (800df74 <_dtoa_r+0x644>)
 800de96:	2000      	movs	r0, #0
 800de98:	f7f2 f9f6 	bl	8000288 <__aeabi_dsub>
 800de9c:	ec53 2b19 	vmov	r2, r3, d9
 800dea0:	f7f2 fe1c 	bl	8000adc <__aeabi_dcmplt>
 800dea4:	2800      	cmp	r0, #0
 800dea6:	f040 80b6 	bne.w	800e016 <_dtoa_r+0x6e6>
 800deaa:	9b02      	ldr	r3, [sp, #8]
 800deac:	429d      	cmp	r5, r3
 800deae:	f43f af7c 	beq.w	800ddaa <_dtoa_r+0x47a>
 800deb2:	4b31      	ldr	r3, [pc, #196]	; (800df78 <_dtoa_r+0x648>)
 800deb4:	ec51 0b19 	vmov	r0, r1, d9
 800deb8:	2200      	movs	r2, #0
 800deba:	f7f2 fb9d 	bl	80005f8 <__aeabi_dmul>
 800debe:	4b2e      	ldr	r3, [pc, #184]	; (800df78 <_dtoa_r+0x648>)
 800dec0:	ec41 0b19 	vmov	d9, r0, r1
 800dec4:	2200      	movs	r2, #0
 800dec6:	4640      	mov	r0, r8
 800dec8:	4649      	mov	r1, r9
 800deca:	f7f2 fb95 	bl	80005f8 <__aeabi_dmul>
 800dece:	4680      	mov	r8, r0
 800ded0:	4689      	mov	r9, r1
 800ded2:	e7c5      	b.n	800de60 <_dtoa_r+0x530>
 800ded4:	ec51 0b17 	vmov	r0, r1, d7
 800ded8:	f7f2 fb8e 	bl	80005f8 <__aeabi_dmul>
 800dedc:	9b02      	ldr	r3, [sp, #8]
 800dede:	9d00      	ldr	r5, [sp, #0]
 800dee0:	930f      	str	r3, [sp, #60]	; 0x3c
 800dee2:	ec41 0b19 	vmov	d9, r0, r1
 800dee6:	4649      	mov	r1, r9
 800dee8:	4640      	mov	r0, r8
 800deea:	f7f2 fe35 	bl	8000b58 <__aeabi_d2iz>
 800deee:	4606      	mov	r6, r0
 800def0:	f7f2 fb18 	bl	8000524 <__aeabi_i2d>
 800def4:	3630      	adds	r6, #48	; 0x30
 800def6:	4602      	mov	r2, r0
 800def8:	460b      	mov	r3, r1
 800defa:	4640      	mov	r0, r8
 800defc:	4649      	mov	r1, r9
 800defe:	f7f2 f9c3 	bl	8000288 <__aeabi_dsub>
 800df02:	f805 6b01 	strb.w	r6, [r5], #1
 800df06:	9b02      	ldr	r3, [sp, #8]
 800df08:	429d      	cmp	r5, r3
 800df0a:	4680      	mov	r8, r0
 800df0c:	4689      	mov	r9, r1
 800df0e:	f04f 0200 	mov.w	r2, #0
 800df12:	d124      	bne.n	800df5e <_dtoa_r+0x62e>
 800df14:	4b1b      	ldr	r3, [pc, #108]	; (800df84 <_dtoa_r+0x654>)
 800df16:	ec51 0b19 	vmov	r0, r1, d9
 800df1a:	f7f2 f9b7 	bl	800028c <__adddf3>
 800df1e:	4602      	mov	r2, r0
 800df20:	460b      	mov	r3, r1
 800df22:	4640      	mov	r0, r8
 800df24:	4649      	mov	r1, r9
 800df26:	f7f2 fdf7 	bl	8000b18 <__aeabi_dcmpgt>
 800df2a:	2800      	cmp	r0, #0
 800df2c:	d173      	bne.n	800e016 <_dtoa_r+0x6e6>
 800df2e:	ec53 2b19 	vmov	r2, r3, d9
 800df32:	4914      	ldr	r1, [pc, #80]	; (800df84 <_dtoa_r+0x654>)
 800df34:	2000      	movs	r0, #0
 800df36:	f7f2 f9a7 	bl	8000288 <__aeabi_dsub>
 800df3a:	4602      	mov	r2, r0
 800df3c:	460b      	mov	r3, r1
 800df3e:	4640      	mov	r0, r8
 800df40:	4649      	mov	r1, r9
 800df42:	f7f2 fdcb 	bl	8000adc <__aeabi_dcmplt>
 800df46:	2800      	cmp	r0, #0
 800df48:	f43f af2f 	beq.w	800ddaa <_dtoa_r+0x47a>
 800df4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800df4e:	1e6b      	subs	r3, r5, #1
 800df50:	930f      	str	r3, [sp, #60]	; 0x3c
 800df52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800df56:	2b30      	cmp	r3, #48	; 0x30
 800df58:	d0f8      	beq.n	800df4c <_dtoa_r+0x61c>
 800df5a:	46bb      	mov	fp, r7
 800df5c:	e04a      	b.n	800dff4 <_dtoa_r+0x6c4>
 800df5e:	4b06      	ldr	r3, [pc, #24]	; (800df78 <_dtoa_r+0x648>)
 800df60:	f7f2 fb4a 	bl	80005f8 <__aeabi_dmul>
 800df64:	4680      	mov	r8, r0
 800df66:	4689      	mov	r9, r1
 800df68:	e7bd      	b.n	800dee6 <_dtoa_r+0x5b6>
 800df6a:	bf00      	nop
 800df6c:	08010d38 	.word	0x08010d38
 800df70:	08010d10 	.word	0x08010d10
 800df74:	3ff00000 	.word	0x3ff00000
 800df78:	40240000 	.word	0x40240000
 800df7c:	401c0000 	.word	0x401c0000
 800df80:	40140000 	.word	0x40140000
 800df84:	3fe00000 	.word	0x3fe00000
 800df88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800df8c:	9d00      	ldr	r5, [sp, #0]
 800df8e:	4642      	mov	r2, r8
 800df90:	464b      	mov	r3, r9
 800df92:	4630      	mov	r0, r6
 800df94:	4639      	mov	r1, r7
 800df96:	f7f2 fc59 	bl	800084c <__aeabi_ddiv>
 800df9a:	f7f2 fddd 	bl	8000b58 <__aeabi_d2iz>
 800df9e:	9001      	str	r0, [sp, #4]
 800dfa0:	f7f2 fac0 	bl	8000524 <__aeabi_i2d>
 800dfa4:	4642      	mov	r2, r8
 800dfa6:	464b      	mov	r3, r9
 800dfa8:	f7f2 fb26 	bl	80005f8 <__aeabi_dmul>
 800dfac:	4602      	mov	r2, r0
 800dfae:	460b      	mov	r3, r1
 800dfb0:	4630      	mov	r0, r6
 800dfb2:	4639      	mov	r1, r7
 800dfb4:	f7f2 f968 	bl	8000288 <__aeabi_dsub>
 800dfb8:	9e01      	ldr	r6, [sp, #4]
 800dfba:	9f04      	ldr	r7, [sp, #16]
 800dfbc:	3630      	adds	r6, #48	; 0x30
 800dfbe:	f805 6b01 	strb.w	r6, [r5], #1
 800dfc2:	9e00      	ldr	r6, [sp, #0]
 800dfc4:	1bae      	subs	r6, r5, r6
 800dfc6:	42b7      	cmp	r7, r6
 800dfc8:	4602      	mov	r2, r0
 800dfca:	460b      	mov	r3, r1
 800dfcc:	d134      	bne.n	800e038 <_dtoa_r+0x708>
 800dfce:	f7f2 f95d 	bl	800028c <__adddf3>
 800dfd2:	4642      	mov	r2, r8
 800dfd4:	464b      	mov	r3, r9
 800dfd6:	4606      	mov	r6, r0
 800dfd8:	460f      	mov	r7, r1
 800dfda:	f7f2 fd9d 	bl	8000b18 <__aeabi_dcmpgt>
 800dfde:	b9c8      	cbnz	r0, 800e014 <_dtoa_r+0x6e4>
 800dfe0:	4642      	mov	r2, r8
 800dfe2:	464b      	mov	r3, r9
 800dfe4:	4630      	mov	r0, r6
 800dfe6:	4639      	mov	r1, r7
 800dfe8:	f7f2 fd6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfec:	b110      	cbz	r0, 800dff4 <_dtoa_r+0x6c4>
 800dfee:	9b01      	ldr	r3, [sp, #4]
 800dff0:	07db      	lsls	r3, r3, #31
 800dff2:	d40f      	bmi.n	800e014 <_dtoa_r+0x6e4>
 800dff4:	4651      	mov	r1, sl
 800dff6:	4620      	mov	r0, r4
 800dff8:	f000 fbcc 	bl	800e794 <_Bfree>
 800dffc:	2300      	movs	r3, #0
 800dffe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e000:	702b      	strb	r3, [r5, #0]
 800e002:	f10b 0301 	add.w	r3, fp, #1
 800e006:	6013      	str	r3, [r2, #0]
 800e008:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	f43f ace2 	beq.w	800d9d4 <_dtoa_r+0xa4>
 800e010:	601d      	str	r5, [r3, #0]
 800e012:	e4df      	b.n	800d9d4 <_dtoa_r+0xa4>
 800e014:	465f      	mov	r7, fp
 800e016:	462b      	mov	r3, r5
 800e018:	461d      	mov	r5, r3
 800e01a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e01e:	2a39      	cmp	r2, #57	; 0x39
 800e020:	d106      	bne.n	800e030 <_dtoa_r+0x700>
 800e022:	9a00      	ldr	r2, [sp, #0]
 800e024:	429a      	cmp	r2, r3
 800e026:	d1f7      	bne.n	800e018 <_dtoa_r+0x6e8>
 800e028:	9900      	ldr	r1, [sp, #0]
 800e02a:	2230      	movs	r2, #48	; 0x30
 800e02c:	3701      	adds	r7, #1
 800e02e:	700a      	strb	r2, [r1, #0]
 800e030:	781a      	ldrb	r2, [r3, #0]
 800e032:	3201      	adds	r2, #1
 800e034:	701a      	strb	r2, [r3, #0]
 800e036:	e790      	b.n	800df5a <_dtoa_r+0x62a>
 800e038:	4ba3      	ldr	r3, [pc, #652]	; (800e2c8 <_dtoa_r+0x998>)
 800e03a:	2200      	movs	r2, #0
 800e03c:	f7f2 fadc 	bl	80005f8 <__aeabi_dmul>
 800e040:	2200      	movs	r2, #0
 800e042:	2300      	movs	r3, #0
 800e044:	4606      	mov	r6, r0
 800e046:	460f      	mov	r7, r1
 800e048:	f7f2 fd3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e04c:	2800      	cmp	r0, #0
 800e04e:	d09e      	beq.n	800df8e <_dtoa_r+0x65e>
 800e050:	e7d0      	b.n	800dff4 <_dtoa_r+0x6c4>
 800e052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e054:	2a00      	cmp	r2, #0
 800e056:	f000 80ca 	beq.w	800e1ee <_dtoa_r+0x8be>
 800e05a:	9a07      	ldr	r2, [sp, #28]
 800e05c:	2a01      	cmp	r2, #1
 800e05e:	f300 80ad 	bgt.w	800e1bc <_dtoa_r+0x88c>
 800e062:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e064:	2a00      	cmp	r2, #0
 800e066:	f000 80a5 	beq.w	800e1b4 <_dtoa_r+0x884>
 800e06a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e06e:	9e08      	ldr	r6, [sp, #32]
 800e070:	9d05      	ldr	r5, [sp, #20]
 800e072:	9a05      	ldr	r2, [sp, #20]
 800e074:	441a      	add	r2, r3
 800e076:	9205      	str	r2, [sp, #20]
 800e078:	9a06      	ldr	r2, [sp, #24]
 800e07a:	2101      	movs	r1, #1
 800e07c:	441a      	add	r2, r3
 800e07e:	4620      	mov	r0, r4
 800e080:	9206      	str	r2, [sp, #24]
 800e082:	f000 fc3d 	bl	800e900 <__i2b>
 800e086:	4607      	mov	r7, r0
 800e088:	b165      	cbz	r5, 800e0a4 <_dtoa_r+0x774>
 800e08a:	9b06      	ldr	r3, [sp, #24]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	dd09      	ble.n	800e0a4 <_dtoa_r+0x774>
 800e090:	42ab      	cmp	r3, r5
 800e092:	9a05      	ldr	r2, [sp, #20]
 800e094:	bfa8      	it	ge
 800e096:	462b      	movge	r3, r5
 800e098:	1ad2      	subs	r2, r2, r3
 800e09a:	9205      	str	r2, [sp, #20]
 800e09c:	9a06      	ldr	r2, [sp, #24]
 800e09e:	1aed      	subs	r5, r5, r3
 800e0a0:	1ad3      	subs	r3, r2, r3
 800e0a2:	9306      	str	r3, [sp, #24]
 800e0a4:	9b08      	ldr	r3, [sp, #32]
 800e0a6:	b1f3      	cbz	r3, 800e0e6 <_dtoa_r+0x7b6>
 800e0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	f000 80a3 	beq.w	800e1f6 <_dtoa_r+0x8c6>
 800e0b0:	2e00      	cmp	r6, #0
 800e0b2:	dd10      	ble.n	800e0d6 <_dtoa_r+0x7a6>
 800e0b4:	4639      	mov	r1, r7
 800e0b6:	4632      	mov	r2, r6
 800e0b8:	4620      	mov	r0, r4
 800e0ba:	f000 fce1 	bl	800ea80 <__pow5mult>
 800e0be:	4652      	mov	r2, sl
 800e0c0:	4601      	mov	r1, r0
 800e0c2:	4607      	mov	r7, r0
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	f000 fc31 	bl	800e92c <__multiply>
 800e0ca:	4651      	mov	r1, sl
 800e0cc:	4680      	mov	r8, r0
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	f000 fb60 	bl	800e794 <_Bfree>
 800e0d4:	46c2      	mov	sl, r8
 800e0d6:	9b08      	ldr	r3, [sp, #32]
 800e0d8:	1b9a      	subs	r2, r3, r6
 800e0da:	d004      	beq.n	800e0e6 <_dtoa_r+0x7b6>
 800e0dc:	4651      	mov	r1, sl
 800e0de:	4620      	mov	r0, r4
 800e0e0:	f000 fcce 	bl	800ea80 <__pow5mult>
 800e0e4:	4682      	mov	sl, r0
 800e0e6:	2101      	movs	r1, #1
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	f000 fc09 	bl	800e900 <__i2b>
 800e0ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	4606      	mov	r6, r0
 800e0f4:	f340 8081 	ble.w	800e1fa <_dtoa_r+0x8ca>
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	4601      	mov	r1, r0
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	f000 fcbf 	bl	800ea80 <__pow5mult>
 800e102:	9b07      	ldr	r3, [sp, #28]
 800e104:	2b01      	cmp	r3, #1
 800e106:	4606      	mov	r6, r0
 800e108:	dd7a      	ble.n	800e200 <_dtoa_r+0x8d0>
 800e10a:	f04f 0800 	mov.w	r8, #0
 800e10e:	6933      	ldr	r3, [r6, #16]
 800e110:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e114:	6918      	ldr	r0, [r3, #16]
 800e116:	f000 fba5 	bl	800e864 <__hi0bits>
 800e11a:	f1c0 0020 	rsb	r0, r0, #32
 800e11e:	9b06      	ldr	r3, [sp, #24]
 800e120:	4418      	add	r0, r3
 800e122:	f010 001f 	ands.w	r0, r0, #31
 800e126:	f000 8094 	beq.w	800e252 <_dtoa_r+0x922>
 800e12a:	f1c0 0320 	rsb	r3, r0, #32
 800e12e:	2b04      	cmp	r3, #4
 800e130:	f340 8085 	ble.w	800e23e <_dtoa_r+0x90e>
 800e134:	9b05      	ldr	r3, [sp, #20]
 800e136:	f1c0 001c 	rsb	r0, r0, #28
 800e13a:	4403      	add	r3, r0
 800e13c:	9305      	str	r3, [sp, #20]
 800e13e:	9b06      	ldr	r3, [sp, #24]
 800e140:	4403      	add	r3, r0
 800e142:	4405      	add	r5, r0
 800e144:	9306      	str	r3, [sp, #24]
 800e146:	9b05      	ldr	r3, [sp, #20]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	dd05      	ble.n	800e158 <_dtoa_r+0x828>
 800e14c:	4651      	mov	r1, sl
 800e14e:	461a      	mov	r2, r3
 800e150:	4620      	mov	r0, r4
 800e152:	f000 fcef 	bl	800eb34 <__lshift>
 800e156:	4682      	mov	sl, r0
 800e158:	9b06      	ldr	r3, [sp, #24]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	dd05      	ble.n	800e16a <_dtoa_r+0x83a>
 800e15e:	4631      	mov	r1, r6
 800e160:	461a      	mov	r2, r3
 800e162:	4620      	mov	r0, r4
 800e164:	f000 fce6 	bl	800eb34 <__lshift>
 800e168:	4606      	mov	r6, r0
 800e16a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d072      	beq.n	800e256 <_dtoa_r+0x926>
 800e170:	4631      	mov	r1, r6
 800e172:	4650      	mov	r0, sl
 800e174:	f000 fd4a 	bl	800ec0c <__mcmp>
 800e178:	2800      	cmp	r0, #0
 800e17a:	da6c      	bge.n	800e256 <_dtoa_r+0x926>
 800e17c:	2300      	movs	r3, #0
 800e17e:	4651      	mov	r1, sl
 800e180:	220a      	movs	r2, #10
 800e182:	4620      	mov	r0, r4
 800e184:	f000 fb28 	bl	800e7d8 <__multadd>
 800e188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e18a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e18e:	4682      	mov	sl, r0
 800e190:	2b00      	cmp	r3, #0
 800e192:	f000 81b0 	beq.w	800e4f6 <_dtoa_r+0xbc6>
 800e196:	2300      	movs	r3, #0
 800e198:	4639      	mov	r1, r7
 800e19a:	220a      	movs	r2, #10
 800e19c:	4620      	mov	r0, r4
 800e19e:	f000 fb1b 	bl	800e7d8 <__multadd>
 800e1a2:	9b01      	ldr	r3, [sp, #4]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	4607      	mov	r7, r0
 800e1a8:	f300 8096 	bgt.w	800e2d8 <_dtoa_r+0x9a8>
 800e1ac:	9b07      	ldr	r3, [sp, #28]
 800e1ae:	2b02      	cmp	r3, #2
 800e1b0:	dc59      	bgt.n	800e266 <_dtoa_r+0x936>
 800e1b2:	e091      	b.n	800e2d8 <_dtoa_r+0x9a8>
 800e1b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e1b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e1ba:	e758      	b.n	800e06e <_dtoa_r+0x73e>
 800e1bc:	9b04      	ldr	r3, [sp, #16]
 800e1be:	1e5e      	subs	r6, r3, #1
 800e1c0:	9b08      	ldr	r3, [sp, #32]
 800e1c2:	42b3      	cmp	r3, r6
 800e1c4:	bfbf      	itttt	lt
 800e1c6:	9b08      	ldrlt	r3, [sp, #32]
 800e1c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e1ca:	9608      	strlt	r6, [sp, #32]
 800e1cc:	1af3      	sublt	r3, r6, r3
 800e1ce:	bfb4      	ite	lt
 800e1d0:	18d2      	addlt	r2, r2, r3
 800e1d2:	1b9e      	subge	r6, r3, r6
 800e1d4:	9b04      	ldr	r3, [sp, #16]
 800e1d6:	bfbc      	itt	lt
 800e1d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e1da:	2600      	movlt	r6, #0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	bfb7      	itett	lt
 800e1e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e1e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e1e8:	1a9d      	sublt	r5, r3, r2
 800e1ea:	2300      	movlt	r3, #0
 800e1ec:	e741      	b.n	800e072 <_dtoa_r+0x742>
 800e1ee:	9e08      	ldr	r6, [sp, #32]
 800e1f0:	9d05      	ldr	r5, [sp, #20]
 800e1f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e1f4:	e748      	b.n	800e088 <_dtoa_r+0x758>
 800e1f6:	9a08      	ldr	r2, [sp, #32]
 800e1f8:	e770      	b.n	800e0dc <_dtoa_r+0x7ac>
 800e1fa:	9b07      	ldr	r3, [sp, #28]
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	dc19      	bgt.n	800e234 <_dtoa_r+0x904>
 800e200:	9b02      	ldr	r3, [sp, #8]
 800e202:	b9bb      	cbnz	r3, 800e234 <_dtoa_r+0x904>
 800e204:	9b03      	ldr	r3, [sp, #12]
 800e206:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e20a:	b99b      	cbnz	r3, 800e234 <_dtoa_r+0x904>
 800e20c:	9b03      	ldr	r3, [sp, #12]
 800e20e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e212:	0d1b      	lsrs	r3, r3, #20
 800e214:	051b      	lsls	r3, r3, #20
 800e216:	b183      	cbz	r3, 800e23a <_dtoa_r+0x90a>
 800e218:	9b05      	ldr	r3, [sp, #20]
 800e21a:	3301      	adds	r3, #1
 800e21c:	9305      	str	r3, [sp, #20]
 800e21e:	9b06      	ldr	r3, [sp, #24]
 800e220:	3301      	adds	r3, #1
 800e222:	9306      	str	r3, [sp, #24]
 800e224:	f04f 0801 	mov.w	r8, #1
 800e228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f47f af6f 	bne.w	800e10e <_dtoa_r+0x7de>
 800e230:	2001      	movs	r0, #1
 800e232:	e774      	b.n	800e11e <_dtoa_r+0x7ee>
 800e234:	f04f 0800 	mov.w	r8, #0
 800e238:	e7f6      	b.n	800e228 <_dtoa_r+0x8f8>
 800e23a:	4698      	mov	r8, r3
 800e23c:	e7f4      	b.n	800e228 <_dtoa_r+0x8f8>
 800e23e:	d082      	beq.n	800e146 <_dtoa_r+0x816>
 800e240:	9a05      	ldr	r2, [sp, #20]
 800e242:	331c      	adds	r3, #28
 800e244:	441a      	add	r2, r3
 800e246:	9205      	str	r2, [sp, #20]
 800e248:	9a06      	ldr	r2, [sp, #24]
 800e24a:	441a      	add	r2, r3
 800e24c:	441d      	add	r5, r3
 800e24e:	9206      	str	r2, [sp, #24]
 800e250:	e779      	b.n	800e146 <_dtoa_r+0x816>
 800e252:	4603      	mov	r3, r0
 800e254:	e7f4      	b.n	800e240 <_dtoa_r+0x910>
 800e256:	9b04      	ldr	r3, [sp, #16]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	dc37      	bgt.n	800e2cc <_dtoa_r+0x99c>
 800e25c:	9b07      	ldr	r3, [sp, #28]
 800e25e:	2b02      	cmp	r3, #2
 800e260:	dd34      	ble.n	800e2cc <_dtoa_r+0x99c>
 800e262:	9b04      	ldr	r3, [sp, #16]
 800e264:	9301      	str	r3, [sp, #4]
 800e266:	9b01      	ldr	r3, [sp, #4]
 800e268:	b963      	cbnz	r3, 800e284 <_dtoa_r+0x954>
 800e26a:	4631      	mov	r1, r6
 800e26c:	2205      	movs	r2, #5
 800e26e:	4620      	mov	r0, r4
 800e270:	f000 fab2 	bl	800e7d8 <__multadd>
 800e274:	4601      	mov	r1, r0
 800e276:	4606      	mov	r6, r0
 800e278:	4650      	mov	r0, sl
 800e27a:	f000 fcc7 	bl	800ec0c <__mcmp>
 800e27e:	2800      	cmp	r0, #0
 800e280:	f73f adbb 	bgt.w	800ddfa <_dtoa_r+0x4ca>
 800e284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e286:	9d00      	ldr	r5, [sp, #0]
 800e288:	ea6f 0b03 	mvn.w	fp, r3
 800e28c:	f04f 0800 	mov.w	r8, #0
 800e290:	4631      	mov	r1, r6
 800e292:	4620      	mov	r0, r4
 800e294:	f000 fa7e 	bl	800e794 <_Bfree>
 800e298:	2f00      	cmp	r7, #0
 800e29a:	f43f aeab 	beq.w	800dff4 <_dtoa_r+0x6c4>
 800e29e:	f1b8 0f00 	cmp.w	r8, #0
 800e2a2:	d005      	beq.n	800e2b0 <_dtoa_r+0x980>
 800e2a4:	45b8      	cmp	r8, r7
 800e2a6:	d003      	beq.n	800e2b0 <_dtoa_r+0x980>
 800e2a8:	4641      	mov	r1, r8
 800e2aa:	4620      	mov	r0, r4
 800e2ac:	f000 fa72 	bl	800e794 <_Bfree>
 800e2b0:	4639      	mov	r1, r7
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	f000 fa6e 	bl	800e794 <_Bfree>
 800e2b8:	e69c      	b.n	800dff4 <_dtoa_r+0x6c4>
 800e2ba:	2600      	movs	r6, #0
 800e2bc:	4637      	mov	r7, r6
 800e2be:	e7e1      	b.n	800e284 <_dtoa_r+0x954>
 800e2c0:	46bb      	mov	fp, r7
 800e2c2:	4637      	mov	r7, r6
 800e2c4:	e599      	b.n	800ddfa <_dtoa_r+0x4ca>
 800e2c6:	bf00      	nop
 800e2c8:	40240000 	.word	0x40240000
 800e2cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	f000 80c8 	beq.w	800e464 <_dtoa_r+0xb34>
 800e2d4:	9b04      	ldr	r3, [sp, #16]
 800e2d6:	9301      	str	r3, [sp, #4]
 800e2d8:	2d00      	cmp	r5, #0
 800e2da:	dd05      	ble.n	800e2e8 <_dtoa_r+0x9b8>
 800e2dc:	4639      	mov	r1, r7
 800e2de:	462a      	mov	r2, r5
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	f000 fc27 	bl	800eb34 <__lshift>
 800e2e6:	4607      	mov	r7, r0
 800e2e8:	f1b8 0f00 	cmp.w	r8, #0
 800e2ec:	d05b      	beq.n	800e3a6 <_dtoa_r+0xa76>
 800e2ee:	6879      	ldr	r1, [r7, #4]
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	f000 fa0f 	bl	800e714 <_Balloc>
 800e2f6:	4605      	mov	r5, r0
 800e2f8:	b928      	cbnz	r0, 800e306 <_dtoa_r+0x9d6>
 800e2fa:	4b83      	ldr	r3, [pc, #524]	; (800e508 <_dtoa_r+0xbd8>)
 800e2fc:	4602      	mov	r2, r0
 800e2fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e302:	f7ff bb2e 	b.w	800d962 <_dtoa_r+0x32>
 800e306:	693a      	ldr	r2, [r7, #16]
 800e308:	3202      	adds	r2, #2
 800e30a:	0092      	lsls	r2, r2, #2
 800e30c:	f107 010c 	add.w	r1, r7, #12
 800e310:	300c      	adds	r0, #12
 800e312:	f7ff fa77 	bl	800d804 <memcpy>
 800e316:	2201      	movs	r2, #1
 800e318:	4629      	mov	r1, r5
 800e31a:	4620      	mov	r0, r4
 800e31c:	f000 fc0a 	bl	800eb34 <__lshift>
 800e320:	9b00      	ldr	r3, [sp, #0]
 800e322:	3301      	adds	r3, #1
 800e324:	9304      	str	r3, [sp, #16]
 800e326:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e32a:	4413      	add	r3, r2
 800e32c:	9308      	str	r3, [sp, #32]
 800e32e:	9b02      	ldr	r3, [sp, #8]
 800e330:	f003 0301 	and.w	r3, r3, #1
 800e334:	46b8      	mov	r8, r7
 800e336:	9306      	str	r3, [sp, #24]
 800e338:	4607      	mov	r7, r0
 800e33a:	9b04      	ldr	r3, [sp, #16]
 800e33c:	4631      	mov	r1, r6
 800e33e:	3b01      	subs	r3, #1
 800e340:	4650      	mov	r0, sl
 800e342:	9301      	str	r3, [sp, #4]
 800e344:	f7ff fa6c 	bl	800d820 <quorem>
 800e348:	4641      	mov	r1, r8
 800e34a:	9002      	str	r0, [sp, #8]
 800e34c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e350:	4650      	mov	r0, sl
 800e352:	f000 fc5b 	bl	800ec0c <__mcmp>
 800e356:	463a      	mov	r2, r7
 800e358:	9005      	str	r0, [sp, #20]
 800e35a:	4631      	mov	r1, r6
 800e35c:	4620      	mov	r0, r4
 800e35e:	f000 fc71 	bl	800ec44 <__mdiff>
 800e362:	68c2      	ldr	r2, [r0, #12]
 800e364:	4605      	mov	r5, r0
 800e366:	bb02      	cbnz	r2, 800e3aa <_dtoa_r+0xa7a>
 800e368:	4601      	mov	r1, r0
 800e36a:	4650      	mov	r0, sl
 800e36c:	f000 fc4e 	bl	800ec0c <__mcmp>
 800e370:	4602      	mov	r2, r0
 800e372:	4629      	mov	r1, r5
 800e374:	4620      	mov	r0, r4
 800e376:	9209      	str	r2, [sp, #36]	; 0x24
 800e378:	f000 fa0c 	bl	800e794 <_Bfree>
 800e37c:	9b07      	ldr	r3, [sp, #28]
 800e37e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e380:	9d04      	ldr	r5, [sp, #16]
 800e382:	ea43 0102 	orr.w	r1, r3, r2
 800e386:	9b06      	ldr	r3, [sp, #24]
 800e388:	4319      	orrs	r1, r3
 800e38a:	d110      	bne.n	800e3ae <_dtoa_r+0xa7e>
 800e38c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e390:	d029      	beq.n	800e3e6 <_dtoa_r+0xab6>
 800e392:	9b05      	ldr	r3, [sp, #20]
 800e394:	2b00      	cmp	r3, #0
 800e396:	dd02      	ble.n	800e39e <_dtoa_r+0xa6e>
 800e398:	9b02      	ldr	r3, [sp, #8]
 800e39a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e39e:	9b01      	ldr	r3, [sp, #4]
 800e3a0:	f883 9000 	strb.w	r9, [r3]
 800e3a4:	e774      	b.n	800e290 <_dtoa_r+0x960>
 800e3a6:	4638      	mov	r0, r7
 800e3a8:	e7ba      	b.n	800e320 <_dtoa_r+0x9f0>
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	e7e1      	b.n	800e372 <_dtoa_r+0xa42>
 800e3ae:	9b05      	ldr	r3, [sp, #20]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	db04      	blt.n	800e3be <_dtoa_r+0xa8e>
 800e3b4:	9907      	ldr	r1, [sp, #28]
 800e3b6:	430b      	orrs	r3, r1
 800e3b8:	9906      	ldr	r1, [sp, #24]
 800e3ba:	430b      	orrs	r3, r1
 800e3bc:	d120      	bne.n	800e400 <_dtoa_r+0xad0>
 800e3be:	2a00      	cmp	r2, #0
 800e3c0:	dded      	ble.n	800e39e <_dtoa_r+0xa6e>
 800e3c2:	4651      	mov	r1, sl
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	f000 fbb4 	bl	800eb34 <__lshift>
 800e3cc:	4631      	mov	r1, r6
 800e3ce:	4682      	mov	sl, r0
 800e3d0:	f000 fc1c 	bl	800ec0c <__mcmp>
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	dc03      	bgt.n	800e3e0 <_dtoa_r+0xab0>
 800e3d8:	d1e1      	bne.n	800e39e <_dtoa_r+0xa6e>
 800e3da:	f019 0f01 	tst.w	r9, #1
 800e3de:	d0de      	beq.n	800e39e <_dtoa_r+0xa6e>
 800e3e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e3e4:	d1d8      	bne.n	800e398 <_dtoa_r+0xa68>
 800e3e6:	9a01      	ldr	r2, [sp, #4]
 800e3e8:	2339      	movs	r3, #57	; 0x39
 800e3ea:	7013      	strb	r3, [r2, #0]
 800e3ec:	462b      	mov	r3, r5
 800e3ee:	461d      	mov	r5, r3
 800e3f0:	3b01      	subs	r3, #1
 800e3f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e3f6:	2a39      	cmp	r2, #57	; 0x39
 800e3f8:	d06c      	beq.n	800e4d4 <_dtoa_r+0xba4>
 800e3fa:	3201      	adds	r2, #1
 800e3fc:	701a      	strb	r2, [r3, #0]
 800e3fe:	e747      	b.n	800e290 <_dtoa_r+0x960>
 800e400:	2a00      	cmp	r2, #0
 800e402:	dd07      	ble.n	800e414 <_dtoa_r+0xae4>
 800e404:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e408:	d0ed      	beq.n	800e3e6 <_dtoa_r+0xab6>
 800e40a:	9a01      	ldr	r2, [sp, #4]
 800e40c:	f109 0301 	add.w	r3, r9, #1
 800e410:	7013      	strb	r3, [r2, #0]
 800e412:	e73d      	b.n	800e290 <_dtoa_r+0x960>
 800e414:	9b04      	ldr	r3, [sp, #16]
 800e416:	9a08      	ldr	r2, [sp, #32]
 800e418:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e41c:	4293      	cmp	r3, r2
 800e41e:	d043      	beq.n	800e4a8 <_dtoa_r+0xb78>
 800e420:	4651      	mov	r1, sl
 800e422:	2300      	movs	r3, #0
 800e424:	220a      	movs	r2, #10
 800e426:	4620      	mov	r0, r4
 800e428:	f000 f9d6 	bl	800e7d8 <__multadd>
 800e42c:	45b8      	cmp	r8, r7
 800e42e:	4682      	mov	sl, r0
 800e430:	f04f 0300 	mov.w	r3, #0
 800e434:	f04f 020a 	mov.w	r2, #10
 800e438:	4641      	mov	r1, r8
 800e43a:	4620      	mov	r0, r4
 800e43c:	d107      	bne.n	800e44e <_dtoa_r+0xb1e>
 800e43e:	f000 f9cb 	bl	800e7d8 <__multadd>
 800e442:	4680      	mov	r8, r0
 800e444:	4607      	mov	r7, r0
 800e446:	9b04      	ldr	r3, [sp, #16]
 800e448:	3301      	adds	r3, #1
 800e44a:	9304      	str	r3, [sp, #16]
 800e44c:	e775      	b.n	800e33a <_dtoa_r+0xa0a>
 800e44e:	f000 f9c3 	bl	800e7d8 <__multadd>
 800e452:	4639      	mov	r1, r7
 800e454:	4680      	mov	r8, r0
 800e456:	2300      	movs	r3, #0
 800e458:	220a      	movs	r2, #10
 800e45a:	4620      	mov	r0, r4
 800e45c:	f000 f9bc 	bl	800e7d8 <__multadd>
 800e460:	4607      	mov	r7, r0
 800e462:	e7f0      	b.n	800e446 <_dtoa_r+0xb16>
 800e464:	9b04      	ldr	r3, [sp, #16]
 800e466:	9301      	str	r3, [sp, #4]
 800e468:	9d00      	ldr	r5, [sp, #0]
 800e46a:	4631      	mov	r1, r6
 800e46c:	4650      	mov	r0, sl
 800e46e:	f7ff f9d7 	bl	800d820 <quorem>
 800e472:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e476:	9b00      	ldr	r3, [sp, #0]
 800e478:	f805 9b01 	strb.w	r9, [r5], #1
 800e47c:	1aea      	subs	r2, r5, r3
 800e47e:	9b01      	ldr	r3, [sp, #4]
 800e480:	4293      	cmp	r3, r2
 800e482:	dd07      	ble.n	800e494 <_dtoa_r+0xb64>
 800e484:	4651      	mov	r1, sl
 800e486:	2300      	movs	r3, #0
 800e488:	220a      	movs	r2, #10
 800e48a:	4620      	mov	r0, r4
 800e48c:	f000 f9a4 	bl	800e7d8 <__multadd>
 800e490:	4682      	mov	sl, r0
 800e492:	e7ea      	b.n	800e46a <_dtoa_r+0xb3a>
 800e494:	9b01      	ldr	r3, [sp, #4]
 800e496:	2b00      	cmp	r3, #0
 800e498:	bfc8      	it	gt
 800e49a:	461d      	movgt	r5, r3
 800e49c:	9b00      	ldr	r3, [sp, #0]
 800e49e:	bfd8      	it	le
 800e4a0:	2501      	movle	r5, #1
 800e4a2:	441d      	add	r5, r3
 800e4a4:	f04f 0800 	mov.w	r8, #0
 800e4a8:	4651      	mov	r1, sl
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	f000 fb41 	bl	800eb34 <__lshift>
 800e4b2:	4631      	mov	r1, r6
 800e4b4:	4682      	mov	sl, r0
 800e4b6:	f000 fba9 	bl	800ec0c <__mcmp>
 800e4ba:	2800      	cmp	r0, #0
 800e4bc:	dc96      	bgt.n	800e3ec <_dtoa_r+0xabc>
 800e4be:	d102      	bne.n	800e4c6 <_dtoa_r+0xb96>
 800e4c0:	f019 0f01 	tst.w	r9, #1
 800e4c4:	d192      	bne.n	800e3ec <_dtoa_r+0xabc>
 800e4c6:	462b      	mov	r3, r5
 800e4c8:	461d      	mov	r5, r3
 800e4ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e4ce:	2a30      	cmp	r2, #48	; 0x30
 800e4d0:	d0fa      	beq.n	800e4c8 <_dtoa_r+0xb98>
 800e4d2:	e6dd      	b.n	800e290 <_dtoa_r+0x960>
 800e4d4:	9a00      	ldr	r2, [sp, #0]
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d189      	bne.n	800e3ee <_dtoa_r+0xabe>
 800e4da:	f10b 0b01 	add.w	fp, fp, #1
 800e4de:	2331      	movs	r3, #49	; 0x31
 800e4e0:	e796      	b.n	800e410 <_dtoa_r+0xae0>
 800e4e2:	4b0a      	ldr	r3, [pc, #40]	; (800e50c <_dtoa_r+0xbdc>)
 800e4e4:	f7ff ba99 	b.w	800da1a <_dtoa_r+0xea>
 800e4e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	f47f aa6d 	bne.w	800d9ca <_dtoa_r+0x9a>
 800e4f0:	4b07      	ldr	r3, [pc, #28]	; (800e510 <_dtoa_r+0xbe0>)
 800e4f2:	f7ff ba92 	b.w	800da1a <_dtoa_r+0xea>
 800e4f6:	9b01      	ldr	r3, [sp, #4]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	dcb5      	bgt.n	800e468 <_dtoa_r+0xb38>
 800e4fc:	9b07      	ldr	r3, [sp, #28]
 800e4fe:	2b02      	cmp	r3, #2
 800e500:	f73f aeb1 	bgt.w	800e266 <_dtoa_r+0x936>
 800e504:	e7b0      	b.n	800e468 <_dtoa_r+0xb38>
 800e506:	bf00      	nop
 800e508:	08010ca5 	.word	0x08010ca5
 800e50c:	08010c05 	.word	0x08010c05
 800e510:	08010c29 	.word	0x08010c29

0800e514 <_free_r>:
 800e514:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e516:	2900      	cmp	r1, #0
 800e518:	d044      	beq.n	800e5a4 <_free_r+0x90>
 800e51a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e51e:	9001      	str	r0, [sp, #4]
 800e520:	2b00      	cmp	r3, #0
 800e522:	f1a1 0404 	sub.w	r4, r1, #4
 800e526:	bfb8      	it	lt
 800e528:	18e4      	addlt	r4, r4, r3
 800e52a:	f000 f8e7 	bl	800e6fc <__malloc_lock>
 800e52e:	4a1e      	ldr	r2, [pc, #120]	; (800e5a8 <_free_r+0x94>)
 800e530:	9801      	ldr	r0, [sp, #4]
 800e532:	6813      	ldr	r3, [r2, #0]
 800e534:	b933      	cbnz	r3, 800e544 <_free_r+0x30>
 800e536:	6063      	str	r3, [r4, #4]
 800e538:	6014      	str	r4, [r2, #0]
 800e53a:	b003      	add	sp, #12
 800e53c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e540:	f000 b8e2 	b.w	800e708 <__malloc_unlock>
 800e544:	42a3      	cmp	r3, r4
 800e546:	d908      	bls.n	800e55a <_free_r+0x46>
 800e548:	6825      	ldr	r5, [r4, #0]
 800e54a:	1961      	adds	r1, r4, r5
 800e54c:	428b      	cmp	r3, r1
 800e54e:	bf01      	itttt	eq
 800e550:	6819      	ldreq	r1, [r3, #0]
 800e552:	685b      	ldreq	r3, [r3, #4]
 800e554:	1949      	addeq	r1, r1, r5
 800e556:	6021      	streq	r1, [r4, #0]
 800e558:	e7ed      	b.n	800e536 <_free_r+0x22>
 800e55a:	461a      	mov	r2, r3
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	b10b      	cbz	r3, 800e564 <_free_r+0x50>
 800e560:	42a3      	cmp	r3, r4
 800e562:	d9fa      	bls.n	800e55a <_free_r+0x46>
 800e564:	6811      	ldr	r1, [r2, #0]
 800e566:	1855      	adds	r5, r2, r1
 800e568:	42a5      	cmp	r5, r4
 800e56a:	d10b      	bne.n	800e584 <_free_r+0x70>
 800e56c:	6824      	ldr	r4, [r4, #0]
 800e56e:	4421      	add	r1, r4
 800e570:	1854      	adds	r4, r2, r1
 800e572:	42a3      	cmp	r3, r4
 800e574:	6011      	str	r1, [r2, #0]
 800e576:	d1e0      	bne.n	800e53a <_free_r+0x26>
 800e578:	681c      	ldr	r4, [r3, #0]
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	6053      	str	r3, [r2, #4]
 800e57e:	440c      	add	r4, r1
 800e580:	6014      	str	r4, [r2, #0]
 800e582:	e7da      	b.n	800e53a <_free_r+0x26>
 800e584:	d902      	bls.n	800e58c <_free_r+0x78>
 800e586:	230c      	movs	r3, #12
 800e588:	6003      	str	r3, [r0, #0]
 800e58a:	e7d6      	b.n	800e53a <_free_r+0x26>
 800e58c:	6825      	ldr	r5, [r4, #0]
 800e58e:	1961      	adds	r1, r4, r5
 800e590:	428b      	cmp	r3, r1
 800e592:	bf04      	itt	eq
 800e594:	6819      	ldreq	r1, [r3, #0]
 800e596:	685b      	ldreq	r3, [r3, #4]
 800e598:	6063      	str	r3, [r4, #4]
 800e59a:	bf04      	itt	eq
 800e59c:	1949      	addeq	r1, r1, r5
 800e59e:	6021      	streq	r1, [r4, #0]
 800e5a0:	6054      	str	r4, [r2, #4]
 800e5a2:	e7ca      	b.n	800e53a <_free_r+0x26>
 800e5a4:	b003      	add	sp, #12
 800e5a6:	bd30      	pop	{r4, r5, pc}
 800e5a8:	20004aa8 	.word	0x20004aa8

0800e5ac <malloc>:
 800e5ac:	4b02      	ldr	r3, [pc, #8]	; (800e5b8 <malloc+0xc>)
 800e5ae:	4601      	mov	r1, r0
 800e5b0:	6818      	ldr	r0, [r3, #0]
 800e5b2:	f000 b823 	b.w	800e5fc <_malloc_r>
 800e5b6:	bf00      	nop
 800e5b8:	20000074 	.word	0x20000074

0800e5bc <sbrk_aligned>:
 800e5bc:	b570      	push	{r4, r5, r6, lr}
 800e5be:	4e0e      	ldr	r6, [pc, #56]	; (800e5f8 <sbrk_aligned+0x3c>)
 800e5c0:	460c      	mov	r4, r1
 800e5c2:	6831      	ldr	r1, [r6, #0]
 800e5c4:	4605      	mov	r5, r0
 800e5c6:	b911      	cbnz	r1, 800e5ce <sbrk_aligned+0x12>
 800e5c8:	f001 f820 	bl	800f60c <_sbrk_r>
 800e5cc:	6030      	str	r0, [r6, #0]
 800e5ce:	4621      	mov	r1, r4
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	f001 f81b 	bl	800f60c <_sbrk_r>
 800e5d6:	1c43      	adds	r3, r0, #1
 800e5d8:	d00a      	beq.n	800e5f0 <sbrk_aligned+0x34>
 800e5da:	1cc4      	adds	r4, r0, #3
 800e5dc:	f024 0403 	bic.w	r4, r4, #3
 800e5e0:	42a0      	cmp	r0, r4
 800e5e2:	d007      	beq.n	800e5f4 <sbrk_aligned+0x38>
 800e5e4:	1a21      	subs	r1, r4, r0
 800e5e6:	4628      	mov	r0, r5
 800e5e8:	f001 f810 	bl	800f60c <_sbrk_r>
 800e5ec:	3001      	adds	r0, #1
 800e5ee:	d101      	bne.n	800e5f4 <sbrk_aligned+0x38>
 800e5f0:	f04f 34ff 	mov.w	r4, #4294967295
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	bd70      	pop	{r4, r5, r6, pc}
 800e5f8:	20004aac 	.word	0x20004aac

0800e5fc <_malloc_r>:
 800e5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e600:	1ccd      	adds	r5, r1, #3
 800e602:	f025 0503 	bic.w	r5, r5, #3
 800e606:	3508      	adds	r5, #8
 800e608:	2d0c      	cmp	r5, #12
 800e60a:	bf38      	it	cc
 800e60c:	250c      	movcc	r5, #12
 800e60e:	2d00      	cmp	r5, #0
 800e610:	4607      	mov	r7, r0
 800e612:	db01      	blt.n	800e618 <_malloc_r+0x1c>
 800e614:	42a9      	cmp	r1, r5
 800e616:	d905      	bls.n	800e624 <_malloc_r+0x28>
 800e618:	230c      	movs	r3, #12
 800e61a:	603b      	str	r3, [r7, #0]
 800e61c:	2600      	movs	r6, #0
 800e61e:	4630      	mov	r0, r6
 800e620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e624:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e6f8 <_malloc_r+0xfc>
 800e628:	f000 f868 	bl	800e6fc <__malloc_lock>
 800e62c:	f8d8 3000 	ldr.w	r3, [r8]
 800e630:	461c      	mov	r4, r3
 800e632:	bb5c      	cbnz	r4, 800e68c <_malloc_r+0x90>
 800e634:	4629      	mov	r1, r5
 800e636:	4638      	mov	r0, r7
 800e638:	f7ff ffc0 	bl	800e5bc <sbrk_aligned>
 800e63c:	1c43      	adds	r3, r0, #1
 800e63e:	4604      	mov	r4, r0
 800e640:	d155      	bne.n	800e6ee <_malloc_r+0xf2>
 800e642:	f8d8 4000 	ldr.w	r4, [r8]
 800e646:	4626      	mov	r6, r4
 800e648:	2e00      	cmp	r6, #0
 800e64a:	d145      	bne.n	800e6d8 <_malloc_r+0xdc>
 800e64c:	2c00      	cmp	r4, #0
 800e64e:	d048      	beq.n	800e6e2 <_malloc_r+0xe6>
 800e650:	6823      	ldr	r3, [r4, #0]
 800e652:	4631      	mov	r1, r6
 800e654:	4638      	mov	r0, r7
 800e656:	eb04 0903 	add.w	r9, r4, r3
 800e65a:	f000 ffd7 	bl	800f60c <_sbrk_r>
 800e65e:	4581      	cmp	r9, r0
 800e660:	d13f      	bne.n	800e6e2 <_malloc_r+0xe6>
 800e662:	6821      	ldr	r1, [r4, #0]
 800e664:	1a6d      	subs	r5, r5, r1
 800e666:	4629      	mov	r1, r5
 800e668:	4638      	mov	r0, r7
 800e66a:	f7ff ffa7 	bl	800e5bc <sbrk_aligned>
 800e66e:	3001      	adds	r0, #1
 800e670:	d037      	beq.n	800e6e2 <_malloc_r+0xe6>
 800e672:	6823      	ldr	r3, [r4, #0]
 800e674:	442b      	add	r3, r5
 800e676:	6023      	str	r3, [r4, #0]
 800e678:	f8d8 3000 	ldr.w	r3, [r8]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d038      	beq.n	800e6f2 <_malloc_r+0xf6>
 800e680:	685a      	ldr	r2, [r3, #4]
 800e682:	42a2      	cmp	r2, r4
 800e684:	d12b      	bne.n	800e6de <_malloc_r+0xe2>
 800e686:	2200      	movs	r2, #0
 800e688:	605a      	str	r2, [r3, #4]
 800e68a:	e00f      	b.n	800e6ac <_malloc_r+0xb0>
 800e68c:	6822      	ldr	r2, [r4, #0]
 800e68e:	1b52      	subs	r2, r2, r5
 800e690:	d41f      	bmi.n	800e6d2 <_malloc_r+0xd6>
 800e692:	2a0b      	cmp	r2, #11
 800e694:	d917      	bls.n	800e6c6 <_malloc_r+0xca>
 800e696:	1961      	adds	r1, r4, r5
 800e698:	42a3      	cmp	r3, r4
 800e69a:	6025      	str	r5, [r4, #0]
 800e69c:	bf18      	it	ne
 800e69e:	6059      	strne	r1, [r3, #4]
 800e6a0:	6863      	ldr	r3, [r4, #4]
 800e6a2:	bf08      	it	eq
 800e6a4:	f8c8 1000 	streq.w	r1, [r8]
 800e6a8:	5162      	str	r2, [r4, r5]
 800e6aa:	604b      	str	r3, [r1, #4]
 800e6ac:	4638      	mov	r0, r7
 800e6ae:	f104 060b 	add.w	r6, r4, #11
 800e6b2:	f000 f829 	bl	800e708 <__malloc_unlock>
 800e6b6:	f026 0607 	bic.w	r6, r6, #7
 800e6ba:	1d23      	adds	r3, r4, #4
 800e6bc:	1af2      	subs	r2, r6, r3
 800e6be:	d0ae      	beq.n	800e61e <_malloc_r+0x22>
 800e6c0:	1b9b      	subs	r3, r3, r6
 800e6c2:	50a3      	str	r3, [r4, r2]
 800e6c4:	e7ab      	b.n	800e61e <_malloc_r+0x22>
 800e6c6:	42a3      	cmp	r3, r4
 800e6c8:	6862      	ldr	r2, [r4, #4]
 800e6ca:	d1dd      	bne.n	800e688 <_malloc_r+0x8c>
 800e6cc:	f8c8 2000 	str.w	r2, [r8]
 800e6d0:	e7ec      	b.n	800e6ac <_malloc_r+0xb0>
 800e6d2:	4623      	mov	r3, r4
 800e6d4:	6864      	ldr	r4, [r4, #4]
 800e6d6:	e7ac      	b.n	800e632 <_malloc_r+0x36>
 800e6d8:	4634      	mov	r4, r6
 800e6da:	6876      	ldr	r6, [r6, #4]
 800e6dc:	e7b4      	b.n	800e648 <_malloc_r+0x4c>
 800e6de:	4613      	mov	r3, r2
 800e6e0:	e7cc      	b.n	800e67c <_malloc_r+0x80>
 800e6e2:	230c      	movs	r3, #12
 800e6e4:	603b      	str	r3, [r7, #0]
 800e6e6:	4638      	mov	r0, r7
 800e6e8:	f000 f80e 	bl	800e708 <__malloc_unlock>
 800e6ec:	e797      	b.n	800e61e <_malloc_r+0x22>
 800e6ee:	6025      	str	r5, [r4, #0]
 800e6f0:	e7dc      	b.n	800e6ac <_malloc_r+0xb0>
 800e6f2:	605b      	str	r3, [r3, #4]
 800e6f4:	deff      	udf	#255	; 0xff
 800e6f6:	bf00      	nop
 800e6f8:	20004aa8 	.word	0x20004aa8

0800e6fc <__malloc_lock>:
 800e6fc:	4801      	ldr	r0, [pc, #4]	; (800e704 <__malloc_lock+0x8>)
 800e6fe:	f7ff b87f 	b.w	800d800 <__retarget_lock_acquire_recursive>
 800e702:	bf00      	nop
 800e704:	20004aa4 	.word	0x20004aa4

0800e708 <__malloc_unlock>:
 800e708:	4801      	ldr	r0, [pc, #4]	; (800e710 <__malloc_unlock+0x8>)
 800e70a:	f7ff b87a 	b.w	800d802 <__retarget_lock_release_recursive>
 800e70e:	bf00      	nop
 800e710:	20004aa4 	.word	0x20004aa4

0800e714 <_Balloc>:
 800e714:	b570      	push	{r4, r5, r6, lr}
 800e716:	69c6      	ldr	r6, [r0, #28]
 800e718:	4604      	mov	r4, r0
 800e71a:	460d      	mov	r5, r1
 800e71c:	b976      	cbnz	r6, 800e73c <_Balloc+0x28>
 800e71e:	2010      	movs	r0, #16
 800e720:	f7ff ff44 	bl	800e5ac <malloc>
 800e724:	4602      	mov	r2, r0
 800e726:	61e0      	str	r0, [r4, #28]
 800e728:	b920      	cbnz	r0, 800e734 <_Balloc+0x20>
 800e72a:	4b18      	ldr	r3, [pc, #96]	; (800e78c <_Balloc+0x78>)
 800e72c:	4818      	ldr	r0, [pc, #96]	; (800e790 <_Balloc+0x7c>)
 800e72e:	216b      	movs	r1, #107	; 0x6b
 800e730:	f000 ff84 	bl	800f63c <__assert_func>
 800e734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e738:	6006      	str	r6, [r0, #0]
 800e73a:	60c6      	str	r6, [r0, #12]
 800e73c:	69e6      	ldr	r6, [r4, #28]
 800e73e:	68f3      	ldr	r3, [r6, #12]
 800e740:	b183      	cbz	r3, 800e764 <_Balloc+0x50>
 800e742:	69e3      	ldr	r3, [r4, #28]
 800e744:	68db      	ldr	r3, [r3, #12]
 800e746:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e74a:	b9b8      	cbnz	r0, 800e77c <_Balloc+0x68>
 800e74c:	2101      	movs	r1, #1
 800e74e:	fa01 f605 	lsl.w	r6, r1, r5
 800e752:	1d72      	adds	r2, r6, #5
 800e754:	0092      	lsls	r2, r2, #2
 800e756:	4620      	mov	r0, r4
 800e758:	f000 ff8e 	bl	800f678 <_calloc_r>
 800e75c:	b160      	cbz	r0, 800e778 <_Balloc+0x64>
 800e75e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e762:	e00e      	b.n	800e782 <_Balloc+0x6e>
 800e764:	2221      	movs	r2, #33	; 0x21
 800e766:	2104      	movs	r1, #4
 800e768:	4620      	mov	r0, r4
 800e76a:	f000 ff85 	bl	800f678 <_calloc_r>
 800e76e:	69e3      	ldr	r3, [r4, #28]
 800e770:	60f0      	str	r0, [r6, #12]
 800e772:	68db      	ldr	r3, [r3, #12]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d1e4      	bne.n	800e742 <_Balloc+0x2e>
 800e778:	2000      	movs	r0, #0
 800e77a:	bd70      	pop	{r4, r5, r6, pc}
 800e77c:	6802      	ldr	r2, [r0, #0]
 800e77e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e782:	2300      	movs	r3, #0
 800e784:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e788:	e7f7      	b.n	800e77a <_Balloc+0x66>
 800e78a:	bf00      	nop
 800e78c:	08010c36 	.word	0x08010c36
 800e790:	08010cb6 	.word	0x08010cb6

0800e794 <_Bfree>:
 800e794:	b570      	push	{r4, r5, r6, lr}
 800e796:	69c6      	ldr	r6, [r0, #28]
 800e798:	4605      	mov	r5, r0
 800e79a:	460c      	mov	r4, r1
 800e79c:	b976      	cbnz	r6, 800e7bc <_Bfree+0x28>
 800e79e:	2010      	movs	r0, #16
 800e7a0:	f7ff ff04 	bl	800e5ac <malloc>
 800e7a4:	4602      	mov	r2, r0
 800e7a6:	61e8      	str	r0, [r5, #28]
 800e7a8:	b920      	cbnz	r0, 800e7b4 <_Bfree+0x20>
 800e7aa:	4b09      	ldr	r3, [pc, #36]	; (800e7d0 <_Bfree+0x3c>)
 800e7ac:	4809      	ldr	r0, [pc, #36]	; (800e7d4 <_Bfree+0x40>)
 800e7ae:	218f      	movs	r1, #143	; 0x8f
 800e7b0:	f000 ff44 	bl	800f63c <__assert_func>
 800e7b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7b8:	6006      	str	r6, [r0, #0]
 800e7ba:	60c6      	str	r6, [r0, #12]
 800e7bc:	b13c      	cbz	r4, 800e7ce <_Bfree+0x3a>
 800e7be:	69eb      	ldr	r3, [r5, #28]
 800e7c0:	6862      	ldr	r2, [r4, #4]
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e7c8:	6021      	str	r1, [r4, #0]
 800e7ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e7ce:	bd70      	pop	{r4, r5, r6, pc}
 800e7d0:	08010c36 	.word	0x08010c36
 800e7d4:	08010cb6 	.word	0x08010cb6

0800e7d8 <__multadd>:
 800e7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7dc:	690d      	ldr	r5, [r1, #16]
 800e7de:	4607      	mov	r7, r0
 800e7e0:	460c      	mov	r4, r1
 800e7e2:	461e      	mov	r6, r3
 800e7e4:	f101 0c14 	add.w	ip, r1, #20
 800e7e8:	2000      	movs	r0, #0
 800e7ea:	f8dc 3000 	ldr.w	r3, [ip]
 800e7ee:	b299      	uxth	r1, r3
 800e7f0:	fb02 6101 	mla	r1, r2, r1, r6
 800e7f4:	0c1e      	lsrs	r6, r3, #16
 800e7f6:	0c0b      	lsrs	r3, r1, #16
 800e7f8:	fb02 3306 	mla	r3, r2, r6, r3
 800e7fc:	b289      	uxth	r1, r1
 800e7fe:	3001      	adds	r0, #1
 800e800:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e804:	4285      	cmp	r5, r0
 800e806:	f84c 1b04 	str.w	r1, [ip], #4
 800e80a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e80e:	dcec      	bgt.n	800e7ea <__multadd+0x12>
 800e810:	b30e      	cbz	r6, 800e856 <__multadd+0x7e>
 800e812:	68a3      	ldr	r3, [r4, #8]
 800e814:	42ab      	cmp	r3, r5
 800e816:	dc19      	bgt.n	800e84c <__multadd+0x74>
 800e818:	6861      	ldr	r1, [r4, #4]
 800e81a:	4638      	mov	r0, r7
 800e81c:	3101      	adds	r1, #1
 800e81e:	f7ff ff79 	bl	800e714 <_Balloc>
 800e822:	4680      	mov	r8, r0
 800e824:	b928      	cbnz	r0, 800e832 <__multadd+0x5a>
 800e826:	4602      	mov	r2, r0
 800e828:	4b0c      	ldr	r3, [pc, #48]	; (800e85c <__multadd+0x84>)
 800e82a:	480d      	ldr	r0, [pc, #52]	; (800e860 <__multadd+0x88>)
 800e82c:	21ba      	movs	r1, #186	; 0xba
 800e82e:	f000 ff05 	bl	800f63c <__assert_func>
 800e832:	6922      	ldr	r2, [r4, #16]
 800e834:	3202      	adds	r2, #2
 800e836:	f104 010c 	add.w	r1, r4, #12
 800e83a:	0092      	lsls	r2, r2, #2
 800e83c:	300c      	adds	r0, #12
 800e83e:	f7fe ffe1 	bl	800d804 <memcpy>
 800e842:	4621      	mov	r1, r4
 800e844:	4638      	mov	r0, r7
 800e846:	f7ff ffa5 	bl	800e794 <_Bfree>
 800e84a:	4644      	mov	r4, r8
 800e84c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e850:	3501      	adds	r5, #1
 800e852:	615e      	str	r6, [r3, #20]
 800e854:	6125      	str	r5, [r4, #16]
 800e856:	4620      	mov	r0, r4
 800e858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e85c:	08010ca5 	.word	0x08010ca5
 800e860:	08010cb6 	.word	0x08010cb6

0800e864 <__hi0bits>:
 800e864:	0c03      	lsrs	r3, r0, #16
 800e866:	041b      	lsls	r3, r3, #16
 800e868:	b9d3      	cbnz	r3, 800e8a0 <__hi0bits+0x3c>
 800e86a:	0400      	lsls	r0, r0, #16
 800e86c:	2310      	movs	r3, #16
 800e86e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e872:	bf04      	itt	eq
 800e874:	0200      	lsleq	r0, r0, #8
 800e876:	3308      	addeq	r3, #8
 800e878:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e87c:	bf04      	itt	eq
 800e87e:	0100      	lsleq	r0, r0, #4
 800e880:	3304      	addeq	r3, #4
 800e882:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e886:	bf04      	itt	eq
 800e888:	0080      	lsleq	r0, r0, #2
 800e88a:	3302      	addeq	r3, #2
 800e88c:	2800      	cmp	r0, #0
 800e88e:	db05      	blt.n	800e89c <__hi0bits+0x38>
 800e890:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e894:	f103 0301 	add.w	r3, r3, #1
 800e898:	bf08      	it	eq
 800e89a:	2320      	moveq	r3, #32
 800e89c:	4618      	mov	r0, r3
 800e89e:	4770      	bx	lr
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	e7e4      	b.n	800e86e <__hi0bits+0xa>

0800e8a4 <__lo0bits>:
 800e8a4:	6803      	ldr	r3, [r0, #0]
 800e8a6:	f013 0207 	ands.w	r2, r3, #7
 800e8aa:	d00c      	beq.n	800e8c6 <__lo0bits+0x22>
 800e8ac:	07d9      	lsls	r1, r3, #31
 800e8ae:	d422      	bmi.n	800e8f6 <__lo0bits+0x52>
 800e8b0:	079a      	lsls	r2, r3, #30
 800e8b2:	bf49      	itett	mi
 800e8b4:	085b      	lsrmi	r3, r3, #1
 800e8b6:	089b      	lsrpl	r3, r3, #2
 800e8b8:	6003      	strmi	r3, [r0, #0]
 800e8ba:	2201      	movmi	r2, #1
 800e8bc:	bf5c      	itt	pl
 800e8be:	6003      	strpl	r3, [r0, #0]
 800e8c0:	2202      	movpl	r2, #2
 800e8c2:	4610      	mov	r0, r2
 800e8c4:	4770      	bx	lr
 800e8c6:	b299      	uxth	r1, r3
 800e8c8:	b909      	cbnz	r1, 800e8ce <__lo0bits+0x2a>
 800e8ca:	0c1b      	lsrs	r3, r3, #16
 800e8cc:	2210      	movs	r2, #16
 800e8ce:	b2d9      	uxtb	r1, r3
 800e8d0:	b909      	cbnz	r1, 800e8d6 <__lo0bits+0x32>
 800e8d2:	3208      	adds	r2, #8
 800e8d4:	0a1b      	lsrs	r3, r3, #8
 800e8d6:	0719      	lsls	r1, r3, #28
 800e8d8:	bf04      	itt	eq
 800e8da:	091b      	lsreq	r3, r3, #4
 800e8dc:	3204      	addeq	r2, #4
 800e8de:	0799      	lsls	r1, r3, #30
 800e8e0:	bf04      	itt	eq
 800e8e2:	089b      	lsreq	r3, r3, #2
 800e8e4:	3202      	addeq	r2, #2
 800e8e6:	07d9      	lsls	r1, r3, #31
 800e8e8:	d403      	bmi.n	800e8f2 <__lo0bits+0x4e>
 800e8ea:	085b      	lsrs	r3, r3, #1
 800e8ec:	f102 0201 	add.w	r2, r2, #1
 800e8f0:	d003      	beq.n	800e8fa <__lo0bits+0x56>
 800e8f2:	6003      	str	r3, [r0, #0]
 800e8f4:	e7e5      	b.n	800e8c2 <__lo0bits+0x1e>
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	e7e3      	b.n	800e8c2 <__lo0bits+0x1e>
 800e8fa:	2220      	movs	r2, #32
 800e8fc:	e7e1      	b.n	800e8c2 <__lo0bits+0x1e>
	...

0800e900 <__i2b>:
 800e900:	b510      	push	{r4, lr}
 800e902:	460c      	mov	r4, r1
 800e904:	2101      	movs	r1, #1
 800e906:	f7ff ff05 	bl	800e714 <_Balloc>
 800e90a:	4602      	mov	r2, r0
 800e90c:	b928      	cbnz	r0, 800e91a <__i2b+0x1a>
 800e90e:	4b05      	ldr	r3, [pc, #20]	; (800e924 <__i2b+0x24>)
 800e910:	4805      	ldr	r0, [pc, #20]	; (800e928 <__i2b+0x28>)
 800e912:	f240 1145 	movw	r1, #325	; 0x145
 800e916:	f000 fe91 	bl	800f63c <__assert_func>
 800e91a:	2301      	movs	r3, #1
 800e91c:	6144      	str	r4, [r0, #20]
 800e91e:	6103      	str	r3, [r0, #16]
 800e920:	bd10      	pop	{r4, pc}
 800e922:	bf00      	nop
 800e924:	08010ca5 	.word	0x08010ca5
 800e928:	08010cb6 	.word	0x08010cb6

0800e92c <__multiply>:
 800e92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e930:	4691      	mov	r9, r2
 800e932:	690a      	ldr	r2, [r1, #16]
 800e934:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e938:	429a      	cmp	r2, r3
 800e93a:	bfb8      	it	lt
 800e93c:	460b      	movlt	r3, r1
 800e93e:	460c      	mov	r4, r1
 800e940:	bfbc      	itt	lt
 800e942:	464c      	movlt	r4, r9
 800e944:	4699      	movlt	r9, r3
 800e946:	6927      	ldr	r7, [r4, #16]
 800e948:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e94c:	68a3      	ldr	r3, [r4, #8]
 800e94e:	6861      	ldr	r1, [r4, #4]
 800e950:	eb07 060a 	add.w	r6, r7, sl
 800e954:	42b3      	cmp	r3, r6
 800e956:	b085      	sub	sp, #20
 800e958:	bfb8      	it	lt
 800e95a:	3101      	addlt	r1, #1
 800e95c:	f7ff feda 	bl	800e714 <_Balloc>
 800e960:	b930      	cbnz	r0, 800e970 <__multiply+0x44>
 800e962:	4602      	mov	r2, r0
 800e964:	4b44      	ldr	r3, [pc, #272]	; (800ea78 <__multiply+0x14c>)
 800e966:	4845      	ldr	r0, [pc, #276]	; (800ea7c <__multiply+0x150>)
 800e968:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e96c:	f000 fe66 	bl	800f63c <__assert_func>
 800e970:	f100 0514 	add.w	r5, r0, #20
 800e974:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e978:	462b      	mov	r3, r5
 800e97a:	2200      	movs	r2, #0
 800e97c:	4543      	cmp	r3, r8
 800e97e:	d321      	bcc.n	800e9c4 <__multiply+0x98>
 800e980:	f104 0314 	add.w	r3, r4, #20
 800e984:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e988:	f109 0314 	add.w	r3, r9, #20
 800e98c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e990:	9202      	str	r2, [sp, #8]
 800e992:	1b3a      	subs	r2, r7, r4
 800e994:	3a15      	subs	r2, #21
 800e996:	f022 0203 	bic.w	r2, r2, #3
 800e99a:	3204      	adds	r2, #4
 800e99c:	f104 0115 	add.w	r1, r4, #21
 800e9a0:	428f      	cmp	r7, r1
 800e9a2:	bf38      	it	cc
 800e9a4:	2204      	movcc	r2, #4
 800e9a6:	9201      	str	r2, [sp, #4]
 800e9a8:	9a02      	ldr	r2, [sp, #8]
 800e9aa:	9303      	str	r3, [sp, #12]
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	d80c      	bhi.n	800e9ca <__multiply+0x9e>
 800e9b0:	2e00      	cmp	r6, #0
 800e9b2:	dd03      	ble.n	800e9bc <__multiply+0x90>
 800e9b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d05b      	beq.n	800ea74 <__multiply+0x148>
 800e9bc:	6106      	str	r6, [r0, #16]
 800e9be:	b005      	add	sp, #20
 800e9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9c4:	f843 2b04 	str.w	r2, [r3], #4
 800e9c8:	e7d8      	b.n	800e97c <__multiply+0x50>
 800e9ca:	f8b3 a000 	ldrh.w	sl, [r3]
 800e9ce:	f1ba 0f00 	cmp.w	sl, #0
 800e9d2:	d024      	beq.n	800ea1e <__multiply+0xf2>
 800e9d4:	f104 0e14 	add.w	lr, r4, #20
 800e9d8:	46a9      	mov	r9, r5
 800e9da:	f04f 0c00 	mov.w	ip, #0
 800e9de:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e9e2:	f8d9 1000 	ldr.w	r1, [r9]
 800e9e6:	fa1f fb82 	uxth.w	fp, r2
 800e9ea:	b289      	uxth	r1, r1
 800e9ec:	fb0a 110b 	mla	r1, sl, fp, r1
 800e9f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e9f4:	f8d9 2000 	ldr.w	r2, [r9]
 800e9f8:	4461      	add	r1, ip
 800e9fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e9fe:	fb0a c20b 	mla	r2, sl, fp, ip
 800ea02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ea06:	b289      	uxth	r1, r1
 800ea08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ea0c:	4577      	cmp	r7, lr
 800ea0e:	f849 1b04 	str.w	r1, [r9], #4
 800ea12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ea16:	d8e2      	bhi.n	800e9de <__multiply+0xb2>
 800ea18:	9a01      	ldr	r2, [sp, #4]
 800ea1a:	f845 c002 	str.w	ip, [r5, r2]
 800ea1e:	9a03      	ldr	r2, [sp, #12]
 800ea20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ea24:	3304      	adds	r3, #4
 800ea26:	f1b9 0f00 	cmp.w	r9, #0
 800ea2a:	d021      	beq.n	800ea70 <__multiply+0x144>
 800ea2c:	6829      	ldr	r1, [r5, #0]
 800ea2e:	f104 0c14 	add.w	ip, r4, #20
 800ea32:	46ae      	mov	lr, r5
 800ea34:	f04f 0a00 	mov.w	sl, #0
 800ea38:	f8bc b000 	ldrh.w	fp, [ip]
 800ea3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ea40:	fb09 220b 	mla	r2, r9, fp, r2
 800ea44:	4452      	add	r2, sl
 800ea46:	b289      	uxth	r1, r1
 800ea48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ea4c:	f84e 1b04 	str.w	r1, [lr], #4
 800ea50:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ea54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ea58:	f8be 1000 	ldrh.w	r1, [lr]
 800ea5c:	fb09 110a 	mla	r1, r9, sl, r1
 800ea60:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ea64:	4567      	cmp	r7, ip
 800ea66:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ea6a:	d8e5      	bhi.n	800ea38 <__multiply+0x10c>
 800ea6c:	9a01      	ldr	r2, [sp, #4]
 800ea6e:	50a9      	str	r1, [r5, r2]
 800ea70:	3504      	adds	r5, #4
 800ea72:	e799      	b.n	800e9a8 <__multiply+0x7c>
 800ea74:	3e01      	subs	r6, #1
 800ea76:	e79b      	b.n	800e9b0 <__multiply+0x84>
 800ea78:	08010ca5 	.word	0x08010ca5
 800ea7c:	08010cb6 	.word	0x08010cb6

0800ea80 <__pow5mult>:
 800ea80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea84:	4615      	mov	r5, r2
 800ea86:	f012 0203 	ands.w	r2, r2, #3
 800ea8a:	4606      	mov	r6, r0
 800ea8c:	460f      	mov	r7, r1
 800ea8e:	d007      	beq.n	800eaa0 <__pow5mult+0x20>
 800ea90:	4c25      	ldr	r4, [pc, #148]	; (800eb28 <__pow5mult+0xa8>)
 800ea92:	3a01      	subs	r2, #1
 800ea94:	2300      	movs	r3, #0
 800ea96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ea9a:	f7ff fe9d 	bl	800e7d8 <__multadd>
 800ea9e:	4607      	mov	r7, r0
 800eaa0:	10ad      	asrs	r5, r5, #2
 800eaa2:	d03d      	beq.n	800eb20 <__pow5mult+0xa0>
 800eaa4:	69f4      	ldr	r4, [r6, #28]
 800eaa6:	b97c      	cbnz	r4, 800eac8 <__pow5mult+0x48>
 800eaa8:	2010      	movs	r0, #16
 800eaaa:	f7ff fd7f 	bl	800e5ac <malloc>
 800eaae:	4602      	mov	r2, r0
 800eab0:	61f0      	str	r0, [r6, #28]
 800eab2:	b928      	cbnz	r0, 800eac0 <__pow5mult+0x40>
 800eab4:	4b1d      	ldr	r3, [pc, #116]	; (800eb2c <__pow5mult+0xac>)
 800eab6:	481e      	ldr	r0, [pc, #120]	; (800eb30 <__pow5mult+0xb0>)
 800eab8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800eabc:	f000 fdbe 	bl	800f63c <__assert_func>
 800eac0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eac4:	6004      	str	r4, [r0, #0]
 800eac6:	60c4      	str	r4, [r0, #12]
 800eac8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800eacc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ead0:	b94c      	cbnz	r4, 800eae6 <__pow5mult+0x66>
 800ead2:	f240 2171 	movw	r1, #625	; 0x271
 800ead6:	4630      	mov	r0, r6
 800ead8:	f7ff ff12 	bl	800e900 <__i2b>
 800eadc:	2300      	movs	r3, #0
 800eade:	f8c8 0008 	str.w	r0, [r8, #8]
 800eae2:	4604      	mov	r4, r0
 800eae4:	6003      	str	r3, [r0, #0]
 800eae6:	f04f 0900 	mov.w	r9, #0
 800eaea:	07eb      	lsls	r3, r5, #31
 800eaec:	d50a      	bpl.n	800eb04 <__pow5mult+0x84>
 800eaee:	4639      	mov	r1, r7
 800eaf0:	4622      	mov	r2, r4
 800eaf2:	4630      	mov	r0, r6
 800eaf4:	f7ff ff1a 	bl	800e92c <__multiply>
 800eaf8:	4639      	mov	r1, r7
 800eafa:	4680      	mov	r8, r0
 800eafc:	4630      	mov	r0, r6
 800eafe:	f7ff fe49 	bl	800e794 <_Bfree>
 800eb02:	4647      	mov	r7, r8
 800eb04:	106d      	asrs	r5, r5, #1
 800eb06:	d00b      	beq.n	800eb20 <__pow5mult+0xa0>
 800eb08:	6820      	ldr	r0, [r4, #0]
 800eb0a:	b938      	cbnz	r0, 800eb1c <__pow5mult+0x9c>
 800eb0c:	4622      	mov	r2, r4
 800eb0e:	4621      	mov	r1, r4
 800eb10:	4630      	mov	r0, r6
 800eb12:	f7ff ff0b 	bl	800e92c <__multiply>
 800eb16:	6020      	str	r0, [r4, #0]
 800eb18:	f8c0 9000 	str.w	r9, [r0]
 800eb1c:	4604      	mov	r4, r0
 800eb1e:	e7e4      	b.n	800eaea <__pow5mult+0x6a>
 800eb20:	4638      	mov	r0, r7
 800eb22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb26:	bf00      	nop
 800eb28:	08010e00 	.word	0x08010e00
 800eb2c:	08010c36 	.word	0x08010c36
 800eb30:	08010cb6 	.word	0x08010cb6

0800eb34 <__lshift>:
 800eb34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb38:	460c      	mov	r4, r1
 800eb3a:	6849      	ldr	r1, [r1, #4]
 800eb3c:	6923      	ldr	r3, [r4, #16]
 800eb3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eb42:	68a3      	ldr	r3, [r4, #8]
 800eb44:	4607      	mov	r7, r0
 800eb46:	4691      	mov	r9, r2
 800eb48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eb4c:	f108 0601 	add.w	r6, r8, #1
 800eb50:	42b3      	cmp	r3, r6
 800eb52:	db0b      	blt.n	800eb6c <__lshift+0x38>
 800eb54:	4638      	mov	r0, r7
 800eb56:	f7ff fddd 	bl	800e714 <_Balloc>
 800eb5a:	4605      	mov	r5, r0
 800eb5c:	b948      	cbnz	r0, 800eb72 <__lshift+0x3e>
 800eb5e:	4602      	mov	r2, r0
 800eb60:	4b28      	ldr	r3, [pc, #160]	; (800ec04 <__lshift+0xd0>)
 800eb62:	4829      	ldr	r0, [pc, #164]	; (800ec08 <__lshift+0xd4>)
 800eb64:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800eb68:	f000 fd68 	bl	800f63c <__assert_func>
 800eb6c:	3101      	adds	r1, #1
 800eb6e:	005b      	lsls	r3, r3, #1
 800eb70:	e7ee      	b.n	800eb50 <__lshift+0x1c>
 800eb72:	2300      	movs	r3, #0
 800eb74:	f100 0114 	add.w	r1, r0, #20
 800eb78:	f100 0210 	add.w	r2, r0, #16
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	4553      	cmp	r3, sl
 800eb80:	db33      	blt.n	800ebea <__lshift+0xb6>
 800eb82:	6920      	ldr	r0, [r4, #16]
 800eb84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eb88:	f104 0314 	add.w	r3, r4, #20
 800eb8c:	f019 091f 	ands.w	r9, r9, #31
 800eb90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eb94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eb98:	d02b      	beq.n	800ebf2 <__lshift+0xbe>
 800eb9a:	f1c9 0e20 	rsb	lr, r9, #32
 800eb9e:	468a      	mov	sl, r1
 800eba0:	2200      	movs	r2, #0
 800eba2:	6818      	ldr	r0, [r3, #0]
 800eba4:	fa00 f009 	lsl.w	r0, r0, r9
 800eba8:	4310      	orrs	r0, r2
 800ebaa:	f84a 0b04 	str.w	r0, [sl], #4
 800ebae:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebb2:	459c      	cmp	ip, r3
 800ebb4:	fa22 f20e 	lsr.w	r2, r2, lr
 800ebb8:	d8f3      	bhi.n	800eba2 <__lshift+0x6e>
 800ebba:	ebac 0304 	sub.w	r3, ip, r4
 800ebbe:	3b15      	subs	r3, #21
 800ebc0:	f023 0303 	bic.w	r3, r3, #3
 800ebc4:	3304      	adds	r3, #4
 800ebc6:	f104 0015 	add.w	r0, r4, #21
 800ebca:	4584      	cmp	ip, r0
 800ebcc:	bf38      	it	cc
 800ebce:	2304      	movcc	r3, #4
 800ebd0:	50ca      	str	r2, [r1, r3]
 800ebd2:	b10a      	cbz	r2, 800ebd8 <__lshift+0xa4>
 800ebd4:	f108 0602 	add.w	r6, r8, #2
 800ebd8:	3e01      	subs	r6, #1
 800ebda:	4638      	mov	r0, r7
 800ebdc:	612e      	str	r6, [r5, #16]
 800ebde:	4621      	mov	r1, r4
 800ebe0:	f7ff fdd8 	bl	800e794 <_Bfree>
 800ebe4:	4628      	mov	r0, r5
 800ebe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebea:	f842 0f04 	str.w	r0, [r2, #4]!
 800ebee:	3301      	adds	r3, #1
 800ebf0:	e7c5      	b.n	800eb7e <__lshift+0x4a>
 800ebf2:	3904      	subs	r1, #4
 800ebf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebf8:	f841 2f04 	str.w	r2, [r1, #4]!
 800ebfc:	459c      	cmp	ip, r3
 800ebfe:	d8f9      	bhi.n	800ebf4 <__lshift+0xc0>
 800ec00:	e7ea      	b.n	800ebd8 <__lshift+0xa4>
 800ec02:	bf00      	nop
 800ec04:	08010ca5 	.word	0x08010ca5
 800ec08:	08010cb6 	.word	0x08010cb6

0800ec0c <__mcmp>:
 800ec0c:	b530      	push	{r4, r5, lr}
 800ec0e:	6902      	ldr	r2, [r0, #16]
 800ec10:	690c      	ldr	r4, [r1, #16]
 800ec12:	1b12      	subs	r2, r2, r4
 800ec14:	d10e      	bne.n	800ec34 <__mcmp+0x28>
 800ec16:	f100 0314 	add.w	r3, r0, #20
 800ec1a:	3114      	adds	r1, #20
 800ec1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ec20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ec24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ec28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ec2c:	42a5      	cmp	r5, r4
 800ec2e:	d003      	beq.n	800ec38 <__mcmp+0x2c>
 800ec30:	d305      	bcc.n	800ec3e <__mcmp+0x32>
 800ec32:	2201      	movs	r2, #1
 800ec34:	4610      	mov	r0, r2
 800ec36:	bd30      	pop	{r4, r5, pc}
 800ec38:	4283      	cmp	r3, r0
 800ec3a:	d3f3      	bcc.n	800ec24 <__mcmp+0x18>
 800ec3c:	e7fa      	b.n	800ec34 <__mcmp+0x28>
 800ec3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec42:	e7f7      	b.n	800ec34 <__mcmp+0x28>

0800ec44 <__mdiff>:
 800ec44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec48:	460c      	mov	r4, r1
 800ec4a:	4606      	mov	r6, r0
 800ec4c:	4611      	mov	r1, r2
 800ec4e:	4620      	mov	r0, r4
 800ec50:	4690      	mov	r8, r2
 800ec52:	f7ff ffdb 	bl	800ec0c <__mcmp>
 800ec56:	1e05      	subs	r5, r0, #0
 800ec58:	d110      	bne.n	800ec7c <__mdiff+0x38>
 800ec5a:	4629      	mov	r1, r5
 800ec5c:	4630      	mov	r0, r6
 800ec5e:	f7ff fd59 	bl	800e714 <_Balloc>
 800ec62:	b930      	cbnz	r0, 800ec72 <__mdiff+0x2e>
 800ec64:	4b3a      	ldr	r3, [pc, #232]	; (800ed50 <__mdiff+0x10c>)
 800ec66:	4602      	mov	r2, r0
 800ec68:	f240 2137 	movw	r1, #567	; 0x237
 800ec6c:	4839      	ldr	r0, [pc, #228]	; (800ed54 <__mdiff+0x110>)
 800ec6e:	f000 fce5 	bl	800f63c <__assert_func>
 800ec72:	2301      	movs	r3, #1
 800ec74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ec78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec7c:	bfa4      	itt	ge
 800ec7e:	4643      	movge	r3, r8
 800ec80:	46a0      	movge	r8, r4
 800ec82:	4630      	mov	r0, r6
 800ec84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ec88:	bfa6      	itte	ge
 800ec8a:	461c      	movge	r4, r3
 800ec8c:	2500      	movge	r5, #0
 800ec8e:	2501      	movlt	r5, #1
 800ec90:	f7ff fd40 	bl	800e714 <_Balloc>
 800ec94:	b920      	cbnz	r0, 800eca0 <__mdiff+0x5c>
 800ec96:	4b2e      	ldr	r3, [pc, #184]	; (800ed50 <__mdiff+0x10c>)
 800ec98:	4602      	mov	r2, r0
 800ec9a:	f240 2145 	movw	r1, #581	; 0x245
 800ec9e:	e7e5      	b.n	800ec6c <__mdiff+0x28>
 800eca0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eca4:	6926      	ldr	r6, [r4, #16]
 800eca6:	60c5      	str	r5, [r0, #12]
 800eca8:	f104 0914 	add.w	r9, r4, #20
 800ecac:	f108 0514 	add.w	r5, r8, #20
 800ecb0:	f100 0e14 	add.w	lr, r0, #20
 800ecb4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ecb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ecbc:	f108 0210 	add.w	r2, r8, #16
 800ecc0:	46f2      	mov	sl, lr
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	f859 3b04 	ldr.w	r3, [r9], #4
 800ecc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eccc:	fa11 f88b 	uxtah	r8, r1, fp
 800ecd0:	b299      	uxth	r1, r3
 800ecd2:	0c1b      	lsrs	r3, r3, #16
 800ecd4:	eba8 0801 	sub.w	r8, r8, r1
 800ecd8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ecdc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ece0:	fa1f f888 	uxth.w	r8, r8
 800ece4:	1419      	asrs	r1, r3, #16
 800ece6:	454e      	cmp	r6, r9
 800ece8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ecec:	f84a 3b04 	str.w	r3, [sl], #4
 800ecf0:	d8e8      	bhi.n	800ecc4 <__mdiff+0x80>
 800ecf2:	1b33      	subs	r3, r6, r4
 800ecf4:	3b15      	subs	r3, #21
 800ecf6:	f023 0303 	bic.w	r3, r3, #3
 800ecfa:	3304      	adds	r3, #4
 800ecfc:	3415      	adds	r4, #21
 800ecfe:	42a6      	cmp	r6, r4
 800ed00:	bf38      	it	cc
 800ed02:	2304      	movcc	r3, #4
 800ed04:	441d      	add	r5, r3
 800ed06:	4473      	add	r3, lr
 800ed08:	469e      	mov	lr, r3
 800ed0a:	462e      	mov	r6, r5
 800ed0c:	4566      	cmp	r6, ip
 800ed0e:	d30e      	bcc.n	800ed2e <__mdiff+0xea>
 800ed10:	f10c 0203 	add.w	r2, ip, #3
 800ed14:	1b52      	subs	r2, r2, r5
 800ed16:	f022 0203 	bic.w	r2, r2, #3
 800ed1a:	3d03      	subs	r5, #3
 800ed1c:	45ac      	cmp	ip, r5
 800ed1e:	bf38      	it	cc
 800ed20:	2200      	movcc	r2, #0
 800ed22:	4413      	add	r3, r2
 800ed24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ed28:	b17a      	cbz	r2, 800ed4a <__mdiff+0x106>
 800ed2a:	6107      	str	r7, [r0, #16]
 800ed2c:	e7a4      	b.n	800ec78 <__mdiff+0x34>
 800ed2e:	f856 8b04 	ldr.w	r8, [r6], #4
 800ed32:	fa11 f288 	uxtah	r2, r1, r8
 800ed36:	1414      	asrs	r4, r2, #16
 800ed38:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ed3c:	b292      	uxth	r2, r2
 800ed3e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ed42:	f84e 2b04 	str.w	r2, [lr], #4
 800ed46:	1421      	asrs	r1, r4, #16
 800ed48:	e7e0      	b.n	800ed0c <__mdiff+0xc8>
 800ed4a:	3f01      	subs	r7, #1
 800ed4c:	e7ea      	b.n	800ed24 <__mdiff+0xe0>
 800ed4e:	bf00      	nop
 800ed50:	08010ca5 	.word	0x08010ca5
 800ed54:	08010cb6 	.word	0x08010cb6

0800ed58 <__d2b>:
 800ed58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ed5c:	460f      	mov	r7, r1
 800ed5e:	2101      	movs	r1, #1
 800ed60:	ec59 8b10 	vmov	r8, r9, d0
 800ed64:	4616      	mov	r6, r2
 800ed66:	f7ff fcd5 	bl	800e714 <_Balloc>
 800ed6a:	4604      	mov	r4, r0
 800ed6c:	b930      	cbnz	r0, 800ed7c <__d2b+0x24>
 800ed6e:	4602      	mov	r2, r0
 800ed70:	4b24      	ldr	r3, [pc, #144]	; (800ee04 <__d2b+0xac>)
 800ed72:	4825      	ldr	r0, [pc, #148]	; (800ee08 <__d2b+0xb0>)
 800ed74:	f240 310f 	movw	r1, #783	; 0x30f
 800ed78:	f000 fc60 	bl	800f63c <__assert_func>
 800ed7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ed80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed84:	bb2d      	cbnz	r5, 800edd2 <__d2b+0x7a>
 800ed86:	9301      	str	r3, [sp, #4]
 800ed88:	f1b8 0300 	subs.w	r3, r8, #0
 800ed8c:	d026      	beq.n	800eddc <__d2b+0x84>
 800ed8e:	4668      	mov	r0, sp
 800ed90:	9300      	str	r3, [sp, #0]
 800ed92:	f7ff fd87 	bl	800e8a4 <__lo0bits>
 800ed96:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ed9a:	b1e8      	cbz	r0, 800edd8 <__d2b+0x80>
 800ed9c:	f1c0 0320 	rsb	r3, r0, #32
 800eda0:	fa02 f303 	lsl.w	r3, r2, r3
 800eda4:	430b      	orrs	r3, r1
 800eda6:	40c2      	lsrs	r2, r0
 800eda8:	6163      	str	r3, [r4, #20]
 800edaa:	9201      	str	r2, [sp, #4]
 800edac:	9b01      	ldr	r3, [sp, #4]
 800edae:	61a3      	str	r3, [r4, #24]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	bf14      	ite	ne
 800edb4:	2202      	movne	r2, #2
 800edb6:	2201      	moveq	r2, #1
 800edb8:	6122      	str	r2, [r4, #16]
 800edba:	b1bd      	cbz	r5, 800edec <__d2b+0x94>
 800edbc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800edc0:	4405      	add	r5, r0
 800edc2:	603d      	str	r5, [r7, #0]
 800edc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800edc8:	6030      	str	r0, [r6, #0]
 800edca:	4620      	mov	r0, r4
 800edcc:	b003      	add	sp, #12
 800edce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800edd6:	e7d6      	b.n	800ed86 <__d2b+0x2e>
 800edd8:	6161      	str	r1, [r4, #20]
 800edda:	e7e7      	b.n	800edac <__d2b+0x54>
 800eddc:	a801      	add	r0, sp, #4
 800edde:	f7ff fd61 	bl	800e8a4 <__lo0bits>
 800ede2:	9b01      	ldr	r3, [sp, #4]
 800ede4:	6163      	str	r3, [r4, #20]
 800ede6:	3020      	adds	r0, #32
 800ede8:	2201      	movs	r2, #1
 800edea:	e7e5      	b.n	800edb8 <__d2b+0x60>
 800edec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800edf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800edf4:	6038      	str	r0, [r7, #0]
 800edf6:	6918      	ldr	r0, [r3, #16]
 800edf8:	f7ff fd34 	bl	800e864 <__hi0bits>
 800edfc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ee00:	e7e2      	b.n	800edc8 <__d2b+0x70>
 800ee02:	bf00      	nop
 800ee04:	08010ca5 	.word	0x08010ca5
 800ee08:	08010cb6 	.word	0x08010cb6

0800ee0c <_mprec_log10>:
 800ee0c:	2817      	cmp	r0, #23
 800ee0e:	b5d0      	push	{r4, r6, r7, lr}
 800ee10:	4604      	mov	r4, r0
 800ee12:	dc07      	bgt.n	800ee24 <_mprec_log10+0x18>
 800ee14:	4b09      	ldr	r3, [pc, #36]	; (800ee3c <_mprec_log10+0x30>)
 800ee16:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800ee1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee1e:	ec41 0b10 	vmov	d0, r0, r1
 800ee22:	bdd0      	pop	{r4, r6, r7, pc}
 800ee24:	4906      	ldr	r1, [pc, #24]	; (800ee40 <_mprec_log10+0x34>)
 800ee26:	4f07      	ldr	r7, [pc, #28]	; (800ee44 <_mprec_log10+0x38>)
 800ee28:	2000      	movs	r0, #0
 800ee2a:	2600      	movs	r6, #0
 800ee2c:	4632      	mov	r2, r6
 800ee2e:	463b      	mov	r3, r7
 800ee30:	f7f1 fbe2 	bl	80005f8 <__aeabi_dmul>
 800ee34:	3c01      	subs	r4, #1
 800ee36:	d1f9      	bne.n	800ee2c <_mprec_log10+0x20>
 800ee38:	e7f1      	b.n	800ee1e <_mprec_log10+0x12>
 800ee3a:	bf00      	nop
 800ee3c:	08010d38 	.word	0x08010d38
 800ee40:	3ff00000 	.word	0x3ff00000
 800ee44:	40240000 	.word	0x40240000

0800ee48 <print_e>:
 800ee48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee4a:	b087      	sub	sp, #28
 800ee4c:	ec43 2b10 	vmov	d0, r2, r3
 800ee50:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ee52:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800ee56:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ee58:	ab04      	add	r3, sp, #16
 800ee5a:	9301      	str	r3, [sp, #4]
 800ee5c:	ab03      	add	r3, sp, #12
 800ee5e:	9300      	str	r3, [sp, #0]
 800ee60:	1c62      	adds	r2, r4, #1
 800ee62:	ab05      	add	r3, sp, #20
 800ee64:	460f      	mov	r7, r1
 800ee66:	2102      	movs	r1, #2
 800ee68:	f7fe fd62 	bl	800d930 <_dtoa_r>
 800ee6c:	9a05      	ldr	r2, [sp, #20]
 800ee6e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d105      	bne.n	800ee82 <print_e+0x3a>
 800ee76:	4601      	mov	r1, r0
 800ee78:	4638      	mov	r0, r7
 800ee7a:	f000 fbd7 	bl	800f62c <strcpy>
 800ee7e:	b007      	add	sp, #28
 800ee80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee82:	463b      	mov	r3, r7
 800ee84:	7801      	ldrb	r1, [r0, #0]
 800ee86:	f803 1b01 	strb.w	r1, [r3], #1
 800ee8a:	2c00      	cmp	r4, #0
 800ee8c:	bfc8      	it	gt
 800ee8e:	2501      	movgt	r5, #1
 800ee90:	212e      	movs	r1, #46	; 0x2e
 800ee92:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800ee96:	b10f      	cbz	r7, 800ee9c <print_e+0x54>
 800ee98:	2c00      	cmp	r4, #0
 800ee9a:	dc37      	bgt.n	800ef0c <print_e+0xc4>
 800ee9c:	2e67      	cmp	r6, #103	; 0x67
 800ee9e:	d046      	beq.n	800ef2e <print_e+0xe6>
 800eea0:	2e47      	cmp	r6, #71	; 0x47
 800eea2:	d046      	beq.n	800ef32 <print_e+0xea>
 800eea4:	212e      	movs	r1, #46	; 0x2e
 800eea6:	2030      	movs	r0, #48	; 0x30
 800eea8:	2c00      	cmp	r4, #0
 800eeaa:	dc38      	bgt.n	800ef1e <print_e+0xd6>
 800eeac:	1e51      	subs	r1, r2, #1
 800eeae:	2900      	cmp	r1, #0
 800eeb0:	bfb8      	it	lt
 800eeb2:	f1c2 0201 	rsblt	r2, r2, #1
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	9105      	str	r1, [sp, #20]
 800eeba:	bfac      	ite	ge
 800eebc:	222b      	movge	r2, #43	; 0x2b
 800eebe:	9205      	strlt	r2, [sp, #20]
 800eec0:	f800 6b02 	strb.w	r6, [r0], #2
 800eec4:	bfa8      	it	ge
 800eec6:	705a      	strbge	r2, [r3, #1]
 800eec8:	9a05      	ldr	r2, [sp, #20]
 800eeca:	bfbc      	itt	lt
 800eecc:	212d      	movlt	r1, #45	; 0x2d
 800eece:	7059      	strblt	r1, [r3, #1]
 800eed0:	2a63      	cmp	r2, #99	; 0x63
 800eed2:	dd0b      	ble.n	800eeec <print_e+0xa4>
 800eed4:	2164      	movs	r1, #100	; 0x64
 800eed6:	fb92 f1f1 	sdiv	r1, r2, r1
 800eeda:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800eede:	1cd8      	adds	r0, r3, #3
 800eee0:	709c      	strb	r4, [r3, #2]
 800eee2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800eee6:	fb03 2201 	mla	r2, r3, r1, r2
 800eeea:	9205      	str	r2, [sp, #20]
 800eeec:	9b05      	ldr	r3, [sp, #20]
 800eeee:	220a      	movs	r2, #10
 800eef0:	fb93 f2f2 	sdiv	r2, r3, r2
 800eef4:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800eef8:	7001      	strb	r1, [r0, #0]
 800eefa:	f06f 0109 	mvn.w	r1, #9
 800eefe:	fb01 3302 	mla	r3, r1, r2, r3
 800ef02:	3330      	adds	r3, #48	; 0x30
 800ef04:	7043      	strb	r3, [r0, #1]
 800ef06:	2300      	movs	r3, #0
 800ef08:	7083      	strb	r3, [r0, #2]
 800ef0a:	e7b8      	b.n	800ee7e <print_e+0x36>
 800ef0c:	b10d      	cbz	r5, 800ef12 <print_e+0xca>
 800ef0e:	f803 1b01 	strb.w	r1, [r3], #1
 800ef12:	7805      	ldrb	r5, [r0, #0]
 800ef14:	f803 5b01 	strb.w	r5, [r3], #1
 800ef18:	3c01      	subs	r4, #1
 800ef1a:	2500      	movs	r5, #0
 800ef1c:	e7b9      	b.n	800ee92 <print_e+0x4a>
 800ef1e:	b10d      	cbz	r5, 800ef24 <print_e+0xdc>
 800ef20:	f803 1b01 	strb.w	r1, [r3], #1
 800ef24:	f803 0b01 	strb.w	r0, [r3], #1
 800ef28:	3c01      	subs	r4, #1
 800ef2a:	2500      	movs	r5, #0
 800ef2c:	e7bc      	b.n	800eea8 <print_e+0x60>
 800ef2e:	2665      	movs	r6, #101	; 0x65
 800ef30:	e7bc      	b.n	800eeac <print_e+0x64>
 800ef32:	2645      	movs	r6, #69	; 0x45
 800ef34:	e7ba      	b.n	800eeac <print_e+0x64>
	...

0800ef38 <_gcvt>:
 800ef38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef3c:	ec55 4b10 	vmov	r4, r5, d0
 800ef40:	b088      	sub	sp, #32
 800ef42:	4681      	mov	r9, r0
 800ef44:	4688      	mov	r8, r1
 800ef46:	4616      	mov	r6, r2
 800ef48:	469a      	mov	sl, r3
 800ef4a:	ee10 0a10 	vmov	r0, s0
 800ef4e:	2200      	movs	r2, #0
 800ef50:	2300      	movs	r3, #0
 800ef52:	4629      	mov	r1, r5
 800ef54:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800ef56:	f7f1 fdc1 	bl	8000adc <__aeabi_dcmplt>
 800ef5a:	b110      	cbz	r0, 800ef62 <_gcvt+0x2a>
 800ef5c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ef60:	461d      	mov	r5, r3
 800ef62:	2200      	movs	r2, #0
 800ef64:	2300      	movs	r3, #0
 800ef66:	4620      	mov	r0, r4
 800ef68:	4629      	mov	r1, r5
 800ef6a:	f7f1 fdad 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef6e:	b138      	cbz	r0, 800ef80 <_gcvt+0x48>
 800ef70:	2330      	movs	r3, #48	; 0x30
 800ef72:	7033      	strb	r3, [r6, #0]
 800ef74:	2300      	movs	r3, #0
 800ef76:	7073      	strb	r3, [r6, #1]
 800ef78:	4630      	mov	r0, r6
 800ef7a:	b008      	add	sp, #32
 800ef7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef80:	a34b      	add	r3, pc, #300	; (adr r3, 800f0b0 <_gcvt+0x178>)
 800ef82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef86:	4620      	mov	r0, r4
 800ef88:	4629      	mov	r1, r5
 800ef8a:	f7f1 fdb1 	bl	8000af0 <__aeabi_dcmple>
 800ef8e:	b158      	cbz	r0, 800efa8 <_gcvt+0x70>
 800ef90:	f108 33ff 	add.w	r3, r8, #4294967295
 800ef94:	9300      	str	r3, [sp, #0]
 800ef96:	e9cd a701 	strd	sl, r7, [sp, #4]
 800ef9a:	4622      	mov	r2, r4
 800ef9c:	462b      	mov	r3, r5
 800ef9e:	4631      	mov	r1, r6
 800efa0:	4648      	mov	r0, r9
 800efa2:	f7ff ff51 	bl	800ee48 <print_e>
 800efa6:	e7e7      	b.n	800ef78 <_gcvt+0x40>
 800efa8:	4640      	mov	r0, r8
 800efaa:	f7ff ff2f 	bl	800ee0c <_mprec_log10>
 800efae:	4622      	mov	r2, r4
 800efb0:	ec51 0b10 	vmov	r0, r1, d0
 800efb4:	462b      	mov	r3, r5
 800efb6:	f7f1 fd9b 	bl	8000af0 <__aeabi_dcmple>
 800efba:	2800      	cmp	r0, #0
 800efbc:	d1e8      	bne.n	800ef90 <_gcvt+0x58>
 800efbe:	ab07      	add	r3, sp, #28
 800efc0:	9301      	str	r3, [sp, #4]
 800efc2:	ab06      	add	r3, sp, #24
 800efc4:	9300      	str	r3, [sp, #0]
 800efc6:	4642      	mov	r2, r8
 800efc8:	ab05      	add	r3, sp, #20
 800efca:	ec45 4b10 	vmov	d0, r4, r5
 800efce:	2102      	movs	r1, #2
 800efd0:	4648      	mov	r0, r9
 800efd2:	f7fe fcad 	bl	800d930 <_dtoa_r>
 800efd6:	9a05      	ldr	r2, [sp, #20]
 800efd8:	f242 730f 	movw	r3, #9999	; 0x270f
 800efdc:	429a      	cmp	r2, r3
 800efde:	d00e      	beq.n	800effe <_gcvt+0xc6>
 800efe0:	4633      	mov	r3, r6
 800efe2:	44b0      	add	r8, r6
 800efe4:	4605      	mov	r5, r0
 800efe6:	f810 1b01 	ldrb.w	r1, [r0], #1
 800efea:	9c05      	ldr	r4, [sp, #20]
 800efec:	eba8 0203 	sub.w	r2, r8, r3
 800eff0:	b109      	cbz	r1, 800eff6 <_gcvt+0xbe>
 800eff2:	2c00      	cmp	r4, #0
 800eff4:	dc08      	bgt.n	800f008 <_gcvt+0xd0>
 800eff6:	2100      	movs	r1, #0
 800eff8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800effc:	e00d      	b.n	800f01a <_gcvt+0xe2>
 800effe:	4601      	mov	r1, r0
 800f000:	4630      	mov	r0, r6
 800f002:	f000 fb13 	bl	800f62c <strcpy>
 800f006:	e7b7      	b.n	800ef78 <_gcvt+0x40>
 800f008:	3c01      	subs	r4, #1
 800f00a:	f803 1b01 	strb.w	r1, [r3], #1
 800f00e:	9405      	str	r4, [sp, #20]
 800f010:	e7e8      	b.n	800efe4 <_gcvt+0xac>
 800f012:	f803 cb01 	strb.w	ip, [r3], #1
 800f016:	3a01      	subs	r2, #1
 800f018:	2101      	movs	r1, #1
 800f01a:	2c00      	cmp	r4, #0
 800f01c:	4620      	mov	r0, r4
 800f01e:	dc2a      	bgt.n	800f076 <_gcvt+0x13e>
 800f020:	b101      	cbz	r1, 800f024 <_gcvt+0xec>
 800f022:	9405      	str	r4, [sp, #20]
 800f024:	b90f      	cbnz	r7, 800f02a <_gcvt+0xf2>
 800f026:	7829      	ldrb	r1, [r5, #0]
 800f028:	b311      	cbz	r1, 800f070 <_gcvt+0x138>
 800f02a:	42b3      	cmp	r3, r6
 800f02c:	bf04      	itt	eq
 800f02e:	2130      	moveq	r1, #48	; 0x30
 800f030:	f803 1b01 	strbeq.w	r1, [r3], #1
 800f034:	212e      	movs	r1, #46	; 0x2e
 800f036:	7019      	strb	r1, [r3, #0]
 800f038:	9905      	ldr	r1, [sp, #20]
 800f03a:	4618      	mov	r0, r3
 800f03c:	2400      	movs	r4, #0
 800f03e:	eba1 0c03 	sub.w	ip, r1, r3
 800f042:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800f046:	eb1c 0f00 	cmn.w	ip, r0
 800f04a:	d41c      	bmi.n	800f086 <_gcvt+0x14e>
 800f04c:	2900      	cmp	r1, #0
 800f04e:	f1c1 0000 	rsb	r0, r1, #0
 800f052:	bfc8      	it	gt
 800f054:	2000      	movgt	r0, #0
 800f056:	f100 0c01 	add.w	ip, r0, #1
 800f05a:	4463      	add	r3, ip
 800f05c:	4401      	add	r1, r0
 800f05e:	b104      	cbz	r4, 800f062 <_gcvt+0x12a>
 800f060:	9105      	str	r1, [sp, #20]
 800f062:	1e69      	subs	r1, r5, #1
 800f064:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f068:	b108      	cbz	r0, 800f06e <_gcvt+0x136>
 800f06a:	2a00      	cmp	r2, #0
 800f06c:	dc0f      	bgt.n	800f08e <_gcvt+0x156>
 800f06e:	b9df      	cbnz	r7, 800f0a8 <_gcvt+0x170>
 800f070:	2200      	movs	r2, #0
 800f072:	701a      	strb	r2, [r3, #0]
 800f074:	e780      	b.n	800ef78 <_gcvt+0x40>
 800f076:	2a00      	cmp	r2, #0
 800f078:	f104 34ff 	add.w	r4, r4, #4294967295
 800f07c:	dcc9      	bgt.n	800f012 <_gcvt+0xda>
 800f07e:	2900      	cmp	r1, #0
 800f080:	d0d0      	beq.n	800f024 <_gcvt+0xec>
 800f082:	9005      	str	r0, [sp, #20]
 800f084:	e7ce      	b.n	800f024 <_gcvt+0xec>
 800f086:	f800 ef01 	strb.w	lr, [r0, #1]!
 800f08a:	2401      	movs	r4, #1
 800f08c:	e7db      	b.n	800f046 <_gcvt+0x10e>
 800f08e:	f803 0b01 	strb.w	r0, [r3], #1
 800f092:	3a01      	subs	r2, #1
 800f094:	e7e6      	b.n	800f064 <_gcvt+0x12c>
 800f096:	f801 5b01 	strb.w	r5, [r1], #1
 800f09a:	1a60      	subs	r0, r4, r1
 800f09c:	2800      	cmp	r0, #0
 800f09e:	dcfa      	bgt.n	800f096 <_gcvt+0x15e>
 800f0a0:	2a00      	cmp	r2, #0
 800f0a2:	bfa8      	it	ge
 800f0a4:	189b      	addge	r3, r3, r2
 800f0a6:	e7e3      	b.n	800f070 <_gcvt+0x138>
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	189c      	adds	r4, r3, r2
 800f0ac:	2530      	movs	r5, #48	; 0x30
 800f0ae:	e7f4      	b.n	800f09a <_gcvt+0x162>
 800f0b0:	eb1c432d 	.word	0xeb1c432d
 800f0b4:	3f1a36e2 	.word	0x3f1a36e2

0800f0b8 <__sfputc_r>:
 800f0b8:	6893      	ldr	r3, [r2, #8]
 800f0ba:	3b01      	subs	r3, #1
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	b410      	push	{r4}
 800f0c0:	6093      	str	r3, [r2, #8]
 800f0c2:	da08      	bge.n	800f0d6 <__sfputc_r+0x1e>
 800f0c4:	6994      	ldr	r4, [r2, #24]
 800f0c6:	42a3      	cmp	r3, r4
 800f0c8:	db01      	blt.n	800f0ce <__sfputc_r+0x16>
 800f0ca:	290a      	cmp	r1, #10
 800f0cc:	d103      	bne.n	800f0d6 <__sfputc_r+0x1e>
 800f0ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0d2:	f7fe ba2e 	b.w	800d532 <__swbuf_r>
 800f0d6:	6813      	ldr	r3, [r2, #0]
 800f0d8:	1c58      	adds	r0, r3, #1
 800f0da:	6010      	str	r0, [r2, #0]
 800f0dc:	7019      	strb	r1, [r3, #0]
 800f0de:	4608      	mov	r0, r1
 800f0e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0e4:	4770      	bx	lr

0800f0e6 <__sfputs_r>:
 800f0e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0e8:	4606      	mov	r6, r0
 800f0ea:	460f      	mov	r7, r1
 800f0ec:	4614      	mov	r4, r2
 800f0ee:	18d5      	adds	r5, r2, r3
 800f0f0:	42ac      	cmp	r4, r5
 800f0f2:	d101      	bne.n	800f0f8 <__sfputs_r+0x12>
 800f0f4:	2000      	movs	r0, #0
 800f0f6:	e007      	b.n	800f108 <__sfputs_r+0x22>
 800f0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0fc:	463a      	mov	r2, r7
 800f0fe:	4630      	mov	r0, r6
 800f100:	f7ff ffda 	bl	800f0b8 <__sfputc_r>
 800f104:	1c43      	adds	r3, r0, #1
 800f106:	d1f3      	bne.n	800f0f0 <__sfputs_r+0xa>
 800f108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f10c <_vfiprintf_r>:
 800f10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f110:	460d      	mov	r5, r1
 800f112:	b09d      	sub	sp, #116	; 0x74
 800f114:	4614      	mov	r4, r2
 800f116:	4698      	mov	r8, r3
 800f118:	4606      	mov	r6, r0
 800f11a:	b118      	cbz	r0, 800f124 <_vfiprintf_r+0x18>
 800f11c:	6a03      	ldr	r3, [r0, #32]
 800f11e:	b90b      	cbnz	r3, 800f124 <_vfiprintf_r+0x18>
 800f120:	f7fe f918 	bl	800d354 <__sinit>
 800f124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f126:	07d9      	lsls	r1, r3, #31
 800f128:	d405      	bmi.n	800f136 <_vfiprintf_r+0x2a>
 800f12a:	89ab      	ldrh	r3, [r5, #12]
 800f12c:	059a      	lsls	r2, r3, #22
 800f12e:	d402      	bmi.n	800f136 <_vfiprintf_r+0x2a>
 800f130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f132:	f7fe fb65 	bl	800d800 <__retarget_lock_acquire_recursive>
 800f136:	89ab      	ldrh	r3, [r5, #12]
 800f138:	071b      	lsls	r3, r3, #28
 800f13a:	d501      	bpl.n	800f140 <_vfiprintf_r+0x34>
 800f13c:	692b      	ldr	r3, [r5, #16]
 800f13e:	b99b      	cbnz	r3, 800f168 <_vfiprintf_r+0x5c>
 800f140:	4629      	mov	r1, r5
 800f142:	4630      	mov	r0, r6
 800f144:	f7fe fa32 	bl	800d5ac <__swsetup_r>
 800f148:	b170      	cbz	r0, 800f168 <_vfiprintf_r+0x5c>
 800f14a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f14c:	07dc      	lsls	r4, r3, #31
 800f14e:	d504      	bpl.n	800f15a <_vfiprintf_r+0x4e>
 800f150:	f04f 30ff 	mov.w	r0, #4294967295
 800f154:	b01d      	add	sp, #116	; 0x74
 800f156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f15a:	89ab      	ldrh	r3, [r5, #12]
 800f15c:	0598      	lsls	r0, r3, #22
 800f15e:	d4f7      	bmi.n	800f150 <_vfiprintf_r+0x44>
 800f160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f162:	f7fe fb4e 	bl	800d802 <__retarget_lock_release_recursive>
 800f166:	e7f3      	b.n	800f150 <_vfiprintf_r+0x44>
 800f168:	2300      	movs	r3, #0
 800f16a:	9309      	str	r3, [sp, #36]	; 0x24
 800f16c:	2320      	movs	r3, #32
 800f16e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f172:	f8cd 800c 	str.w	r8, [sp, #12]
 800f176:	2330      	movs	r3, #48	; 0x30
 800f178:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f32c <_vfiprintf_r+0x220>
 800f17c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f180:	f04f 0901 	mov.w	r9, #1
 800f184:	4623      	mov	r3, r4
 800f186:	469a      	mov	sl, r3
 800f188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f18c:	b10a      	cbz	r2, 800f192 <_vfiprintf_r+0x86>
 800f18e:	2a25      	cmp	r2, #37	; 0x25
 800f190:	d1f9      	bne.n	800f186 <_vfiprintf_r+0x7a>
 800f192:	ebba 0b04 	subs.w	fp, sl, r4
 800f196:	d00b      	beq.n	800f1b0 <_vfiprintf_r+0xa4>
 800f198:	465b      	mov	r3, fp
 800f19a:	4622      	mov	r2, r4
 800f19c:	4629      	mov	r1, r5
 800f19e:	4630      	mov	r0, r6
 800f1a0:	f7ff ffa1 	bl	800f0e6 <__sfputs_r>
 800f1a4:	3001      	adds	r0, #1
 800f1a6:	f000 80a9 	beq.w	800f2fc <_vfiprintf_r+0x1f0>
 800f1aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1ac:	445a      	add	r2, fp
 800f1ae:	9209      	str	r2, [sp, #36]	; 0x24
 800f1b0:	f89a 3000 	ldrb.w	r3, [sl]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	f000 80a1 	beq.w	800f2fc <_vfiprintf_r+0x1f0>
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f1c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1c4:	f10a 0a01 	add.w	sl, sl, #1
 800f1c8:	9304      	str	r3, [sp, #16]
 800f1ca:	9307      	str	r3, [sp, #28]
 800f1cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1d0:	931a      	str	r3, [sp, #104]	; 0x68
 800f1d2:	4654      	mov	r4, sl
 800f1d4:	2205      	movs	r2, #5
 800f1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1da:	4854      	ldr	r0, [pc, #336]	; (800f32c <_vfiprintf_r+0x220>)
 800f1dc:	f7f0 fff8 	bl	80001d0 <memchr>
 800f1e0:	9a04      	ldr	r2, [sp, #16]
 800f1e2:	b9d8      	cbnz	r0, 800f21c <_vfiprintf_r+0x110>
 800f1e4:	06d1      	lsls	r1, r2, #27
 800f1e6:	bf44      	itt	mi
 800f1e8:	2320      	movmi	r3, #32
 800f1ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1ee:	0713      	lsls	r3, r2, #28
 800f1f0:	bf44      	itt	mi
 800f1f2:	232b      	movmi	r3, #43	; 0x2b
 800f1f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1f8:	f89a 3000 	ldrb.w	r3, [sl]
 800f1fc:	2b2a      	cmp	r3, #42	; 0x2a
 800f1fe:	d015      	beq.n	800f22c <_vfiprintf_r+0x120>
 800f200:	9a07      	ldr	r2, [sp, #28]
 800f202:	4654      	mov	r4, sl
 800f204:	2000      	movs	r0, #0
 800f206:	f04f 0c0a 	mov.w	ip, #10
 800f20a:	4621      	mov	r1, r4
 800f20c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f210:	3b30      	subs	r3, #48	; 0x30
 800f212:	2b09      	cmp	r3, #9
 800f214:	d94d      	bls.n	800f2b2 <_vfiprintf_r+0x1a6>
 800f216:	b1b0      	cbz	r0, 800f246 <_vfiprintf_r+0x13a>
 800f218:	9207      	str	r2, [sp, #28]
 800f21a:	e014      	b.n	800f246 <_vfiprintf_r+0x13a>
 800f21c:	eba0 0308 	sub.w	r3, r0, r8
 800f220:	fa09 f303 	lsl.w	r3, r9, r3
 800f224:	4313      	orrs	r3, r2
 800f226:	9304      	str	r3, [sp, #16]
 800f228:	46a2      	mov	sl, r4
 800f22a:	e7d2      	b.n	800f1d2 <_vfiprintf_r+0xc6>
 800f22c:	9b03      	ldr	r3, [sp, #12]
 800f22e:	1d19      	adds	r1, r3, #4
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	9103      	str	r1, [sp, #12]
 800f234:	2b00      	cmp	r3, #0
 800f236:	bfbb      	ittet	lt
 800f238:	425b      	neglt	r3, r3
 800f23a:	f042 0202 	orrlt.w	r2, r2, #2
 800f23e:	9307      	strge	r3, [sp, #28]
 800f240:	9307      	strlt	r3, [sp, #28]
 800f242:	bfb8      	it	lt
 800f244:	9204      	strlt	r2, [sp, #16]
 800f246:	7823      	ldrb	r3, [r4, #0]
 800f248:	2b2e      	cmp	r3, #46	; 0x2e
 800f24a:	d10c      	bne.n	800f266 <_vfiprintf_r+0x15a>
 800f24c:	7863      	ldrb	r3, [r4, #1]
 800f24e:	2b2a      	cmp	r3, #42	; 0x2a
 800f250:	d134      	bne.n	800f2bc <_vfiprintf_r+0x1b0>
 800f252:	9b03      	ldr	r3, [sp, #12]
 800f254:	1d1a      	adds	r2, r3, #4
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	9203      	str	r2, [sp, #12]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	bfb8      	it	lt
 800f25e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f262:	3402      	adds	r4, #2
 800f264:	9305      	str	r3, [sp, #20]
 800f266:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f33c <_vfiprintf_r+0x230>
 800f26a:	7821      	ldrb	r1, [r4, #0]
 800f26c:	2203      	movs	r2, #3
 800f26e:	4650      	mov	r0, sl
 800f270:	f7f0 ffae 	bl	80001d0 <memchr>
 800f274:	b138      	cbz	r0, 800f286 <_vfiprintf_r+0x17a>
 800f276:	9b04      	ldr	r3, [sp, #16]
 800f278:	eba0 000a 	sub.w	r0, r0, sl
 800f27c:	2240      	movs	r2, #64	; 0x40
 800f27e:	4082      	lsls	r2, r0
 800f280:	4313      	orrs	r3, r2
 800f282:	3401      	adds	r4, #1
 800f284:	9304      	str	r3, [sp, #16]
 800f286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f28a:	4829      	ldr	r0, [pc, #164]	; (800f330 <_vfiprintf_r+0x224>)
 800f28c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f290:	2206      	movs	r2, #6
 800f292:	f7f0 ff9d 	bl	80001d0 <memchr>
 800f296:	2800      	cmp	r0, #0
 800f298:	d03f      	beq.n	800f31a <_vfiprintf_r+0x20e>
 800f29a:	4b26      	ldr	r3, [pc, #152]	; (800f334 <_vfiprintf_r+0x228>)
 800f29c:	bb1b      	cbnz	r3, 800f2e6 <_vfiprintf_r+0x1da>
 800f29e:	9b03      	ldr	r3, [sp, #12]
 800f2a0:	3307      	adds	r3, #7
 800f2a2:	f023 0307 	bic.w	r3, r3, #7
 800f2a6:	3308      	adds	r3, #8
 800f2a8:	9303      	str	r3, [sp, #12]
 800f2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2ac:	443b      	add	r3, r7
 800f2ae:	9309      	str	r3, [sp, #36]	; 0x24
 800f2b0:	e768      	b.n	800f184 <_vfiprintf_r+0x78>
 800f2b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2b6:	460c      	mov	r4, r1
 800f2b8:	2001      	movs	r0, #1
 800f2ba:	e7a6      	b.n	800f20a <_vfiprintf_r+0xfe>
 800f2bc:	2300      	movs	r3, #0
 800f2be:	3401      	adds	r4, #1
 800f2c0:	9305      	str	r3, [sp, #20]
 800f2c2:	4619      	mov	r1, r3
 800f2c4:	f04f 0c0a 	mov.w	ip, #10
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2ce:	3a30      	subs	r2, #48	; 0x30
 800f2d0:	2a09      	cmp	r2, #9
 800f2d2:	d903      	bls.n	800f2dc <_vfiprintf_r+0x1d0>
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d0c6      	beq.n	800f266 <_vfiprintf_r+0x15a>
 800f2d8:	9105      	str	r1, [sp, #20]
 800f2da:	e7c4      	b.n	800f266 <_vfiprintf_r+0x15a>
 800f2dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2e0:	4604      	mov	r4, r0
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	e7f0      	b.n	800f2c8 <_vfiprintf_r+0x1bc>
 800f2e6:	ab03      	add	r3, sp, #12
 800f2e8:	9300      	str	r3, [sp, #0]
 800f2ea:	462a      	mov	r2, r5
 800f2ec:	4b12      	ldr	r3, [pc, #72]	; (800f338 <_vfiprintf_r+0x22c>)
 800f2ee:	a904      	add	r1, sp, #16
 800f2f0:	4630      	mov	r0, r6
 800f2f2:	f7fd fbef 	bl	800cad4 <_printf_float>
 800f2f6:	4607      	mov	r7, r0
 800f2f8:	1c78      	adds	r0, r7, #1
 800f2fa:	d1d6      	bne.n	800f2aa <_vfiprintf_r+0x19e>
 800f2fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2fe:	07d9      	lsls	r1, r3, #31
 800f300:	d405      	bmi.n	800f30e <_vfiprintf_r+0x202>
 800f302:	89ab      	ldrh	r3, [r5, #12]
 800f304:	059a      	lsls	r2, r3, #22
 800f306:	d402      	bmi.n	800f30e <_vfiprintf_r+0x202>
 800f308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f30a:	f7fe fa7a 	bl	800d802 <__retarget_lock_release_recursive>
 800f30e:	89ab      	ldrh	r3, [r5, #12]
 800f310:	065b      	lsls	r3, r3, #25
 800f312:	f53f af1d 	bmi.w	800f150 <_vfiprintf_r+0x44>
 800f316:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f318:	e71c      	b.n	800f154 <_vfiprintf_r+0x48>
 800f31a:	ab03      	add	r3, sp, #12
 800f31c:	9300      	str	r3, [sp, #0]
 800f31e:	462a      	mov	r2, r5
 800f320:	4b05      	ldr	r3, [pc, #20]	; (800f338 <_vfiprintf_r+0x22c>)
 800f322:	a904      	add	r1, sp, #16
 800f324:	4630      	mov	r0, r6
 800f326:	f7fd fe79 	bl	800d01c <_printf_i>
 800f32a:	e7e4      	b.n	800f2f6 <_vfiprintf_r+0x1ea>
 800f32c:	08010e0c 	.word	0x08010e0c
 800f330:	08010e16 	.word	0x08010e16
 800f334:	0800cad5 	.word	0x0800cad5
 800f338:	0800f0e7 	.word	0x0800f0e7
 800f33c:	08010e12 	.word	0x08010e12

0800f340 <__sflush_r>:
 800f340:	898a      	ldrh	r2, [r1, #12]
 800f342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f346:	4605      	mov	r5, r0
 800f348:	0710      	lsls	r0, r2, #28
 800f34a:	460c      	mov	r4, r1
 800f34c:	d458      	bmi.n	800f400 <__sflush_r+0xc0>
 800f34e:	684b      	ldr	r3, [r1, #4]
 800f350:	2b00      	cmp	r3, #0
 800f352:	dc05      	bgt.n	800f360 <__sflush_r+0x20>
 800f354:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f356:	2b00      	cmp	r3, #0
 800f358:	dc02      	bgt.n	800f360 <__sflush_r+0x20>
 800f35a:	2000      	movs	r0, #0
 800f35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f360:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f362:	2e00      	cmp	r6, #0
 800f364:	d0f9      	beq.n	800f35a <__sflush_r+0x1a>
 800f366:	2300      	movs	r3, #0
 800f368:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f36c:	682f      	ldr	r7, [r5, #0]
 800f36e:	6a21      	ldr	r1, [r4, #32]
 800f370:	602b      	str	r3, [r5, #0]
 800f372:	d032      	beq.n	800f3da <__sflush_r+0x9a>
 800f374:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f376:	89a3      	ldrh	r3, [r4, #12]
 800f378:	075a      	lsls	r2, r3, #29
 800f37a:	d505      	bpl.n	800f388 <__sflush_r+0x48>
 800f37c:	6863      	ldr	r3, [r4, #4]
 800f37e:	1ac0      	subs	r0, r0, r3
 800f380:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f382:	b10b      	cbz	r3, 800f388 <__sflush_r+0x48>
 800f384:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f386:	1ac0      	subs	r0, r0, r3
 800f388:	2300      	movs	r3, #0
 800f38a:	4602      	mov	r2, r0
 800f38c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f38e:	6a21      	ldr	r1, [r4, #32]
 800f390:	4628      	mov	r0, r5
 800f392:	47b0      	blx	r6
 800f394:	1c43      	adds	r3, r0, #1
 800f396:	89a3      	ldrh	r3, [r4, #12]
 800f398:	d106      	bne.n	800f3a8 <__sflush_r+0x68>
 800f39a:	6829      	ldr	r1, [r5, #0]
 800f39c:	291d      	cmp	r1, #29
 800f39e:	d82b      	bhi.n	800f3f8 <__sflush_r+0xb8>
 800f3a0:	4a29      	ldr	r2, [pc, #164]	; (800f448 <__sflush_r+0x108>)
 800f3a2:	410a      	asrs	r2, r1
 800f3a4:	07d6      	lsls	r6, r2, #31
 800f3a6:	d427      	bmi.n	800f3f8 <__sflush_r+0xb8>
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	6062      	str	r2, [r4, #4]
 800f3ac:	04d9      	lsls	r1, r3, #19
 800f3ae:	6922      	ldr	r2, [r4, #16]
 800f3b0:	6022      	str	r2, [r4, #0]
 800f3b2:	d504      	bpl.n	800f3be <__sflush_r+0x7e>
 800f3b4:	1c42      	adds	r2, r0, #1
 800f3b6:	d101      	bne.n	800f3bc <__sflush_r+0x7c>
 800f3b8:	682b      	ldr	r3, [r5, #0]
 800f3ba:	b903      	cbnz	r3, 800f3be <__sflush_r+0x7e>
 800f3bc:	6560      	str	r0, [r4, #84]	; 0x54
 800f3be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3c0:	602f      	str	r7, [r5, #0]
 800f3c2:	2900      	cmp	r1, #0
 800f3c4:	d0c9      	beq.n	800f35a <__sflush_r+0x1a>
 800f3c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3ca:	4299      	cmp	r1, r3
 800f3cc:	d002      	beq.n	800f3d4 <__sflush_r+0x94>
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	f7ff f8a0 	bl	800e514 <_free_r>
 800f3d4:	2000      	movs	r0, #0
 800f3d6:	6360      	str	r0, [r4, #52]	; 0x34
 800f3d8:	e7c0      	b.n	800f35c <__sflush_r+0x1c>
 800f3da:	2301      	movs	r3, #1
 800f3dc:	4628      	mov	r0, r5
 800f3de:	47b0      	blx	r6
 800f3e0:	1c41      	adds	r1, r0, #1
 800f3e2:	d1c8      	bne.n	800f376 <__sflush_r+0x36>
 800f3e4:	682b      	ldr	r3, [r5, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d0c5      	beq.n	800f376 <__sflush_r+0x36>
 800f3ea:	2b1d      	cmp	r3, #29
 800f3ec:	d001      	beq.n	800f3f2 <__sflush_r+0xb2>
 800f3ee:	2b16      	cmp	r3, #22
 800f3f0:	d101      	bne.n	800f3f6 <__sflush_r+0xb6>
 800f3f2:	602f      	str	r7, [r5, #0]
 800f3f4:	e7b1      	b.n	800f35a <__sflush_r+0x1a>
 800f3f6:	89a3      	ldrh	r3, [r4, #12]
 800f3f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3fc:	81a3      	strh	r3, [r4, #12]
 800f3fe:	e7ad      	b.n	800f35c <__sflush_r+0x1c>
 800f400:	690f      	ldr	r7, [r1, #16]
 800f402:	2f00      	cmp	r7, #0
 800f404:	d0a9      	beq.n	800f35a <__sflush_r+0x1a>
 800f406:	0793      	lsls	r3, r2, #30
 800f408:	680e      	ldr	r6, [r1, #0]
 800f40a:	bf08      	it	eq
 800f40c:	694b      	ldreq	r3, [r1, #20]
 800f40e:	600f      	str	r7, [r1, #0]
 800f410:	bf18      	it	ne
 800f412:	2300      	movne	r3, #0
 800f414:	eba6 0807 	sub.w	r8, r6, r7
 800f418:	608b      	str	r3, [r1, #8]
 800f41a:	f1b8 0f00 	cmp.w	r8, #0
 800f41e:	dd9c      	ble.n	800f35a <__sflush_r+0x1a>
 800f420:	6a21      	ldr	r1, [r4, #32]
 800f422:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f424:	4643      	mov	r3, r8
 800f426:	463a      	mov	r2, r7
 800f428:	4628      	mov	r0, r5
 800f42a:	47b0      	blx	r6
 800f42c:	2800      	cmp	r0, #0
 800f42e:	dc06      	bgt.n	800f43e <__sflush_r+0xfe>
 800f430:	89a3      	ldrh	r3, [r4, #12]
 800f432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f436:	81a3      	strh	r3, [r4, #12]
 800f438:	f04f 30ff 	mov.w	r0, #4294967295
 800f43c:	e78e      	b.n	800f35c <__sflush_r+0x1c>
 800f43e:	4407      	add	r7, r0
 800f440:	eba8 0800 	sub.w	r8, r8, r0
 800f444:	e7e9      	b.n	800f41a <__sflush_r+0xda>
 800f446:	bf00      	nop
 800f448:	dfbffffe 	.word	0xdfbffffe

0800f44c <_fflush_r>:
 800f44c:	b538      	push	{r3, r4, r5, lr}
 800f44e:	690b      	ldr	r3, [r1, #16]
 800f450:	4605      	mov	r5, r0
 800f452:	460c      	mov	r4, r1
 800f454:	b913      	cbnz	r3, 800f45c <_fflush_r+0x10>
 800f456:	2500      	movs	r5, #0
 800f458:	4628      	mov	r0, r5
 800f45a:	bd38      	pop	{r3, r4, r5, pc}
 800f45c:	b118      	cbz	r0, 800f466 <_fflush_r+0x1a>
 800f45e:	6a03      	ldr	r3, [r0, #32]
 800f460:	b90b      	cbnz	r3, 800f466 <_fflush_r+0x1a>
 800f462:	f7fd ff77 	bl	800d354 <__sinit>
 800f466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d0f3      	beq.n	800f456 <_fflush_r+0xa>
 800f46e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f470:	07d0      	lsls	r0, r2, #31
 800f472:	d404      	bmi.n	800f47e <_fflush_r+0x32>
 800f474:	0599      	lsls	r1, r3, #22
 800f476:	d402      	bmi.n	800f47e <_fflush_r+0x32>
 800f478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f47a:	f7fe f9c1 	bl	800d800 <__retarget_lock_acquire_recursive>
 800f47e:	4628      	mov	r0, r5
 800f480:	4621      	mov	r1, r4
 800f482:	f7ff ff5d 	bl	800f340 <__sflush_r>
 800f486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f488:	07da      	lsls	r2, r3, #31
 800f48a:	4605      	mov	r5, r0
 800f48c:	d4e4      	bmi.n	800f458 <_fflush_r+0xc>
 800f48e:	89a3      	ldrh	r3, [r4, #12]
 800f490:	059b      	lsls	r3, r3, #22
 800f492:	d4e1      	bmi.n	800f458 <_fflush_r+0xc>
 800f494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f496:	f7fe f9b4 	bl	800d802 <__retarget_lock_release_recursive>
 800f49a:	e7dd      	b.n	800f458 <_fflush_r+0xc>

0800f49c <__swhatbuf_r>:
 800f49c:	b570      	push	{r4, r5, r6, lr}
 800f49e:	460c      	mov	r4, r1
 800f4a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4a4:	2900      	cmp	r1, #0
 800f4a6:	b096      	sub	sp, #88	; 0x58
 800f4a8:	4615      	mov	r5, r2
 800f4aa:	461e      	mov	r6, r3
 800f4ac:	da0d      	bge.n	800f4ca <__swhatbuf_r+0x2e>
 800f4ae:	89a3      	ldrh	r3, [r4, #12]
 800f4b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f4b4:	f04f 0100 	mov.w	r1, #0
 800f4b8:	bf0c      	ite	eq
 800f4ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f4be:	2340      	movne	r3, #64	; 0x40
 800f4c0:	2000      	movs	r0, #0
 800f4c2:	6031      	str	r1, [r6, #0]
 800f4c4:	602b      	str	r3, [r5, #0]
 800f4c6:	b016      	add	sp, #88	; 0x58
 800f4c8:	bd70      	pop	{r4, r5, r6, pc}
 800f4ca:	466a      	mov	r2, sp
 800f4cc:	f000 f87c 	bl	800f5c8 <_fstat_r>
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	dbec      	blt.n	800f4ae <__swhatbuf_r+0x12>
 800f4d4:	9901      	ldr	r1, [sp, #4]
 800f4d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f4da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f4de:	4259      	negs	r1, r3
 800f4e0:	4159      	adcs	r1, r3
 800f4e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4e6:	e7eb      	b.n	800f4c0 <__swhatbuf_r+0x24>

0800f4e8 <__smakebuf_r>:
 800f4e8:	898b      	ldrh	r3, [r1, #12]
 800f4ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f4ec:	079d      	lsls	r5, r3, #30
 800f4ee:	4606      	mov	r6, r0
 800f4f0:	460c      	mov	r4, r1
 800f4f2:	d507      	bpl.n	800f504 <__smakebuf_r+0x1c>
 800f4f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f4f8:	6023      	str	r3, [r4, #0]
 800f4fa:	6123      	str	r3, [r4, #16]
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	6163      	str	r3, [r4, #20]
 800f500:	b002      	add	sp, #8
 800f502:	bd70      	pop	{r4, r5, r6, pc}
 800f504:	ab01      	add	r3, sp, #4
 800f506:	466a      	mov	r2, sp
 800f508:	f7ff ffc8 	bl	800f49c <__swhatbuf_r>
 800f50c:	9900      	ldr	r1, [sp, #0]
 800f50e:	4605      	mov	r5, r0
 800f510:	4630      	mov	r0, r6
 800f512:	f7ff f873 	bl	800e5fc <_malloc_r>
 800f516:	b948      	cbnz	r0, 800f52c <__smakebuf_r+0x44>
 800f518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f51c:	059a      	lsls	r2, r3, #22
 800f51e:	d4ef      	bmi.n	800f500 <__smakebuf_r+0x18>
 800f520:	f023 0303 	bic.w	r3, r3, #3
 800f524:	f043 0302 	orr.w	r3, r3, #2
 800f528:	81a3      	strh	r3, [r4, #12]
 800f52a:	e7e3      	b.n	800f4f4 <__smakebuf_r+0xc>
 800f52c:	89a3      	ldrh	r3, [r4, #12]
 800f52e:	6020      	str	r0, [r4, #0]
 800f530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f534:	81a3      	strh	r3, [r4, #12]
 800f536:	9b00      	ldr	r3, [sp, #0]
 800f538:	6163      	str	r3, [r4, #20]
 800f53a:	9b01      	ldr	r3, [sp, #4]
 800f53c:	6120      	str	r0, [r4, #16]
 800f53e:	b15b      	cbz	r3, 800f558 <__smakebuf_r+0x70>
 800f540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f544:	4630      	mov	r0, r6
 800f546:	f000 f851 	bl	800f5ec <_isatty_r>
 800f54a:	b128      	cbz	r0, 800f558 <__smakebuf_r+0x70>
 800f54c:	89a3      	ldrh	r3, [r4, #12]
 800f54e:	f023 0303 	bic.w	r3, r3, #3
 800f552:	f043 0301 	orr.w	r3, r3, #1
 800f556:	81a3      	strh	r3, [r4, #12]
 800f558:	89a3      	ldrh	r3, [r4, #12]
 800f55a:	431d      	orrs	r5, r3
 800f55c:	81a5      	strh	r5, [r4, #12]
 800f55e:	e7cf      	b.n	800f500 <__smakebuf_r+0x18>

0800f560 <_putc_r>:
 800f560:	b570      	push	{r4, r5, r6, lr}
 800f562:	460d      	mov	r5, r1
 800f564:	4614      	mov	r4, r2
 800f566:	4606      	mov	r6, r0
 800f568:	b118      	cbz	r0, 800f572 <_putc_r+0x12>
 800f56a:	6a03      	ldr	r3, [r0, #32]
 800f56c:	b90b      	cbnz	r3, 800f572 <_putc_r+0x12>
 800f56e:	f7fd fef1 	bl	800d354 <__sinit>
 800f572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f574:	07d8      	lsls	r0, r3, #31
 800f576:	d405      	bmi.n	800f584 <_putc_r+0x24>
 800f578:	89a3      	ldrh	r3, [r4, #12]
 800f57a:	0599      	lsls	r1, r3, #22
 800f57c:	d402      	bmi.n	800f584 <_putc_r+0x24>
 800f57e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f580:	f7fe f93e 	bl	800d800 <__retarget_lock_acquire_recursive>
 800f584:	68a3      	ldr	r3, [r4, #8]
 800f586:	3b01      	subs	r3, #1
 800f588:	2b00      	cmp	r3, #0
 800f58a:	60a3      	str	r3, [r4, #8]
 800f58c:	da05      	bge.n	800f59a <_putc_r+0x3a>
 800f58e:	69a2      	ldr	r2, [r4, #24]
 800f590:	4293      	cmp	r3, r2
 800f592:	db12      	blt.n	800f5ba <_putc_r+0x5a>
 800f594:	b2eb      	uxtb	r3, r5
 800f596:	2b0a      	cmp	r3, #10
 800f598:	d00f      	beq.n	800f5ba <_putc_r+0x5a>
 800f59a:	6823      	ldr	r3, [r4, #0]
 800f59c:	1c5a      	adds	r2, r3, #1
 800f59e:	6022      	str	r2, [r4, #0]
 800f5a0:	701d      	strb	r5, [r3, #0]
 800f5a2:	b2ed      	uxtb	r5, r5
 800f5a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5a6:	07da      	lsls	r2, r3, #31
 800f5a8:	d405      	bmi.n	800f5b6 <_putc_r+0x56>
 800f5aa:	89a3      	ldrh	r3, [r4, #12]
 800f5ac:	059b      	lsls	r3, r3, #22
 800f5ae:	d402      	bmi.n	800f5b6 <_putc_r+0x56>
 800f5b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5b2:	f7fe f926 	bl	800d802 <__retarget_lock_release_recursive>
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	bd70      	pop	{r4, r5, r6, pc}
 800f5ba:	4629      	mov	r1, r5
 800f5bc:	4622      	mov	r2, r4
 800f5be:	4630      	mov	r0, r6
 800f5c0:	f7fd ffb7 	bl	800d532 <__swbuf_r>
 800f5c4:	4605      	mov	r5, r0
 800f5c6:	e7ed      	b.n	800f5a4 <_putc_r+0x44>

0800f5c8 <_fstat_r>:
 800f5c8:	b538      	push	{r3, r4, r5, lr}
 800f5ca:	4d07      	ldr	r5, [pc, #28]	; (800f5e8 <_fstat_r+0x20>)
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	4604      	mov	r4, r0
 800f5d0:	4608      	mov	r0, r1
 800f5d2:	4611      	mov	r1, r2
 800f5d4:	602b      	str	r3, [r5, #0]
 800f5d6:	f7f4 ffec 	bl	80045b2 <_fstat>
 800f5da:	1c43      	adds	r3, r0, #1
 800f5dc:	d102      	bne.n	800f5e4 <_fstat_r+0x1c>
 800f5de:	682b      	ldr	r3, [r5, #0]
 800f5e0:	b103      	cbz	r3, 800f5e4 <_fstat_r+0x1c>
 800f5e2:	6023      	str	r3, [r4, #0]
 800f5e4:	bd38      	pop	{r3, r4, r5, pc}
 800f5e6:	bf00      	nop
 800f5e8:	20004aa0 	.word	0x20004aa0

0800f5ec <_isatty_r>:
 800f5ec:	b538      	push	{r3, r4, r5, lr}
 800f5ee:	4d06      	ldr	r5, [pc, #24]	; (800f608 <_isatty_r+0x1c>)
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	4608      	mov	r0, r1
 800f5f6:	602b      	str	r3, [r5, #0]
 800f5f8:	f7f4 ffeb 	bl	80045d2 <_isatty>
 800f5fc:	1c43      	adds	r3, r0, #1
 800f5fe:	d102      	bne.n	800f606 <_isatty_r+0x1a>
 800f600:	682b      	ldr	r3, [r5, #0]
 800f602:	b103      	cbz	r3, 800f606 <_isatty_r+0x1a>
 800f604:	6023      	str	r3, [r4, #0]
 800f606:	bd38      	pop	{r3, r4, r5, pc}
 800f608:	20004aa0 	.word	0x20004aa0

0800f60c <_sbrk_r>:
 800f60c:	b538      	push	{r3, r4, r5, lr}
 800f60e:	4d06      	ldr	r5, [pc, #24]	; (800f628 <_sbrk_r+0x1c>)
 800f610:	2300      	movs	r3, #0
 800f612:	4604      	mov	r4, r0
 800f614:	4608      	mov	r0, r1
 800f616:	602b      	str	r3, [r5, #0]
 800f618:	f7f4 fff4 	bl	8004604 <_sbrk>
 800f61c:	1c43      	adds	r3, r0, #1
 800f61e:	d102      	bne.n	800f626 <_sbrk_r+0x1a>
 800f620:	682b      	ldr	r3, [r5, #0]
 800f622:	b103      	cbz	r3, 800f626 <_sbrk_r+0x1a>
 800f624:	6023      	str	r3, [r4, #0]
 800f626:	bd38      	pop	{r3, r4, r5, pc}
 800f628:	20004aa0 	.word	0x20004aa0

0800f62c <strcpy>:
 800f62c:	4603      	mov	r3, r0
 800f62e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f632:	f803 2b01 	strb.w	r2, [r3], #1
 800f636:	2a00      	cmp	r2, #0
 800f638:	d1f9      	bne.n	800f62e <strcpy+0x2>
 800f63a:	4770      	bx	lr

0800f63c <__assert_func>:
 800f63c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f63e:	4614      	mov	r4, r2
 800f640:	461a      	mov	r2, r3
 800f642:	4b09      	ldr	r3, [pc, #36]	; (800f668 <__assert_func+0x2c>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	4605      	mov	r5, r0
 800f648:	68d8      	ldr	r0, [r3, #12]
 800f64a:	b14c      	cbz	r4, 800f660 <__assert_func+0x24>
 800f64c:	4b07      	ldr	r3, [pc, #28]	; (800f66c <__assert_func+0x30>)
 800f64e:	9100      	str	r1, [sp, #0]
 800f650:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f654:	4906      	ldr	r1, [pc, #24]	; (800f670 <__assert_func+0x34>)
 800f656:	462b      	mov	r3, r5
 800f658:	f000 f844 	bl	800f6e4 <fiprintf>
 800f65c:	f000 f854 	bl	800f708 <abort>
 800f660:	4b04      	ldr	r3, [pc, #16]	; (800f674 <__assert_func+0x38>)
 800f662:	461c      	mov	r4, r3
 800f664:	e7f3      	b.n	800f64e <__assert_func+0x12>
 800f666:	bf00      	nop
 800f668:	20000074 	.word	0x20000074
 800f66c:	08010e27 	.word	0x08010e27
 800f670:	08010e34 	.word	0x08010e34
 800f674:	08010e62 	.word	0x08010e62

0800f678 <_calloc_r>:
 800f678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f67a:	fba1 2402 	umull	r2, r4, r1, r2
 800f67e:	b94c      	cbnz	r4, 800f694 <_calloc_r+0x1c>
 800f680:	4611      	mov	r1, r2
 800f682:	9201      	str	r2, [sp, #4]
 800f684:	f7fe ffba 	bl	800e5fc <_malloc_r>
 800f688:	9a01      	ldr	r2, [sp, #4]
 800f68a:	4605      	mov	r5, r0
 800f68c:	b930      	cbnz	r0, 800f69c <_calloc_r+0x24>
 800f68e:	4628      	mov	r0, r5
 800f690:	b003      	add	sp, #12
 800f692:	bd30      	pop	{r4, r5, pc}
 800f694:	220c      	movs	r2, #12
 800f696:	6002      	str	r2, [r0, #0]
 800f698:	2500      	movs	r5, #0
 800f69a:	e7f8      	b.n	800f68e <_calloc_r+0x16>
 800f69c:	4621      	mov	r1, r4
 800f69e:	f7fd ffdd 	bl	800d65c <memset>
 800f6a2:	e7f4      	b.n	800f68e <_calloc_r+0x16>

0800f6a4 <__ascii_mbtowc>:
 800f6a4:	b082      	sub	sp, #8
 800f6a6:	b901      	cbnz	r1, 800f6aa <__ascii_mbtowc+0x6>
 800f6a8:	a901      	add	r1, sp, #4
 800f6aa:	b142      	cbz	r2, 800f6be <__ascii_mbtowc+0x1a>
 800f6ac:	b14b      	cbz	r3, 800f6c2 <__ascii_mbtowc+0x1e>
 800f6ae:	7813      	ldrb	r3, [r2, #0]
 800f6b0:	600b      	str	r3, [r1, #0]
 800f6b2:	7812      	ldrb	r2, [r2, #0]
 800f6b4:	1e10      	subs	r0, r2, #0
 800f6b6:	bf18      	it	ne
 800f6b8:	2001      	movne	r0, #1
 800f6ba:	b002      	add	sp, #8
 800f6bc:	4770      	bx	lr
 800f6be:	4610      	mov	r0, r2
 800f6c0:	e7fb      	b.n	800f6ba <__ascii_mbtowc+0x16>
 800f6c2:	f06f 0001 	mvn.w	r0, #1
 800f6c6:	e7f8      	b.n	800f6ba <__ascii_mbtowc+0x16>

0800f6c8 <__ascii_wctomb>:
 800f6c8:	b149      	cbz	r1, 800f6de <__ascii_wctomb+0x16>
 800f6ca:	2aff      	cmp	r2, #255	; 0xff
 800f6cc:	bf85      	ittet	hi
 800f6ce:	238a      	movhi	r3, #138	; 0x8a
 800f6d0:	6003      	strhi	r3, [r0, #0]
 800f6d2:	700a      	strbls	r2, [r1, #0]
 800f6d4:	f04f 30ff 	movhi.w	r0, #4294967295
 800f6d8:	bf98      	it	ls
 800f6da:	2001      	movls	r0, #1
 800f6dc:	4770      	bx	lr
 800f6de:	4608      	mov	r0, r1
 800f6e0:	4770      	bx	lr
	...

0800f6e4 <fiprintf>:
 800f6e4:	b40e      	push	{r1, r2, r3}
 800f6e6:	b503      	push	{r0, r1, lr}
 800f6e8:	4601      	mov	r1, r0
 800f6ea:	ab03      	add	r3, sp, #12
 800f6ec:	4805      	ldr	r0, [pc, #20]	; (800f704 <fiprintf+0x20>)
 800f6ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6f2:	6800      	ldr	r0, [r0, #0]
 800f6f4:	9301      	str	r3, [sp, #4]
 800f6f6:	f7ff fd09 	bl	800f10c <_vfiprintf_r>
 800f6fa:	b002      	add	sp, #8
 800f6fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f700:	b003      	add	sp, #12
 800f702:	4770      	bx	lr
 800f704:	20000074 	.word	0x20000074

0800f708 <abort>:
 800f708:	b508      	push	{r3, lr}
 800f70a:	2006      	movs	r0, #6
 800f70c:	f000 f82c 	bl	800f768 <raise>
 800f710:	2001      	movs	r0, #1
 800f712:	f7f4 ff1b 	bl	800454c <_exit>

0800f716 <_raise_r>:
 800f716:	291f      	cmp	r1, #31
 800f718:	b538      	push	{r3, r4, r5, lr}
 800f71a:	4604      	mov	r4, r0
 800f71c:	460d      	mov	r5, r1
 800f71e:	d904      	bls.n	800f72a <_raise_r+0x14>
 800f720:	2316      	movs	r3, #22
 800f722:	6003      	str	r3, [r0, #0]
 800f724:	f04f 30ff 	mov.w	r0, #4294967295
 800f728:	bd38      	pop	{r3, r4, r5, pc}
 800f72a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f72c:	b112      	cbz	r2, 800f734 <_raise_r+0x1e>
 800f72e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f732:	b94b      	cbnz	r3, 800f748 <_raise_r+0x32>
 800f734:	4620      	mov	r0, r4
 800f736:	f000 f831 	bl	800f79c <_getpid_r>
 800f73a:	462a      	mov	r2, r5
 800f73c:	4601      	mov	r1, r0
 800f73e:	4620      	mov	r0, r4
 800f740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f744:	f000 b818 	b.w	800f778 <_kill_r>
 800f748:	2b01      	cmp	r3, #1
 800f74a:	d00a      	beq.n	800f762 <_raise_r+0x4c>
 800f74c:	1c59      	adds	r1, r3, #1
 800f74e:	d103      	bne.n	800f758 <_raise_r+0x42>
 800f750:	2316      	movs	r3, #22
 800f752:	6003      	str	r3, [r0, #0]
 800f754:	2001      	movs	r0, #1
 800f756:	e7e7      	b.n	800f728 <_raise_r+0x12>
 800f758:	2400      	movs	r4, #0
 800f75a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f75e:	4628      	mov	r0, r5
 800f760:	4798      	blx	r3
 800f762:	2000      	movs	r0, #0
 800f764:	e7e0      	b.n	800f728 <_raise_r+0x12>
	...

0800f768 <raise>:
 800f768:	4b02      	ldr	r3, [pc, #8]	; (800f774 <raise+0xc>)
 800f76a:	4601      	mov	r1, r0
 800f76c:	6818      	ldr	r0, [r3, #0]
 800f76e:	f7ff bfd2 	b.w	800f716 <_raise_r>
 800f772:	bf00      	nop
 800f774:	20000074 	.word	0x20000074

0800f778 <_kill_r>:
 800f778:	b538      	push	{r3, r4, r5, lr}
 800f77a:	4d07      	ldr	r5, [pc, #28]	; (800f798 <_kill_r+0x20>)
 800f77c:	2300      	movs	r3, #0
 800f77e:	4604      	mov	r4, r0
 800f780:	4608      	mov	r0, r1
 800f782:	4611      	mov	r1, r2
 800f784:	602b      	str	r3, [r5, #0]
 800f786:	f7f4 fed1 	bl	800452c <_kill>
 800f78a:	1c43      	adds	r3, r0, #1
 800f78c:	d102      	bne.n	800f794 <_kill_r+0x1c>
 800f78e:	682b      	ldr	r3, [r5, #0]
 800f790:	b103      	cbz	r3, 800f794 <_kill_r+0x1c>
 800f792:	6023      	str	r3, [r4, #0]
 800f794:	bd38      	pop	{r3, r4, r5, pc}
 800f796:	bf00      	nop
 800f798:	20004aa0 	.word	0x20004aa0

0800f79c <_getpid_r>:
 800f79c:	f7f4 bebe 	b.w	800451c <_getpid>

0800f7a0 <pow>:
 800f7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7a2:	ed2d 8b02 	vpush	{d8}
 800f7a6:	eeb0 8a40 	vmov.f32	s16, s0
 800f7aa:	eef0 8a60 	vmov.f32	s17, s1
 800f7ae:	ec55 4b11 	vmov	r4, r5, d1
 800f7b2:	f000 f871 	bl	800f898 <__ieee754_pow>
 800f7b6:	4622      	mov	r2, r4
 800f7b8:	462b      	mov	r3, r5
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	4629      	mov	r1, r5
 800f7be:	ec57 6b10 	vmov	r6, r7, d0
 800f7c2:	f7f1 f9b3 	bl	8000b2c <__aeabi_dcmpun>
 800f7c6:	2800      	cmp	r0, #0
 800f7c8:	d13b      	bne.n	800f842 <pow+0xa2>
 800f7ca:	ec51 0b18 	vmov	r0, r1, d8
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	f7f1 f979 	bl	8000ac8 <__aeabi_dcmpeq>
 800f7d6:	b1b8      	cbz	r0, 800f808 <pow+0x68>
 800f7d8:	2200      	movs	r2, #0
 800f7da:	2300      	movs	r3, #0
 800f7dc:	4620      	mov	r0, r4
 800f7de:	4629      	mov	r1, r5
 800f7e0:	f7f1 f972 	bl	8000ac8 <__aeabi_dcmpeq>
 800f7e4:	2800      	cmp	r0, #0
 800f7e6:	d146      	bne.n	800f876 <pow+0xd6>
 800f7e8:	ec45 4b10 	vmov	d0, r4, r5
 800f7ec:	f000 f848 	bl	800f880 <finite>
 800f7f0:	b338      	cbz	r0, 800f842 <pow+0xa2>
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	4620      	mov	r0, r4
 800f7f8:	4629      	mov	r1, r5
 800f7fa:	f7f1 f96f 	bl	8000adc <__aeabi_dcmplt>
 800f7fe:	b300      	cbz	r0, 800f842 <pow+0xa2>
 800f800:	f7fd ffd4 	bl	800d7ac <__errno>
 800f804:	2322      	movs	r3, #34	; 0x22
 800f806:	e01b      	b.n	800f840 <pow+0xa0>
 800f808:	ec47 6b10 	vmov	d0, r6, r7
 800f80c:	f000 f838 	bl	800f880 <finite>
 800f810:	b9e0      	cbnz	r0, 800f84c <pow+0xac>
 800f812:	eeb0 0a48 	vmov.f32	s0, s16
 800f816:	eef0 0a68 	vmov.f32	s1, s17
 800f81a:	f000 f831 	bl	800f880 <finite>
 800f81e:	b1a8      	cbz	r0, 800f84c <pow+0xac>
 800f820:	ec45 4b10 	vmov	d0, r4, r5
 800f824:	f000 f82c 	bl	800f880 <finite>
 800f828:	b180      	cbz	r0, 800f84c <pow+0xac>
 800f82a:	4632      	mov	r2, r6
 800f82c:	463b      	mov	r3, r7
 800f82e:	4630      	mov	r0, r6
 800f830:	4639      	mov	r1, r7
 800f832:	f7f1 f97b 	bl	8000b2c <__aeabi_dcmpun>
 800f836:	2800      	cmp	r0, #0
 800f838:	d0e2      	beq.n	800f800 <pow+0x60>
 800f83a:	f7fd ffb7 	bl	800d7ac <__errno>
 800f83e:	2321      	movs	r3, #33	; 0x21
 800f840:	6003      	str	r3, [r0, #0]
 800f842:	ecbd 8b02 	vpop	{d8}
 800f846:	ec47 6b10 	vmov	d0, r6, r7
 800f84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f84c:	2200      	movs	r2, #0
 800f84e:	2300      	movs	r3, #0
 800f850:	4630      	mov	r0, r6
 800f852:	4639      	mov	r1, r7
 800f854:	f7f1 f938 	bl	8000ac8 <__aeabi_dcmpeq>
 800f858:	2800      	cmp	r0, #0
 800f85a:	d0f2      	beq.n	800f842 <pow+0xa2>
 800f85c:	eeb0 0a48 	vmov.f32	s0, s16
 800f860:	eef0 0a68 	vmov.f32	s1, s17
 800f864:	f000 f80c 	bl	800f880 <finite>
 800f868:	2800      	cmp	r0, #0
 800f86a:	d0ea      	beq.n	800f842 <pow+0xa2>
 800f86c:	ec45 4b10 	vmov	d0, r4, r5
 800f870:	f000 f806 	bl	800f880 <finite>
 800f874:	e7c3      	b.n	800f7fe <pow+0x5e>
 800f876:	4f01      	ldr	r7, [pc, #4]	; (800f87c <pow+0xdc>)
 800f878:	2600      	movs	r6, #0
 800f87a:	e7e2      	b.n	800f842 <pow+0xa2>
 800f87c:	3ff00000 	.word	0x3ff00000

0800f880 <finite>:
 800f880:	b082      	sub	sp, #8
 800f882:	ed8d 0b00 	vstr	d0, [sp]
 800f886:	9801      	ldr	r0, [sp, #4]
 800f888:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f88c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f890:	0fc0      	lsrs	r0, r0, #31
 800f892:	b002      	add	sp, #8
 800f894:	4770      	bx	lr
	...

0800f898 <__ieee754_pow>:
 800f898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f89c:	ed2d 8b06 	vpush	{d8-d10}
 800f8a0:	b089      	sub	sp, #36	; 0x24
 800f8a2:	ed8d 1b00 	vstr	d1, [sp]
 800f8a6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f8aa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f8ae:	ea58 0102 	orrs.w	r1, r8, r2
 800f8b2:	ec57 6b10 	vmov	r6, r7, d0
 800f8b6:	d115      	bne.n	800f8e4 <__ieee754_pow+0x4c>
 800f8b8:	19b3      	adds	r3, r6, r6
 800f8ba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f8be:	4152      	adcs	r2, r2
 800f8c0:	4299      	cmp	r1, r3
 800f8c2:	4b89      	ldr	r3, [pc, #548]	; (800fae8 <__ieee754_pow+0x250>)
 800f8c4:	4193      	sbcs	r3, r2
 800f8c6:	f080 84d1 	bcs.w	801026c <__ieee754_pow+0x9d4>
 800f8ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8ce:	4630      	mov	r0, r6
 800f8d0:	4639      	mov	r1, r7
 800f8d2:	f7f0 fcdb 	bl	800028c <__adddf3>
 800f8d6:	ec41 0b10 	vmov	d0, r0, r1
 800f8da:	b009      	add	sp, #36	; 0x24
 800f8dc:	ecbd 8b06 	vpop	{d8-d10}
 800f8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8e4:	4b81      	ldr	r3, [pc, #516]	; (800faec <__ieee754_pow+0x254>)
 800f8e6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f8ea:	429c      	cmp	r4, r3
 800f8ec:	ee10 aa10 	vmov	sl, s0
 800f8f0:	463d      	mov	r5, r7
 800f8f2:	dc06      	bgt.n	800f902 <__ieee754_pow+0x6a>
 800f8f4:	d101      	bne.n	800f8fa <__ieee754_pow+0x62>
 800f8f6:	2e00      	cmp	r6, #0
 800f8f8:	d1e7      	bne.n	800f8ca <__ieee754_pow+0x32>
 800f8fa:	4598      	cmp	r8, r3
 800f8fc:	dc01      	bgt.n	800f902 <__ieee754_pow+0x6a>
 800f8fe:	d10f      	bne.n	800f920 <__ieee754_pow+0x88>
 800f900:	b172      	cbz	r2, 800f920 <__ieee754_pow+0x88>
 800f902:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f906:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f90a:	ea55 050a 	orrs.w	r5, r5, sl
 800f90e:	d1dc      	bne.n	800f8ca <__ieee754_pow+0x32>
 800f910:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f914:	18db      	adds	r3, r3, r3
 800f916:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f91a:	4152      	adcs	r2, r2
 800f91c:	429d      	cmp	r5, r3
 800f91e:	e7d0      	b.n	800f8c2 <__ieee754_pow+0x2a>
 800f920:	2d00      	cmp	r5, #0
 800f922:	da3b      	bge.n	800f99c <__ieee754_pow+0x104>
 800f924:	4b72      	ldr	r3, [pc, #456]	; (800faf0 <__ieee754_pow+0x258>)
 800f926:	4598      	cmp	r8, r3
 800f928:	dc51      	bgt.n	800f9ce <__ieee754_pow+0x136>
 800f92a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f92e:	4598      	cmp	r8, r3
 800f930:	f340 84ab 	ble.w	801028a <__ieee754_pow+0x9f2>
 800f934:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f938:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f93c:	2b14      	cmp	r3, #20
 800f93e:	dd0f      	ble.n	800f960 <__ieee754_pow+0xc8>
 800f940:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f944:	fa22 f103 	lsr.w	r1, r2, r3
 800f948:	fa01 f303 	lsl.w	r3, r1, r3
 800f94c:	4293      	cmp	r3, r2
 800f94e:	f040 849c 	bne.w	801028a <__ieee754_pow+0x9f2>
 800f952:	f001 0101 	and.w	r1, r1, #1
 800f956:	f1c1 0302 	rsb	r3, r1, #2
 800f95a:	9304      	str	r3, [sp, #16]
 800f95c:	b182      	cbz	r2, 800f980 <__ieee754_pow+0xe8>
 800f95e:	e05f      	b.n	800fa20 <__ieee754_pow+0x188>
 800f960:	2a00      	cmp	r2, #0
 800f962:	d15b      	bne.n	800fa1c <__ieee754_pow+0x184>
 800f964:	f1c3 0314 	rsb	r3, r3, #20
 800f968:	fa48 f103 	asr.w	r1, r8, r3
 800f96c:	fa01 f303 	lsl.w	r3, r1, r3
 800f970:	4543      	cmp	r3, r8
 800f972:	f040 8487 	bne.w	8010284 <__ieee754_pow+0x9ec>
 800f976:	f001 0101 	and.w	r1, r1, #1
 800f97a:	f1c1 0302 	rsb	r3, r1, #2
 800f97e:	9304      	str	r3, [sp, #16]
 800f980:	4b5c      	ldr	r3, [pc, #368]	; (800faf4 <__ieee754_pow+0x25c>)
 800f982:	4598      	cmp	r8, r3
 800f984:	d132      	bne.n	800f9ec <__ieee754_pow+0x154>
 800f986:	f1b9 0f00 	cmp.w	r9, #0
 800f98a:	f280 8477 	bge.w	801027c <__ieee754_pow+0x9e4>
 800f98e:	4959      	ldr	r1, [pc, #356]	; (800faf4 <__ieee754_pow+0x25c>)
 800f990:	4632      	mov	r2, r6
 800f992:	463b      	mov	r3, r7
 800f994:	2000      	movs	r0, #0
 800f996:	f7f0 ff59 	bl	800084c <__aeabi_ddiv>
 800f99a:	e79c      	b.n	800f8d6 <__ieee754_pow+0x3e>
 800f99c:	2300      	movs	r3, #0
 800f99e:	9304      	str	r3, [sp, #16]
 800f9a0:	2a00      	cmp	r2, #0
 800f9a2:	d13d      	bne.n	800fa20 <__ieee754_pow+0x188>
 800f9a4:	4b51      	ldr	r3, [pc, #324]	; (800faec <__ieee754_pow+0x254>)
 800f9a6:	4598      	cmp	r8, r3
 800f9a8:	d1ea      	bne.n	800f980 <__ieee754_pow+0xe8>
 800f9aa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f9ae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f9b2:	ea53 030a 	orrs.w	r3, r3, sl
 800f9b6:	f000 8459 	beq.w	801026c <__ieee754_pow+0x9d4>
 800f9ba:	4b4f      	ldr	r3, [pc, #316]	; (800faf8 <__ieee754_pow+0x260>)
 800f9bc:	429c      	cmp	r4, r3
 800f9be:	dd08      	ble.n	800f9d2 <__ieee754_pow+0x13a>
 800f9c0:	f1b9 0f00 	cmp.w	r9, #0
 800f9c4:	f2c0 8456 	blt.w	8010274 <__ieee754_pow+0x9dc>
 800f9c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9cc:	e783      	b.n	800f8d6 <__ieee754_pow+0x3e>
 800f9ce:	2302      	movs	r3, #2
 800f9d0:	e7e5      	b.n	800f99e <__ieee754_pow+0x106>
 800f9d2:	f1b9 0f00 	cmp.w	r9, #0
 800f9d6:	f04f 0000 	mov.w	r0, #0
 800f9da:	f04f 0100 	mov.w	r1, #0
 800f9de:	f6bf af7a 	bge.w	800f8d6 <__ieee754_pow+0x3e>
 800f9e2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f9e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f9ea:	e774      	b.n	800f8d6 <__ieee754_pow+0x3e>
 800f9ec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f9f0:	d106      	bne.n	800fa00 <__ieee754_pow+0x168>
 800f9f2:	4632      	mov	r2, r6
 800f9f4:	463b      	mov	r3, r7
 800f9f6:	4630      	mov	r0, r6
 800f9f8:	4639      	mov	r1, r7
 800f9fa:	f7f0 fdfd 	bl	80005f8 <__aeabi_dmul>
 800f9fe:	e76a      	b.n	800f8d6 <__ieee754_pow+0x3e>
 800fa00:	4b3e      	ldr	r3, [pc, #248]	; (800fafc <__ieee754_pow+0x264>)
 800fa02:	4599      	cmp	r9, r3
 800fa04:	d10c      	bne.n	800fa20 <__ieee754_pow+0x188>
 800fa06:	2d00      	cmp	r5, #0
 800fa08:	db0a      	blt.n	800fa20 <__ieee754_pow+0x188>
 800fa0a:	ec47 6b10 	vmov	d0, r6, r7
 800fa0e:	b009      	add	sp, #36	; 0x24
 800fa10:	ecbd 8b06 	vpop	{d8-d10}
 800fa14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa18:	f000 bd20 	b.w	801045c <__ieee754_sqrt>
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	9304      	str	r3, [sp, #16]
 800fa20:	ec47 6b10 	vmov	d0, r6, r7
 800fa24:	f000 fc62 	bl	80102ec <fabs>
 800fa28:	ec51 0b10 	vmov	r0, r1, d0
 800fa2c:	f1ba 0f00 	cmp.w	sl, #0
 800fa30:	d129      	bne.n	800fa86 <__ieee754_pow+0x1ee>
 800fa32:	b124      	cbz	r4, 800fa3e <__ieee754_pow+0x1a6>
 800fa34:	4b2f      	ldr	r3, [pc, #188]	; (800faf4 <__ieee754_pow+0x25c>)
 800fa36:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d123      	bne.n	800fa86 <__ieee754_pow+0x1ee>
 800fa3e:	f1b9 0f00 	cmp.w	r9, #0
 800fa42:	da05      	bge.n	800fa50 <__ieee754_pow+0x1b8>
 800fa44:	4602      	mov	r2, r0
 800fa46:	460b      	mov	r3, r1
 800fa48:	2000      	movs	r0, #0
 800fa4a:	492a      	ldr	r1, [pc, #168]	; (800faf4 <__ieee754_pow+0x25c>)
 800fa4c:	f7f0 fefe 	bl	800084c <__aeabi_ddiv>
 800fa50:	2d00      	cmp	r5, #0
 800fa52:	f6bf af40 	bge.w	800f8d6 <__ieee754_pow+0x3e>
 800fa56:	9b04      	ldr	r3, [sp, #16]
 800fa58:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800fa5c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fa60:	431c      	orrs	r4, r3
 800fa62:	d108      	bne.n	800fa76 <__ieee754_pow+0x1de>
 800fa64:	4602      	mov	r2, r0
 800fa66:	460b      	mov	r3, r1
 800fa68:	4610      	mov	r0, r2
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	f7f0 fc0c 	bl	8000288 <__aeabi_dsub>
 800fa70:	4602      	mov	r2, r0
 800fa72:	460b      	mov	r3, r1
 800fa74:	e78f      	b.n	800f996 <__ieee754_pow+0xfe>
 800fa76:	9b04      	ldr	r3, [sp, #16]
 800fa78:	2b01      	cmp	r3, #1
 800fa7a:	f47f af2c 	bne.w	800f8d6 <__ieee754_pow+0x3e>
 800fa7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa82:	4619      	mov	r1, r3
 800fa84:	e727      	b.n	800f8d6 <__ieee754_pow+0x3e>
 800fa86:	0feb      	lsrs	r3, r5, #31
 800fa88:	3b01      	subs	r3, #1
 800fa8a:	9306      	str	r3, [sp, #24]
 800fa8c:	9a06      	ldr	r2, [sp, #24]
 800fa8e:	9b04      	ldr	r3, [sp, #16]
 800fa90:	4313      	orrs	r3, r2
 800fa92:	d102      	bne.n	800fa9a <__ieee754_pow+0x202>
 800fa94:	4632      	mov	r2, r6
 800fa96:	463b      	mov	r3, r7
 800fa98:	e7e6      	b.n	800fa68 <__ieee754_pow+0x1d0>
 800fa9a:	4b19      	ldr	r3, [pc, #100]	; (800fb00 <__ieee754_pow+0x268>)
 800fa9c:	4598      	cmp	r8, r3
 800fa9e:	f340 80fb 	ble.w	800fc98 <__ieee754_pow+0x400>
 800faa2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800faa6:	4598      	cmp	r8, r3
 800faa8:	4b13      	ldr	r3, [pc, #76]	; (800faf8 <__ieee754_pow+0x260>)
 800faaa:	dd0c      	ble.n	800fac6 <__ieee754_pow+0x22e>
 800faac:	429c      	cmp	r4, r3
 800faae:	dc0f      	bgt.n	800fad0 <__ieee754_pow+0x238>
 800fab0:	f1b9 0f00 	cmp.w	r9, #0
 800fab4:	da0f      	bge.n	800fad6 <__ieee754_pow+0x23e>
 800fab6:	2000      	movs	r0, #0
 800fab8:	b009      	add	sp, #36	; 0x24
 800faba:	ecbd 8b06 	vpop	{d8-d10}
 800fabe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fac2:	f000 bcc2 	b.w	801044a <__math_oflow>
 800fac6:	429c      	cmp	r4, r3
 800fac8:	dbf2      	blt.n	800fab0 <__ieee754_pow+0x218>
 800faca:	4b0a      	ldr	r3, [pc, #40]	; (800faf4 <__ieee754_pow+0x25c>)
 800facc:	429c      	cmp	r4, r3
 800face:	dd19      	ble.n	800fb04 <__ieee754_pow+0x26c>
 800fad0:	f1b9 0f00 	cmp.w	r9, #0
 800fad4:	dcef      	bgt.n	800fab6 <__ieee754_pow+0x21e>
 800fad6:	2000      	movs	r0, #0
 800fad8:	b009      	add	sp, #36	; 0x24
 800fada:	ecbd 8b06 	vpop	{d8-d10}
 800fade:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae2:	f000 bca9 	b.w	8010438 <__math_uflow>
 800fae6:	bf00      	nop
 800fae8:	fff00000 	.word	0xfff00000
 800faec:	7ff00000 	.word	0x7ff00000
 800faf0:	433fffff 	.word	0x433fffff
 800faf4:	3ff00000 	.word	0x3ff00000
 800faf8:	3fefffff 	.word	0x3fefffff
 800fafc:	3fe00000 	.word	0x3fe00000
 800fb00:	41e00000 	.word	0x41e00000
 800fb04:	4b60      	ldr	r3, [pc, #384]	; (800fc88 <__ieee754_pow+0x3f0>)
 800fb06:	2200      	movs	r2, #0
 800fb08:	f7f0 fbbe 	bl	8000288 <__aeabi_dsub>
 800fb0c:	a354      	add	r3, pc, #336	; (adr r3, 800fc60 <__ieee754_pow+0x3c8>)
 800fb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb12:	4604      	mov	r4, r0
 800fb14:	460d      	mov	r5, r1
 800fb16:	f7f0 fd6f 	bl	80005f8 <__aeabi_dmul>
 800fb1a:	a353      	add	r3, pc, #332	; (adr r3, 800fc68 <__ieee754_pow+0x3d0>)
 800fb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb20:	4606      	mov	r6, r0
 800fb22:	460f      	mov	r7, r1
 800fb24:	4620      	mov	r0, r4
 800fb26:	4629      	mov	r1, r5
 800fb28:	f7f0 fd66 	bl	80005f8 <__aeabi_dmul>
 800fb2c:	4b57      	ldr	r3, [pc, #348]	; (800fc8c <__ieee754_pow+0x3f4>)
 800fb2e:	4682      	mov	sl, r0
 800fb30:	468b      	mov	fp, r1
 800fb32:	2200      	movs	r2, #0
 800fb34:	4620      	mov	r0, r4
 800fb36:	4629      	mov	r1, r5
 800fb38:	f7f0 fd5e 	bl	80005f8 <__aeabi_dmul>
 800fb3c:	4602      	mov	r2, r0
 800fb3e:	460b      	mov	r3, r1
 800fb40:	a14b      	add	r1, pc, #300	; (adr r1, 800fc70 <__ieee754_pow+0x3d8>)
 800fb42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb46:	f7f0 fb9f 	bl	8000288 <__aeabi_dsub>
 800fb4a:	4622      	mov	r2, r4
 800fb4c:	462b      	mov	r3, r5
 800fb4e:	f7f0 fd53 	bl	80005f8 <__aeabi_dmul>
 800fb52:	4602      	mov	r2, r0
 800fb54:	460b      	mov	r3, r1
 800fb56:	2000      	movs	r0, #0
 800fb58:	494d      	ldr	r1, [pc, #308]	; (800fc90 <__ieee754_pow+0x3f8>)
 800fb5a:	f7f0 fb95 	bl	8000288 <__aeabi_dsub>
 800fb5e:	4622      	mov	r2, r4
 800fb60:	4680      	mov	r8, r0
 800fb62:	4689      	mov	r9, r1
 800fb64:	462b      	mov	r3, r5
 800fb66:	4620      	mov	r0, r4
 800fb68:	4629      	mov	r1, r5
 800fb6a:	f7f0 fd45 	bl	80005f8 <__aeabi_dmul>
 800fb6e:	4602      	mov	r2, r0
 800fb70:	460b      	mov	r3, r1
 800fb72:	4640      	mov	r0, r8
 800fb74:	4649      	mov	r1, r9
 800fb76:	f7f0 fd3f 	bl	80005f8 <__aeabi_dmul>
 800fb7a:	a33f      	add	r3, pc, #252	; (adr r3, 800fc78 <__ieee754_pow+0x3e0>)
 800fb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb80:	f7f0 fd3a 	bl	80005f8 <__aeabi_dmul>
 800fb84:	4602      	mov	r2, r0
 800fb86:	460b      	mov	r3, r1
 800fb88:	4650      	mov	r0, sl
 800fb8a:	4659      	mov	r1, fp
 800fb8c:	f7f0 fb7c 	bl	8000288 <__aeabi_dsub>
 800fb90:	4602      	mov	r2, r0
 800fb92:	460b      	mov	r3, r1
 800fb94:	4680      	mov	r8, r0
 800fb96:	4689      	mov	r9, r1
 800fb98:	4630      	mov	r0, r6
 800fb9a:	4639      	mov	r1, r7
 800fb9c:	f7f0 fb76 	bl	800028c <__adddf3>
 800fba0:	2000      	movs	r0, #0
 800fba2:	4632      	mov	r2, r6
 800fba4:	463b      	mov	r3, r7
 800fba6:	4604      	mov	r4, r0
 800fba8:	460d      	mov	r5, r1
 800fbaa:	f7f0 fb6d 	bl	8000288 <__aeabi_dsub>
 800fbae:	4602      	mov	r2, r0
 800fbb0:	460b      	mov	r3, r1
 800fbb2:	4640      	mov	r0, r8
 800fbb4:	4649      	mov	r1, r9
 800fbb6:	f7f0 fb67 	bl	8000288 <__aeabi_dsub>
 800fbba:	9b04      	ldr	r3, [sp, #16]
 800fbbc:	9a06      	ldr	r2, [sp, #24]
 800fbbe:	3b01      	subs	r3, #1
 800fbc0:	4313      	orrs	r3, r2
 800fbc2:	4682      	mov	sl, r0
 800fbc4:	468b      	mov	fp, r1
 800fbc6:	f040 81e7 	bne.w	800ff98 <__ieee754_pow+0x700>
 800fbca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800fc80 <__ieee754_pow+0x3e8>
 800fbce:	eeb0 8a47 	vmov.f32	s16, s14
 800fbd2:	eef0 8a67 	vmov.f32	s17, s15
 800fbd6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fbda:	2600      	movs	r6, #0
 800fbdc:	4632      	mov	r2, r6
 800fbde:	463b      	mov	r3, r7
 800fbe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fbe4:	f7f0 fb50 	bl	8000288 <__aeabi_dsub>
 800fbe8:	4622      	mov	r2, r4
 800fbea:	462b      	mov	r3, r5
 800fbec:	f7f0 fd04 	bl	80005f8 <__aeabi_dmul>
 800fbf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbf4:	4680      	mov	r8, r0
 800fbf6:	4689      	mov	r9, r1
 800fbf8:	4650      	mov	r0, sl
 800fbfa:	4659      	mov	r1, fp
 800fbfc:	f7f0 fcfc 	bl	80005f8 <__aeabi_dmul>
 800fc00:	4602      	mov	r2, r0
 800fc02:	460b      	mov	r3, r1
 800fc04:	4640      	mov	r0, r8
 800fc06:	4649      	mov	r1, r9
 800fc08:	f7f0 fb40 	bl	800028c <__adddf3>
 800fc0c:	4632      	mov	r2, r6
 800fc0e:	463b      	mov	r3, r7
 800fc10:	4680      	mov	r8, r0
 800fc12:	4689      	mov	r9, r1
 800fc14:	4620      	mov	r0, r4
 800fc16:	4629      	mov	r1, r5
 800fc18:	f7f0 fcee 	bl	80005f8 <__aeabi_dmul>
 800fc1c:	460b      	mov	r3, r1
 800fc1e:	4604      	mov	r4, r0
 800fc20:	460d      	mov	r5, r1
 800fc22:	4602      	mov	r2, r0
 800fc24:	4649      	mov	r1, r9
 800fc26:	4640      	mov	r0, r8
 800fc28:	f7f0 fb30 	bl	800028c <__adddf3>
 800fc2c:	4b19      	ldr	r3, [pc, #100]	; (800fc94 <__ieee754_pow+0x3fc>)
 800fc2e:	4299      	cmp	r1, r3
 800fc30:	ec45 4b19 	vmov	d9, r4, r5
 800fc34:	4606      	mov	r6, r0
 800fc36:	460f      	mov	r7, r1
 800fc38:	468b      	mov	fp, r1
 800fc3a:	f340 82f0 	ble.w	801021e <__ieee754_pow+0x986>
 800fc3e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800fc42:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800fc46:	4303      	orrs	r3, r0
 800fc48:	f000 81e4 	beq.w	8010014 <__ieee754_pow+0x77c>
 800fc4c:	ec51 0b18 	vmov	r0, r1, d8
 800fc50:	2200      	movs	r2, #0
 800fc52:	2300      	movs	r3, #0
 800fc54:	f7f0 ff42 	bl	8000adc <__aeabi_dcmplt>
 800fc58:	3800      	subs	r0, #0
 800fc5a:	bf18      	it	ne
 800fc5c:	2001      	movne	r0, #1
 800fc5e:	e72b      	b.n	800fab8 <__ieee754_pow+0x220>
 800fc60:	60000000 	.word	0x60000000
 800fc64:	3ff71547 	.word	0x3ff71547
 800fc68:	f85ddf44 	.word	0xf85ddf44
 800fc6c:	3e54ae0b 	.word	0x3e54ae0b
 800fc70:	55555555 	.word	0x55555555
 800fc74:	3fd55555 	.word	0x3fd55555
 800fc78:	652b82fe 	.word	0x652b82fe
 800fc7c:	3ff71547 	.word	0x3ff71547
 800fc80:	00000000 	.word	0x00000000
 800fc84:	bff00000 	.word	0xbff00000
 800fc88:	3ff00000 	.word	0x3ff00000
 800fc8c:	3fd00000 	.word	0x3fd00000
 800fc90:	3fe00000 	.word	0x3fe00000
 800fc94:	408fffff 	.word	0x408fffff
 800fc98:	4bd5      	ldr	r3, [pc, #852]	; (800fff0 <__ieee754_pow+0x758>)
 800fc9a:	402b      	ands	r3, r5
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	b92b      	cbnz	r3, 800fcac <__ieee754_pow+0x414>
 800fca0:	4bd4      	ldr	r3, [pc, #848]	; (800fff4 <__ieee754_pow+0x75c>)
 800fca2:	f7f0 fca9 	bl	80005f8 <__aeabi_dmul>
 800fca6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800fcaa:	460c      	mov	r4, r1
 800fcac:	1523      	asrs	r3, r4, #20
 800fcae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fcb2:	4413      	add	r3, r2
 800fcb4:	9305      	str	r3, [sp, #20]
 800fcb6:	4bd0      	ldr	r3, [pc, #832]	; (800fff8 <__ieee754_pow+0x760>)
 800fcb8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800fcbc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800fcc0:	429c      	cmp	r4, r3
 800fcc2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fcc6:	dd08      	ble.n	800fcda <__ieee754_pow+0x442>
 800fcc8:	4bcc      	ldr	r3, [pc, #816]	; (800fffc <__ieee754_pow+0x764>)
 800fcca:	429c      	cmp	r4, r3
 800fccc:	f340 8162 	ble.w	800ff94 <__ieee754_pow+0x6fc>
 800fcd0:	9b05      	ldr	r3, [sp, #20]
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	9305      	str	r3, [sp, #20]
 800fcd6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800fcda:	2400      	movs	r4, #0
 800fcdc:	00e3      	lsls	r3, r4, #3
 800fcde:	9307      	str	r3, [sp, #28]
 800fce0:	4bc7      	ldr	r3, [pc, #796]	; (8010000 <__ieee754_pow+0x768>)
 800fce2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fce6:	ed93 7b00 	vldr	d7, [r3]
 800fcea:	4629      	mov	r1, r5
 800fcec:	ec53 2b17 	vmov	r2, r3, d7
 800fcf0:	eeb0 9a47 	vmov.f32	s18, s14
 800fcf4:	eef0 9a67 	vmov.f32	s19, s15
 800fcf8:	4682      	mov	sl, r0
 800fcfa:	f7f0 fac5 	bl	8000288 <__aeabi_dsub>
 800fcfe:	4652      	mov	r2, sl
 800fd00:	4606      	mov	r6, r0
 800fd02:	460f      	mov	r7, r1
 800fd04:	462b      	mov	r3, r5
 800fd06:	ec51 0b19 	vmov	r0, r1, d9
 800fd0a:	f7f0 fabf 	bl	800028c <__adddf3>
 800fd0e:	4602      	mov	r2, r0
 800fd10:	460b      	mov	r3, r1
 800fd12:	2000      	movs	r0, #0
 800fd14:	49bb      	ldr	r1, [pc, #748]	; (8010004 <__ieee754_pow+0x76c>)
 800fd16:	f7f0 fd99 	bl	800084c <__aeabi_ddiv>
 800fd1a:	ec41 0b1a 	vmov	d10, r0, r1
 800fd1e:	4602      	mov	r2, r0
 800fd20:	460b      	mov	r3, r1
 800fd22:	4630      	mov	r0, r6
 800fd24:	4639      	mov	r1, r7
 800fd26:	f7f0 fc67 	bl	80005f8 <__aeabi_dmul>
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd30:	9302      	str	r3, [sp, #8]
 800fd32:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fd36:	46ab      	mov	fp, r5
 800fd38:	106d      	asrs	r5, r5, #1
 800fd3a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fd3e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800fd42:	ec41 0b18 	vmov	d8, r0, r1
 800fd46:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	4640      	mov	r0, r8
 800fd4e:	4649      	mov	r1, r9
 800fd50:	4614      	mov	r4, r2
 800fd52:	461d      	mov	r5, r3
 800fd54:	f7f0 fc50 	bl	80005f8 <__aeabi_dmul>
 800fd58:	4602      	mov	r2, r0
 800fd5a:	460b      	mov	r3, r1
 800fd5c:	4630      	mov	r0, r6
 800fd5e:	4639      	mov	r1, r7
 800fd60:	f7f0 fa92 	bl	8000288 <__aeabi_dsub>
 800fd64:	ec53 2b19 	vmov	r2, r3, d9
 800fd68:	4606      	mov	r6, r0
 800fd6a:	460f      	mov	r7, r1
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	4629      	mov	r1, r5
 800fd70:	f7f0 fa8a 	bl	8000288 <__aeabi_dsub>
 800fd74:	4602      	mov	r2, r0
 800fd76:	460b      	mov	r3, r1
 800fd78:	4650      	mov	r0, sl
 800fd7a:	4659      	mov	r1, fp
 800fd7c:	f7f0 fa84 	bl	8000288 <__aeabi_dsub>
 800fd80:	4642      	mov	r2, r8
 800fd82:	464b      	mov	r3, r9
 800fd84:	f7f0 fc38 	bl	80005f8 <__aeabi_dmul>
 800fd88:	4602      	mov	r2, r0
 800fd8a:	460b      	mov	r3, r1
 800fd8c:	4630      	mov	r0, r6
 800fd8e:	4639      	mov	r1, r7
 800fd90:	f7f0 fa7a 	bl	8000288 <__aeabi_dsub>
 800fd94:	ec53 2b1a 	vmov	r2, r3, d10
 800fd98:	f7f0 fc2e 	bl	80005f8 <__aeabi_dmul>
 800fd9c:	ec53 2b18 	vmov	r2, r3, d8
 800fda0:	ec41 0b19 	vmov	d9, r0, r1
 800fda4:	ec51 0b18 	vmov	r0, r1, d8
 800fda8:	f7f0 fc26 	bl	80005f8 <__aeabi_dmul>
 800fdac:	a37c      	add	r3, pc, #496	; (adr r3, 800ffa0 <__ieee754_pow+0x708>)
 800fdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb2:	4604      	mov	r4, r0
 800fdb4:	460d      	mov	r5, r1
 800fdb6:	f7f0 fc1f 	bl	80005f8 <__aeabi_dmul>
 800fdba:	a37b      	add	r3, pc, #492	; (adr r3, 800ffa8 <__ieee754_pow+0x710>)
 800fdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc0:	f7f0 fa64 	bl	800028c <__adddf3>
 800fdc4:	4622      	mov	r2, r4
 800fdc6:	462b      	mov	r3, r5
 800fdc8:	f7f0 fc16 	bl	80005f8 <__aeabi_dmul>
 800fdcc:	a378      	add	r3, pc, #480	; (adr r3, 800ffb0 <__ieee754_pow+0x718>)
 800fdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd2:	f7f0 fa5b 	bl	800028c <__adddf3>
 800fdd6:	4622      	mov	r2, r4
 800fdd8:	462b      	mov	r3, r5
 800fdda:	f7f0 fc0d 	bl	80005f8 <__aeabi_dmul>
 800fdde:	a376      	add	r3, pc, #472	; (adr r3, 800ffb8 <__ieee754_pow+0x720>)
 800fde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde4:	f7f0 fa52 	bl	800028c <__adddf3>
 800fde8:	4622      	mov	r2, r4
 800fdea:	462b      	mov	r3, r5
 800fdec:	f7f0 fc04 	bl	80005f8 <__aeabi_dmul>
 800fdf0:	a373      	add	r3, pc, #460	; (adr r3, 800ffc0 <__ieee754_pow+0x728>)
 800fdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf6:	f7f0 fa49 	bl	800028c <__adddf3>
 800fdfa:	4622      	mov	r2, r4
 800fdfc:	462b      	mov	r3, r5
 800fdfe:	f7f0 fbfb 	bl	80005f8 <__aeabi_dmul>
 800fe02:	a371      	add	r3, pc, #452	; (adr r3, 800ffc8 <__ieee754_pow+0x730>)
 800fe04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe08:	f7f0 fa40 	bl	800028c <__adddf3>
 800fe0c:	4622      	mov	r2, r4
 800fe0e:	4606      	mov	r6, r0
 800fe10:	460f      	mov	r7, r1
 800fe12:	462b      	mov	r3, r5
 800fe14:	4620      	mov	r0, r4
 800fe16:	4629      	mov	r1, r5
 800fe18:	f7f0 fbee 	bl	80005f8 <__aeabi_dmul>
 800fe1c:	4602      	mov	r2, r0
 800fe1e:	460b      	mov	r3, r1
 800fe20:	4630      	mov	r0, r6
 800fe22:	4639      	mov	r1, r7
 800fe24:	f7f0 fbe8 	bl	80005f8 <__aeabi_dmul>
 800fe28:	4642      	mov	r2, r8
 800fe2a:	4604      	mov	r4, r0
 800fe2c:	460d      	mov	r5, r1
 800fe2e:	464b      	mov	r3, r9
 800fe30:	ec51 0b18 	vmov	r0, r1, d8
 800fe34:	f7f0 fa2a 	bl	800028c <__adddf3>
 800fe38:	ec53 2b19 	vmov	r2, r3, d9
 800fe3c:	f7f0 fbdc 	bl	80005f8 <__aeabi_dmul>
 800fe40:	4622      	mov	r2, r4
 800fe42:	462b      	mov	r3, r5
 800fe44:	f7f0 fa22 	bl	800028c <__adddf3>
 800fe48:	4642      	mov	r2, r8
 800fe4a:	4682      	mov	sl, r0
 800fe4c:	468b      	mov	fp, r1
 800fe4e:	464b      	mov	r3, r9
 800fe50:	4640      	mov	r0, r8
 800fe52:	4649      	mov	r1, r9
 800fe54:	f7f0 fbd0 	bl	80005f8 <__aeabi_dmul>
 800fe58:	4b6b      	ldr	r3, [pc, #428]	; (8010008 <__ieee754_pow+0x770>)
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	4606      	mov	r6, r0
 800fe5e:	460f      	mov	r7, r1
 800fe60:	f7f0 fa14 	bl	800028c <__adddf3>
 800fe64:	4652      	mov	r2, sl
 800fe66:	465b      	mov	r3, fp
 800fe68:	f7f0 fa10 	bl	800028c <__adddf3>
 800fe6c:	2000      	movs	r0, #0
 800fe6e:	4604      	mov	r4, r0
 800fe70:	460d      	mov	r5, r1
 800fe72:	4602      	mov	r2, r0
 800fe74:	460b      	mov	r3, r1
 800fe76:	4640      	mov	r0, r8
 800fe78:	4649      	mov	r1, r9
 800fe7a:	f7f0 fbbd 	bl	80005f8 <__aeabi_dmul>
 800fe7e:	4b62      	ldr	r3, [pc, #392]	; (8010008 <__ieee754_pow+0x770>)
 800fe80:	4680      	mov	r8, r0
 800fe82:	4689      	mov	r9, r1
 800fe84:	2200      	movs	r2, #0
 800fe86:	4620      	mov	r0, r4
 800fe88:	4629      	mov	r1, r5
 800fe8a:	f7f0 f9fd 	bl	8000288 <__aeabi_dsub>
 800fe8e:	4632      	mov	r2, r6
 800fe90:	463b      	mov	r3, r7
 800fe92:	f7f0 f9f9 	bl	8000288 <__aeabi_dsub>
 800fe96:	4602      	mov	r2, r0
 800fe98:	460b      	mov	r3, r1
 800fe9a:	4650      	mov	r0, sl
 800fe9c:	4659      	mov	r1, fp
 800fe9e:	f7f0 f9f3 	bl	8000288 <__aeabi_dsub>
 800fea2:	ec53 2b18 	vmov	r2, r3, d8
 800fea6:	f7f0 fba7 	bl	80005f8 <__aeabi_dmul>
 800feaa:	4622      	mov	r2, r4
 800feac:	4606      	mov	r6, r0
 800feae:	460f      	mov	r7, r1
 800feb0:	462b      	mov	r3, r5
 800feb2:	ec51 0b19 	vmov	r0, r1, d9
 800feb6:	f7f0 fb9f 	bl	80005f8 <__aeabi_dmul>
 800feba:	4602      	mov	r2, r0
 800febc:	460b      	mov	r3, r1
 800febe:	4630      	mov	r0, r6
 800fec0:	4639      	mov	r1, r7
 800fec2:	f7f0 f9e3 	bl	800028c <__adddf3>
 800fec6:	4606      	mov	r6, r0
 800fec8:	460f      	mov	r7, r1
 800feca:	4602      	mov	r2, r0
 800fecc:	460b      	mov	r3, r1
 800fece:	4640      	mov	r0, r8
 800fed0:	4649      	mov	r1, r9
 800fed2:	f7f0 f9db 	bl	800028c <__adddf3>
 800fed6:	a33e      	add	r3, pc, #248	; (adr r3, 800ffd0 <__ieee754_pow+0x738>)
 800fed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fedc:	2000      	movs	r0, #0
 800fede:	4604      	mov	r4, r0
 800fee0:	460d      	mov	r5, r1
 800fee2:	f7f0 fb89 	bl	80005f8 <__aeabi_dmul>
 800fee6:	4642      	mov	r2, r8
 800fee8:	ec41 0b18 	vmov	d8, r0, r1
 800feec:	464b      	mov	r3, r9
 800feee:	4620      	mov	r0, r4
 800fef0:	4629      	mov	r1, r5
 800fef2:	f7f0 f9c9 	bl	8000288 <__aeabi_dsub>
 800fef6:	4602      	mov	r2, r0
 800fef8:	460b      	mov	r3, r1
 800fefa:	4630      	mov	r0, r6
 800fefc:	4639      	mov	r1, r7
 800fefe:	f7f0 f9c3 	bl	8000288 <__aeabi_dsub>
 800ff02:	a335      	add	r3, pc, #212	; (adr r3, 800ffd8 <__ieee754_pow+0x740>)
 800ff04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff08:	f7f0 fb76 	bl	80005f8 <__aeabi_dmul>
 800ff0c:	a334      	add	r3, pc, #208	; (adr r3, 800ffe0 <__ieee754_pow+0x748>)
 800ff0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff12:	4606      	mov	r6, r0
 800ff14:	460f      	mov	r7, r1
 800ff16:	4620      	mov	r0, r4
 800ff18:	4629      	mov	r1, r5
 800ff1a:	f7f0 fb6d 	bl	80005f8 <__aeabi_dmul>
 800ff1e:	4602      	mov	r2, r0
 800ff20:	460b      	mov	r3, r1
 800ff22:	4630      	mov	r0, r6
 800ff24:	4639      	mov	r1, r7
 800ff26:	f7f0 f9b1 	bl	800028c <__adddf3>
 800ff2a:	9a07      	ldr	r2, [sp, #28]
 800ff2c:	4b37      	ldr	r3, [pc, #220]	; (801000c <__ieee754_pow+0x774>)
 800ff2e:	4413      	add	r3, r2
 800ff30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff34:	f7f0 f9aa 	bl	800028c <__adddf3>
 800ff38:	4682      	mov	sl, r0
 800ff3a:	9805      	ldr	r0, [sp, #20]
 800ff3c:	468b      	mov	fp, r1
 800ff3e:	f7f0 faf1 	bl	8000524 <__aeabi_i2d>
 800ff42:	9a07      	ldr	r2, [sp, #28]
 800ff44:	4b32      	ldr	r3, [pc, #200]	; (8010010 <__ieee754_pow+0x778>)
 800ff46:	4413      	add	r3, r2
 800ff48:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ff4c:	4606      	mov	r6, r0
 800ff4e:	460f      	mov	r7, r1
 800ff50:	4652      	mov	r2, sl
 800ff52:	465b      	mov	r3, fp
 800ff54:	ec51 0b18 	vmov	r0, r1, d8
 800ff58:	f7f0 f998 	bl	800028c <__adddf3>
 800ff5c:	4642      	mov	r2, r8
 800ff5e:	464b      	mov	r3, r9
 800ff60:	f7f0 f994 	bl	800028c <__adddf3>
 800ff64:	4632      	mov	r2, r6
 800ff66:	463b      	mov	r3, r7
 800ff68:	f7f0 f990 	bl	800028c <__adddf3>
 800ff6c:	2000      	movs	r0, #0
 800ff6e:	4632      	mov	r2, r6
 800ff70:	463b      	mov	r3, r7
 800ff72:	4604      	mov	r4, r0
 800ff74:	460d      	mov	r5, r1
 800ff76:	f7f0 f987 	bl	8000288 <__aeabi_dsub>
 800ff7a:	4642      	mov	r2, r8
 800ff7c:	464b      	mov	r3, r9
 800ff7e:	f7f0 f983 	bl	8000288 <__aeabi_dsub>
 800ff82:	ec53 2b18 	vmov	r2, r3, d8
 800ff86:	f7f0 f97f 	bl	8000288 <__aeabi_dsub>
 800ff8a:	4602      	mov	r2, r0
 800ff8c:	460b      	mov	r3, r1
 800ff8e:	4650      	mov	r0, sl
 800ff90:	4659      	mov	r1, fp
 800ff92:	e610      	b.n	800fbb6 <__ieee754_pow+0x31e>
 800ff94:	2401      	movs	r4, #1
 800ff96:	e6a1      	b.n	800fcdc <__ieee754_pow+0x444>
 800ff98:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ffe8 <__ieee754_pow+0x750>
 800ff9c:	e617      	b.n	800fbce <__ieee754_pow+0x336>
 800ff9e:	bf00      	nop
 800ffa0:	4a454eef 	.word	0x4a454eef
 800ffa4:	3fca7e28 	.word	0x3fca7e28
 800ffa8:	93c9db65 	.word	0x93c9db65
 800ffac:	3fcd864a 	.word	0x3fcd864a
 800ffb0:	a91d4101 	.word	0xa91d4101
 800ffb4:	3fd17460 	.word	0x3fd17460
 800ffb8:	518f264d 	.word	0x518f264d
 800ffbc:	3fd55555 	.word	0x3fd55555
 800ffc0:	db6fabff 	.word	0xdb6fabff
 800ffc4:	3fdb6db6 	.word	0x3fdb6db6
 800ffc8:	33333303 	.word	0x33333303
 800ffcc:	3fe33333 	.word	0x3fe33333
 800ffd0:	e0000000 	.word	0xe0000000
 800ffd4:	3feec709 	.word	0x3feec709
 800ffd8:	dc3a03fd 	.word	0xdc3a03fd
 800ffdc:	3feec709 	.word	0x3feec709
 800ffe0:	145b01f5 	.word	0x145b01f5
 800ffe4:	be3e2fe0 	.word	0xbe3e2fe0
 800ffe8:	00000000 	.word	0x00000000
 800ffec:	3ff00000 	.word	0x3ff00000
 800fff0:	7ff00000 	.word	0x7ff00000
 800fff4:	43400000 	.word	0x43400000
 800fff8:	0003988e 	.word	0x0003988e
 800fffc:	000bb679 	.word	0x000bb679
 8010000:	08010e68 	.word	0x08010e68
 8010004:	3ff00000 	.word	0x3ff00000
 8010008:	40080000 	.word	0x40080000
 801000c:	08010e88 	.word	0x08010e88
 8010010:	08010e78 	.word	0x08010e78
 8010014:	a3b3      	add	r3, pc, #716	; (adr r3, 80102e4 <__ieee754_pow+0xa4c>)
 8010016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801001a:	4640      	mov	r0, r8
 801001c:	4649      	mov	r1, r9
 801001e:	f7f0 f935 	bl	800028c <__adddf3>
 8010022:	4622      	mov	r2, r4
 8010024:	ec41 0b1a 	vmov	d10, r0, r1
 8010028:	462b      	mov	r3, r5
 801002a:	4630      	mov	r0, r6
 801002c:	4639      	mov	r1, r7
 801002e:	f7f0 f92b 	bl	8000288 <__aeabi_dsub>
 8010032:	4602      	mov	r2, r0
 8010034:	460b      	mov	r3, r1
 8010036:	ec51 0b1a 	vmov	r0, r1, d10
 801003a:	f7f0 fd6d 	bl	8000b18 <__aeabi_dcmpgt>
 801003e:	2800      	cmp	r0, #0
 8010040:	f47f ae04 	bne.w	800fc4c <__ieee754_pow+0x3b4>
 8010044:	4aa2      	ldr	r2, [pc, #648]	; (80102d0 <__ieee754_pow+0xa38>)
 8010046:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801004a:	4293      	cmp	r3, r2
 801004c:	f340 8107 	ble.w	801025e <__ieee754_pow+0x9c6>
 8010050:	151b      	asrs	r3, r3, #20
 8010052:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010056:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801005a:	fa4a fa03 	asr.w	sl, sl, r3
 801005e:	44da      	add	sl, fp
 8010060:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010064:	489b      	ldr	r0, [pc, #620]	; (80102d4 <__ieee754_pow+0xa3c>)
 8010066:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801006a:	4108      	asrs	r0, r1
 801006c:	ea00 030a 	and.w	r3, r0, sl
 8010070:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010074:	f1c1 0114 	rsb	r1, r1, #20
 8010078:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801007c:	fa4a fa01 	asr.w	sl, sl, r1
 8010080:	f1bb 0f00 	cmp.w	fp, #0
 8010084:	f04f 0200 	mov.w	r2, #0
 8010088:	4620      	mov	r0, r4
 801008a:	4629      	mov	r1, r5
 801008c:	bfb8      	it	lt
 801008e:	f1ca 0a00 	rsblt	sl, sl, #0
 8010092:	f7f0 f8f9 	bl	8000288 <__aeabi_dsub>
 8010096:	ec41 0b19 	vmov	d9, r0, r1
 801009a:	4642      	mov	r2, r8
 801009c:	464b      	mov	r3, r9
 801009e:	ec51 0b19 	vmov	r0, r1, d9
 80100a2:	f7f0 f8f3 	bl	800028c <__adddf3>
 80100a6:	a37a      	add	r3, pc, #488	; (adr r3, 8010290 <__ieee754_pow+0x9f8>)
 80100a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ac:	2000      	movs	r0, #0
 80100ae:	4604      	mov	r4, r0
 80100b0:	460d      	mov	r5, r1
 80100b2:	f7f0 faa1 	bl	80005f8 <__aeabi_dmul>
 80100b6:	ec53 2b19 	vmov	r2, r3, d9
 80100ba:	4606      	mov	r6, r0
 80100bc:	460f      	mov	r7, r1
 80100be:	4620      	mov	r0, r4
 80100c0:	4629      	mov	r1, r5
 80100c2:	f7f0 f8e1 	bl	8000288 <__aeabi_dsub>
 80100c6:	4602      	mov	r2, r0
 80100c8:	460b      	mov	r3, r1
 80100ca:	4640      	mov	r0, r8
 80100cc:	4649      	mov	r1, r9
 80100ce:	f7f0 f8db 	bl	8000288 <__aeabi_dsub>
 80100d2:	a371      	add	r3, pc, #452	; (adr r3, 8010298 <__ieee754_pow+0xa00>)
 80100d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d8:	f7f0 fa8e 	bl	80005f8 <__aeabi_dmul>
 80100dc:	a370      	add	r3, pc, #448	; (adr r3, 80102a0 <__ieee754_pow+0xa08>)
 80100de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e2:	4680      	mov	r8, r0
 80100e4:	4689      	mov	r9, r1
 80100e6:	4620      	mov	r0, r4
 80100e8:	4629      	mov	r1, r5
 80100ea:	f7f0 fa85 	bl	80005f8 <__aeabi_dmul>
 80100ee:	4602      	mov	r2, r0
 80100f0:	460b      	mov	r3, r1
 80100f2:	4640      	mov	r0, r8
 80100f4:	4649      	mov	r1, r9
 80100f6:	f7f0 f8c9 	bl	800028c <__adddf3>
 80100fa:	4604      	mov	r4, r0
 80100fc:	460d      	mov	r5, r1
 80100fe:	4602      	mov	r2, r0
 8010100:	460b      	mov	r3, r1
 8010102:	4630      	mov	r0, r6
 8010104:	4639      	mov	r1, r7
 8010106:	f7f0 f8c1 	bl	800028c <__adddf3>
 801010a:	4632      	mov	r2, r6
 801010c:	463b      	mov	r3, r7
 801010e:	4680      	mov	r8, r0
 8010110:	4689      	mov	r9, r1
 8010112:	f7f0 f8b9 	bl	8000288 <__aeabi_dsub>
 8010116:	4602      	mov	r2, r0
 8010118:	460b      	mov	r3, r1
 801011a:	4620      	mov	r0, r4
 801011c:	4629      	mov	r1, r5
 801011e:	f7f0 f8b3 	bl	8000288 <__aeabi_dsub>
 8010122:	4642      	mov	r2, r8
 8010124:	4606      	mov	r6, r0
 8010126:	460f      	mov	r7, r1
 8010128:	464b      	mov	r3, r9
 801012a:	4640      	mov	r0, r8
 801012c:	4649      	mov	r1, r9
 801012e:	f7f0 fa63 	bl	80005f8 <__aeabi_dmul>
 8010132:	a35d      	add	r3, pc, #372	; (adr r3, 80102a8 <__ieee754_pow+0xa10>)
 8010134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010138:	4604      	mov	r4, r0
 801013a:	460d      	mov	r5, r1
 801013c:	f7f0 fa5c 	bl	80005f8 <__aeabi_dmul>
 8010140:	a35b      	add	r3, pc, #364	; (adr r3, 80102b0 <__ieee754_pow+0xa18>)
 8010142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010146:	f7f0 f89f 	bl	8000288 <__aeabi_dsub>
 801014a:	4622      	mov	r2, r4
 801014c:	462b      	mov	r3, r5
 801014e:	f7f0 fa53 	bl	80005f8 <__aeabi_dmul>
 8010152:	a359      	add	r3, pc, #356	; (adr r3, 80102b8 <__ieee754_pow+0xa20>)
 8010154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010158:	f7f0 f898 	bl	800028c <__adddf3>
 801015c:	4622      	mov	r2, r4
 801015e:	462b      	mov	r3, r5
 8010160:	f7f0 fa4a 	bl	80005f8 <__aeabi_dmul>
 8010164:	a356      	add	r3, pc, #344	; (adr r3, 80102c0 <__ieee754_pow+0xa28>)
 8010166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801016a:	f7f0 f88d 	bl	8000288 <__aeabi_dsub>
 801016e:	4622      	mov	r2, r4
 8010170:	462b      	mov	r3, r5
 8010172:	f7f0 fa41 	bl	80005f8 <__aeabi_dmul>
 8010176:	a354      	add	r3, pc, #336	; (adr r3, 80102c8 <__ieee754_pow+0xa30>)
 8010178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017c:	f7f0 f886 	bl	800028c <__adddf3>
 8010180:	4622      	mov	r2, r4
 8010182:	462b      	mov	r3, r5
 8010184:	f7f0 fa38 	bl	80005f8 <__aeabi_dmul>
 8010188:	4602      	mov	r2, r0
 801018a:	460b      	mov	r3, r1
 801018c:	4640      	mov	r0, r8
 801018e:	4649      	mov	r1, r9
 8010190:	f7f0 f87a 	bl	8000288 <__aeabi_dsub>
 8010194:	4604      	mov	r4, r0
 8010196:	460d      	mov	r5, r1
 8010198:	4602      	mov	r2, r0
 801019a:	460b      	mov	r3, r1
 801019c:	4640      	mov	r0, r8
 801019e:	4649      	mov	r1, r9
 80101a0:	f7f0 fa2a 	bl	80005f8 <__aeabi_dmul>
 80101a4:	2200      	movs	r2, #0
 80101a6:	ec41 0b19 	vmov	d9, r0, r1
 80101aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80101ae:	4620      	mov	r0, r4
 80101b0:	4629      	mov	r1, r5
 80101b2:	f7f0 f869 	bl	8000288 <__aeabi_dsub>
 80101b6:	4602      	mov	r2, r0
 80101b8:	460b      	mov	r3, r1
 80101ba:	ec51 0b19 	vmov	r0, r1, d9
 80101be:	f7f0 fb45 	bl	800084c <__aeabi_ddiv>
 80101c2:	4632      	mov	r2, r6
 80101c4:	4604      	mov	r4, r0
 80101c6:	460d      	mov	r5, r1
 80101c8:	463b      	mov	r3, r7
 80101ca:	4640      	mov	r0, r8
 80101cc:	4649      	mov	r1, r9
 80101ce:	f7f0 fa13 	bl	80005f8 <__aeabi_dmul>
 80101d2:	4632      	mov	r2, r6
 80101d4:	463b      	mov	r3, r7
 80101d6:	f7f0 f859 	bl	800028c <__adddf3>
 80101da:	4602      	mov	r2, r0
 80101dc:	460b      	mov	r3, r1
 80101de:	4620      	mov	r0, r4
 80101e0:	4629      	mov	r1, r5
 80101e2:	f7f0 f851 	bl	8000288 <__aeabi_dsub>
 80101e6:	4642      	mov	r2, r8
 80101e8:	464b      	mov	r3, r9
 80101ea:	f7f0 f84d 	bl	8000288 <__aeabi_dsub>
 80101ee:	460b      	mov	r3, r1
 80101f0:	4602      	mov	r2, r0
 80101f2:	4939      	ldr	r1, [pc, #228]	; (80102d8 <__ieee754_pow+0xa40>)
 80101f4:	2000      	movs	r0, #0
 80101f6:	f7f0 f847 	bl	8000288 <__aeabi_dsub>
 80101fa:	ec41 0b10 	vmov	d0, r0, r1
 80101fe:	ee10 3a90 	vmov	r3, s1
 8010202:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801020a:	da2b      	bge.n	8010264 <__ieee754_pow+0x9cc>
 801020c:	4650      	mov	r0, sl
 801020e:	f000 f877 	bl	8010300 <scalbn>
 8010212:	ec51 0b10 	vmov	r0, r1, d0
 8010216:	ec53 2b18 	vmov	r2, r3, d8
 801021a:	f7ff bbee 	b.w	800f9fa <__ieee754_pow+0x162>
 801021e:	4b2f      	ldr	r3, [pc, #188]	; (80102dc <__ieee754_pow+0xa44>)
 8010220:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010224:	429e      	cmp	r6, r3
 8010226:	f77f af0d 	ble.w	8010044 <__ieee754_pow+0x7ac>
 801022a:	4b2d      	ldr	r3, [pc, #180]	; (80102e0 <__ieee754_pow+0xa48>)
 801022c:	440b      	add	r3, r1
 801022e:	4303      	orrs	r3, r0
 8010230:	d009      	beq.n	8010246 <__ieee754_pow+0x9ae>
 8010232:	ec51 0b18 	vmov	r0, r1, d8
 8010236:	2200      	movs	r2, #0
 8010238:	2300      	movs	r3, #0
 801023a:	f7f0 fc4f 	bl	8000adc <__aeabi_dcmplt>
 801023e:	3800      	subs	r0, #0
 8010240:	bf18      	it	ne
 8010242:	2001      	movne	r0, #1
 8010244:	e448      	b.n	800fad8 <__ieee754_pow+0x240>
 8010246:	4622      	mov	r2, r4
 8010248:	462b      	mov	r3, r5
 801024a:	f7f0 f81d 	bl	8000288 <__aeabi_dsub>
 801024e:	4642      	mov	r2, r8
 8010250:	464b      	mov	r3, r9
 8010252:	f7f0 fc57 	bl	8000b04 <__aeabi_dcmpge>
 8010256:	2800      	cmp	r0, #0
 8010258:	f43f aef4 	beq.w	8010044 <__ieee754_pow+0x7ac>
 801025c:	e7e9      	b.n	8010232 <__ieee754_pow+0x99a>
 801025e:	f04f 0a00 	mov.w	sl, #0
 8010262:	e71a      	b.n	801009a <__ieee754_pow+0x802>
 8010264:	ec51 0b10 	vmov	r0, r1, d0
 8010268:	4619      	mov	r1, r3
 801026a:	e7d4      	b.n	8010216 <__ieee754_pow+0x97e>
 801026c:	491a      	ldr	r1, [pc, #104]	; (80102d8 <__ieee754_pow+0xa40>)
 801026e:	2000      	movs	r0, #0
 8010270:	f7ff bb31 	b.w	800f8d6 <__ieee754_pow+0x3e>
 8010274:	2000      	movs	r0, #0
 8010276:	2100      	movs	r1, #0
 8010278:	f7ff bb2d 	b.w	800f8d6 <__ieee754_pow+0x3e>
 801027c:	4630      	mov	r0, r6
 801027e:	4639      	mov	r1, r7
 8010280:	f7ff bb29 	b.w	800f8d6 <__ieee754_pow+0x3e>
 8010284:	9204      	str	r2, [sp, #16]
 8010286:	f7ff bb7b 	b.w	800f980 <__ieee754_pow+0xe8>
 801028a:	2300      	movs	r3, #0
 801028c:	f7ff bb65 	b.w	800f95a <__ieee754_pow+0xc2>
 8010290:	00000000 	.word	0x00000000
 8010294:	3fe62e43 	.word	0x3fe62e43
 8010298:	fefa39ef 	.word	0xfefa39ef
 801029c:	3fe62e42 	.word	0x3fe62e42
 80102a0:	0ca86c39 	.word	0x0ca86c39
 80102a4:	be205c61 	.word	0xbe205c61
 80102a8:	72bea4d0 	.word	0x72bea4d0
 80102ac:	3e663769 	.word	0x3e663769
 80102b0:	c5d26bf1 	.word	0xc5d26bf1
 80102b4:	3ebbbd41 	.word	0x3ebbbd41
 80102b8:	af25de2c 	.word	0xaf25de2c
 80102bc:	3f11566a 	.word	0x3f11566a
 80102c0:	16bebd93 	.word	0x16bebd93
 80102c4:	3f66c16c 	.word	0x3f66c16c
 80102c8:	5555553e 	.word	0x5555553e
 80102cc:	3fc55555 	.word	0x3fc55555
 80102d0:	3fe00000 	.word	0x3fe00000
 80102d4:	fff00000 	.word	0xfff00000
 80102d8:	3ff00000 	.word	0x3ff00000
 80102dc:	4090cbff 	.word	0x4090cbff
 80102e0:	3f6f3400 	.word	0x3f6f3400
 80102e4:	652b82fe 	.word	0x652b82fe
 80102e8:	3c971547 	.word	0x3c971547

080102ec <fabs>:
 80102ec:	ec51 0b10 	vmov	r0, r1, d0
 80102f0:	ee10 2a10 	vmov	r2, s0
 80102f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80102f8:	ec43 2b10 	vmov	d0, r2, r3
 80102fc:	4770      	bx	lr
	...

08010300 <scalbn>:
 8010300:	b570      	push	{r4, r5, r6, lr}
 8010302:	ec55 4b10 	vmov	r4, r5, d0
 8010306:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801030a:	4606      	mov	r6, r0
 801030c:	462b      	mov	r3, r5
 801030e:	b999      	cbnz	r1, 8010338 <scalbn+0x38>
 8010310:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010314:	4323      	orrs	r3, r4
 8010316:	d03f      	beq.n	8010398 <scalbn+0x98>
 8010318:	4b35      	ldr	r3, [pc, #212]	; (80103f0 <scalbn+0xf0>)
 801031a:	4629      	mov	r1, r5
 801031c:	ee10 0a10 	vmov	r0, s0
 8010320:	2200      	movs	r2, #0
 8010322:	f7f0 f969 	bl	80005f8 <__aeabi_dmul>
 8010326:	4b33      	ldr	r3, [pc, #204]	; (80103f4 <scalbn+0xf4>)
 8010328:	429e      	cmp	r6, r3
 801032a:	4604      	mov	r4, r0
 801032c:	460d      	mov	r5, r1
 801032e:	da10      	bge.n	8010352 <scalbn+0x52>
 8010330:	a327      	add	r3, pc, #156	; (adr r3, 80103d0 <scalbn+0xd0>)
 8010332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010336:	e01f      	b.n	8010378 <scalbn+0x78>
 8010338:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801033c:	4291      	cmp	r1, r2
 801033e:	d10c      	bne.n	801035a <scalbn+0x5a>
 8010340:	ee10 2a10 	vmov	r2, s0
 8010344:	4620      	mov	r0, r4
 8010346:	4629      	mov	r1, r5
 8010348:	f7ef ffa0 	bl	800028c <__adddf3>
 801034c:	4604      	mov	r4, r0
 801034e:	460d      	mov	r5, r1
 8010350:	e022      	b.n	8010398 <scalbn+0x98>
 8010352:	460b      	mov	r3, r1
 8010354:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010358:	3936      	subs	r1, #54	; 0x36
 801035a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801035e:	4296      	cmp	r6, r2
 8010360:	dd0d      	ble.n	801037e <scalbn+0x7e>
 8010362:	2d00      	cmp	r5, #0
 8010364:	a11c      	add	r1, pc, #112	; (adr r1, 80103d8 <scalbn+0xd8>)
 8010366:	e9d1 0100 	ldrd	r0, r1, [r1]
 801036a:	da02      	bge.n	8010372 <scalbn+0x72>
 801036c:	a11c      	add	r1, pc, #112	; (adr r1, 80103e0 <scalbn+0xe0>)
 801036e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010372:	a319      	add	r3, pc, #100	; (adr r3, 80103d8 <scalbn+0xd8>)
 8010374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010378:	f7f0 f93e 	bl	80005f8 <__aeabi_dmul>
 801037c:	e7e6      	b.n	801034c <scalbn+0x4c>
 801037e:	1872      	adds	r2, r6, r1
 8010380:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010384:	428a      	cmp	r2, r1
 8010386:	dcec      	bgt.n	8010362 <scalbn+0x62>
 8010388:	2a00      	cmp	r2, #0
 801038a:	dd08      	ble.n	801039e <scalbn+0x9e>
 801038c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010390:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010394:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010398:	ec45 4b10 	vmov	d0, r4, r5
 801039c:	bd70      	pop	{r4, r5, r6, pc}
 801039e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80103a2:	da08      	bge.n	80103b6 <scalbn+0xb6>
 80103a4:	2d00      	cmp	r5, #0
 80103a6:	a10a      	add	r1, pc, #40	; (adr r1, 80103d0 <scalbn+0xd0>)
 80103a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103ac:	dac0      	bge.n	8010330 <scalbn+0x30>
 80103ae:	a10e      	add	r1, pc, #56	; (adr r1, 80103e8 <scalbn+0xe8>)
 80103b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103b4:	e7bc      	b.n	8010330 <scalbn+0x30>
 80103b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80103ba:	3236      	adds	r2, #54	; 0x36
 80103bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80103c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80103c4:	4620      	mov	r0, r4
 80103c6:	4b0c      	ldr	r3, [pc, #48]	; (80103f8 <scalbn+0xf8>)
 80103c8:	2200      	movs	r2, #0
 80103ca:	e7d5      	b.n	8010378 <scalbn+0x78>
 80103cc:	f3af 8000 	nop.w
 80103d0:	c2f8f359 	.word	0xc2f8f359
 80103d4:	01a56e1f 	.word	0x01a56e1f
 80103d8:	8800759c 	.word	0x8800759c
 80103dc:	7e37e43c 	.word	0x7e37e43c
 80103e0:	8800759c 	.word	0x8800759c
 80103e4:	fe37e43c 	.word	0xfe37e43c
 80103e8:	c2f8f359 	.word	0xc2f8f359
 80103ec:	81a56e1f 	.word	0x81a56e1f
 80103f0:	43500000 	.word	0x43500000
 80103f4:	ffff3cb0 	.word	0xffff3cb0
 80103f8:	3c900000 	.word	0x3c900000

080103fc <with_errno>:
 80103fc:	b570      	push	{r4, r5, r6, lr}
 80103fe:	4604      	mov	r4, r0
 8010400:	460d      	mov	r5, r1
 8010402:	4616      	mov	r6, r2
 8010404:	f7fd f9d2 	bl	800d7ac <__errno>
 8010408:	4629      	mov	r1, r5
 801040a:	6006      	str	r6, [r0, #0]
 801040c:	4620      	mov	r0, r4
 801040e:	bd70      	pop	{r4, r5, r6, pc}

08010410 <xflow>:
 8010410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010412:	4614      	mov	r4, r2
 8010414:	461d      	mov	r5, r3
 8010416:	b108      	cbz	r0, 801041c <xflow+0xc>
 8010418:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801041c:	e9cd 2300 	strd	r2, r3, [sp]
 8010420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010424:	4620      	mov	r0, r4
 8010426:	4629      	mov	r1, r5
 8010428:	f7f0 f8e6 	bl	80005f8 <__aeabi_dmul>
 801042c:	2222      	movs	r2, #34	; 0x22
 801042e:	b003      	add	sp, #12
 8010430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010434:	f7ff bfe2 	b.w	80103fc <with_errno>

08010438 <__math_uflow>:
 8010438:	b508      	push	{r3, lr}
 801043a:	2200      	movs	r2, #0
 801043c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010440:	f7ff ffe6 	bl	8010410 <xflow>
 8010444:	ec41 0b10 	vmov	d0, r0, r1
 8010448:	bd08      	pop	{r3, pc}

0801044a <__math_oflow>:
 801044a:	b508      	push	{r3, lr}
 801044c:	2200      	movs	r2, #0
 801044e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010452:	f7ff ffdd 	bl	8010410 <xflow>
 8010456:	ec41 0b10 	vmov	d0, r0, r1
 801045a:	bd08      	pop	{r3, pc}

0801045c <__ieee754_sqrt>:
 801045c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010460:	ec55 4b10 	vmov	r4, r5, d0
 8010464:	4e67      	ldr	r6, [pc, #412]	; (8010604 <__ieee754_sqrt+0x1a8>)
 8010466:	43ae      	bics	r6, r5
 8010468:	ee10 0a10 	vmov	r0, s0
 801046c:	ee10 2a10 	vmov	r2, s0
 8010470:	4629      	mov	r1, r5
 8010472:	462b      	mov	r3, r5
 8010474:	d10d      	bne.n	8010492 <__ieee754_sqrt+0x36>
 8010476:	f7f0 f8bf 	bl	80005f8 <__aeabi_dmul>
 801047a:	4602      	mov	r2, r0
 801047c:	460b      	mov	r3, r1
 801047e:	4620      	mov	r0, r4
 8010480:	4629      	mov	r1, r5
 8010482:	f7ef ff03 	bl	800028c <__adddf3>
 8010486:	4604      	mov	r4, r0
 8010488:	460d      	mov	r5, r1
 801048a:	ec45 4b10 	vmov	d0, r4, r5
 801048e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010492:	2d00      	cmp	r5, #0
 8010494:	dc0b      	bgt.n	80104ae <__ieee754_sqrt+0x52>
 8010496:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801049a:	4326      	orrs	r6, r4
 801049c:	d0f5      	beq.n	801048a <__ieee754_sqrt+0x2e>
 801049e:	b135      	cbz	r5, 80104ae <__ieee754_sqrt+0x52>
 80104a0:	f7ef fef2 	bl	8000288 <__aeabi_dsub>
 80104a4:	4602      	mov	r2, r0
 80104a6:	460b      	mov	r3, r1
 80104a8:	f7f0 f9d0 	bl	800084c <__aeabi_ddiv>
 80104ac:	e7eb      	b.n	8010486 <__ieee754_sqrt+0x2a>
 80104ae:	1509      	asrs	r1, r1, #20
 80104b0:	f000 808d 	beq.w	80105ce <__ieee754_sqrt+0x172>
 80104b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80104b8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80104bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80104c0:	07c9      	lsls	r1, r1, #31
 80104c2:	bf5c      	itt	pl
 80104c4:	005b      	lslpl	r3, r3, #1
 80104c6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80104ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80104ce:	bf58      	it	pl
 80104d0:	0052      	lslpl	r2, r2, #1
 80104d2:	2500      	movs	r5, #0
 80104d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80104d8:	1076      	asrs	r6, r6, #1
 80104da:	0052      	lsls	r2, r2, #1
 80104dc:	f04f 0e16 	mov.w	lr, #22
 80104e0:	46ac      	mov	ip, r5
 80104e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80104e6:	eb0c 0001 	add.w	r0, ip, r1
 80104ea:	4298      	cmp	r0, r3
 80104ec:	bfde      	ittt	le
 80104ee:	1a1b      	suble	r3, r3, r0
 80104f0:	eb00 0c01 	addle.w	ip, r0, r1
 80104f4:	186d      	addle	r5, r5, r1
 80104f6:	005b      	lsls	r3, r3, #1
 80104f8:	f1be 0e01 	subs.w	lr, lr, #1
 80104fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010500:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010504:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010508:	d1ed      	bne.n	80104e6 <__ieee754_sqrt+0x8a>
 801050a:	4674      	mov	r4, lr
 801050c:	2720      	movs	r7, #32
 801050e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8010512:	4563      	cmp	r3, ip
 8010514:	eb01 000e 	add.w	r0, r1, lr
 8010518:	dc02      	bgt.n	8010520 <__ieee754_sqrt+0xc4>
 801051a:	d113      	bne.n	8010544 <__ieee754_sqrt+0xe8>
 801051c:	4290      	cmp	r0, r2
 801051e:	d811      	bhi.n	8010544 <__ieee754_sqrt+0xe8>
 8010520:	2800      	cmp	r0, #0
 8010522:	eb00 0e01 	add.w	lr, r0, r1
 8010526:	da57      	bge.n	80105d8 <__ieee754_sqrt+0x17c>
 8010528:	f1be 0f00 	cmp.w	lr, #0
 801052c:	db54      	blt.n	80105d8 <__ieee754_sqrt+0x17c>
 801052e:	f10c 0801 	add.w	r8, ip, #1
 8010532:	eba3 030c 	sub.w	r3, r3, ip
 8010536:	4290      	cmp	r0, r2
 8010538:	bf88      	it	hi
 801053a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801053e:	1a12      	subs	r2, r2, r0
 8010540:	440c      	add	r4, r1
 8010542:	46c4      	mov	ip, r8
 8010544:	005b      	lsls	r3, r3, #1
 8010546:	3f01      	subs	r7, #1
 8010548:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801054c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010550:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010554:	d1dd      	bne.n	8010512 <__ieee754_sqrt+0xb6>
 8010556:	4313      	orrs	r3, r2
 8010558:	d01b      	beq.n	8010592 <__ieee754_sqrt+0x136>
 801055a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8010608 <__ieee754_sqrt+0x1ac>
 801055e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801060c <__ieee754_sqrt+0x1b0>
 8010562:	e9da 0100 	ldrd	r0, r1, [sl]
 8010566:	e9db 2300 	ldrd	r2, r3, [fp]
 801056a:	f7ef fe8d 	bl	8000288 <__aeabi_dsub>
 801056e:	e9da 8900 	ldrd	r8, r9, [sl]
 8010572:	4602      	mov	r2, r0
 8010574:	460b      	mov	r3, r1
 8010576:	4640      	mov	r0, r8
 8010578:	4649      	mov	r1, r9
 801057a:	f7f0 fab9 	bl	8000af0 <__aeabi_dcmple>
 801057e:	b140      	cbz	r0, 8010592 <__ieee754_sqrt+0x136>
 8010580:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010584:	e9da 0100 	ldrd	r0, r1, [sl]
 8010588:	e9db 2300 	ldrd	r2, r3, [fp]
 801058c:	d126      	bne.n	80105dc <__ieee754_sqrt+0x180>
 801058e:	3501      	adds	r5, #1
 8010590:	463c      	mov	r4, r7
 8010592:	106a      	asrs	r2, r5, #1
 8010594:	0863      	lsrs	r3, r4, #1
 8010596:	07e9      	lsls	r1, r5, #31
 8010598:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801059c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80105a0:	bf48      	it	mi
 80105a2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80105a6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80105aa:	461c      	mov	r4, r3
 80105ac:	e76d      	b.n	801048a <__ieee754_sqrt+0x2e>
 80105ae:	0ad3      	lsrs	r3, r2, #11
 80105b0:	3815      	subs	r0, #21
 80105b2:	0552      	lsls	r2, r2, #21
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d0fa      	beq.n	80105ae <__ieee754_sqrt+0x152>
 80105b8:	02dc      	lsls	r4, r3, #11
 80105ba:	d50a      	bpl.n	80105d2 <__ieee754_sqrt+0x176>
 80105bc:	f1c1 0420 	rsb	r4, r1, #32
 80105c0:	fa22 f404 	lsr.w	r4, r2, r4
 80105c4:	1e4d      	subs	r5, r1, #1
 80105c6:	408a      	lsls	r2, r1
 80105c8:	4323      	orrs	r3, r4
 80105ca:	1b41      	subs	r1, r0, r5
 80105cc:	e772      	b.n	80104b4 <__ieee754_sqrt+0x58>
 80105ce:	4608      	mov	r0, r1
 80105d0:	e7f0      	b.n	80105b4 <__ieee754_sqrt+0x158>
 80105d2:	005b      	lsls	r3, r3, #1
 80105d4:	3101      	adds	r1, #1
 80105d6:	e7ef      	b.n	80105b8 <__ieee754_sqrt+0x15c>
 80105d8:	46e0      	mov	r8, ip
 80105da:	e7aa      	b.n	8010532 <__ieee754_sqrt+0xd6>
 80105dc:	f7ef fe56 	bl	800028c <__adddf3>
 80105e0:	e9da 8900 	ldrd	r8, r9, [sl]
 80105e4:	4602      	mov	r2, r0
 80105e6:	460b      	mov	r3, r1
 80105e8:	4640      	mov	r0, r8
 80105ea:	4649      	mov	r1, r9
 80105ec:	f7f0 fa76 	bl	8000adc <__aeabi_dcmplt>
 80105f0:	b120      	cbz	r0, 80105fc <__ieee754_sqrt+0x1a0>
 80105f2:	1ca0      	adds	r0, r4, #2
 80105f4:	bf08      	it	eq
 80105f6:	3501      	addeq	r5, #1
 80105f8:	3402      	adds	r4, #2
 80105fa:	e7ca      	b.n	8010592 <__ieee754_sqrt+0x136>
 80105fc:	3401      	adds	r4, #1
 80105fe:	f024 0401 	bic.w	r4, r4, #1
 8010602:	e7c6      	b.n	8010592 <__ieee754_sqrt+0x136>
 8010604:	7ff00000 	.word	0x7ff00000
 8010608:	200001e8 	.word	0x200001e8
 801060c:	200001f0 	.word	0x200001f0

08010610 <_init>:
 8010610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010612:	bf00      	nop
 8010614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010616:	bc08      	pop	{r3}
 8010618:	469e      	mov	lr, r3
 801061a:	4770      	bx	lr

0801061c <_fini>:
 801061c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801061e:	bf00      	nop
 8010620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010622:	bc08      	pop	{r3}
 8010624:	469e      	mov	lr, r3
 8010626:	4770      	bx	lr
